[
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/motd/",
	"title": "Message-of-the-day (motd)",
	"tags": [],
	"description": "",
	"content": "Message-Of-The-Day (MOTD) Banners are custom messages displayed to users attempting to connect to the management interfaces. MOTD banners are displayed pre-login while exec banners are displayed post-login. Multiple lines of text can be stored using a custom delimiter to mark the end of message.\nConfiguration Commands Create a banner:\nswitch(config)# banner \u0026lt;motd|exec\u0026gt; DELIM Show commands to validate functionality:\nswitch# show banner \u0026lt;motd|exec\u0026gt; Example Output switch(config)# banner motd $ Enter a new banner, when you are done enter a new line containing only your chosen delimiter. (banner-motd)# This is an example of a custom pre-login banner (banner-motd)# that spans multiple lines. (banner-motd)# $ switch(config)# do show banner motd This is an example of a custom pre-login banner that spans multiple lines.\nExpected Results  Administrators can create the MOTD banner The output of the MOTD banner looks correct  Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/mlag/",
	"title": "Multi-chassis Link Aggregation Group (mclag)",
	"tags": [],
	"description": "",
	"content": "Multi-Chassis Link Aggregation Group (MCLAG) Multi-Chassis Link Aggregation Group (MCLAG) is a link aggregation technique where two or more links across two switches are aggregated together to form a trunk.\nConfiguration Commands Create the MCLAG interface:\nswitch(config)# interface lag LAG multi-chassis switch(config-lag-if)# no shutdown Associate member links with the MCLAG interface:\nswitch(config)# interface IFACE switch(config-if)# no shutdown switch(config-if)# lag LAG Show commands to validate functionality:\nswitch# show mclag \u0026lt;brief|configuration|status\u0026gt; Example Output switch(config)# interface lag 23 multi-chassis switch(config-lag-if)# no shutdown switch(config-lag-if)# exit switch(config)# interface 1/1/10 switch(config-if)# no shutdown switch(config-if)# lag 23 switch(config-if)# end Expected Results  Administrators can configure MCLAG Administrators can create an MCLAG interface Administrators can add ports to the MCLAG interface The output of the show commands is correct  Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/msdp/",
	"title": "Multicast Source Discovery Protocol (msdp)",
	"tags": [],
	"description": "",
	"content": "Multicast Source Discovery Protocol (MSDP) The Multicast Source Discovery Protocol (MSDP) describes a mechanism to connect multiple IP Version 4 Protocol Independent Multicast Sparse-Mode (PIM-SM) domains together. Each PIM-SM domain uses its own independent Rendezvous Point (RP) and does not have to depend on RPs in other domains. When an RP in a PIM-SM domain first learns of a new sender, e.g., via PIM register messages, it constructs a \u0026ldquo;Source-Active\u0026rdquo; (SA) message and sends it to its MSDP peers. The SA message contains the following fields:\n The source address of the data source. The group address the data source sends to. The IP address of the RP.  –rfc3618\nConfiguration Commands MSDP is typically run on an IP address bound to a loopback interface. In order for two devices to establish an MSDP neighbor relationship, L3 connectivity must already be established.\nswitch(config)# router msdp switch(config-msdp)# enable switch(config-msdp)# ip msdp peer \u0026lt;IP\u0026gt; switch(config-msdp-peer)# enable switch(config-msdp-peer)# connect-source \u0026lt;IFNAME\u0026gt; Show commands to validate functionality:\nswitch# show ip msdp peer switch# show ip msdp count switch# show ip msdp sa-cache Test Steps  Configure a loopback interface on both 8325 that are acting as core devices. Enable PIM on loopback interface Configure MSDP and create a peer relationship between 8325\u0026rsquo;s using a loopback as the source.  Expected Results Verify MSDP session is up and it is using loopback interface as source.\nBack to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/mclag_power_failure/",
	"title": "Vsx Member Power Failure",
	"tags": [],
	"description": "",
	"content": "VSX: Member Power Failure The intent here is to showcase a complete member failure scenario where the spine-01 switch is completely down.\nThe following is a visualization of the powered down spine-01:\nThe following is expected in this scenario:\n After disconnecting the power supply from one member the other member should be able to detect the member is down and continue a normal operation without any problems. If traffic was originally flowing through the member that was shut down, a small percentage of packets may be dropped. A sub second value is expected during this event. When restoring the power, the hashing needs to be recalculated and some packets may be dropped during this event as well. A sub second value is expected during this event.  Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/mclag_split/",
	"title": "Vsx Split",
	"tags": [],
	"description": "",
	"content": "VSX: Split The intent here is to showcase a complete inter-switch-link (ISL) link failure scenario where both of the ISL links between spine switches goes down.\nThe following is a visualization of a disconnected ISL link and how the traffic pattern would look:\nThe following is expected in this scenario:\n After disconnecting both ISL Links and Keepalive is up and properly configured the VSX Secondary Switch should put all its MCLAGs into lacp-blocked state and traffic should only flow through VSX Primary. VSX Primary switch should continue to operate without any problems. If traffic was originally flowing through secondary VSX member a small percentage of packets may be dropped when disconnecting the ISL. A sub second value is expected during this event. When connecting back ISL link, the hashing needs to be recalculated and some packets may be dropped during this event as well. A sub second value is expected during this event.  Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/",
	"title": "Aruba Installation And Configuration Guide",
	"tags": [],
	"description": "",
	"content": "Aruba Installation and Configuration Guide This documentation helps network administrators and support personnel install and manage Aruba network devices in a CSM install.\nThe HPE Cray recommended way of configuring the network is by using the CANU tool. Therefore this guide will not go into detail on how to configure each switch manually using the CLI. Instead, it will give helpful examples of how to configure/use features generated by CANU, in order to provide administrators easy ways to customize their installation.\nAlso included in this guide are the current documented and supported network scenarios.\nNOTE: Not every configuration option is covered here; for any configuration outside of the scope of this document, refer to the official Aruba user manual. See Aruba Networks.\nThis document is intended for network administrators and support personnel.\nNOTE: The display and command lines illustrated in this document are examples and might not exactly match any particular environment. The switch and accessory drawings in this document are for illustration only, and may not exactly match installed products.\nCANU See CSM Automatic Network Utility (CANU)\nExamples of Network Topologies  Very Large Large Medium Small  Network Design Explained  What is Spine-Leaf Architecture? How Does a Spine-Leaf Architecture Differ From Traditional Network Designs? Why are Spine-Leaf Architectures Becoming More Popular? What is VSX? What are the benefits of VSX? VSX summary  Built in High Availability  VSX: MCLAG link HA VSX: ISL HA VSX: Split VSX: Member Power Failure  Management Network Overview  Network Types – Naming and Segment Function Network Traffic Pattern System Management Network Functions  Key Features Used in the Management Network Configuration  Key Feature List Typical Configuration of VSX Typical Configuration of MCLAG Link Typical Edge Port Configuration  How to Connect Management Network to a Campus Network  Connect the Management Network to a Campus Network Scenario A: Network Connection via Management Network Scenario B: Network Connection via High-Speed Network Example of How to Configure Scenario A or B  Manage Switches from CLI Device Management  Management Interface Network Time Protocol (NTP) Client Domain Name System (DNS) Client Message-Of-The-Day (MOTD) Exec Banners Hostname Domain Name Secure Shell (SSH) Remote Logging Web User Interface (Web UI) Simple Network Management Protocol (SNMP) Agent SNMPv2c Community SNMP Traps SNMPv3 Users Bluetooth Capabilities  Layer One Features  Physical Interfaces Redundant Power Supplies Locator LED Cable Diagnostics  Layer Two Features  Unidirectional Link Detection (UDLD) Link Layer Discovery Protocol (LLDP) Virtual Local Access Networks (VLANs) Native VLAN VLAN Trunking 802.1Q Link Aggregation Group (LAG) Virtual Switching Extension (VSX) Multi-Chassis Link Aggregation Group (MCLAG) VSX Sync Virtual Switching Framework (VSF) 6300 Only Multiple Spanning Tree Protocol (MSTP)  Layer Three Features  Routed Interfaces VLAN Interface Address Resolution Protocol (ARP) Static Routing Loopback Interface Open Shortest Path First (OSPF) v2 BGP Basics  Multicast  IGMP MSDP PIM-SM Bootstrap Router (BSR) and Rendezvous-Point (RP)  Security  Access Control Lists (ACLs) TACACS RADIUS Port Security 802.1X MAC Authentication  Quality of Service  Initial Prioritization) Classifier Policies Queuing and Scheduling  Perform a VSX Upgrade on Aruba Switches  VSX Upgrade  Switch Replacement in the VSX Cluster  Switch replacement in the VSX Cluster  Back Up Switch Configuration  Backing up switch configuration  Erase All zeroize  Erase all zeroize  Troubleshooting Port Mirroring on Aruba CX  Port Mirroring  DHCP  Confirm the status of the cray-dhcp-kea pods/services Check current DHCP leases Check HSM Check Kea DHPC logs TCPDUMP Check BGP and MetalLB Getting incorrect IP address. Duplicate IP address check Large number of DHCP declines during a node boot  DNS PXE Boot  NCNs on install Rebooting NCN and PXE fails Verify BGP Verify route to TFTP Test TFTP traffic (Aruba Only) Check DHCP lease is getting allocated Verify DHCP traffic on workers Verify switches are forwarding DHCP traffic Computes/UANs/Application Nodes  "
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/management_network_configuration_example/",
	"title": "Example Of How To Configure Scenario A Or B",
	"tags": [],
	"description": "",
	"content": "Example of How to Configure Scenario A or B This section provides an example of how to configure the management network.\nProcedure   Create the Customer Access Network (CAN) VRF for Aruba.\nsw# config sw# vrf CAN   Move the interfaces into CAN VRF.\nIf there is an existing CAN interface configuration, it will be deleted the interface is moved into the new VRF; it will have to be re-applied.\n NOTE: These are example configurations only; most implementations of BICAN will be different.\n   Example Aruba primary configuration:\ninterface vlan 7 vsx-sync active-gateways vrf attach CAN description CAN ip mtu 9198 ip address 128.55.176.2/23 active-gateway ip mac 12:00:00:00:6b:00 active-gateway ip 128.55.176.1 ip ospf 2 area 0.0.0.210   Example Aruba secondary configuration:\ninterface vlan 7 vsx-sync active-gateways vrf attach CAN description CAN ip mtu 9198 ip address 128.55.176.3/23 active-gateway ip mac 12:00:00:00:6b:00 active-gateway ip 128.55.176.1 ip ospf 2 area 0.0.0.210     Create a new BGP process in CAN VRF.\nA new BGP process will need to be running in the CAN VRF. This will peer with the CAN IP addresses on the NCN workers.\nThese are example configurations only. The neighbors below are the IP addresses of the CAN interface on the NCN workers.\n  Aruba configuration:\nrouter bgp 65533 vrf CAN maximum-paths 8 neighbor 128.55.176.3 remote-as 65533 neighbor 128.55.176.25 remote-as 65534 neighbor 128.55.176.25 passive neighbor 128.55.176.26 remote-as 65534 neighbor 128.55.176.26 passive neighbor 128.55.176.27 remote-as 65534 neighbor 128.55.176.27 passive     Setup the customer Edge router.\n The customer Edge router must be certified by the Slingshot team The configuration will be unique for most customers  The following is an example configuration of a single Arista switch with a static LAG to a single Slingshot switch.\n  Arista LAG configuration:\ninterface Ethernet24/1 mtu 9214 flowcontrol send on flowcontrol receive on speed forced 100gfull error-correction encoding reed-solomon channel-group 1 mode on interface Ethernet25/1 mtu 9214 flowcontrol send on flowcontrol receive on speed forced 100gfull error-correction encoding reed-solomon channel-group 1 mode on interface Port-Channel1 mtu 9214 switchport access vlan 2 switchport trunk native vlan 2 switchport mode trunk   Example VLAN 2 configuration:\n NOTE: VLAN 2 is used for the HSN network.\n interface Vlan2 ip address 10.101.10.1/24   The following is the Arista BGP configuration for peering over the HSN. The BGP neighbor IP addresses used are HSN IP addresses of worker nodes.\nncn-w# ip a show hsn0 Example HSN IP addresses:\n8: hsn0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 9000 qdisc mq state UP group default qlen 1000 link/ether 02:00:00:00:00:0d brd ff:ff:ff:ff:ff:ff inet 10.101.10.10/24 scope global hsn0 valid_lft forever preferred_lft forever inet6 fe80::ff:fe00:d/64 scope link valid_lft forever preferred_lft forever   In this example, a prefix list and route-map are created to only accept routes from the HSN.\nExample Arista BGP configuration:\nip prefix-list HSN seq 10 permit 10.101.10.0/24 ge 24 route-map HSN permit 5 match ip address prefix-list HSN router bgp 65534 maximum-paths 32 neighbor 10.101.10.10 remote-as 65533 neighbor 10.101.10.10 transport connection-mode passive neighbor 10.101.10.10 route-map HSN in neighbor 10.101.10.11 remote-as 65533 neighbor 10.101.10.11 transport connection-mode passive neighbor 10.101.10.11 route-map HSN in neighbor 10.101.10.12 remote-as 65533 neighbor 10.101.10.12 transport connection-mode passive neighbor 10.101.10.12 route-map HSN in     Configure MetalLB to peer with the new CAN VRF interfaces and the new HSN interface on the customer Edge router.\napiVersion: v1 data: config: |peers: - peer-address: 10.252.0.2 peer-asn: 65533 my-asn: 65533 - peer-address: 10.252.0.3 peer-asn: 65533 my-asn: 65533 - peer-address: 10.101.8.2 peer-asn: 65533 my-asn: 65536 - peer-address: 10.101.8.3 peer-asn: 65533 my-asn: 65536 - peer-address: 10.101.10.1 peer-asn: 65534 my-asn: 65533 address-pools: - name: customer-access protocol: bgp addresses: - 10.101.8.128/25 - name: customer-access-static protocol: bgp addresses: - 10.101.8.112/28 - name: customer-high-speed protocol: bgp addresses: - 10.101.10.128/25 - name: customer-high-speed-static protocol: bgp addresses: - 10.101.10.112/28 - name: hardware-management protocol: bgp addresses: - 10.94.100.0/24 - name: node-management protocol: bgp addresses: - 10.92.100.0/24   Verify BGP and routes.\nOnce MetalLB is configured, then the BGP peers on the customer Edge router and the CAN VRF should be established.\nArista Edge Router:\nsw-edge# show ip bgp summary Example output:\nBGP summary information for VRF default Router identifier 192.168.50.50, local AS number 65534 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.101.10.10 4 65533 23 12 0 0 00:03:49 Estab 14 14 10.101.10.11 4 65533 25 11 0 0 00:03:49 Estab 16 16 10.101.10.12 4 65533 23 11 0 0 00:03:49 Estab 14 14   The Arista routing table should now include the external IP addresses exposed by MetalLB.\nThe on-site network team will be responsible for distributing these routes to the rest of their network.\nsw-edge# show ip route Example output:\nB E 10.101.8.113/32 [200/0] via 10.101.10.10, Vlan2 via 10.101.10.11, Vlan2 via 10.101.10.12, Vlan2 B E 10.101.8.128/32 [200/0] via 10.101.10.10, Vlan2 via 10.101.10.11, Vlan2 via 10.101.10.12, Vlan2 B E 10.101.8.129/32 [200/0] via 10.101.10.10, Vlan2 via 10.101.10.11, Vlan2 via 10.101.10.12, Vlan2 B E 10.101.8.130/32 [200/0] via 10.101.10.10, Vlan2 via 10.101.10.11, Vlan2 via 10.101.10.12, Vlan2 O 10.101.8.0/24 [110/20] via 192.168.75.3, Ethernet1/1 via 192.168.75.1, Ethernet2/1   Example of how BGP routes look like in the switch located in the HSN:\nsw-spine# show ip bgp vrf CAN summary Example output:\nVRF name : CAN BGP router identifier : 192.168.75.1 local AS number : 65533 BGP table version : 665 Main routing table version: 665 IPV4 Prefixes : 44 IPV6 Prefixes : 0 L2VPN EVPN Prefixes : 0 ------------------------------------------------------------------------------------------------------------------ Neighbor V AS MsgRcvd MsgSent TblVer InQ OutQ Up/Down State/PfxRcd ------------------------------------------------------------------------------------------------------------------ 10.101.8.8 4 65536 24725 27717 665 0 0 0:11:52:43 ESTABLISHED/14 10.101.8.9 4 65536 24836 27692 665 0 0 0:08:44:20 ESTABLISHED/16 10.101.8.10 4 65536 24704 27741 665 0 0 0:08:44:18 ESTABLISHED/14   Configure default routes on NCN workers.\n  Change the default route on the workers.\nThis is done so that they send their traffic out the HSN interface.\nncn-w# ip route replace default via 10.101.10.1 dev hsn0   Make the change persistent.\nDo this by creating an ifcfg file for hsn0 and removing the old VLAN 7 default route.\nncn-w# mv -v /etc/sysconfig/network/ifroute-bond0.cmn0 /etc/sysconfig/network/ifroute-bond0.cmn0.old ncn-w# echo \u0026#34;default 10.101.10.1 - -\u0026#34; \u0026gt; /etc/sysconfig/network/ifroute-hsn0   Verify the routing table.\nncn-w# ip route Example output:\ndefault via 10.101.10.1 dev hsn0   Verify external connectivity.\nncn-w# ping 8.8.8.8 -c 1 Example output:\nPING 8.8.8.8 (8.8.8.8) 56(84) bytes of data. 64 bytes from 8.8.8.8: icmp_seq=1 ttl=110 time=13.6 ms     There should now be external connectivity from outside the system to the external services offered by MetalLB over the HSN.\n  Verify that the connection is going over the HSN with a traceroute.\nexternal# traceroute 10.101.8.113 Example output:\ntraceroute to 10.101.8.113 (10.101.8.113), 64 hops max, 52 byte packets 1 172.30.252.234 (172.30.252.234) 37.652 ms 37.930 ms 36.574 ms 2 10.103.255.228 (10.103.255.228) 37.684 ms 37.180 ms 36.765 ms 3 10.103.255.249 (10.103.255.249) 36.531 ms 38.350 ms 39.593 ms 4 172.30.254.219 (172.30.254.219) 38.543 ms 38.699 ms 40.811 ms 5 172.30.254.212 (172.30.254.212) 37.931 ms 37.347 ms 40.404 ms 6 172.30.254.243 (172.30.254.243) 47.029 ms 39.014 ms 38.292 ms 7 172.30.254.134 (172.30.254.134) 42.197 ms 37.267 ms 38.522 ms 8 172.30.254.130 (172.30.254.130) 39.562 ms 38.094 ms 39.500 ms 9 10.101.15.254 (10.101.15.254) 37.616 ms 37.741 ms 37.529 ms 10 10.101.15.178 (10.101.15.178) 39.465 ms 37.052 ms 36.734 ms 11 10.101.8.113 (10.101.8.113) 39.937 ms 38.565 ms 36.524 ms   Listen on all the HSN interfaces for ping/traceroute while running ping on the external-facing IP address.\nIn this example, the IP address is 10.101.8.113.\n  Start an ongoing ping command from an external system.\nexternal# ping 10.101.8.113   While the ping command is still running, listen on the HSN interfaces.\n  ncn-mw# nodes=$(kubectl get nodes| awk \u0026#39;{print $1}\u0026#39; | grep ncn-w | awk -vORS=, \u0026#39;{print $1}\u0026#39;); pdsh -w ${nodes} \u0026#34;tcpdump -envli hsn0 icmp\u0026#34; Example output:\nncn-w002: tcpdump: listening on hsn0, link-type EN10MB (Ethernet), capture size 262144 bytes ncn-w003: tcpdump: listening on hsn0, link-type EN10MB (Ethernet), capture size 262144 bytes ncn-w001: tcpdump: listening on hsn0, link-type EN10MB (Ethernet), capture size 262144 bytes ncn-w003: 04:59:35.826691 98:5d:82:71:ba:2d \u0026gt; 02:00:00:00:00:1e, ethertype IPv4 (0x0800), length 98: (tos 0x0, ttl 54, id 951, offset 0, flags [none], proto ICMP (1), length 84) ncn-w003: 172.25.64.129 \u0026gt; 10.101.8.113: ICMP echo request, id 37368, seq 0, length 64 ncn-w003: 04:59:36.825591 98:5d:82:71:ba:2d \u0026gt; 02:00:00:00:00:1e, ethertype IPv4 (0x0800), length 98: (tos 0x0, ttl 54, id 33996, offset 0, flags [none], proto ICMP (1), length 84)  Stop the ping command that was started earlier.    Back to index.\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/initial_prioritization/",
	"title": "Initial Prioritization",
	"tags": [],
	"description": "",
	"content": "Initial Prioritization For most switches, the local-priority has eight levels (0-7). Zero is the lowest priority. The allowed maximum will vary per product family. Local priority is used to determine which queue a packet will use. There are multiple options to configure the local-priority:\n qos cos-map: Maps Class of Services (CoS) values from VLAN tags in incoming packets to specific local priorities qos dscp-map: Maps the DSCP from incoming packets to specific local priorities qos trust: Assumes incoming packets are marked correctly, and takes the local-priority from either the CoS or Differentiated Service Code-Points (DSCP) field of the packet, or ignores any values set on incoming packets and places the packets into the default local-priority queue if the none option is given  Configuration Commands Map incoming 802.1p values to a local priority:\nswitch(config)# qos cos-map \u0026lt;0-7\u0026gt; local-priority VALUE [color COLOR] [name NAME] Map incoming DSCP to a local priority:\nswitch(config)# qos dscp-map \u0026lt;0-63\u0026gt; local-priority VALUE [color COLOR] [name NAME] Configure QoS trust:\nswitch(config)# qos trust [none|cos|dscp] switch(config-if)# qos trust [none|cos|dscp] Show commands to validate functionality:\nswitch# show qos [cos-map|dscp-map|trust] Expected Results  Administrators can enable QoS trust to CoS on an interface Administrators can map incoming 802.1p values to local priorities The output of all show commands is correct  Example Output switch(config)# qos dscp-map 46 local-priority 7 color green name VOICE switch # show qos cos-map code_point local_priority color name ---------- -------------- ------- ---- 0 1 green Best_Effort 1 0 green Background 2 2 green Excellent_Effort 3 3 green Critical_Applications 4 4 green Video 5 5 green Voice 6 6 green Internetwork_Control 7 7 green Network_Control Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/intro/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction The intent for the this documentation is to help install and manage Aruba CX network devices in an HPE Cray EX system installation.\nThe HPE Cray recommended way of configuring the network is with the CANU tool. Thus, this guide will not go to into a level of detail of how to configure each switch with the CLI in the topology. However, it will provide examples of how to configure and use features generated by CANU to provide administrators with an easy way to customize their installation.\nThis guide also includes the current documented and supported network scenarios.\n NOTE: Not every configuration option is covered here, and for any configuration outside of the scope of this document, refer to the official Aruba user manuals.\n Aruba documentation and software can be found from:\nhttps://asp.arubanetworks.com/\nThis document is intended for network administrators and support personnel.\n The display and command line illustrated in this document are examples and might not exactly match your particular environment. The switch and accessory drawings in this document are for illustration only, and may not exactly match your installed products.\n "
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/key_features/",
	"title": "Key Features Used In The Management Network Configuration",
	"tags": [],
	"description": "",
	"content": "Key Features Used in the Management Network Configuration The following is a list of key features used in the management network configuration.\nFeature List    Feature Notes Description     VSX MLAG  Layer 2 Redundancy, Allows the NCNs to be bonded so if one link fails they can continue to operate.   VSX  Layer 3 Redundancy, Allows one Spine switch/default gateway to fail and continue to work   Lacp fallback  Allows for LACP links to come up individually without LACP PDUs, used for PXE booting the NCNs.   Vlan  Segregates layer 2 broadcast domains, need to separate NMN/HMN/compute traffic.   MSTP  Layer 2 loop prevention mechanism at edge   IP routing  IP routing / static routes   OSPF  Routing protocol used to peer from Leaf switches to Spines   BGP  Routing protocol used to peer with MetalLB   Prefix-Lists  Lists to match components of an IP route   Route-Maps  Defines which route are redistributed   NTP  Network Time Protocol   ACLs  Access Control Lists   Max MTU - 9198  Max Transmission Unit/Maximum Frame size   SNMP  Allows for device polling from the NCNs to map out interfaces   VRF  Virtual routing and forwarding, used to segregate traffic between networks    Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/lag/",
	"title": "Link Aggregation Group (lag)",
	"tags": [],
	"description": "",
	"content": "Link Aggregation Group (LAG) Link Aggregation allows you to assign multiple physical links to one logical link that functions as a single, higher-speed link providing dramatically increased bandwidth.\nConfiguration Commands Create and configure the LAG interface:\nswitch(config)# interface lag LAG switch(config-lag-if)# no shutdown switch(config-lag-if)# lacp mode active Associate member links with the LAG interface:\nswitch(config)# interface IFACE switch(config-if)# no shutdown switch(config-if)# lag LAG Show commands to validate functionality:\nswitch# show lacp \u0026lt;interfaces|aggregates|configuration\u0026gt; Example Output switch# show interface lag1 Aggregate-name lag1 Aggregated-interfaces : 1/1/1 1/1/4 Aggregation-key : 1 Aggregate mode : active Speed 0 Mb/s qos trust none qos queue-profile default qos schedule-profile default RX TX 409 input packets 0 input error 0 CRC/FCS 530 output packets 0 input error 0 collision 47808 bytes 0 dropped 56975 bytes 0 dropped switch# show lacp interfaces State abbreviations : A - Active P - Passive S - Short-timeout L - Long-timeout N - InSync O - OutofSync C - Collecting D - Distributing X - State m/c expired E - Default neighbor state Actor details of all interfaces: ------------------------------------------------------------------------------ Intf Aggregate Port Port State System-id System Aggr name id Priority Priority Key ------------------------------------------------------------------------------ 1/1/1lag1 59 1 ALFOE 70:72:cf:4d:bb:53 65534 1 1/1/4lag1 41 1 ALFOE 70:72:cf:4d:bb:53 65534 1 Partner details of all interfaces: ------------------------------------------------------------------------------ Intf Aggregate Partner Port State System-id System Aggr name Port-id Priority Priority Key ------------------------------------------------------------------------------ 1/1/1lag1 0 65534 PLFOEX 00:00:00:00:00:00 65534 0 1/1/4lag1 0 65534 PLFOEX 00:00:00:00:00:00 65534 0 switch# show lacp aggregates Aggregate-name : lag1 Aggregated-interfaces : 1/1/1 1/1/4 Heartbeat rate : slow Aggregate mode : active F - Aggregable I - Individual Expected Results  Administrators can create and configure a LAG Administrators can add ports to a LAG Administrators can configure a LAG interface  Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/lldp/",
	"title": "Link Layer Discovery Protocol (lldp)",
	"tags": [],
	"description": "",
	"content": "Link Layer Discovery Protocol (LLDP) LLDP is used to advertise the device\u0026rsquo;s identity and abilities and read other devices connected to the same network.\n NOTE: LLDP is enabled by default.\n Configuration Commands Enable an interface to receive or transmit LLDP packets:\nswitch(config-if)# lldp \u0026lt;receive|transmit\u0026gt; Show commands to validate functionality:\nswitch# show lldp [local-device|neighbor-info|statistics] Example Output switch# show lldp configuration LLDP Global Configuration: LLDP Enabled :Yes LLDP Transmit Interval :30 LLDP Hold time Multiplier :4 LLDP Transmit Delay Interval:2 LLDP Reinit time Interval :2 Optional TLVs configured: Management Address Port description Port VLAN-ID System capabilities System description System name LLDP Port Configuration: Port Tx-Enabled Rx-Enabled 1/1/1 Yes Yes ... switch# show lldp local-device Global Data --------------- Chassis-id 60 Total Packets transmitted : 198 Total Packets received : 170 Total Packet received and discarded : 0 Total TLVs unrecognized : 0 LLDP Port Statistics: Port-ID Tx-Packets Rx-packets Rx-discarded TLVs-Unknown 1/1/1 70 43 0 0 1/1/3 70 70 0 0 Expected Results  Link status between the peer devices is UP LLDP is enabled Local device LLDP Information is displayed Remote device LLDP information is displayed LLDP statistics are displayed  Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/locator_led/",
	"title": "Locator Led",
	"tags": [],
	"description": "",
	"content": "Locator LED The Locator LED is an LED in the front of the chassis that you can turn on or make flash. This is a handy feature when guiding someone to your switch during a \u0026ldquo;remote hands\u0026rdquo; situation, such as asking data center engineer to run a cable to your switch.\nConfiguration commands Enable LED:\nswitch# led locator \u0026lt;flashing|off|on\u0026gt; Show commands to validate functionality:\nswitch# show environment led Example output switch# show environment led Name State Status ----------------------------------- locator off ok switch# led locator flashing switch# show system led Name State Status ----------------------------------- locator flashing ok switch# led locator on switch# show system led Name State Status ----------------------------------- locator on ok switch# led locator off switch# show system led Name State Status ----------------------------------- locator off ok Expected results  The Locator LED should be in the off state The Locator LED is now flashing The show command shows the LED is in the flashing state The Locator LED is lit a solid color and it does not flash The show command shows the LED is in the on state The LED is no longer lit The show command shows the LED is in the off state  Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/loopback/",
	"title": "Loopback Interface",
	"tags": [],
	"description": "",
	"content": "Loopback Interface Loopbacks are essentially internal virtual interfaces. Loopback interfaces are not bound to a physical port and are used for device management and routing protocols.\nConfiguration Commands switch(config)# interface loopback LOOPBACK switch(config-loopback-if)# ip address IP-ADDR/\u0026lt;SUBNET|PREFIX\u0026gt; Example Output switch(config)# interface loopback 1 switch(config-loopback-if)# ip address 99.99.99.1/32 switch(config-loopback-if)# end switch# show run interface loopback1 interface loopback1 no shutdown ip address 99.99.99.1/32 exit switch# show ip interface loopback1 Interface loopback1 is up Admin state is up Hardware: Loopback IPv4 address 99.99.99.1/32 Expected Results  Administrators can create a loopback interface Administrators can give a loopback interface an IP address Administrators can validate the configuration using the show commands.  Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/mac_auth/",
	"title": "Mac Authentication",
	"tags": [],
	"description": "",
	"content": "MAC Authentication MAC Authentication (MAC Auth) is a method of authenticating devices for access to the network. The default mode of authentication is RADIUS, through which clients are authenticated by an external RADIUS server.\nConfiguration Commands Enter MAC Auth context:\nswitch(config)# aaa authentication port-access mac-auth Enable MAC Auth on all interfaces:\nswitch(config-macauth)# enable Configure MAC Auth MAC address format:\nswitch(config-macauth)# addr-format \u0026lt;no-delimiter|single-dash|multi-dash|multi-colon|no-delimiter Enable MAC Auth password:\nswitch(config-macauth)# password \u0026lt;plaintext|ciphertext\u0026gt; PASSWORD Configure mac-auth RADIUS authentication method:\nswitch(config-macauth)# aaa authentication port-access mac-auth auth-method \u0026lt;chap|pap\u0026gt; Configure mac-auth server group:\nswitch(config-macauth)# radius server-group NAME Configure cached reauthentication period on a port:\nswitch(config-macauth)# cached-reauth-period VALUE Configure the quiet period on a port:\nswitch(config-macauth)# quiet-period VALUE Configure the reauthentication period on a port:\nswitch(config-macauth)# reauth-period VALUE Enable reauthentication on the interface:\nswitch(config-macauth)# reauth Enable authorized on the interface:\nswitch(config-macauth)# authorized Enable cached reauthentication on the interface:\nswitch(config-macauth)# cached-reauth Show commands to validate functionality:\nswitch# show aaa authentication port-access mac-auth interface \u0026lt;IFACE|all\u0026gt; \u0026lt;port-statistics|client-status [mac MAC-ADDR]\u0026gt; Expected Results  Administrators can enable MAC auth authentication Administrators are able to authenticate using the specified dot1x authentication method The output of the show commands looks correct  Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/management_interface/",
	"title": "Management Interface",
	"tags": [],
	"description": "",
	"content": "Management Interface The management interface can be used to gain remote management access to the switch. The management interface is accessible using the \u0026ldquo;mgmt\u0026rdquo; VRF and is separate from the data plane interfaces, which are in the \u0026ldquo;default\u0026rdquo; VRF.\nAlternatively, a loopback interface can be configured to be used as management interface.\nAddress Mode Admin State Mac Address IPv4 address/subnet-mask Default gateway IPv4 IPv6 address/prefix IPv6 link local address/prefix: fe10::96f1:28ff:fe1d:a901/64 Default gateway IPv6 Primary Nameserver Secondary Nameserver : : 10.110.135.51 : 10.110.135.52 : dhcp : up : 94:f1:28:1d:a9:01 : 10.93.61.227/21 : 10.93.56.1 Configuration Commands Enable/disable the management interface:\nswitch(config)# interface mgmt switch(config-if-mgmt)# no shutdown switch(config)# interface mgmt switch(config-if-mgmt)# shutdown Assign an IP address to the interface:\nswitch(config-if-mgmt)# ip \u0026lt;dhcp|static IP-ADDR\u0026gt; Show commands to validate functionality:\nswitch# show interface mgmt switch# show interface loopback 0 Create and configure loopback interface:\nswitch(config)# interface loopback 0 8325-Core1(config-loopback-if)# ip address \u0026lt;IP-ADDR\u0026gt; Expected Results  Administrators can enable/disable the management interface. Administrators can assign an IP address to the management interface Administrators can configure a loopback interface to be use for Switch management.  Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/management_network_function_in_detail/",
	"title": "System Management Network Functions",
	"tags": [],
	"description": "",
	"content": "System Management Network Functions The following is a description of the system management network functions:\n  Edge - Any interactions with the Customer network or Internet\n Customer Jobs - Customer Access Network (CAN) User-facing cloud APIs  User Access Instances (UAIs)   Customer Administration - Customer Management Network (CMN)  Administrative Access to the system by Customer Admins Access from the system to external services:  Customer/Internet DNS LDAP authentication System installation and upgrade media (e.g. Nexus)     System - Access by the machine to external (Customer and/or Internet) resources. E.g. Internal DNS lookups may resolve to an external DNS    Internal - Node-to-node communication inside the system\n Administrative  Hardware - Hardware Management Network (HMN)  Direct BMC/iLOM access Hardware Discovery Firmware Updates     Cloud Control Plane - Node Management Network (NMN)  Job Control Plane - Node Management Network (NMN)      Services\n Traditional network services (e.g. TFTP, DHCP, DNS) Cloud API and control Cloud-based System Services Jobs Traditional UAN New UAI    Storage\n Ceph (IP-based storage)    Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/mclag_isl_ha/",
	"title": "Vsx Isl Ha",
	"tags": [],
	"description": "",
	"content": "VSX: ISL HA The intent here is to showcase an inter-switch-link (ISL) link failover scenario where one of the two links between spine switches goes down, but ISL is still connected with single link.\nThe following image is a visualization of disconnected ISL link:\nThe following things are expected to be seen in this scenario:\n After disconnecting one ISL, the VSX functionality should not be affected A small percentage of packets will be dropped when disconnecting the cable where traffic is flowing; A sub second value is expected during this event When connecting back the cable, the hashing needs to be recalculated and some packets may be dropped during this event as well; A sub second value is expected during this event  Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/mclag_link_ha/",
	"title": "Vsx Mclag Link Ha",
	"tags": [],
	"description": "",
	"content": "VSX: MCLAG Link HA The intent here is to showcase a typical MCLAG link failover scenario, where one of the links goes to the edge device, whether that is the connected switch or server.\nIn the following image, a typical traffic pattern coming off from MCLAG connected device is shown. The traffic is going north to south and ISL is not carrying any traffic. The only time ISL will carry traffic is if one of the links to downstream devices is down.\nThe network is now fully configured up, and you decide to test HA functionality by pulling MCLAG link off from Spine-02 and the bottom switch, what would you be expected to see?\n A small percentage of packets will be dropped when disconnecting the cable where traffic is flowing. A sub second value is expected during this event. When connecting back the cable, the hashing needs to be recalculated and some packets may be dropped during this event as well. A sub second value is expected during this event.  Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/check_bgp_and_metallb/",
	"title": "Check BGP And Metallb",
	"tags": [],
	"description": "",
	"content": "Check BGP and MetalLB Use the following procedure to verify if the spine switches are available and that MetalLB peering to the spine switches via Border Gateway Protocol (BGP) is established.\nPrerequisites Access to the spine switches is required.\nProcedure   Log in to the spine switches.\n  Check that MetalLB is peering to the spines via BGP.\nCheck both spines if they are available (powered up):\nsw-spine# show ip bgp summary All the neighbors should be in the Established state.\nExample working state:\nVRF name : default BGP router identifier : 10.252.0.1 local AS number : 65533 BGP table version : 6 Main routing table version: 6 IPV4 Prefixes : 84 IPV6 Prefixes : 0 L2VPN EVPN Prefixes : 0 ------------------------------------------------------------------------------------------------------------------ Neighbor V AS MsgRcvd MsgSent TblVer InQ OutQ Up/Down State/PfxRcd ------------------------------------------------------------------------------------------------------------------ 10.252.0.4 4 65533 465 501 6 0 0 0:03:37:43 ESTABLISHED/28 10.252.0.5 4 65533 463 501 6 0 0 0:03:36:51 ESTABLISHED/28 10.252.0.6 4 65533 463 500 6 0 0 0:03:36:39 ESTABLISHED/28   If the State/PfxRcd is IDLE, then restart the BGP process.\nsw-spine# clear ip bgp all   Back to index.\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/check_current_dhcp_leases/",
	"title": "Check Current DHCP Leases",
	"tags": [],
	"description": "",
	"content": "Check Current DHCP Leases Use the Kea API to retrieve data from the DHCP lease database.\nPrerequisites An auth token is set up. If one has not been set up, log on to ncn-w001 or a worker/manager with kubectl and run the following:\nexport TOKEN=$(curl -s -k -S -d grant_type=client_credentials -d client_id=admin-client -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token') Once an auth token is generated, these commands can be run on a worker or manager node.\nCommands to Check Leases Get all leases:\n WARNING: This may cause the terminal to crash based on the size of the output.\n curl -H \u0026quot;Authorization: Bearer ${TOKEN}\u0026quot; -X POST -H \u0026quot;Content-Type: application/json\u0026quot; -d '{ \u0026quot;command\u0026quot;: \u0026quot;lease4-get-all\u0026quot;, \u0026quot;service\u0026quot;: [ \u0026quot;dhcp4\u0026quot; ] }' https://api_gw_service.local/apis/dhcp-kea | jq If you have the IP and are looking for the hostname/MAC address. IP Lookup:\ncurl -H \u0026quot;Authorization: Bearer ${TOKEN}\u0026quot; -X POST -H \u0026quot;Content-Type: application/json\u0026quot; -d '{ \u0026quot;command\u0026quot;: \u0026quot;lease4-get\u0026quot;, \u0026quot;service\u0026quot;: [ \u0026quot;dhcp4\u0026quot; ], \u0026quot;arguments\u0026quot;: { \u0026quot;ip-address\u0026quot;: \u0026quot;x.x.x.x\u0026quot; } }' https://api_gw_service.local/apis/dhcp-kea | jq Use the MAC to find the hostname/IP Address:\ncurl -H \u0026quot;Authorization: Bearer ${TOKEN}\u0026quot; -X POST -H \u0026quot;Content-Type: application/json\u0026quot; -d '{ \u0026quot;command\u0026quot;: \u0026quot;lease4-get-all\u0026quot;, \u0026quot;service\u0026quot;: [ \u0026quot;dhcp4\u0026quot; ] }' https://api_gw_service.local/apis/dhcp-kea | jq '.[].arguments.leases[] | select(.\u0026quot;hw-address\u0026quot;==\u0026quot;XX:XX:XX:XX:XX:5d\u0026quot;)' Use the hostname to find the MAC/IP address:\ncurl -H \u0026quot;Authorization: Bearer ${TOKEN}\u0026quot; -X POST -H \u0026quot;Content-Type: application/json\u0026quot; -d '{ \u0026quot;command\u0026quot;: \u0026quot;lease4-get-all\u0026quot;, \u0026quot;service\u0026quot;: [ \u0026quot;dhcp4\u0026quot; ] }' https://api_gw_service.local/apis/dhcp-kea | jq '.[].arguments.leases[] | select(.\u0026quot;hostname\u0026quot;==\u0026quot;xNAME\u0026quot;)' View the total amount of leases:\ncurl -H \u0026quot;Authorization: Bearer ${TOKEN}\u0026quot; -X POST -H \u0026quot;Content-Type: application/json\u0026quot; -d '{ \u0026quot;command\u0026quot;: \u0026quot;lease4-get-all\u0026quot;, \u0026quot;service\u0026quot;: [ \u0026quot;dhcp4\u0026quot; ] }' https://api_gw_service.local/apis/dhcp-kea | jq '.[].text' Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/check_dhcp_lease_is_getting_allocated/",
	"title": "Check DHCP Lease Is Getting Allocated",
	"tags": [],
	"description": "",
	"content": "Check DHCP Lease is Getting Allocated Checking Check the Kea logs and verify that the DHCP lease is getting allocated.\nncn-mw# KEA_POD=$(kubectl get pods -n services -l app.kubernetes.io/name=cray-dhcp-kea -o custom-columns=:.metadata.name --no-headers) ncn-mw# echo \u0026#34;${KEA_POD}\u0026#34; ncn-mw# kubectl logs -n services pod/\u0026#34;${KEA_POD}\u0026#34; -c cray-dhcp-kea The following example shows that Kea is allocating a lease to 10.104.0.23. The lease must say DHCP4_LEASE_ALLOC; if it says DHCP4_LEASE_ADVERT, then there is likely a problem.\n2021-04-21 00:13:05.416 INFO [kea-dhcp4.leases/24.139710796402304] DHCP4_LEASE_ ***ALLOC*** [hwtype=1 02:23:28:01:30:10], cid=[00:78:39:30:30:30:63:31:73:30:62:31], tid=0x21f2433a: lease 10.104.0.23 has been allocated for 300 seconds The following is an example of the lease showing DHCP4_LEASE_ADVERT:\n2021-06-21 16:44:31.124 INFO [kea-dhcp4.leases/18.139837089017472] DHCP4_LEASE_ ***ADVERT*** [hwtype=1 14:02:ec:d9:79:88], cid=[no info], tid=0xe87fad10: lease 10.252.1.16 will be advertised Remediation Restarting Kea will fix the DHCP4_LEASE_ADVERT issue in most cases.\n  Restart Kea.\nncn-mw# kubectl rollout restart deployment -n services cray-dhcp-kea   Wait for deployment to restart.\nncn-mw# kubectl rollout status deployment -n services cray-dhcp-kea   Back to index.\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/duplicate_ip/",
	"title": "Check For Duplicate Ip Addresses",
	"tags": [],
	"description": "",
	"content": "Check for Duplicate IP Addresses It is common to get an IP address that is not the correct one. A sign of a duplicate IP address is seeing a DECLINE message from the client to the server.\nFor example:\n10.40.0.0.337 \u0026gt; 10.42.0.58.67: BOOTP/DHCP, Request from b4:2e:99:be:1a:d3, length 301, hops 1, xid 0x9d1210d, Flags [none] Gateway-IP 10.252.0.2 Client-Ethernet-Address b4:2e:99:be:1a:d3 Vendor-rfc1048 Extensions Magic Cookie 0x63825363 DHCP-Message Option 53, length 1: Decline Client-ID Option 61, length 19: hardware-type 255, 99:be:1a:d3:00:01:00:01:26:c8:55:c3:b4:2e:99:be:1a:d3 Server-ID Option 54, length 4: 10.42.0.58 Requested-IP Option 50, length 4: 10.252.0.26 Agent-Information Option 82, length 22: Circuit-ID SubOption 1, length 20: vlan2-ethernet1/1/12 To test for duplicate IP addresses, ping the suspected address while turning off the node. If there continues to be responses, then there is a duplicate IP address.\nBack to index.\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/check_kea_dhcp_logs/",
	"title": "Check Kea DHCP Logs",
	"tags": [],
	"description": "",
	"content": "Check KEA DHCP Logs Use this procedure to check the logs for a cray-dhcp-kea pod.\nProcedure   Retrieve the pod name.\nThe pod name is required to check the logs for the pod in question.\nkubectl logs -n services -l app.kubernetes.io/instance=cray-dhcp-kea -c cray-dhcp-kea Example output:\n2020-08-03 21:47:50.580 INFO [kea-dhcp4.dhcpsrv/10] DHCPSRV_MEMFILE_LEASE_FILE_LOAD loading leases from file /cray-dhcp-kea-socket/dhcp4.leases 2020-08-03 21:47:50.580 INFO [kea-dhcp4.dhcpsrv/10] DHCPSRV_MEMFILE_LFC_SETUP setting up the Lease File Cleanup interval to 3600 sec 2020-08-03 21:47:50.580 WARN [kea-dhcp4.dhcpsrv/10] DHCPSRV_OPEN_SOCKET_FAIL failed to open socket: the interface eth0 has no usable IPv4 addresses configured 2020-08-03 21:47:50.580 WARN [kea-dhcp4.dhcpsrv/10] DHCPSRV_NO_SOCKETS_OPEN no interface configured to listen to DHCP traffic 2020-08-03 21:48:00.602 INFO [kea-dhcp4.commands/10] COMMAND_RECEIVED Received command 'lease4-get-all' {\u0026quot;Dhcp4\u0026quot;: {\u0026quot;control-socket\u0026quot;: {\u0026quot;socket-name\u0026quot;: \u0026quot;/cray-dhcp-kea-socket/cray-dhcp-kea.socket\u0026quot;, \u0026quot;socket-type\u0026quot;: \u0026quot;unix\u0026quot;}, \u0026quot;hooks-libraries\u0026quot;: [{\u0026quot;library\u0026quot;: \u0026quot;/usr/local/lib/kea/hooks/libdhcp_lease_cmds.so\u0026quot;}, [...] waiting 10 seconds for any leases to be given out... [{'arguments': {'leases': []}, 'result': 3, 'text': '0 IPv4 lease(s) found.'}] 2020-08-03 21:48:22.734 INFO [kea-dhcp4.commands/10] COMMAND_RECEIVED Received command 'config-get'   View the Kea logs.\nncn-w001# kubectl logs -n services -l app.kubernetes.io/instance=cray-dhcp-kea -c cray-dhcp-kea | grep -i error   Shell into a Kea Pod.\nncn-w001# kubectl exec -n services -it pod/$(kubectl get -n services pods | grep kea | head -n 1) -c cray-dhcp-kea -- /bin/bash   Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/check_hsm/",
	"title": "Check The Hardware State Manager (HSM)",
	"tags": [],
	"description": "",
	"content": "Check the Hardware State Manager (HSM) The Hardware State Manager (HSM) has two important parts:\n System Layout Service (SLS): This is the \u0026ldquo;expected\u0026rdquo; state of the system (as populated by networks.yaml and other sources) State Manager Daemon (SMD): This is the \u0026ldquo;discovered\u0026rdquo; or active state of the system during runtime  Procedure   Check SLS.\nncn# curl -H \u0026#34;Authorization: Bearer ${TOKEN}\u0026#34; https://api-gw-service-nmn.local/apis/sls/v1/hardware | jq | less The output from SLS should look similar to the following:\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x1000c7s1b0\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x1000c7s1b0n0\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_node\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;Mountain\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;Node\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;Aliases\u0026#34;: [ \u0026#34;nid001228\u0026#34; ], \u0026#34;NID\u0026#34;: 1228, \u0026#34;Role\u0026#34;: \u0026#34;Compute\u0026#34; } }   Check SMD.\nncn# curl -s -k -H \u0026#34;Authorization: Bearer ${TOKEN}\u0026#34; https://api-gw-service-nmn.local/apis/smd/hsm/v1/Inventory/EthernetInterfaces | jq | less The output from SMD should look similar to the following:\n{ \u0026#34;ID\u0026#34;: \u0026#34;0040a6838b0e\u0026#34;, \u0026#34;Description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;MACAddress\u0026#34;: \u0026#34;0040a6838b0e\u0026#34;, \u0026#34;IPAddress\u0026#34;: \u0026#34;10.100.1.147\u0026#34;, \u0026#34;LastUpdate\u0026#34;: \u0026#34;2020-07-24T23:44:24.578476Z\u0026#34;, \u0026#34;ComponentID\u0026#34;: \u0026#34;x1000c7s1b0n0\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;Node\u0026#34; },   Back to index.\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/classifier_policies/",
	"title": "Classifier Policies",
	"tags": [],
	"description": "",
	"content": "Classifier Policies Classifier policies allow a network administrator to define sets of rules based on network traffic addressing or other header content and use these rules to restrict or alter the passage of traffic through the switch.\nChoosing the rule criteria is called classification, and one such rule, or list, is called a policy.\nClassification is achieved by creating a traffic class. There are three types of classes – MAC, IPv4, and IPv6 – which are each focused on relevant frame/packet characteristics. Classes can be configured to match or ignore almost any frame or packet header field.\nA policy contains one or more policy entries which are listed according to priority by sequence number. A single policy entry contains a class and corresponding policy action. Policy action is taken on traffic matched by its corresponding class.\nConfiguration Commands Create a class:\nswitch(config)# class \u0026lt;all|ip|ip6|mac\u0026gt; NAME Configure a class:\nswitch(config-class-ip)# [SEQ] \u0026lt;match|ignore\u0026gt; \u0026lt;any|PROTOCOL\u0026gt; \u0026lt;any|SRC-IP\u0026gt; \u0026lt;any|DST-IP\u0026gt; switch(config-class-ip)# [SEQ] comment TEXT Create a policy:\nswitch(config)# policy NAME Configure a policy:\nswitch(config-policy)# [SEQ] class \u0026lt;ip|ipv6|mac\u0026gt; NAME [action [ip-precedence VALUE|pcp VALUE|dsc VALUE|cir kbps RATE cbs BYTES exceed drop|mirror MIRROR|drop] ...] Apply a policy:\nswitch(config-if)# apply policy NAME [in|routed-in] switch(config-vlan)# apply policy NAME [in|routed-in] switch(config-tunnel)# apply policy NAME [in|routed-in] Show commands to validate functionality: :\nswitch# show class [ip|ipv6|mac] [NAME] switch# show policy [NAME] Expected Results  Administrators can configure a class Administrators can configure a policy Administrators can apply a policy to an interface The output of the show commands is correct  Example Output switch(config)# class ip BROWSER switch(config-class-ip)# match tcp any any eq 80 switch(config-class-ip)# match tcp any any eq 8080 switch(config-class-ip)# match tcp any any eq 8081 switch(config-class-ip)# exit switch(config)# class ip NMS_CLASS switch(config-class-ip)# match udp any any eq 161 switch(config-class-ip)# exit switch(config)# policy USERPORTS switch(config-policy)# class ip NMS_CLASS action dscp CS6 action pcp 6 switch(config-policy)# class ip BROWSER action dscp CS1 action pcp 1 switch(config-policy)# exit switch(config)# interface 1/1/1 switch(config-if)# apply policy USERPORTS i switch(config-if)# end switch# show class ip BROWSER Type Name Sequence Comment Action Source IP Address Destination IP Address Additional Parameters L3 Protocol Source L4 Port(s) Destination L4 Port(s) ------------------------------------------------------------------------------- IPv4 BROWSER 10 match any any 20 match any any 30 match any tcp = 80 tcp = 8080 tcp any ------------------------------------------------------------------------------- switch# show class ip NMS_CLASS Type Name Sequence Comment Action Source IP Address Destination IP Address Additional Parameters = 8081 L3 Protocol Source L4 Port(s) Destination L4 Port(s) ------------------------------------------------------------------------------- IPv4 NMS_CLASS 10 match udp any any = 161 ------------------------------------------------------------------------------- switch# show policy USERPORTS Name Sequence Comment Class Type action ------------------------------------------------------------------------------- USERPORTS 10 NMS_CLASS ipv4 pcp 6 dscp CS6 20 BROWSER ipv4 pcp 1 dscp CS1 ------------------------------------------------------------------------------- switch# show policy configuration commands policy USERPORTS 10 class ip NMS_CLASS action pcp 6 action dscp CS6 20 class ip BROWSER action pcp 1 action dscp CS1 interface 1/1/1 apply policy USERPORTS in switch# show policy hitcounts USERPORTS Statistics for Policy USERPORTS: Interface 1/1/1* (in): Hit Count Configuration 10 class ip NMS_CLASS action pcp 6 action dscp CS6 - 10 match udp any any eq 161 20 class ip BROWSER action pcp 1 action dscp CS1 - 10matchtcpanyany eq80 - 20 match tcp any any eq 8080 - 30 match tcp any any eq 8081 - 40 (null) any any any * policy statistics are shared among all applied interfaces use \u0026#39;policy NAME copy\u0026#39; to create a uniquely-named policy Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/dns-client/",
	"title": "Configure Domain Name Service (DNS) Clients",
	"tags": [],
	"description": "",
	"content": "Configure Domain Name Service (DNS) Clients The Domain Name Service (DNS) translates domain and host names to and from IP addresses. A DNS client resolves hostnames to IP addresses by querying assigned DNS servers for the appropriate IP address.\nConfiguration Commands Configure the switch to resolve queries via a DNS server:\nswitch(config)# ip dns server-address IP-ADDR [vrf VRF] Configure a domain name:\nswitch(config)# ip dns domain-name NAME Show commands to validate functionality:\nswitch# show ip dns Expected Results  Administrators can configure the DNS client The output is correct Administrators can ping the device  Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/domain_name/",
	"title": "Configure Domain Names",
	"tags": [],
	"description": "",
	"content": "Configure Domain Names A domain name is a name to identify the person, group, or organization that controls the devices within an area. An example of a domain name could be us.cray.com.\nConfiguration Commands Create a domain name:\nswitch(config)# domain-name NAME Show commands to validate functionality:\nswitch# show domain-name Expected Results  Administrators can configure the domain name The output of all show commands is correct  Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/exec_banner/",
	"title": "Configure Exec Banners",
	"tags": [],
	"description": "",
	"content": "Configure Exec Banners Exec banners are custom messages displayed to users attempting to connect to the management interfaces. Multiple lines of text can be stored using a custom delimiter to mark the end of message.\nConfiguration Commands Create a banner:\nswitch(config)# banner \u0026lt;motd|exec\u0026gt; DELIM Show commands to validate functionality:\nswitch# show banner \u0026lt;motd|exec\u0026gt; Example Output switch(config)# banner exec $ Enter a new banner, when you are done enter a new line containing only your chosen delimiter. (banner-motd)# This is an example of a custom banner (banner-motd)# that spans multiple lines. (banner-motd)# $ switch(config)# do show banner exec Expected Results  Administrators can create the Exec banner The output of the Exec banner looks correct  Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/hostname/",
	"title": "Configure Hostnames",
	"tags": [],
	"description": "",
	"content": "Configure Hostnames A hostname is a human-friendly name used to identify a device. An example of a hostname could be the name \u0026ldquo;Test.\u0026rdquo;\nConfiguration Commands Create a hostname:\nswitch(config)# hostname \u0026lt;NAME\u0026gt; Show commands to validate functionality:\nswitch# show hostname Example Output switch(config)# hostname switch-test switch-test# show hostname switch-test Expected Results  Administrators can configure the hostname The output of all show commands is correct  Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/igmp/",
	"title": "Configure Internet Group Multicast Protocol (igmp)",
	"tags": [],
	"description": "",
	"content": "Configure Internet Group Multicast Protocol (IGMP) The Internet Group Multicast Protocol (IGMP) is a communications protocol used by hosts and adjacent routers on IP networks to establish multicast group memberships. The host joins a multicast-group by sending a join request message towards the network router, and responds to queries sent from the network router by dispatching a join report.\nGeneral notes:\n In ArubaOS-CX igmp snooping is disabled by default IGMP v3 is used by default, supported configuration allows v2 and v3  Configuration Commands switch(config)# interface vlan 1 switch(config-if-vlan)# igmp Expected Results show ip igmp-snooping vlan 1 should show IGMP enabled on the VLAN, but no IGMP Querier set.\nBack to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/dhcp_decline/",
	"title": "Large Number Of DHCP Declines During A Node Boot",
	"tags": [],
	"description": "",
	"content": "Large Number of DHCP Declines During a Node Boot If something similar to the following is in the logs, this indicates an issue that an IP address being allocated is already being used and is not able to get the IP assigned to the device as previously set.\ndracut-initqueue[1902]: wicked: eth0: Declining DHCPv4 lease with address 10.252.0.56 dracut-initqueue[1902]: wicked: eth0: Declining DHCPv4 lease with address 10.252.0.57 dracut-initqueue[1902]: wicked: eth0: Declining DHCPv4 lease with address 10.252.0.58 dracut-initqueue[1902]: wicked: eth0: Declining DHCPv4 lease with address 10.252.0.59 dracut-initqueue[1902]: wicked: eth0: Declining DHCPv4 lease with address 10.252.0.60 dracut-initqueue[1902]: wicked: eth0: Declining DHCPv4 lease with address 10.252.0.51 dracut-initqueue[1902]: wicked: eth0: Declining DHCPv4 lease with address 10.252.0.53 dracut-initqueue[1902]: wicked: eth0: Declining DHCPv4 lease with address 10.252.0.54 dracut-initqueue[1902]: wicked: eth0: Declining DHCPv4 lease with address 10.252.0.61 dracut-initqueue[1902]: wicked: eth0: Declining DHCPv4 lease with address 10.252.0.62 dracut-initqueue[1902]: wicked: eth0: Declining DHCPv4 lease with address 10.252.0.63 dracut-initqueue[1902]: wicked: eth0: Declining DHCPv4 lease with address 10.252.0.64 dracut-initqueue[1902]: wicked: eth0: Declining DHCPv4 lease with address 10.252.0.65 dracut-initqueue[1902]: wicked: eth0: Declining DHCPv4 lease with address 10.252.0.66 dracut-initqueue[1902]: wicked: eth0: Declining DHCPv4 lease with address 10.252.0.67 Procedure   Check by MAC address (no colons):\ncurl -s -k -H \u0026quot;Authorization: Bearer ${TOKEN}\u0026quot; https://api_gw_service.local/apis/smd/hsm/v1/Inventory/EthernetInterfaces/18c04d13d73c   Check by component name (xname):\ncurl -s -k -H \u0026quot;Authorization: Bearer ${TOKEN}\u0026quot; https://api_gw_service.local/apis/smd/hsm/v1/Inventory/EthernetInterfaces?ComponentID=x3000c0s25b0n0   Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/compute_uan_application_nodes/",
	"title": "Verify Computes/UANs/application Nodes",
	"tags": [],
	"description": "",
	"content": "Verify Computes/UANs/Application Nodes If the computes make it past PXE and go into the PXE shell, verify DNS and connectivity.\niPXE\u0026gt; dhcp Configuring (net0 98:03:9b:a8:60:88).................. No configuration methods succeeded (http://ipxe.org/040ee186) Configuring (net1 b4:2e:99:be:1a:37)...... ok Procedure   Verify DNS:\niPXE\u0026gt; show dns Example output:\nnet1.dhcp/dns:ipv4 = 10.92.100.225   Verify connectivity:\niPXE\u0026gt; nslookup address api-gw-service-nmn.local iPXE\u0026gt; echo ${address} 10.92.100.71   Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/8021x/",
	"title": "802.1x",
	"tags": [],
	"description": "",
	"content": "802.1X IEEE 802.1X is an IEEE standard for port-based network access control (PNAC). This standard provides an authentication mechanism to devices wishing to attach to a LAN or WLAN. IEEE 802.1X defines the encapsulation of the Extensible Authentication Protocol (EAP) over IEEE 802, which is known as EAP over LAN (EAPOL).\n NOTE: Port security is a feature of \u0026ldquo;edge\u0026rdquo; switches such as 63/6400, and it is not available on 83xx.\n Configuration Commands Enter 802.1X authenticator context:\nswitch(config)# aaa authentication port-access dot1x authenticator Enable 802.1X authentication:\nswitch(config-dot1x-auth)# enable Configure 802.1X authentication method:\nswitch(config-dot1x-auth)# chap-radius|eap-radius Configure RADIUS server group for 802.1X:\nswitch(config-dot1x-auth)# radius server-group NAME Enter 802.1X authenticator context on a port:\nswitch(config-if)# aaa authentication port-access dot1x authenticator Enable 802.1X authentication on a port:\nswitch(config-if-dot1x-auth)# enable Enable cached re-authentication on a port:\nswitch(config-if-dot1x-auth)# cached-reauth Configure cached re-authentication period on a port:\nswitch(config-if-dot1x-auth)# cached-reauth-period VALUE Configure maximum authentication attempts on a port:\nswitch(config-if-dot1x-auth)# max-retries VALUE Configure quiet period on a port:\nswitch(config-if-dot1x-auth)# quiet-period VALUE Enable periodic re-authentication on a port:\nswitch(config-if-dot1x-auth)# reauth Configure re-authentication period on a port:\nswitch(config-if-dot1x-auth)# reauth-period VALUE Configure discovery period on a port:\nswitch(config-if-dot1x-auth)# discovery-period VALUE Configure EAPOL timeout on a port:\nswitch(config-if-dot1x-auth)# eapol-timeout VALUE Configure maximum EAPOL requests on a port:\nswitch(config-if-dot1x-auth)# max-eapol-requests VALUE Configure force authorized on a port:\nswitch(config-if-dot1x-auth)# authorized Show commands to validate functionality: :\nswitch# show aaa authentication port-access dot1x authenticator interface \u0026lt;IFACE|all\u0026gt; \u0026lt;port-statistics|client-status\u0026gt; [mac MAC-ADDR] Expected Results Expected outcomes following configuration:\n Administrators can enable dot1x authentication Administrators are able to authenticate using the specified dot1x authentication method The output of the show commands looks correct  Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/acl/",
	"title": "Access Control Lists (ACLs)",
	"tags": [],
	"description": "",
	"content": "Access Control Lists (ACLs) ACLs are used to help improve network performance and restrict network usage by creating policies to eliminate unwanted IP traffic by filtering packets where they enter the switch on layer 2 and layer 3 interfaces. An ACL is an ordered list of one or more access control list entries (ACEs) prioritized by sequence number. An incoming packet is matched sequentially against each entry in an ACL.\nWhen a match is made, the action of that ACE is taken and the packet is not compared against any other ACEs in the list.\nFor ACL filtering to take effect, configure an ACL and then assign it in the inbound or outbound direction on an L2 or L3 interface with IPV4 traffic, and inbound-only for IPv6.\nConfiguration Commands Create an ACL:\nswitch(config)# access-list \u0026lt;ip|ipv6|mac\u0026gt; ACL Copy an existing ACL:\nswitch(config)# access-list \u0026lt;ip|ipv6|mac\u0026gt; ACL copy NEW-ACL Resequence an ACL:\nswitch(config)# access-list \u0026lt;ip|ipv6|mac\u0026gt; ACL resequence VALUE INC Apply an ACL to the control plane:\nswitch(config)# apply access-list \u0026lt;ip|ipv6\u0026gt; ACL control-plane [vrf VRF] Add ACEs in the appropriate order:\nswitch(config-acl-ip)# [SEQ] \u0026lt;deny|permit\u0026gt; \u0026lt;any|PROTOCOL\u0026gt; \u0026lt;any|SRC\u0026gt; \u0026lt;any|DST\u0026gt; [count] [log] switch(config-acl-ip)# [SEQ] comment TEXT Apply the ACL to a physical interface, a logical interface or a VLAN (please note: ACLs on L3 VLAN interfaces are not supported):\nswitch(config-if)# apply access-list \u0026lt;ip|ipv6|mac\u0026gt; ACL \u0026lt;in|out\u0026gt; switch(config-vlan)# apply access-list \u0026lt;ip|ipv6|mac\u0026gt; ACL \u0026lt;in|out\u0026gt; Show commands to validate functionality: :\nswitch# show access-list [hitcounts] [ip|ipv6|mac ACL] [control-plane vrf VRF] Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/added_hardware/",
	"title": "Added Hardware",
	"tags": [],
	"description": "",
	"content": "Added Hardware Follow this procedure when new hardware is added to the system.\nProcedure   Validate the SHCD.\nThe SHCD defines the topology of a Shasta system, this is needed when generating switch configurations.\nRefer to Validate the SHCD.\n  Generate the switch configuration file(s).\nRefer to Generate Switch Configs.\n  Check the differences between the generated configurations and the configurations on the system.\nRefer to Validate Switch Configs.\n  Run a suite of tests against the management network switches.\nRefer to Network Tests.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/arp/",
	"title": "Address Resolution Protocol (arp)",
	"tags": [],
	"description": "",
	"content": "Address Resolution Protocol (ARP) ARP is commonly used for mapping IPv4 addresses to MAC addresses.\nProcedure   Configure static ARP on an interface.\nswitch(config-if)# arp ipv4 IP-ADDR mac MAC-ADDR   Show commands to validate functionality: .\nswitch# show arp   Expected Results  Administrators are able to ping the connected device Administrators can view the ARP entries  Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/apply_custom_config_1.2/",
	"title": "Apply Custom Switch Configuration 1.2",
	"tags": [],
	"description": "",
	"content": "Apply Custom Switch Configuration CSM 1.2 Apply the backed up site connection configuration with a couple modifications. Since virtual routing and forwarding (VRF) is now used to separate customer traffic, the site ports and default routes must be added to that VRF.\nPrerequisites   Access to the switches\n  Custom switch configurations\n Backup Custom Configuration    Generated switch configurations already applied\n Apply Switch Configurations    Aruba apply configurations vrf attach Customer will be added to the port configuration that connects to the site. This has to be applied before the ip address configuration.\nsw-spine-001# conf t interface 1/1/36 no shutdown vrf attach Customer description to:CANswitch_cfcanb6s1-31:from:sw-25g01_x3000u39-j36 ip address 10.101.15.142/30 exit sw-spine-001# conf t sw-spine-001(config)# system interface-group 3 speed 10g sw-spine-002# conf t interface 1/1/36 no shutdown vrf attach Customer description to:CANswitch_cfcanb6s1-46:from:sw-25g02_x3000u40-j36 ip address 10.101.15.190/30 exit If the switch had system interface-group commands those would be added here.\nsw-spine-001(config)# system interface-group 3 speed 10g vrf Customer will be appended to the default route configuration.\nsw-spine-001# conf t sw-spine-001(config)# ip route 0.0.0.0/0 10.101.15.141 vrf Customer sw-spine-002# conf t sw-spine-002(config)# ip route 0.0.0.0/0 10.101.15.189 vrf Customer Mellanox apply configurations vrf forwarding Customer will be added to the port configuration. This has to be applied before the ip address configuration.\nsw-spine-001 [mlag-domain: master] # conf t interface ethernet 1/16 speed 10G force interface ethernet 1/16 mtu 1500 force interface ethernet 1/16 no switchport force interface ethernet 1/16 vrf forwarding Customer interface ethernet 1/16 ip address 10.102.255.10/30 primary sw-spine-002 [mlag-domain: master] # conf t interface ethernet 1/16 speed 10G force interface ethernet 1/16 mtu 1500 force interface ethernet 1/16 no switchport force interface ethernet 1/16 vrf forwarding Customer interface ethernet 1/16 ip address 10.102.255.86/30 primary vrf Customer will replace vrf default\nsw-spine-001 [mlag-domain: master] # conf t ip route vrf Customer 0.0.0.0/0 10.102.255.9 sw-spine-002 [mlag-domain: master] # conf t ip route vrf Customer 0.0.0.0/0 10.102.255.85 Apply users/password All that is required to re-apply the users is to get into the global configuration mode using conf t and paste in the configuration that was copied from the previous step.\nAruba credentials sw-leaf-bmc-001# conf t user admin group administrators password ciphertext xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Dell credentials sw-leaf-001# conf t system-user linuxadmin password xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx username admin password xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx role sysadmin priv-lvl 15 Mellanox credentials sw-spine-001 [standalone: master] # conf t username admin password 7 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx username monitor password 7 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Apply SNMP credentials Dell SNMP sw-leaf-bmc-001# conf t snmp-server group cray-reds-group 3 noauth read cray-reds-view snmp-server user testuser cray-reds-group 3 auth md5 xxxxxxxx priv des xxxxxxx snmp-server view cray-reds-view 1.3.6.1.2 included Aruba SNMP sw-leaf-bmc-001# conf t snmp-server vrf default snmpv3 user testuser auth md5 auth-pass plaintext xxxxxx priv des priv-pass plaintext xxxxx For more information on SNMP credentials, see Change SNMP Credentials on Leaf-BMC Switches and Update Default Air-Cooled BMC and Leaf-BMC Switch SNMP Credentials.\nWrite memory Save the configuration once the configuration is applied. See Saving Configuration.\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/apply_custom_config_1.0/",
	"title": "Apply Custom Switch Configurations For 1.0",
	"tags": [],
	"description": "",
	"content": "Apply Custom Switch Configurations for CSM 1.0 Apply the backed up site connection configuration with a couple modifications. Since virtual routing and forwarding (VRF) is now used to separate customer traffic, the site ports and default routes must be added to that VRF.\nPrerequisites  Access to the switches Custom switch configurations  Backup Custom Configurations   Generated switch configurations already applied  Apply Switch Configurations    Aruba apply configurations sw-spine-001# conf t interface 1/1/36 no shutdown description to:CANswitch_cfcanb6s1-31:from:sw-25g01_x3000u39-j36 ip address 10.101.15.142/30 exit sw-spine-001# conf t sw-spine-001(config)# system interface-group 3 speed 10g sw-spine-002# conf t interface 1/1/36 no shutdown description to:CANswitch_cfcanb6s1-46:from:sw-25g02_x3000u40-j36 ip address 10.101.15.190/30 exit If the switch had system interface-group commands those would be added here.\nsw-spine-001(config)# system interface-group 3 speed 10g sw-spine-001# conf t sw-spine-001(config)# ip route 0.0.0.0/0 10.101.15.141 vrf default sw-spine-002# conf t sw-spine-002(config)# ip route 0.0.0.0/0 10.101.15.189 vrf default Mellanox apply configurations sw-spine-001 [mlag-domain: master] # conf t interface ethernet 1/16 speed 10G force interface ethernet 1/16 mtu 1500 force interface ethernet 1/16 no switchport force interface ethernet 1/16 ip address 10.102.255.10/30 primary sw-spine-002 [mlag-domain: master] # conf t interface ethernet 1/16 speed 10G force interface ethernet 1/16 mtu 1500 force interface ethernet 1/16 no switchport force interface ethernet 1/16 ip address 10.102.255.86/30 primary sw-spine-001 [mlag-domain: master] # conf t ip route vrf default 0.0.0.0/0 10.102.255.9 sw-spine-002 [mlag-domain: master] # conf t ip route vrf default 0.0.0.0/0 10.102.255.85 Apply Users/Password All that is required to re-apply the users is to get into global configuration mode with conf t and to paste in the configuration that was copied from the previous step.\nAruba credentials sw-leaf-bmc-001# conf t user admin group administrators password ciphertext xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Dell credentials sw-leaf-001# conf t system-user linuxadmin password xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx username admin password xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx role sysadmin priv-lvl 15 Mellanox credentials sw-spine-001 [standalone: master] # conf t username admin password 7 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx username monitor password 7 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Apply SNMP credentials Dell SNMP sw-leaf-bmc-001# conf t snmp-server group cray-reds-group 3 noauth read cray-reds-view snmp-server user testuser cray-reds-group 3 auth md5 xxxxxxxx priv des xxxxxxx snmp-server view cray-reds-view 1.3.6.1.2 included Aruba SNMP sw-leaf-bmc-001# conf t snmp-server vrf default snmpv3 user testuser auth md5 auth-pass plaintext xxxxxx priv des priv-pass plaintext xxxxx For more information on SNMP credentials, see Change SNMP Credentials on Leaf-BMC Switches and Update Default Air-Cooled BMC and Leaf-BMC Switch SNMP Credentials.\nWrite memory Save the configuration once the configuration is applied. See Saving Configuration.\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/apply_switch_configurations/",
	"title": "Apply Switch Configurations",
	"tags": [],
	"description": "",
	"content": "Apply Switch Configurations This process is generally straightforward and requires the user to copy and paste the generated switch configuration into the terminal.\nAll ports will be shutdown before applying switch configuration. If the port is in the SHCD and being used, it will be enabled when the configuration is applied.\nThere are some caveats that are mentioned below.\nPrerequisites  Switch without any configuration  Wipe Management Switches   Generated switch configurations  Generate Switch Configuration    Aruba   Shutdown all ports. Use show int physical to see the range of ports.\nswitch(config)# int 1/1/1-1/1/52 switch(config-if-\u0026lt;1/1/1-1/1/52# shut   Enter auto-confirm before pasting in the configuration. This will automatically accept prompts.\nswitch(config)# auto-confirm   Paste in the generated configuration.\n  Dell   Shut down all ports.\nsw-leaf-bmc-001(config)# interface range ethernet 1/1/1-1/1/52 sw-leaf-bmc-001(conf-range-eth1/1/1-1/1/52)# shut   Paste in the generated configuration.\n  When pasting in the configuration be sure that all the commands were accepted. In some cases you will need to back out of the current configuration context and back to global configuration for the commands to work as intended.\n  banner exec will need to be manually applied.\nFor example:\nsw-leaf-bmc-001(config)# router ospf 1 sw-leaf-bmc-001(config-router-ospf-1)# router-id 10.2.0.4 sw-leaf-bmc-001(config-router-ospf-1)# router-id ospf 2 vrf Customer % Error: Illegal parameter. sw-leaf-bmc-001(config-router-ospf-1)# router-id 10.2.0.4 To fix:\nsw-leaf-bmc-001(config)# router ospf 1 sw-leaf-bmc-001(config-router-ospf-1)# router-id 10.2.0.4 sw-leaf-bmc-001(config-router-ospf-1)# exit sw-leaf-bmc-001(config)# router ospf 2 vrf Customer sw-leaf-bmc-001(config-router-ospf-2)# router-id 10.2.0.4     Mellanox Verify that no cli default prefix-modes enable is configured on the switch before applying any configuration.\nsw-spine-001 [mlag-domain: standby] (config) # no cli default prefix-modes enable Write memory Save the configuration once the configuration is applied.\nRefer to the Saving Configuration procedure.\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/backup/",
	"title": "Backup A Switch Configuration",
	"tags": [],
	"description": "",
	"content": "Backup a Switch Configuration Copies the running configuration or the startup configuration to a remote location as a file. The configuration can be exported to a file of either type CLI or type JSON format. The \u0026lt;VRF-NAME\u0026gt; is used for the configuration of interfaces on a particular VRF.\nProcedure Create a copy of a running configuration or the startup configuration using the following command:\ncopy {running-config | startup-config} \u0026lt;REMOTE-URL\u0026gt; {cli | json} [vrf \u0026lt;VRF-NAME\u0026gt;] The parameters/syntax of the copy command are described below:\n  {running-config | startup-config}\nSelects whether the running configuration or the startup configuration will be copied to a remote location as a file.\n  \u0026lt;REMOTE-URL\u0026gt;\nSpecifies the remote target for copying the file.\n  {tftp | sftp}://\u0026lt;IP-ADDRESS\u0026gt;[:\u0026lt;PORT-NUMBER\u0026gt;][;blocksize=\u0026lt;BLOCKSIZE-VALUE\u0026gt;]/\u0026lt;FILE-NAME\u0026gt;{cli | json}\nSelects whether the export file is in CLI or JSON format.\n  vrf \u0026lt;VRF-NAME\u0026gt;\nSpecifies the VRF to receive the interface configuration. If a VRF is not specified, the default VRF is used.\n  The following is an example of copying a running configuration to remote file in the CLI format:\nswitch# copy running-config tftp://192.168.1.10/runcli cli vrf default ######################################################################### 100.0%Success Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/bluetooth/",
	"title": "Bluetooth Capabilities",
	"tags": [],
	"description": "",
	"content": "Bluetooth Capabilities The Bluetooth feature allows Bluetooth enabled devices to connect to and manage the switch on a wireless Bluetooth Personal Area Network (PAN). The user needs a supported USB Bluetooth dongle and to enable both the USB port and Bluetooth on the switch to use this feature. Bluetooth and REST write permissions for Bluetooth clients are both enabled by default.\nConfiguration Commands Turn on the USB port:\nswitch# usb mount Enable Bluetooth:\nswitch# bluetooth enable Show Commands to Validate Functionality:\nswitch# show bluetooth Example Output Bluetooth enabled:\nSwitch(config)# bluetooth enable Switch(config)# show bluetooth Enabled Device name Adapter State Adapter IP address : 192.168.0.1 Adapter MAC address : e0x34-60126 : Yes : 8320-TJ12690890 : Ready Connected Clients ----------------- Name MAC Address ---------------------- -------------- ---------------- ------------------------ Bluetooth not enabled:\nSwitch# no Bluetooth enable Switch# show bluetooth Enabled : No Expected Results  The USB mounts properly Administrators can see and connect to the Bluetooth PAN Administrators can edit the configuration via the Bluetooth connection The output of the show commands looks correct  [Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/bgp_basic/",
	"title": "Border Gateway Protocol (BGP) Basics",
	"tags": [],
	"description": "",
	"content": "Border Gateway Protocol (BGP) Basics \u0026ldquo;The primary function of a Border Gateway Protocol (BGP) speaking system is to exchange network reachability information with other BGP systems. This network reachability information includes information on the list of Autonomous Systems (ASes) that reachability information traverses. This information is sufficient for constructing a graph of AS connectivity for this reachability, from which routing loops may be pruned and, at the AS level, some policy decisions may be enforced.\u0026rdquo; –rfc4271A\nBGP is configurable to run in either internal (iBGP) or external (eBGP) mode.\nConfiguration Commands Create a static route towards a blackhole interface:\nswitch(config)# ip route IP-ADDR/SUBNET blackhole Configure a BGP instance:\nswitch(config)# router bgp AS-NUM [vrf VRF] Create network statements for each subnet to advertise:\nswitch(config-router)# network IP-ADDR/SUBNET Configure a neighbor relationship with another BGP speaker:\nswitch(config-router)# neighbor IP-ADDR remote-as AS-NUM Configure an MD5 encrypted password to secure the neighbor relationship:\nswitch(config-router)# neighbor IP-ADDR password \u0026lt;cipher|plain\u0026gt;text PSWD Configure soft reconfiguration:\nswitch(config-router)# neighbor IP-ADDR soft-reconfiguration inbound Show commands to validate functionality: :\nswitch# show bgp all [summary|neighbors] Expected Results  Administrators can configure BGP on the switch Administrators can create the network statements and the routes are in the routing table Administrators can configure a BGP neighbor that uses an MD5 encrypted password Administrators can validate the BGP relationship is established and that the network statement is advertised to the peer Soft reconfiguration is enabled  Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/aruba/cable_diagnostics/",
	"title": "Cable Diagnostics",
	"tags": [],
	"description": "",
	"content": "Cable Diagnostics Use the cable-diagnostic feature to test cables in the event where there might be a bad copper cable.\n NOTE: This feature is only available on non-SFP copper ports.\n Procedure Enter diagnostics to open up the diagnostics menu:\nswitch# diagnostics Once done, the diagnostics command set is now available for use, and the cable-diagnostics command can be executed:\nswitch# diag cable-diagnostic \u0026lt;IFACE\u0026gt; Example output 6300# diagnostics \u0026lt;CR\u0026gt; 6300# diag ? asic ASIC diagnostics audit-failure-notification Configure audit failure notification bgp IP information cable-diagnostic Cable diagnostic test ...snip for brevity 6300# diag cable-diagnostic ? IFNAME Expected Results  Administrators can enter diagnostics mode successfully Administrators can test the cable and see the results in the CLI output  Back to Index\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/gateway_testing/",
	"title": "Gateway Testing",
	"tags": [],
	"description": "",
	"content": "Gateway Testing With the introduction of BiCAN, service APIs are now available on one or more networks depending on who is allowed access to the services and from where. The services are accessed via three different ingress gateways using a token that can be retrieved from Keycloak.\nThis page describes how to run a set of tests that determine if the gateways are functioning properly. The gateway test will obtain an API token from Keycloak and then use that token to attempt to access a set of service APIs on one or more networks, as defined in the gateway test definition file (gateway-test-defn.yaml). The test will check the return code to make sure it gets the expected response.\nWhen the nmnlb network is tested, the test will use api-gw-service-nmn.local as an override for nmnlb.\u0026lt;system-domain\u0026gt; in CSM v1.2. Optionally, setting use-api-gw-override: false in gateway-test-defn.yaml disables that override, and the test will use nmnlb.\u0026lt;system-domain\u0026gt;.\nTopics  Running Gateway Tests on an NCN Management Node Running Gateway Tests on a UAN or Compute Node Running Gateway Tests on a UAI Running Gateway Tests on a Device Outside the System Example Results  Running Gateway Tests on an NCN Management Node The gateway test scripts can be found in /usr/share/doc/csm/scripts/operations/gateway-test. When gateway-test.py is run from an NCN, it has access to the admin client secret using kubectl. It will use the admin client secret to get the token for accessing the APIs.\nExecute the test by running following command.\nncn# /usr/share/doc/csm/scripts/operations/gateway-test/ncn-gateway-test.sh The test will cycle through all of the test networks specified in gateway-test-defn.yaml.\ntest-networks: - name: nmnlb gateway: services-gateway - name: cmn gateway: services-gateway - name: can gateway: customer-user-gateway - name: chn gateway: customer-user-gateway For each network, the test will attempt to obtain a token from Keycloak. On an NCN, it should be able to get a token from NMNLB, CMN, and either CAN or CHN depending on how the system is configured. It will then use that token to attempt to access each of the services defined in gateway-test-defn.yaml, on each of the test-networks. The test will determine whether it should or should not be able to access the service, and it will output a PASS or FAIL for each service, as appropriate. At the end of the tests it will compile and output a final overall PASS/FAIL status.\nRunning Gateway Tests on a UAN or Compute Node The same set of tests will be run from a UAN or Compute Node by executing the following command from an NCN that has the docs-csm RPM installed. The hostname of the UAN or Compute Node under test must be specified.\nBoth scripts will fetch the admin client secret, the configured user network, and the site domain from the system. It will use that information to generate a script that will be transferred to the UAN, executed, and removed. The networks that should be accessible are different on a UAN versus a Compute node. The script will determine the networks that should be accessible on the node based on the node type.\nThe test will determine whether it should or should not be able to access the service, and it will output a PASS or FAIL for each service, as appropriate. At the end of the tests it will compile and output a final overall PASS/FAIL status.\nUAN Test Execution ncn# /usr/share/doc/csm/scripts/operations/gateway-test/uan-gateway-test.sh \u0026lt;uan-hostname\u0026gt; Compute Node Test Execution ncn# /usr/share/doc/csm/scripts/operations/gateway-test/cn-gateway-test.sh \u0026lt;cn-hostname\u0026gt; Running Gateway Tests on a UAI In order to test the gateways from a UAI, the /usr/share/doc/csm/scripts/operations/gateway-test/uai-gateway-test.sh script is used.\nThis script will execute the following steps:\n Create a UAI with a cray-uai-gateway-test image. Pass the system domain, user network, and admin client secret to the test UAI. Execute gateway-test.py on the node. Output the results. Delete the test UAI.  Run the test by executing the following command.\nncn# /usr/share/doc/csm/scripts/operations/gateway-test/uai-gateway-test.sh The test will find the first UAI cray-uai-gateway-test image to create the test UAI. A different image may optionally be specified by using the --imagename option.\nRunning Gateway Tests on a Device Outside the System The following steps must be performed on the system where the test is to be run:\n  python3 must be installed (if it is not already).\n  Obtain the test code.\nThere are two options for doing this:\n  Install the docs-csm RPM.\nSee Check for Latest Documentation.\n  Copy over the following files from a system where the docs-csm RPM is installed:\n /usr/share/doc/csm/scripts/operations/gateway-test/gateway-test.py /usr/share/doc/csm/scripts/operations/gateway-test/gateway-test-defn.yaml      Obtain the admin client secret.\nBecause we do not have access to kubectl outside of the cluster, obtain the admin client secret by running the following command on an NCN.\nncn# kubectl get secrets admin-client-auth -o jsonpath=\u0026#39;{.data.client-secret}\u0026#39; | base64 -d 26947343-d4ab-403b-14e937dbd700   Export the admin client secret in an environment variable.\nBack on the system where the tests will be run, set and export the ADMIN_CLIENT_SECRET environment variable, using the admin-client-auth secret obtained in the previous step:\nlinux# export ADMIN_CLIENT_SECRET=26947343-d4ab-403b-14e937dbd700   Execute the test.\nExecute the test by running following command. The system domain (in this example, eniac.dev.cray.com) must be specified.\nlinux# /usr/share/doc/csm/scripts/operations/gateway-test/gateway-test.py eniac.dev.cray.com outside   Example Results The results of running the tests will show the following:\n Retrieval of a token on the CMN network; the token is used to get SLS data, which determines which user network is configured on the system.  If CMN is not accessible, then the test will get the user network from the command line.   For each of the test networks defined in gateway-test-defn.yaml:  Retrieval of a token on the network under test. It will attempt to access each of the services with the token and check the expected results.  It will show PASS or FAIL depending on the expected response for the service and the token being used. It will show SKIP for services that are not expected to be installed on the system.     The return code of gateway-test.py will be non-zero if any of the tests within it fail.  Running From an NCN with CHN as the User Network ncn-m001# ./gateway-test.py eniac.dev.cray.com auth.cmn.eniac.dev.cray.com is reachable Token successfully retrieved at https://auth.cmn.eniac.dev.cray.com/keycloak/realms/shasta/protocol/openid-connect/token Getting token for nmnlb api-gw-service-nmn.local is reachable Token successfully retrieved at https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token ------------- api-gw-service-nmn.local ------------------- api-gw-service-nmn.local is reachable PASS - [cray-bos]: https://api-gw-service-nmn.local/apis/bos/v1/session - 200 PASS - [cray-bss]: https://api-gw-service-nmn.local/apis/bss/boot/v1/bootparameters - 200 PASS - [cray-capmc]: https://api-gw-service-nmn.local/apis/capmc/capmc/get_node_rules - 200 PASS - [cray-cfs-api]: https://api-gw-service-nmn.local/apis/cfs/v2/sessions - 200 PASS - [cray-console-data]: https://api-gw-service-nmn.local/apis/consoledata/liveness - 204 PASS - [cray-console-node]: https://api-gw-service-nmn.local/apis/console-node/console-node/liveness - 204 PASS - [cray-console-operator]: https://api-gw-service-nmn.local/apis/console-operator/console-operator/liveness - 204 SKIP - [cray-cps]: https://api-gw-service-nmn.local/apis/v2/cps/contents - virtual service not found PASS - [cray-fas]: https://api-gw-service-nmn.local/apis/fas/v1/snapshots - 200 PASS - [cray-hbtd]: https://api-gw-service-nmn.local/apis/hbtd/hmi/v1/health - 200 PASS - [cray-hmnfd]: https://api-gw-service-nmn.local/apis/hmnfd/hmi/v2/health - 200 PASS - [cray-ims]: https://api-gw-service-nmn.local/apis/ims/images - 200 PASS - [cray-powerdns-manager]: https://api-gw-service-nmn.local/apis/powerdns-manager/v1/liveness - 204 PASS - [cray-reds]: https://api-gw-service-nmn.local/apis/reds/v1/liveness - 204 PASS - [cray-scsd]: https://api-gw-service-nmn.local/apis/scsd/v1/health - 200 PASS - [cray-sls]: https://api-gw-service-nmn.local/apis/sls/v1/health - 200 PASS - [cray-smd]: https://api-gw-service-nmn.local/apis/smd/hsm/v1/service/ready - 200 PASS - [cray-sts]: https://api-gw-service-nmn.local/apis/sts/healthz - 200 PASS - [cray-uas-mgr]: https://api-gw-service-nmn.local/apis/uas-mgr/v1/images - 200 SKIP - [nmdv2-service]: https://api-gw-service-nmn.local/apis/v2/nmd/dumps - virtual service not found SKIP - [slingshot-fabric-manager]: https://api-gw-service-nmn.local/apis/fabric-manager/fabric/port-policies - virtual service not found SKIP - [sma-telemetry]: https://api-gw-service-nmn.local/apis/sma-telemetry-api/v1/ping - virtual service not found ------------- api.cmn.eniac.dev.cray.com ------------------- api.cmn.eniac.dev.cray.com is reachable PASS - [cray-bos]: https://api.cmn.eniac.dev.cray.com/apis/bos/v1/session - 200 PASS - [cray-bss]: https://api.cmn.eniac.dev.cray.com/apis/bss/boot/v1/bootparameters - 200 PASS - [cray-capmc]: https://api.cmn.eniac.dev.cray.com/apis/capmc/capmc/get_node_rules - 200 PASS - [cray-cfs-api]: https://api.cmn.eniac.dev.cray.com/apis/cfs/v2/sessions - 200 PASS - [cray-console-data]: https://api.cmn.eniac.dev.cray.com/apis/consoledata/liveness - 204 PASS - [cray-console-node]: https://api.cmn.eniac.dev.cray.com/apis/console-node/console-node/liveness - 204 PASS - [cray-console-operator]: https://api.cmn.eniac.dev.cray.com/apis/console-operator/console-operator/liveness - 204 SKIP - [cray-cps]: https://api.cmn.eniac.dev.cray.com/apis/v2/cps/contents - virtual service not found PASS - [cray-fas]: https://api.cmn.eniac.dev.cray.com/apis/fas/v1/snapshots - 200 PASS - [cray-hbtd]: https://api.cmn.eniac.dev.cray.com/apis/hbtd/hmi/v1/health - 200 PASS - [cray-hmnfd]: https://api.cmn.eniac.dev.cray.com/apis/hmnfd/hmi/v2/health - 200 PASS - [cray-ims]: https://api.cmn.eniac.dev.cray.com/apis/ims/images - 200 PASS - [cray-powerdns-manager]: https://api.cmn.eniac.dev.cray.com/apis/powerdns-manager/v1/liveness - 204 PASS - [cray-reds]: https://api.cmn.eniac.dev.cray.com/apis/reds/v1/liveness - 204 PASS - [cray-scsd]: https://api.cmn.eniac.dev.cray.com/apis/scsd/v1/health - 200 PASS - [cray-sls]: https://api.cmn.eniac.dev.cray.com/apis/sls/v1/health - 200 PASS - [cray-smd]: https://api.cmn.eniac.dev.cray.com/apis/smd/hsm/v1/service/ready - 200 PASS - [cray-sts]: https://api.cmn.eniac.dev.cray.com/apis/sts/healthz - 200 PASS - [cray-uas-mgr]: https://api.cmn.eniac.dev.cray.com/apis/uas-mgr/v1/images - 200 SKIP - [nmdv2-service]: https://api.cmn.eniac.dev.cray.com/apis/v2/nmd/dumps - virtual service not found SKIP - [slingshot-fabric-manager]: https://api.cmn.eniac.dev.cray.com/apis/fabric-manager/fabric/port-policies - virtual service not found SKIP - [sma-telemetry]: https://api.cmn.eniac.dev.cray.com/apis/sma-telemetry-api/v1/ping - virtual service not found ------------- api.can.eniac.dev.cray.com ------------------- ping: api.can.eniac.dev.cray.com: Name or service not known api.can.eniac.dev.cray.com is NOT reachable can is not reachable and is not expected to be ------------- api.chn.eniac.dev.cray.com ------------------- api.chn.eniac.dev.cray.com is reachable PASS - [cray-bos]: https://api.chn.eniac.dev.cray.com/apis/bos/v1/session - 404 PASS - [cray-bss]: https://api.chn.eniac.dev.cray.com/apis/bss/boot/v1/bootparameters - 404 PASS - [cray-capmc]: https://api.chn.eniac.dev.cray.com/apis/capmc/capmc/get_node_rules - 404 PASS - [cray-cfs-api]: https://api.chn.eniac.dev.cray.com/apis/cfs/v2/sessions - 404 PASS - [cray-console-data]: https://api.chn.eniac.dev.cray.com/apis/consoledata/liveness - 404 PASS - [cray-console-node]: https://api.chn.eniac.dev.cray.com/apis/console-node/console-node/liveness - 404 PASS - [cray-console-operator]: https://api.chn.eniac.dev.cray.com/apis/console-operator/console-operator/liveness - 404 SKIP - [cray-cps]: https://api.chn.eniac.dev.cray.com/apis/v2/cps/contents - virtual service not found PASS - [cray-fas]: https://api.chn.eniac.dev.cray.com/apis/fas/v1/snapshots - 404 PASS - [cray-hbtd]: https://api.chn.eniac.dev.cray.com/apis/hbtd/hmi/v1/health - 404 PASS - [cray-hmnfd]: https://api.chn.eniac.dev.cray.com/apis/hmnfd/hmi/v2/health - 404 PASS - [cray-ims]: https://api.chn.eniac.dev.cray.com/apis/ims/images - 404 PASS - [cray-powerdns-manager]: https://api.chn.eniac.dev.cray.com/apis/powerdns-manager/v1/liveness - 404 PASS - [cray-reds]: https://api.chn.eniac.dev.cray.com/apis/reds/v1/liveness - 404 PASS - [cray-scsd]: https://api.chn.eniac.dev.cray.com/apis/scsd/v1/health - 404 PASS - [cray-sls]: https://api.chn.eniac.dev.cray.com/apis/sls/v1/health - 404 PASS - [cray-smd]: https://api.chn.eniac.dev.cray.com/apis/smd/hsm/v1/service/ready - 404 PASS - [cray-sts]: https://api.chn.eniac.dev.cray.com/apis/sts/healthz - 404 PASS - [cray-uas-mgr]: https://api.chn.eniac.dev.cray.com/apis/uas-mgr/v1/images - 404 SKIP - [nmdv2-service]: https://api.chn.eniac.dev.cray.com/apis/v2/nmd/dumps - virtual service not found SKIP - [slingshot-fabric-manager]: https://api.chn.eniac.dev.cray.com/apis/fabric-manager/fabric/port-policies - virtual service not found SKIP - [sma-telemetry]: https://api.chn.eniac.dev.cray.com/apis/sma-telemetry-api/v1/ping - virtual service not found Getting token for cmn auth.cmn.eniac.dev.cray.com is reachable Token successfully retrieved at https://auth.cmn.eniac.dev.cray.com/keycloak/realms/shasta/protocol/openid-connect/token ------------- api-gw-service-nmn.local ------------------- api-gw-service-nmn.local is reachable PASS - [cray-bos]: https://api-gw-service-nmn.local/apis/bos/v1/session - 200 PASS - [cray-bss]: https://api-gw-service-nmn.local/apis/bss/boot/v1/bootparameters - 200 PASS - [cray-capmc]: https://api-gw-service-nmn.local/apis/capmc/capmc/get_node_rules - 200 PASS - [cray-cfs-api]: https://api-gw-service-nmn.local/apis/cfs/v2/sessions - 200 PASS - [cray-console-data]: https://api-gw-service-nmn.local/apis/consoledata/liveness - 204 PASS - [cray-console-node]: https://api-gw-service-nmn.local/apis/console-node/console-node/liveness - 204 PASS - [cray-console-operator]: https://api-gw-service-nmn.local/apis/console-operator/console-operator/liveness - 204 SKIP - [cray-cps]: https://api-gw-service-nmn.local/apis/v2/cps/contents - virtual service not found PASS - [cray-fas]: https://api-gw-service-nmn.local/apis/fas/v1/snapshots - 200 PASS - [cray-hbtd]: https://api-gw-service-nmn.local/apis/hbtd/hmi/v1/health - 200 PASS - [cray-hmnfd]: https://api-gw-service-nmn.local/apis/hmnfd/hmi/v2/health - 200 PASS - [cray-ims]: https://api-gw-service-nmn.local/apis/ims/images - 200 PASS - [cray-powerdns-manager]: https://api-gw-service-nmn.local/apis/powerdns-manager/v1/liveness - 204 PASS - [cray-reds]: https://api-gw-service-nmn.local/apis/reds/v1/liveness - 204 PASS - [cray-scsd]: https://api-gw-service-nmn.local/apis/scsd/v1/health - 200 PASS - [cray-sls]: https://api-gw-service-nmn.local/apis/sls/v1/health - 200 PASS - [cray-smd]: https://api-gw-service-nmn.local/apis/smd/hsm/v1/service/ready - 200 PASS - [cray-sts]: https://api-gw-service-nmn.local/apis/sts/healthz - 200 PASS - [cray-uas-mgr]: https://api-gw-service-nmn.local/apis/uas-mgr/v1/images - 200 SKIP - [nmdv2-service]: https://api-gw-service-nmn.local/apis/v2/nmd/dumps - virtual service not found SKIP - [slingshot-fabric-manager]: https://api-gw-service-nmn.local/apis/fabric-manager/fabric/port-policies - virtual service not found SKIP - [sma-telemetry]: https://api-gw-service-nmn.local/apis/sma-telemetry-api/v1/ping - virtual service not found ------------- api.cmn.eniac.dev.cray.com ------------------- api.cmn.eniac.dev.cray.com is reachable PASS - [cray-bos]: https://api.cmn.eniac.dev.cray.com/apis/bos/v1/session - 200 PASS - [cray-bss]: https://api.cmn.eniac.dev.cray.com/apis/bss/boot/v1/bootparameters - 200 PASS - [cray-capmc]: https://api.cmn.eniac.dev.cray.com/apis/capmc/capmc/get_node_rules - 200 PASS - [cray-cfs-api]: https://api.cmn.eniac.dev.cray.com/apis/cfs/v2/sessions - 200 PASS - [cray-console-data]: https://api.cmn.eniac.dev.cray.com/apis/consoledata/liveness - 204 PASS - [cray-console-node]: https://api.cmn.eniac.dev.cray.com/apis/console-node/console-node/liveness - 204 PASS - [cray-console-operator]: https://api.cmn.eniac.dev.cray.com/apis/console-operator/console-operator/liveness - 204 SKIP - [cray-cps]: https://api.cmn.eniac.dev.cray.com/apis/v2/cps/contents - virtual service not found PASS - [cray-fas]: https://api.cmn.eniac.dev.cray.com/apis/fas/v1/snapshots - 200 PASS - [cray-hbtd]: https://api.cmn.eniac.dev.cray.com/apis/hbtd/hmi/v1/health - 200 PASS - [cray-hmnfd]: https://api.cmn.eniac.dev.cray.com/apis/hmnfd/hmi/v2/health - 200 PASS - [cray-ims]: https://api.cmn.eniac.dev.cray.com/apis/ims/images - 200 PASS - [cray-powerdns-manager]: https://api.cmn.eniac.dev.cray.com/apis/powerdns-manager/v1/liveness - 204 PASS - [cray-reds]: https://api.cmn.eniac.dev.cray.com/apis/reds/v1/liveness - 204 PASS - [cray-scsd]: https://api.cmn.eniac.dev.cray.com/apis/scsd/v1/health - 200 PASS - [cray-sls]: https://api.cmn.eniac.dev.cray.com/apis/sls/v1/health - 200 PASS - [cray-smd]: https://api.cmn.eniac.dev.cray.com/apis/smd/hsm/v1/service/ready - 200 PASS - [cray-sts]: https://api.cmn.eniac.dev.cray.com/apis/sts/healthz - 200 PASS - [cray-uas-mgr]: https://api.cmn.eniac.dev.cray.com/apis/uas-mgr/v1/images - 200 SKIP - [nmdv2-service]: https://api.cmn.eniac.dev.cray.com/apis/v2/nmd/dumps - virtual service not found SKIP - [slingshot-fabric-manager]: https://api.cmn.eniac.dev.cray.com/apis/fabric-manager/fabric/port-policies - virtual service not found SKIP - [sma-telemetry]: https://api.cmn.eniac.dev.cray.com/apis/sma-telemetry-api/v1/ping - virtual service not found ------------- api.can.eniac.dev.cray.com ------------------- ping: api.can.eniac.dev.cray.com: Name or service not known api.can.eniac.dev.cray.com is NOT reachable can is not reachable and is not expected to be ------------- api.chn.eniac.dev.cray.com ------------------- api.chn.eniac.dev.cray.com is reachable PASS - [cray-bos]: https://api.chn.eniac.dev.cray.com/apis/bos/v1/session - 404 PASS - [cray-bss]: https://api.chn.eniac.dev.cray.com/apis/bss/boot/v1/bootparameters - 404 PASS - [cray-capmc]: https://api.chn.eniac.dev.cray.com/apis/capmc/capmc/get_node_rules - 404 PASS - [cray-cfs-api]: https://api.chn.eniac.dev.cray.com/apis/cfs/v2/sessions - 404 PASS - [cray-console-data]: https://api.chn.eniac.dev.cray.com/apis/consoledata/liveness - 404 PASS - [cray-console-node]: https://api.chn.eniac.dev.cray.com/apis/console-node/console-node/liveness - 404 PASS - [cray-console-operator]: https://api.chn.eniac.dev.cray.com/apis/console-operator/console-operator/liveness - 404 SKIP - [cray-cps]: https://api.chn.eniac.dev.cray.com/apis/v2/cps/contents - virtual service not found PASS - [cray-fas]: https://api.chn.eniac.dev.cray.com/apis/fas/v1/snapshots - 404 PASS - [cray-hbtd]: https://api.chn.eniac.dev.cray.com/apis/hbtd/hmi/v1/health - 404 PASS - [cray-hmnfd]: https://api.chn.eniac.dev.cray.com/apis/hmnfd/hmi/v2/health - 404 PASS - [cray-ims]: https://api.chn.eniac.dev.cray.com/apis/ims/images - 404 PASS - [cray-powerdns-manager]: https://api.chn.eniac.dev.cray.com/apis/powerdns-manager/v1/liveness - 404 PASS - [cray-reds]: https://api.chn.eniac.dev.cray.com/apis/reds/v1/liveness - 404 PASS - [cray-scsd]: https://api.chn.eniac.dev.cray.com/apis/scsd/v1/health - 404 PASS - [cray-sls]: https://api.chn.eniac.dev.cray.com/apis/sls/v1/health - 404 PASS - [cray-smd]: https://api.chn.eniac.dev.cray.com/apis/smd/hsm/v1/service/ready - 404 PASS - [cray-sts]: https://api.chn.eniac.dev.cray.com/apis/sts/healthz - 404 PASS - [cray-uas-mgr]: https://api.chn.eniac.dev.cray.com/apis/uas-mgr/v1/images - 404 SKIP - [nmdv2-service]: https://api.chn.eniac.dev.cray.com/apis/v2/nmd/dumps - virtual service not found SKIP - [slingshot-fabric-manager]: https://api.chn.eniac.dev.cray.com/apis/fabric-manager/fabric/port-policies - virtual service not found SKIP - [sma-telemetry]: https://api.chn.eniac.dev.cray.com/apis/sma-telemetry-api/v1/ping - virtual service not found Getting token for can ping: auth.can.eniac.dev.cray.com: Name or service not known auth.can.eniac.dev.cray.com is NOT reachable Getting token for chn auth.chn.eniac.dev.cray.com is reachable Token successfully retrieved at https://auth.chn.eniac.dev.cray.com/keycloak/realms/shasta/protocol/openid-connect/token ------------- api-gw-service-nmn.local ------------------- api-gw-service-nmn.local is reachable PASS - [cray-bos]: https://api-gw-service-nmn.local/apis/bos/v1/session - 403 PASS - [cray-bss]: https://api-gw-service-nmn.local/apis/bss/boot/v1/bootparameters - 403 PASS - [cray-capmc]: https://api-gw-service-nmn.local/apis/capmc/capmc/get_node_rules - 403 PASS - [cray-cfs-api]: https://api-gw-service-nmn.local/apis/cfs/v2/sessions - 403 PASS - [cray-console-data]: https://api-gw-service-nmn.local/apis/consoledata/liveness - 403 PASS - [cray-console-node]: https://api-gw-service-nmn.local/apis/console-node/console-node/liveness - 403 PASS - [cray-console-operator]: https://api-gw-service-nmn.local/apis/console-operator/console-operator/liveness - 403 SKIP - [cray-cps]: https://api-gw-service-nmn.local/apis/v2/cps/contents - virtual service not found PASS - [cray-fas]: https://api-gw-service-nmn.local/apis/fas/v1/snapshots - 403 PASS - [cray-hbtd]: https://api-gw-service-nmn.local/apis/hbtd/hmi/v1/health - 403 PASS - [cray-hmnfd]: https://api-gw-service-nmn.local/apis/hmnfd/hmi/v2/health - 403 PASS - [cray-ims]: https://api-gw-service-nmn.local/apis/ims/images - 403 PASS - [cray-powerdns-manager]: https://api-gw-service-nmn.local/apis/powerdns-manager/v1/liveness - 403 PASS - [cray-reds]: https://api-gw-service-nmn.local/apis/reds/v1/liveness - 403 PASS - [cray-scsd]: https://api-gw-service-nmn.local/apis/scsd/v1/health - 403 PASS - [cray-sls]: https://api-gw-service-nmn.local/apis/sls/v1/health - 403 PASS - [cray-smd]: https://api-gw-service-nmn.local/apis/smd/hsm/v1/service/ready - 403 PASS - [cray-sts]: https://api-gw-service-nmn.local/apis/sts/healthz - 403 PASS - [cray-uas-mgr]: https://api-gw-service-nmn.local/apis/uas-mgr/v1/images - 403 SKIP - [nmdv2-service]: https://api-gw-service-nmn.local/apis/v2/nmd/dumps - virtual service not found SKIP - [slingshot-fabric-manager]: https://api-gw-service-nmn.local/apis/fabric-manager/fabric/port-policies - virtual service not found SKIP - [sma-telemetry]: https://api-gw-service-nmn.local/apis/sma-telemetry-api/v1/ping - virtual service not found ------------- api.cmn.eniac.dev.cray.com ------------------- api.cmn.eniac.dev.cray.com is reachable PASS - [cray-bos]: https://api.cmn.eniac.dev.cray.com/apis/bos/v1/session - 403 PASS - [cray-bss]: https://api.cmn.eniac.dev.cray.com/apis/bss/boot/v1/bootparameters - 403 PASS - [cray-capmc]: https://api.cmn.eniac.dev.cray.com/apis/capmc/capmc/get_node_rules - 403 PASS - [cray-cfs-api]: https://api.cmn.eniac.dev.cray.com/apis/cfs/v2/sessions - 403 PASS - [cray-console-data]: https://api.cmn.eniac.dev.cray.com/apis/consoledata/liveness - 403 PASS - [cray-console-node]: https://api.cmn.eniac.dev.cray.com/apis/console-node/console-node/liveness - 403 PASS - [cray-console-operator]: https://api.cmn.eniac.dev.cray.com/apis/console-operator/console-operator/liveness - 403 SKIP - [cray-cps]: https://api.cmn.eniac.dev.cray.com/apis/v2/cps/contents - virtual service not found PASS - [cray-fas]: https://api.cmn.eniac.dev.cray.com/apis/fas/v1/snapshots - 403 PASS - [cray-hbtd]: https://api.cmn.eniac.dev.cray.com/apis/hbtd/hmi/v1/health - 403 PASS - [cray-hmnfd]: https://api.cmn.eniac.dev.cray.com/apis/hmnfd/hmi/v2/health - 403 PASS - [cray-ims]: https://api.cmn.eniac.dev.cray.com/apis/ims/images - 403 PASS - [cray-powerdns-manager]: https://api.cmn.eniac.dev.cray.com/apis/powerdns-manager/v1/liveness - 403 PASS - [cray-reds]: https://api.cmn.eniac.dev.cray.com/apis/reds/v1/liveness - 403 PASS - [cray-scsd]: https://api.cmn.eniac.dev.cray.com/apis/scsd/v1/health - 403 PASS - [cray-sls]: https://api.cmn.eniac.dev.cray.com/apis/sls/v1/health - 403 PASS - [cray-smd]: https://api.cmn.eniac.dev.cray.com/apis/smd/hsm/v1/service/ready - 403 PASS - [cray-sts]: https://api.cmn.eniac.dev.cray.com/apis/sts/healthz - 403 PASS - [cray-uas-mgr]: https://api.cmn.eniac.dev.cray.com/apis/uas-mgr/v1/images - 403 SKIP - [nmdv2-service]: https://api.cmn.eniac.dev.cray.com/apis/v2/nmd/dumps - virtual service not found SKIP - [slingshot-fabric-manager]: https://api.cmn.eniac.dev.cray.com/apis/fabric-manager/fabric/port-policies - virtual service not found SKIP - [sma-telemetry]: https://api.cmn.eniac.dev.cray.com/apis/sma-telemetry-api/v1/ping - virtual service not found ------------- api.can.eniac.dev.cray.com ------------------- ping: api.can.eniac.dev.cray.com: Name or service not known api.can.eniac.dev.cray.com is NOT reachable can is not reachable and is not expected to be ------------- api.chn.eniac.dev.cray.com ------------------- api.chn.eniac.dev.cray.com is reachable PASS - [cray-bos]: https://api.chn.eniac.dev.cray.com/apis/bos/v1/session - 404 PASS - [cray-bss]: https://api.chn.eniac.dev.cray.com/apis/bss/boot/v1/bootparameters - 404 PASS - [cray-capmc]: https://api.chn.eniac.dev.cray.com/apis/capmc/capmc/get_node_rules - 404 PASS - [cray-cfs-api]: https://api.chn.eniac.dev.cray.com/apis/cfs/v2/sessions - 404 PASS - [cray-console-data]: https://api.chn.eniac.dev.cray.com/apis/consoledata/liveness - 404 PASS - [cray-console-node]: https://api.chn.eniac.dev.cray.com/apis/console-node/console-node/liveness - 404 PASS - [cray-console-operator]: https://api.chn.eniac.dev.cray.com/apis/console-operator/console-operator/liveness - 404 SKIP - [cray-cps]: https://api.chn.eniac.dev.cray.com/apis/v2/cps/contents - virtual service not found PASS - [cray-fas]: https://api.chn.eniac.dev.cray.com/apis/fas/v1/snapshots - 404 PASS - [cray-hbtd]: https://api.chn.eniac.dev.cray.com/apis/hbtd/hmi/v1/health - 404 PASS - [cray-hmnfd]: https://api.chn.eniac.dev.cray.com/apis/hmnfd/hmi/v2/health - 404 PASS - [cray-ims]: https://api.chn.eniac.dev.cray.com/apis/ims/images - 404 PASS - [cray-powerdns-manager]: https://api.chn.eniac.dev.cray.com/apis/powerdns-manager/v1/liveness - 404 PASS - [cray-reds]: https://api.chn.eniac.dev.cray.com/apis/reds/v1/liveness - 404 PASS - [cray-scsd]: https://api.chn.eniac.dev.cray.com/apis/scsd/v1/health - 404 PASS - [cray-sls]: https://api.chn.eniac.dev.cray.com/apis/sls/v1/health - 404 PASS - [cray-smd]: https://api.chn.eniac.dev.cray.com/apis/smd/hsm/v1/service/ready - 404 PASS - [cray-sts]: https://api.chn.eniac.dev.cray.com/apis/sts/healthz - 404 PASS - [cray-uas-mgr]: https://api.chn.eniac.dev.cray.com/apis/uas-mgr/v1/images - 404 SKIP - [nmdv2-service]: https://api.chn.eniac.dev.cray.com/apis/v2/nmd/dumps - virtual service not found SKIP - [slingshot-fabric-manager]: https://api.chn.eniac.dev.cray.com/apis/fabric-manager/fabric/port-policies - virtual service not found SKIP - [sma-telemetry]: https://api.chn.eniac.dev.cray.com/apis/sma-telemetry-api/v1/ping - virtual service not found Overall Gateway Test Status: PASS Running from a UAI ncn-m001# ./uai-gateway-test.sh Creating Gateway Test UAI with image artifactory.algol60.net/csm-docker/stable/cray-gateway_test:1.4.0-20220418215843_786bfac Waiting for uai-vers-733eea45 to be ready status = Running: Not Ready status = Running: Ready System domain is eniac.dev.cray.com User Network on eniac is chn Got admin client secret Running gateway tests on the UAI...(this may take 1-2 minutes) Getting token for nmnlb api-gw-service-nmn.local is NOT reachable Getting token for cmn auth.cmn.eniac.dev.cray.com is NOT reachable Getting token for can auth.can.eniac.dev.cray.com is reachable Token successfully retrieved at https://auth.can.eniac.dev.cray.com/keycloak/realms/shasta/protocol/openid-connect/token ------------- api-gw-service-nmn.local ------------------- api-gw-service-nmn.local is NOT reachable nmnlb is not reachable and is not expected to be ------------- api.cmn.eniac.dev.cray.com ------------------- api.cmn.eniac.dev.cray.com is NOT reachable cmn is not reachable and is not expected to be ------------- api.can.eniac.dev.cray.com ------------------- api.can.eniac.dev.cray.com is reachable PASS - [cray-bos]: https://api.can.eniac.dev.cray.com/apis/bos/v1/session - 404 PASS - [cray-bss]: https://api.can.eniac.dev.cray.com/apis/bss/boot/v1/bootparameters - 404 PASS - [cray-capmc]: https://api.can.eniac.dev.cray.com/apis/capmc/capmc/get_node_rules - 404 PASS - [cray-cfs-api]: https://api.can.eniac.dev.cray.com/apis/cfs/v2/sessions - 404 PASS - [cray-console-data]: https://api.can.eniac.dev.cray.com/apis/consoledata/liveness - 404 PASS - [cray-console-node]: https://api.can.eniac.dev.cray.com/apis/console-node/console-node/liveness - 404 PASS - [cray-console-operator]: https://api.can.eniac.dev.cray.com/apis/console-operator/console-operator/liveness - 404 SKIP - [cray-cps]: https://api.can.eniac.dev.cray.com/apis/v2/cps/contents PASS - [cray-fas]: https://api.can.eniac.dev.cray.com/apis/fas/v1/snapshots - 404 PASS - [cray-hbtd]: https://api.can.eniac.dev.cray.com/apis/hbtd/hmi/v1/health - 404 PASS - [cray-hmnfd]: https://api.can.eniac.dev.cray.com/apis/hmnfd/hmi/v2/health - 404 PASS - [cray-ims]: https://api.can.eniac.dev.cray.com/apis/ims/images - 404 PASS - [cray-powerdns-manager]: https://api.can.eniac.dev.cray.com/apis/powerdns-manager/v1/liveness - 404 PASS - [cray-reds]: https://api.can.eniac.dev.cray.com/apis/reds/v1/liveness - 404 PASS - [cray-scsd]: https://api.can.eniac.dev.cray.com/apis/scsd/v1/health - 404 PASS - [cray-sls]: https://api.can.eniac.dev.cray.com/apis/sls/v1/health - 404 PASS - [cray-smd]: https://api.can.eniac.dev.cray.com/apis/smd/hsm/v1/service/ready - 404 PASS - [cray-sts]: https://api.can.eniac.dev.cray.com/apis/sts/healthz - 404 PASS - [cray-uas-mgr]: https://api.can.eniac.dev.cray.com/apis/uas-mgr/v1/images - 404 SKIP - [nmdv2-service]: https://api.can.eniac.dev.cray.com/apis/v2/nmd/dumps SKIP - [slingshot-fabric-manager]: https://api.can.eniac.dev.cray.com/apis/fabric-manager/fabric/port-policies SKIP - [sma-telemetry]: https://api.can.eniac.dev.cray.com/apis/sma-telemetry-api/v1/ping ------------- api.chn.eniac.dev.cray.com ------------------- api.chn.eniac.dev.cray.com is reachable PASS - [cray-bos]: https://api.chn.eniac.dev.cray.com/apis/bos/v1/session - 404 PASS - [cray-bss]: https://api.chn.eniac.dev.cray.com/apis/bss/boot/v1/bootparameters - 404 PASS - [cray-capmc]: https://api.chn.eniac.dev.cray.com/apis/capmc/capmc/get_node_rules - 404 PASS - [cray-cfs-api]: https://api.chn.eniac.dev.cray.com/apis/cfs/v2/sessions - 404 PASS - [cray-console-data]: https://api.chn.eniac.dev.cray.com/apis/consoledata/liveness - 404 PASS - [cray-console-node]: https://api.chn.eniac.dev.cray.com/apis/console-node/console-node/liveness - 404 PASS - [cray-console-operator]: https://api.chn.eniac.dev.cray.com/apis/console-operator/console-operator/liveness - 404 SKIP - [cray-cps]: https://api.chn.eniac.dev.cray.com/apis/v2/cps/contents PASS - [cray-fas]: https://api.chn.eniac.dev.cray.com/apis/fas/v1/snapshots - 404 PASS - [cray-hbtd]: https://api.chn.eniac.dev.cray.com/apis/hbtd/hmi/v1/health - 404 PASS - [cray-hmnfd]: https://api.chn.eniac.dev.cray.com/apis/hmnfd/hmi/v2/health - 404 PASS - [cray-ims]: https://api.chn.eniac.dev.cray.com/apis/ims/images - 404 PASS - [cray-powerdns-manager]: https://api.chn.eniac.dev.cray.com/apis/powerdns-manager/v1/liveness - 404 PASS - [cray-reds]: https://api.chn.eniac.dev.cray.com/apis/reds/v1/liveness - 404 PASS - [cray-scsd]: https://api.chn.eniac.dev.cray.com/apis/scsd/v1/health - 404 PASS - [cray-sls]: https://api.chn.eniac.dev.cray.com/apis/sls/v1/health - 404 PASS - [cray-smd]: https://api.chn.eniac.dev.cray.com/apis/smd/hsm/v1/service/ready - 404 PASS - [cray-sts]: https://api.chn.eniac.dev.cray.com/apis/sts/healthz - 404 PASS - [cray-uas-mgr]: https://api.chn.eniac.dev.cray.com/apis/uas-mgr/v1/images - 404 SKIP - [nmdv2-service]: https://api.chn.eniac.dev.cray.com/apis/v2/nmd/dumps SKIP - [slingshot-fabric-manager]: https://api.chn.eniac.dev.cray.com/apis/fabric-manager/fabric/port-policies SKIP - [sma-telemetry]: https://api.chn.eniac.dev.cray.com/apis/sma-telemetry-api/v1/ping Getting token for chn auth.chn.eniac.dev.cray.com is reachable Token successfully retrieved at https://auth.chn.eniac.dev.cray.com/keycloak/realms/shasta/protocol/openid-connect/token ------------- api-gw-service-nmn.local ------------------- api-gw-service-nmn.local is NOT reachable nmnlb is not reachable and is not expected to be ------------- api.cmn.eniac.dev.cray.com ------------------- api.cmn.eniac.dev.cray.com is NOT reachable cmn is not reachable and is not expected to be ------------- api.can.eniac.dev.cray.com ------------------- api.can.eniac.dev.cray.com is reachable PASS - [cray-bos]: https://api.can.eniac.dev.cray.com/apis/bos/v1/session - 404 PASS - [cray-bss]: https://api.can.eniac.dev.cray.com/apis/bss/boot/v1/bootparameters - 404 PASS - [cray-capmc]: https://api.can.eniac.dev.cray.com/apis/capmc/capmc/get_node_rules - 404 PASS - [cray-cfs-api]: https://api.can.eniac.dev.cray.com/apis/cfs/v2/sessions - 404 PASS - [cray-console-data]: https://api.can.eniac.dev.cray.com/apis/consoledata/liveness - 404 PASS - [cray-console-node]: https://api.can.eniac.dev.cray.com/apis/console-node/console-node/liveness - 404 PASS - [cray-console-operator]: https://api.can.eniac.dev.cray.com/apis/console-operator/console-operator/liveness - 404 SKIP - [cray-cps]: https://api.can.eniac.dev.cray.com/apis/v2/cps/contents PASS - [cray-fas]: https://api.can.eniac.dev.cray.com/apis/fas/v1/snapshots - 404 PASS - [cray-hbtd]: https://api.can.eniac.dev.cray.com/apis/hbtd/hmi/v1/health - 404 PASS - [cray-hmnfd]: https://api.can.eniac.dev.cray.com/apis/hmnfd/hmi/v2/health - 404 PASS - [cray-ims]: https://api.can.eniac.dev.cray.com/apis/ims/images - 404 PASS - [cray-powerdns-manager]: https://api.can.eniac.dev.cray.com/apis/powerdns-manager/v1/liveness - 404 PASS - [cray-reds]: https://api.can.eniac.dev.cray.com/apis/reds/v1/liveness - 404 PASS - [cray-scsd]: https://api.can.eniac.dev.cray.com/apis/scsd/v1/health - 404 PASS - [cray-sls]: https://api.can.eniac.dev.cray.com/apis/sls/v1/health - 404 PASS - [cray-smd]: https://api.can.eniac.dev.cray.com/apis/smd/hsm/v1/service/ready - 404 PASS - [cray-sts]: https://api.can.eniac.dev.cray.com/apis/sts/healthz - 404 PASS - [cray-uas-mgr]: https://api.can.eniac.dev.cray.com/apis/uas-mgr/v1/images - 404 SKIP - [nmdv2-service]: https://api.can.eniac.dev.cray.com/apis/v2/nmd/dumps SKIP - [slingshot-fabric-manager]: https://api.can.eniac.dev.cray.com/apis/fabric-manager/fabric/port-policies SKIP - [sma-telemetry]: https://api.can.eniac.dev.cray.com/apis/sma-telemetry-api/v1/ping ------------- api.chn.eniac.dev.cray.com ------------------- api.chn.eniac.dev.cray.com is reachable PASS - [cray-bos]: https://api.chn.eniac.dev.cray.com/apis/bos/v1/session - 404 PASS - [cray-bss]: https://api.chn.eniac.dev.cray.com/apis/bss/boot/v1/bootparameters - 404 PASS - [cray-capmc]: https://api.chn.eniac.dev.cray.com/apis/capmc/capmc/get_node_rules - 404 PASS - [cray-cfs-api]: https://api.chn.eniac.dev.cray.com/apis/cfs/v2/sessions - 404 PASS - [cray-console-data]: https://api.chn.eniac.dev.cray.com/apis/consoledata/liveness - 404 PASS - [cray-console-node]: https://api.chn.eniac.dev.cray.com/apis/console-node/console-node/liveness - 404 PASS - [cray-console-operator]: https://api.chn.eniac.dev.cray.com/apis/console-operator/console-operator/liveness - 404 SKIP - [cray-cps]: https://api.chn.eniac.dev.cray.com/apis/v2/cps/contents PASS - [cray-fas]: https://api.chn.eniac.dev.cray.com/apis/fas/v1/snapshots - 404 PASS - [cray-hbtd]: https://api.chn.eniac.dev.cray.com/apis/hbtd/hmi/v1/health - 404 PASS - [cray-hmnfd]: https://api.chn.eniac.dev.cray.com/apis/hmnfd/hmi/v2/health - 404 PASS - [cray-ims]: https://api.chn.eniac.dev.cray.com/apis/ims/images - 404 PASS - [cray-powerdns-manager]: https://api.chn.eniac.dev.cray.com/apis/powerdns-manager/v1/liveness - 404 PASS - [cray-reds]: https://api.chn.eniac.dev.cray.com/apis/reds/v1/liveness - 404 PASS - [cray-scsd]: https://api.chn.eniac.dev.cray.com/apis/scsd/v1/health - 404 PASS - [cray-sls]: https://api.chn.eniac.dev.cray.com/apis/sls/v1/health - 404 PASS - [cray-smd]: https://api.chn.eniac.dev.cray.com/apis/smd/hsm/v1/service/ready - 404 PASS - [cray-sts]: https://api.chn.eniac.dev.cray.com/apis/sts/healthz - 404 PASS - [cray-uas-mgr]: https://api.chn.eniac.dev.cray.com/apis/uas-mgr/v1/images - 404 SKIP - [nmdv2-service]: https://api.chn.eniac.dev.cray.com/apis/v2/nmd/dumps SKIP - [slingshot-fabric-manager]: https://api.chn.eniac.dev.cray.com/apis/fabric-manager/fabric/port-policies SKIP - [sma-telemetry]: https://api.chn.eniac.dev.cray.com/apis/sma-telemetry-api/v1/ping Overall Gateway Test Status: PASS Deleting UAI uai-vers-733eea45 results = [ \u0026#34;Successfully deleted uai-vers-733eea45\u0026#34;,] "
},
{
	"uri": "/docs-csm/en-12/operations/network/management_network/1.0_to_1.2_upgrade/",
	"title": "Management Network 1.0 (1.2 Preconfig) To 1.2",
	"tags": [],
	"description": "",
	"content": "Management Network 1.0 (1.2 Preconfig) to 1.2  Prerequisites Mellanox  Mellanox Manual Configuration   Dell  Dell Manual Configuration   Aruba Spine  Aruba Manual Configuration   Aruba Leaf and Leaf BMC  Prerequisites  System is already running with CANU-generated 1.0 configurations (1.2 Preconfig). Generated switch configurations for 1.2.  Generate Switch Configurations   CANU installed with version 1.1.11 or greater.  Run canu --version to see version. If doing a CSM install or upgrade, a CANU RPM is located in the release tarball. For more information, see Update CANU From CSM Tarball    Be sure that the current connection to the system is not through the Spine switches.\nIf it is, then performing this upgrade will cause the connection to the system to be lost.\nCheck the default route from the NCN that has the site connection.\nncn-m001# ip r default via 10.102.3.1 dev vlan007 If the default route is out through the site connection, then skip the rest of the procedure. A default route going out through the site connection looks similar to the following:\ndefault via 172.30.48.1 dev lan0 If the default route is through dev vlan007 or the CAN VLAN, this needs to change in order to prevent the connection loss when moving this VLAN to the Customer VRF on the switches.\nIn this example the site connection is on lan0\nncn-m001# ip a show lan0 29: lan0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP group default qlen 1000 link/ether b4:2e:99:3a:26:08 brd ff:ff:ff:ff:ff:ff inet 172.30.52.183/20 brd 172.30.63.255 scope global lan0 valid_lft forever preferred_lft forever inet6 fe80::b62e:99ff:fe3a:2608/64 scope link valid_lft forever preferred_lft forever The default route needs to replaced to route out lan0 Replace the default route with the correct next-hop router for this network.\nncn-m001# ip route replace default via 172.30.48.1 Mellanox Use CANU Validate to see the differences between the 1.0 and 1.2 switch configurations.\nncn-m001# canu validate switch config --running ./1.0/sw-spine-002.cfg --generated ./1.2/sw-spine-002.cfg --vendor mellanox --remediation Output\n- vlan 7 name \u0026#34;CAN\u0026#34; - route-map ncn-w003 permit 10 match ip address pl-can - route-map ncn-w002 permit 10 match ip address pl-can - route-map ncn-w001 permit 10 match ip address pl-can - ip prefix-list pl-can seq 10 permit 10.102.3.0 /25 ge 25 - ip prefix-list pl-can - interface vlan 7 ip dhcp relay instance 2 downstream - interface vlan 7 ip address 10.102.3.3/25 primary - interface vlan 7 - banner motd \u0026#34; ############################################################################### # CSM version: 1.0 # CANU version: 1.1.11 ############################################################################### \u0026#34; + vrf definition Customer rd 7:7 + vrf definition Customer + vlan 7 name \u0026#34;CMN\u0026#34; + vlan 6 name \u0026#34;CAN\u0026#34; + vlan 6 + router ospf 2 vrf Customer router-id 10.2.0.3 + router ospf 2 vrf Customer default-information originate + router ospf 2 vrf Customer + router bgp 65533 vrf Customer router-id 10.2.0.3 force + router bgp 65533 vrf Customer neighbor 10.102.3.9 transport connection-mode passive + router bgp 65533 vrf Customer neighbor 10.102.3.9 timers 1 3 + router bgp 65533 vrf Customer neighbor 10.102.3.9 remote-as 65534 + router bgp 65533 vrf Customer neighbor 10.102.3.8 transport connection-mode passive + router bgp 65533 vrf Customer neighbor 10.102.3.8 timers 1 3 + router bgp 65533 vrf Customer neighbor 10.102.3.8 remote-as 65534 + router bgp 65533 vrf Customer neighbor 10.102.3.10 transport connection-mode passive + router bgp 65533 vrf Customer neighbor 10.102.3.10 timers 1 3 + router bgp 65533 vrf Customer neighbor 10.102.3.10 remote-as 65534 + router bgp 65533 vrf Customer maximum-paths ibgp 32 + router bgp 65533 vrf Customer maximum-paths 32 + router bgp 65533 vrf Customer distance 20 70 20 + router bgp 65533 vrf Customer + route-map ncn-w003 permit 10 match ip address pl-cmn + route-map ncn-w002 permit 10 match ip address pl-cmn + route-map ncn-w001 permit 10 match ip address pl-cmn + ipv4 access-list cmn-can seq-number 30 permit ip any any + ipv4 access-list cmn-can seq-number 20 deny ip 10.102.3.128 mask 255.255.255.192 10.102.3.0 mask 255.255.255.128 + ipv4 access-list cmn-can seq-number 10 deny ip 10.102.3.0 mask 255.255.255.128 10.102.3.128 mask 255.255.255.192 + ipv4 access-list cmn-can bind-point rif + ipv4 access-list cmn-can + ip routing vrf Customer + ip prefix-list pl-cmn seq 10 permit 10.102.3.0 /25 ge 25 + ip prefix-list pl-cmn + interface vlan 7 vrf forwarding Customer + interface vlan 7 ipv4 port access-group cmn-can + interface vlan 7 ip ospf area 0.0.0.0 + interface vlan 7 ip address 10.102.3.99/25 primary + interface vlan 6 vrf forwarding Customer + interface vlan 6 mtu 9184 + interface vlan 6 magp 5 ip virtual-router mac-address 00:00:5E:00:01:05 + interface vlan 6 magp 5 ip virtual-router address 10.102.3.129 + interface vlan 6 magp 5 + interface vlan 6 ipv4 port access-group cmn-can + interface vlan 6 ip address 10.102.3.131/26 primary + interface mlag-port-channel 9 switchport hybrid allowed-vlan add 6 + interface mlag-port-channel 8 switchport hybrid allowed-vlan add 6 + interface mlag-port-channel 7 switchport hybrid allowed-vlan add 6 + interface mlag-port-channel 6 switchport hybrid allowed-vlan add 6 + interface mlag-port-channel 5 switchport hybrid allowed-vlan add 6 + interface mlag-port-channel 4 switchport hybrid allowed-vlan add 6 + interface mlag-port-channel 3 switchport hybrid allowed-vlan add 6 + interface mlag-port-channel 2 switchport hybrid allowed-vlan add 6 + interface mlag-port-channel 151 switchport hybrid allowed-vlan add 7 + interface mlag-port-channel 10 switchport hybrid allowed-vlan add 7 + interface mlag-port-channel 1 switchport hybrid allowed-vlan add 6 + banner motd \u0026#34; ############################################################################### # CSM version: 1.2 # CANU version: 1.1.11 ############################################################################### \u0026#34; ------------------------------------------------------------------------- Config differences between running config and generated config lines that start with a minus \u0026#34;-\u0026#34; and RED: Config that is present in running config but not in generated config lines that start with a plus \u0026#34;+\u0026#34; and GREEN: Config that is present in generated config but not in running config. ------------------------------------------------------------------------- Remediation Config ------------------------------------------------------------------------- banner motd \u0026#34; ############################################################################### # CSM version: 1.2 # CANU version: 1.1.11 ############################################################################### \u0026#34; vlan 6 vlan 7 name \u0026#34;CMN\u0026#34; vlan 6 name \u0026#34;CAN\u0026#34; interface mlag-port-channel 1 switchport hybrid allowed-vlan add 6 interface mlag-port-channel 2 switchport hybrid allowed-vlan add 6 interface mlag-port-channel 3 switchport hybrid allowed-vlan add 6 interface mlag-port-channel 4 switchport hybrid allowed-vlan add 6 interface mlag-port-channel 5 switchport hybrid allowed-vlan add 6 interface mlag-port-channel 6 switchport hybrid allowed-vlan add 6 interface mlag-port-channel 7 switchport hybrid allowed-vlan add 6 interface mlag-port-channel 8 switchport hybrid allowed-vlan add 6 interface mlag-port-channel 9 switchport hybrid allowed-vlan add 6 interface mlag-port-channel 10 switchport hybrid allowed-vlan add 7 interface mlag-port-channel 151 switchport hybrid allowed-vlan add 7 vrf definition Customer vrf definition Customer rd 7:7 ip routing vrf Customer interface vlan 7 vrf forwarding Customer interface vlan 6 vrf forwarding Customer interface vlan 7 ip address 10.102.3.99/25 primary interface vlan 6 ip address 10.102.3.131/26 primary no interface vlan 6 ip icmp redirect interface vlan 6 mtu 9184 ipv4 access-list cmn-can ipv4 access-list cmn-can bind-point rif ipv4 access-list cmn-can seq-number 10 deny ip 10.102.3.0 mask 255.255.255.128 10.102.3.128 mask 255.255.255.192 ipv4 access-list cmn-can seq-number 20 deny ip 10.102.3.128 mask 255.255.255.192 10.102.3.0 mask 255.255.255.128 ipv4 access-list cmn-can seq-number 30 permit ip any any interface vlan 7 ipv4 port access-group cmn-can interface vlan 6 ipv4 port access-group cmn-can router ospf 2 vrf Customer router ospf 2 vrf Customer router-id 10.2.0.3 router ospf 2 vrf Customer default-information originate interface vlan 7 ip ospf area 0.0.0.0 interface vlan 6 magp 5 interface vlan 6 magp 5 ip virtual-router address 10.102.3.129 interface vlan 6 magp 5 ip virtual-router mac-address 00:00:5E:00:01:05 ip prefix-list pl-cmn ip prefix-list pl-cmn seq 10 permit 10.102.3.0 /25 ge 25 route-map ncn-w001 permit 10 match ip address pl-cmn route-map ncn-w002 permit 10 match ip address pl-cmn route-map ncn-w003 permit 10 match ip address pl-cmn router bgp 65533 vrf Customer router bgp 65533 vrf Customer router-id 10.2.0.3 force router bgp 65533 vrf Customer distance 20 70 20 router bgp 65533 vrf Customer maximum-paths ibgp 32 router bgp 65533 vrf Customer maximum-paths 32 router bgp 65533 vrf Customer neighbor 10.102.3.8 remote-as 65534 router bgp 65533 vrf Customer neighbor 10.102.3.9 remote-as 65534 router bgp 65533 vrf Customer neighbor 10.102.3.10 remote-as 65534 router bgp 65533 vrf Customer neighbor 10.102.3.8 timers 1 3 router bgp 65533 vrf Customer neighbor 10.102.3.9 timers 1 3 router bgp 65533 vrf Customer neighbor 10.102.3.10 timers 1 3 router bgp 65533 vrf Customer neighbor 10.102.3.8 transport connection-mode passive router bgp 65533 vrf Customer neighbor 10.102.3.9 transport connection-mode passive router bgp 65533 vrf Customer neighbor 10.102.3.10 transport connection-mode passive  Take a close look at the output of this, make sure that all the changes are understood. Copy the remediation configuration into the terminal.  sw-spine-002 [mlag-domain: master] (config) # banner motd \u0026#34; \u0026gt; ############################################################################### \u0026gt; # CSM version: 1.2 \u0026gt; # CANU version: 1.1.11 \u0026gt; ############################################################################### \u0026gt; \u0026#34; sw-spine-002 [mlag-domain: master] (config) # vlan 6 sw-spine-002 [mlag-domain: master] (config) # vlan 7 name \u0026#34;CMN\u0026#34; sw-spine-002 [mlag-domain: master] (config) # vlan 6 name \u0026#34;CAN\u0026#34; sw-spine-002 [mlag-domain: master] (config) # interface mlag-port-channel 1 switchport hybrid allowed-vlan add 6 sw-spine-002 [mlag-domain: master] (config) # interface mlag-port-channel 2 switchport hybrid allowed-vlan add 6 sw-spine-002 [mlag-domain: master] (config) # interface mlag-port-channel 3 switchport hybrid allowed-vlan add 6 sw-spine-002 [mlag-domain: master] (config) # interface mlag-port-channel 4 switchport hybrid allowed-vlan add 6 sw-spine-002 [mlag-domain: master] (config) # interface mlag-port-channel 5 switchport hybrid allowed-vlan add 6 sw-spine-002 [mlag-domain: master] (config) # interface mlag-port-channel 6 switchport hybrid allowed-vlan add 6 sw-spine-002 [mlag-domain: master] (config) # interface mlag-port-channel 7 switchport hybrid allowed-vlan add 6 sw-spine-002 [mlag-domain: master] (config) # interface mlag-port-channel 8 switchport hybrid allowed-vlan add 6 sw-spine-002 [mlag-domain: master] (config) # interface mlag-port-channel 9 switchport hybrid allowed-vlan add 6 sw-spine-002 [mlag-domain: master] (config) # interface mlag-port-channel 10 switchport hybrid allowed-vlan add 7 sw-spine-002 [mlag-domain: master] (config) # interface mlag-port-channel 151 switchport hybrid allowed-vlan add 7 sw-spine-002 [mlag-domain: master] (config) # vrf definition Customer sw-spine-002 [mlag-domain: master] (config) # vrf definition Customer rd 7:7 sw-spine-002 [mlag-domain: master] (config) # ip routing vrf Customer sw-spine-002 [mlag-domain: master] (config) # interface vlan 7 vrf forwarding Customer sw-spine-002 [mlag-domain: master] (config) # interface vlan 6 vrf forwarding Customer sw-spine-002 [mlag-domain: master] (config) # interface vlan 7 ip address 10.102.3.99/25 primary sw-spine-002 [mlag-domain: master] (config) # interface vlan 6 ip address 10.102.3.131/26 primary sw-spine-002 [mlag-domain: master] (config) # no interface vlan 6 ip icmp redirect sw-spine-002 [mlag-domain: master] (config) # interface vlan 6 mtu 9184 sw-spine-002 [mlag-domain: master] (config) # ipv4 access-list cmn-can sw-spine-002 [mlag-domain: master] (config) # ipv4 access-list cmn-can bind-point rif sw-spine-002 [mlag-domain: master] (config) # ipv4 access-list cmn-can seq-number 10 deny ip 10.102.3.0 mask 255.255.255.128 10.102.3.128 mask 255.255.255.192 sw-spine-002 [mlag-domain: master] (config) # ipv4 access-list cmn-can seq-number 20 deny ip 10.102.3.128 mask 255.255.255.192 10.102.3.0 mask 255.255.255.128 sw-spine-002 [mlag-domain: master] (config) # ipv4 access-list cmn-can seq-number 30 permit ip any any sw-spine-002 [mlag-domain: master] (config) # interface vlan 7 ipv4 port access-group cmn-can sw-spine-002 [mlag-domain: master] (config) # interface vlan 6 ipv4 port access-group cmn-can sw-spine-002 [mlag-domain: master] (config) # router ospf 2 vrf Customer sw-spine-002 [mlag-domain: master] (config) # router ospf 2 vrf Customer router-id 10.2.0.3 sw-spine-002 [mlag-domain: master] (config) # router ospf 2 vrf Customer default-information originate sw-spine-002 [mlag-domain: master] (config) # interface vlan 7 ip ospf area 0.0.0.0 sw-spine-002 [mlag-domain: master] (config) # interface vlan 6 magp 5 sw-spine-002 [mlag-domain: master] (config) # interface vlan 6 magp 5 ip virtual-router address 10.102.3.129 sw-spine-002 [mlag-domain: master] (config) # interface vlan 6 magp 5 ip virtual-router mac-address 00:00:5E:00:01:05 sw-spine-002 [mlag-domain: master] (config) # ip prefix-list pl-cmn sw-spine-002 [mlag-domain: master] (config) # ip prefix-list pl-cmn seq 10 permit 10.102.3.0 /25 ge 25 sw-spine-002 [mlag-domain: master] (config) # route-map ncn-w001 permit 10 match ip address pl-cmn sw-spine-002 [mlag-domain: master] (config) # route-map ncn-w002 permit 10 match ip address pl-cmn sw-spine-002 [mlag-domain: master] (config) # route-map ncn-w003 permit 10 match ip address pl-cmn sw-spine-002 [mlag-domain: master] (config) # router bgp 65533 vrf Customer sw-spine-002 [mlag-domain: master] (config) # router bgp 65533 vrf Customer router-id 10.2.0.3 force sw-spine-002 [mlag-domain: master] (config) # router bgp 65533 vrf Customer distance 20 70 20 sw-spine-002 [mlag-domain: master] (config) # router bgp 65533 vrf Customer maximum-paths ibgp 32 sw-spine-002 [mlag-domain: master] (config) # router bgp 65533 vrf Customer maximum-paths 32 sw-spine-002 [mlag-domain: master] (config) # router bgp 65533 vrf Customer neighbor 10.102.3.8 remote-as 65534 sw-spine-002 [mlag-domain: master] (config) # router bgp 65533 vrf Customer neighbor 10.102.3.9 remote-as 65534 sw-spine-002 [mlag-domain: master] (config) # router bgp 65533 vrf Customer neighbor 10.102.3.10 remote-as 65534 sw-spine-002 [mlag-domain: master] (config) # router bgp 65533 vrf Customer neighbor 10.102.3.8 timers 1 3 sw-spine-002 [mlag-domain: master] (config) # router bgp 65533 vrf Customer neighbor 10.102.3.9 timers 1 3 sw-spine-002 [mlag-domain: master] (config) # router bgp 65533 vrf Customer neighbor 10.102.3.10 timers 1 3 sw-spine-002 [mlag-domain: master] (config) # router bgp 65533 vrf Customer neighbor 10.102.3.8 transport connection-mode passive sw-spine-002 [mlag-domain: master] (config) # router bgp 65533 vrf Customer neighbor 10.102.3.9 transport connection-mode passive sw-spine-002 [mlag-domain: master] (config) # router bgp 65533 vrf Customer neighbor 10.102.3.10 transport connection-mode passive This should copy into the terminal without any errors, if there are errors stop here and make sure that the generated configuration gets applied correctly.\nMellanox Manual Configuration  Because we add the vlan7 interface to the Customer VRF, it removes all previous configuration. This will need to be fixed.  ncn-m001# cat sw-spine-002.cfg| grep \u0026quot;interface vlan 7\u0026quot; interface vlan 7 vrf forwarding Customer interface vlan 7 ip address 10.102.4.51/25 primary no interface vlan 7 ip icmp redirect interface vlan 7 mtu 9184 interface vlan 7 ipv4 port access-group cmn-can interface vlan 7 ip ospf area 0.0.0.0 interface vlan 7 magp 4 interface vlan 7 magp 4 ip virtual-router address 10.102.4.1 interface vlan 7 magp 4 ip virtual-router mac-address 00:00:5E:00:01:04 sw-spine-002 [mlag-domain: master] (config) # interface vlan 7 vrf forwarding Customer sw-spine-002 [mlag-domain: master] (config) # interface vlan 7 ip address 10.102.4.51/25 primary sw-spine-002 [mlag-domain: master] (config) # no interface vlan 7 ip icmp redirect sw-spine-002 [mlag-domain: master] (config) # interface vlan 7 mtu 9184 sw-spine-002 [mlag-domain: master] (config) # interface vlan 7 ipv4 port access-group cmn-can sw-spine-002 [mlag-domain: master] (config) # interface vlan 7 ip ospf area 0.0.0.0 sw-spine-002 [mlag-domain: master] (config) # interface vlan 7 magp 4 sw-spine-002 [mlag-domain: master] (config) # interface vlan 7 magp 4 ip virtual-router address 10.102.4.1 sw-spine-002 [mlag-domain: master] (config) # interface vlan 7 magp 4 ip virtual-router mac-address 00:00:5E:00:01:04 Add site connections to Customer VRF.\n The site connections are found in the SHCD.  CAN switch cfcanb6s1 - 31 sw-25g01 x3000 u39 - j16 CAN switch cfcanb6s1 - 46 sw-25g02 x3000 u40 - j16 This example has the site connections on port 16 on both spine switches.\n Get the current configuration from port 16 on both switches. This needs to be done on both Spine switches.  sw-spine-001 [mlag-domain: master] # show run int ethernet 1/16 interface ethernet 1/16 speed 10G force interface ethernet 1/16 mtu 1500 force interface ethernet 1/16 no switchport force interface ethernet 1/16 ip address 10.102.255.10/30 primary  Attach the interface to the Customer VRF. The IP address will need to be added back, because that configuration is wiped when a VRF gets attached to an interface.  sw-spine-001 [mlag-domain: master] (config) # int ethernet 1/16 vrf forwarding Customer sw-spine-001 [mlag-domain: master] (config) # interface ethernet 1/16 ip address 10.102.255.10/30 primary  Add the default route to the Customer VRF and delete the old one.  sw-spine-001 [mlag-domain: master] (config) # show run | include \u0026#34;ip route\u0026#34; ip route vrf default 0.0.0.0/0 10.102.255.9 sw-spine-001 [mlag-domain: master] (config) # no ip route vrf default 0.0.0.0/0 sw-spine-001 [mlag-domain: master] (config) # ip route vrf Customer 0.0.0.0/0 10.102.255.9  Save this configuration to a new configuration file with the CSM and CANU versions.  sw-spine-001 [mlag-domain: master] (config) # show banner Banners: Message of the Day (MOTD): ############################################################################### # CSM version: 1.2 # CANU version: 1.1.11 ############################################################################### Login: NVIDIA Onyx Switch Management Logout: sw-spine-001 [mlag-domain: master] (config) # configuration write to csm1.2-canu1.1.11 Dell  Use canu validate to see the differences between the 1.0 and 1.2 switch configurations.  ncn-m001# canu validate switch config --running 1.0/sw-leaf-bmc-001.cfg --generated 1.2/sw-leaf-bmc-001.cfg --vendor dell --remediation + ip vrf Customer + interface vlan7 + description CMN + no shutdown + ip vrf forwarding Customer + mtu 9216 + ip address 10.102.3.100/25 + ip access-group cmn-can in + ip access-group cmn-can out + ip ospf 2 area 0.0.0.0 interface port-channel100 - switchport trunk allowed vlan 2,4 + switchport trunk allowed vlan 2,4,7 + ip access-list cmn-can + seq 10 deny ip 10.102.3.0/25 10.102.3.128/26 + seq 20 deny ip 10.102.3.128/26 10.102.3.0/25 + seq 30 permit ip any any + router ospf 2 vrf Customer + router-id 10.2.0.4 - banner motd ^ ############################################################################### # CSM version: 1.0 # CANU version: 1.1.11 ############################################################################### ^ + banner motd ^ ############################################################################### # CSM version: 1.2 # CANU version: 1.1.11 ############################################################################### ^ ------------------------------------------------------------------------- Config differences between running config and generated config lines that start with a minus \u0026#34;-\u0026#34; and RED: Config that is present in running config but not in generated config lines that start with a plus \u0026#34;+\u0026#34; and GREEN: Config that is present in generated config but not in running config. ------------------------------------------------------------------------- Remediation Config ------------------------------------------------------------------------- no banner motd ip vrf Customer interface vlan7 description CMN no shutdown ip vrf forwarding Customer mtu 9216 ip address 10.102.3.100/25 ip access-group cmn-can in ip access-group cmn-can out ip ospf 2 area 0.0.0.0 interface port-channel100 switchport trunk allowed vlan 2,4,7 ip access-list cmn-can seq 10 deny ip 10.102.3.0/25 10.102.3.128/26 seq 20 deny ip 10.102.3.128/26 10.102.3.0/25 seq 30 permit ip any any router ospf 2 vrf Customer router-id 10.2.0.4 banner motd ^ ############################################################################### # CSM version: 1.2 # CANU version: 1.1.11 ############################################################################### ^ Dell Manual Configuration   Exit the ip vrf Customer sub-menu.\nsw-leaf-bmc-001(config)# ip vrf Customer sw-leaf-bmc-001(conf-vrf)# exit   banner motd will need to be applied manually.\nExample:\nsw-leaf-bmc-001(config)# no banner motd sw-leaf-bmc-001(config)# ip vrf Customer sw-leaf-bmc-001(conf-vrf)# exit sw-leaf-bmc-001(config)# interface vlan7 sw-leaf-bmc-001(conf-if-vl-7)# description CMN sw-leaf-bmc-001(conf-if-vl-7)# no shutdown sw-leaf-bmc-001(conf-if-vl-7)# ip vrf forwarding Customer sw-leaf-bmc-001(conf-if-vl-7)# mtu 9216 sw-leaf-bmc-001(conf-if-vl-7)# ip address 10.102.3.100/25 sw-leaf-bmc-001(conf-if-vl-7)# ip access-group cmn-can in sw-leaf-bmc-001(conf-if-vl-7)# ip access-group cmn-can out sw-leaf-bmc-001(conf-if-vl-7)# ip ospf 2 area 0.0.0.0 sw-leaf-bmc-001(conf-if-vl-7)# interface port-channel100 sw-leaf-bmc-001(conf-if-po-100)# switchport trunk allowed vlan 2,4,7 sw-leaf-bmc-001(conf-if-po-100)# ip access-list cmn-can sw-leaf-bmc-001(config-ipv4-acl)# seq 10 deny ip 10.102.3.0/25 10.102.3.128/26 sw-leaf-bmc-001(config-ipv4-acl)# seq 20 deny ip 10.102.3.128/26 10.102.3.0/25 sw-leaf-bmc-001(config-ipv4-acl)# seq 30 permit ip any any sw-leaf-bmc-001(config-ipv4-acl)# router ospf 2 vrf Customer sw-leaf-bmc-001(config-router-ospf-2)# router-id 10.2.0.4 sw-leaf-bmc-001(config-router-ospf-2)# banner motd ^ Enter TEXT message. End with the character \u0026#39;^\u0026#39;. ############################################################################### # CSM version: 1.2 # CANU version: 1.1.11 ############################################################################### ^   Save configuration.\nsw-leaf-bmc-001(config)# copy config://startup.xml config://csm1.2-canu1.1.11 Copy completed   Aruba Spine  Use canu validate to see the differences between the 1.0 and 1.2 switch configurations.  ncn-m001# canu validate switch config --running ./1.0/sw-spine-002.cfg --generated ./1.2/sw-spine-002.cfg --vendor aruba --remediation + vrf Customer + ssh server vrf Customer access-list ip mgmt - 10 comment ALLOW SSH, HTTPS, AND SNMP ON HMN SUBNET + 10 comment ALLOW SSH, HTTPS, AND SNMP ON HMN SUBNET and CMN + 60 permit tcp 10.103.11.0/255.255.255.128 any eq ssh + 70 permit tcp 10.103.11.0/255.255.255.128 any eq https + 80 permit udp 10.103.11.0/255.255.255.128 any eq snmp + 90 permit udp 10.103.11.0/255.255.255.128 any eq snmp-trap - 60 comment ALLOW SNMP FROM HMN METALLB SUBNET + 100 comment ALLOW SNMP FROM HMN METALLB SUBNET - 70 permit udp 10.94.100.0/255.255.255.0 any eq snmp + 110 permit udp 10.94.100.0/255.255.255.0 any eq snmp - 80 permit udp 10.94.100.0/255.255.255.0 any eq snmp-trap + 120 permit udp 10.94.100.0/255.255.255.0 any eq snmp-trap - 90 comment BLOCK SSH, HTTPS, AND SNMP FROM EVERYWHERE ELSE + 130 comment BLOCK SSH, HTTPS, AND SNMP FROM EVERYWHERE ELSE - 100 deny tcp any any eq ssh + 140 deny tcp any any eq ssh - 110 deny tcp any any eq https + 150 deny tcp any any eq https - 120 deny udp any any eq snmp + 160 deny udp any any eq snmp - 130 deny udp any any eq snmp-trap + 170 deny udp any any eq snmp-trap - 140 comment ALLOW ANYTHING ELSE + 180 comment ALLOW ANYTHING ELSE - 150 permit any any any + 190 permit any any any + access-list ip cmn-can + 10 deny any 10.103.11.0/255.255.255.128 10.103.11.128/255.255.255.192 + 20 deny any 10.103.11.128/255.255.255.192 10.103.11.0/255.255.255.128 + 30 permit any any any vlan 7 + name CMN + apply access-list ip cmn-can in + apply access-list ip cmn-can out + vlan 6 name CAN + apply access-list ip cmn-can in + apply access-list ip cmn-can out interface lag 1 multi-chassis + vlan trunk allowed 1-2,4,6-7 + interface lag 3 multi-chassis + vlan trunk allowed 1-2,4,6-7 + interface lag 5 multi-chassis + vlan trunk allowed 1-2,4,6-7 + interface lag 7 multi-chassis + vlan trunk allowed 1-2,4,6-7 + interface lag 8 multi-chassis + vlan trunk allowed 1-2,4,6-7 + interface lag 9 multi-chassis + vlan trunk allowed 1-2,4,6-7 + interface lag 11 multi-chassis + vlan trunk allowed 1-2,4,6-7 + interface lag 13 multi-chassis + vlan trunk allowed 1-2,4,6-7 + interface lag 15 multi-chassis + vlan trunk allowed 1-2,4,6-7 + interface lag 151 multi-chassis vlan trunk allowed 1-2,4,7 - interface lag 3 multi-chassis - vlan trunk allowed 1-2,4,7 - interface lag 5 multi-chassis - vlan trunk allowed 1-2,4,7 - interface lag 7 multi-chassis - vlan trunk allowed 1-2,4,7 - interface lag 8 multi-chassis - vlan trunk allowed 1-2,4,7 - interface lag 9 multi-chassis - vlan trunk allowed 1-2,4,7 - interface lag 11 multi-chassis - vlan trunk allowed 1-2,4,7 - interface lag 13 multi-chassis - vlan trunk allowed 1-2,4,7 - interface lag 15 multi-chassis - vlan trunk allowed 1-2,4,7 - interface lag 151 multi-chassis - vlan trunk allowed 1-2,4 - banner motd ^ ############################################################################### # CSM version: 1.0 # CANU version: 1.1.20~develop ############################################################################### ^ + banner motd ^ ############################################################################### # CSM version: 1.2 # CANU version: 1.1.11 ############################################################################### ^ route-map ncn-w003 permit seq 40 - match ip address prefix-list pl-can + match ip address prefix-list pl-cmn - set ip next-hop 10.103.11.8 + set ip next-hop 10.103.11.39 route-map ncn-w002 permit seq 40 - match ip address prefix-list pl-can + match ip address prefix-list pl-cmn - set ip next-hop 10.103.11.9 + set ip next-hop 10.103.11.40 route-map ncn-w001 permit seq 40 - match ip address prefix-list pl-can + match ip address prefix-list pl-cmn - set ip next-hop 10.103.11.10 + set ip next-hop 10.103.11.41 interface vlan 7 + vrf attach Customer + description CMN + ip ospf 2 area 0.0.0.0 + interface vlan 6 + vrf attach Customer description CAN - ip helper-address 10.92.100.222 + ip mtu 9198 + ip address 10.103.11.131/26 + active-gateway ip mac 12:00:00:00:6b:00 + active-gateway ip 10.103.11.129 - ip dns server-address 10.92.100.74 + ip dns server-address 10.92.100.225 - ip prefix-list pl-can seq 10 permit 10.103.11.0/25 ge 25 + ip prefix-list pl-cmn seq 10 permit 10.103.11.0/25 ge 25 + router ospf 2 vrf Customer + router-id 10.2.0.3 + default-information originate + area 0.0.0.0 + router bgp 65533 + vrf Customer + bgp router-id 10.2.0.3 + maximum-paths 8 + timers bgp 1 3 + distance bgp 20 70 + neighbor 10.103.11.2 remote-as 65533 + neighbor 10.103.11.39 remote-as 65532 + neighbor 10.103.11.39 passive + neighbor 10.103.11.40 remote-as 65532 + neighbor 10.103.11.40 passive + neighbor 10.103.11.41 remote-as 65532 + neighbor 10.103.11.41 passive + address-family ipv4 unicast + neighbor 10.103.11.2 activate + neighbor 10.103.11.39 activate + neighbor 10.103.11.40 activate + neighbor 10.103.11.41 activate + https-server vrf Customer ------------------------------------------------------------------------- Config differences between running config and generated config lines that start with a minus \u0026#34;-\u0026#34; and RED: Config that is present in running config but not in generated config lines that start with a plus \u0026#34;+\u0026#34; and GREEN: Config that is present in generated config but not in running config. ------------------------------------------------------------------------- Remediation Config no ip dns server-address 10.92.100.74 no ip prefix-list pl-can seq 10 permit 10.103.11.0/25 ge 25 banner motd ^ ############################################################################### # CSM version: 1.2 # CANU version: 1.1.11 ############################################################################### ^ vrf Customer ssh server vrf Customer access-list ip mgmt no 10 comment ALLOW SSH, HTTPS, AND SNMP ON HMN SUBNET no 60 comment ALLOW SNMP FROM HMN METALLB SUBNET no 70 permit udp 10.94.100.0/255.255.255.0 any eq snmp no 80 permit udp 10.94.100.0/255.255.255.0 any eq snmp-trap no 90 comment BLOCK SSH, HTTPS, AND SNMP FROM EVERYWHERE ELSE no 100 deny tcp any any eq ssh no 110 deny tcp any any eq https no 120 deny udp any any eq snmp no 130 deny udp any any eq snmp-trap no 140 comment ALLOW ANYTHING ELSE no 150 permit any any any 10 comment ALLOW SSH, HTTPS, AND SNMP ON HMN SUBNET and CMN 60 permit tcp 10.103.11.0/255.255.255.128 any eq ssh 70 permit tcp 10.103.11.0/255.255.255.128 any eq https 80 permit udp 10.103.11.0/255.255.255.128 any eq snmp 90 permit udp 10.103.11.0/255.255.255.128 any eq snmp-trap 100 comment ALLOW SNMP FROM HMN METALLB SUBNET 110 permit udp 10.94.100.0/255.255.255.0 any eq snmp 120 permit udp 10.94.100.0/255.255.255.0 any eq snmp-trap 130 comment BLOCK SSH, HTTPS, AND SNMP FROM EVERYWHERE ELSE 140 deny tcp any any eq ssh 150 deny tcp any any eq https 160 deny udp any any eq snmp 170 deny udp any any eq snmp-trap 180 comment ALLOW ANYTHING ELSE 190 permit any any any access-list ip cmn-can 10 deny any 10.103.11.0/255.255.255.128 10.103.11.128/255.255.255.192 20 deny any 10.103.11.128/255.255.255.192 10.103.11.0/255.255.255.128 30 permit any any any vlan 7 name CMN apply access-list ip cmn-can in apply access-list ip cmn-can out vlan 6 name CAN apply access-list ip cmn-can in apply access-list ip cmn-can out interface lag 1 multi-chassis no vlan trunk allowed 1-2,4,7 vlan trunk allowed 1-2,4,6-7 interface lag 3 multi-chassis no vlan trunk allowed 1-2,4,7 vlan trunk allowed 1-2,4,6-7 interface lag 5 multi-chassis no vlan trunk allowed 1-2,4,7 vlan trunk allowed 1-2,4,6-7 interface lag 7 multi-chassis no vlan trunk allowed 1-2,4,7 vlan trunk allowed 1-2,4,6-7 interface lag 8 multi-chassis no vlan trunk allowed 1-2,4,7 vlan trunk allowed 1-2,4,6-7 interface lag 9 multi-chassis no vlan trunk allowed 1-2,4,7 vlan trunk allowed 1-2,4,6-7 interface lag 11 multi-chassis no vlan trunk allowed 1-2,4,7 vlan trunk allowed 1-2,4,6-7 interface lag 13 multi-chassis no vlan trunk allowed 1-2,4,7 vlan trunk allowed 1-2,4,6-7 interface lag 15 multi-chassis no vlan trunk allowed 1-2,4,7 vlan trunk allowed 1-2,4,6-7 interface lag 151 multi-chassis no vlan trunk allowed 1-2,4 vlan trunk allowed 1-2,4,7 interface vlan 7 no ip helper-address 10.92.100.222 vrf attach Customer description CMN ip ospf 2 area 0.0.0.0 interface vlan 6 vrf attach Customer description CAN ip mtu 9198 ip address 10.103.11.131/26 active-gateway ip mac 12:00:00:00:6b:00 active-gateway ip 10.103.11.129 ip dns server-address 10.92.100.225 ip prefix-list pl-cmn seq 10 permit 10.103.11.0/25 ge 25 route-map ncn-w003 permit seq 40 no match ip address prefix-list pl-can no set ip next-hop 10.103.11.8 match ip address prefix-list pl-cmn set ip next-hop 10.103.11.39 route-map ncn-w002 permit seq 40 no match ip address prefix-list pl-can no set ip next-hop 10.103.11.9 match ip address prefix-list pl-cmn set ip next-hop 10.103.11.40 route-map ncn-w001 permit seq 40 no match ip address prefix-list pl-can no set ip next-hop 10.103.11.10 match ip address prefix-list pl-cmn set ip next-hop 10.103.11.41 router ospf 2 vrf Customer router-id 10.2.0.3 default-information originate area 0.0.0.0 router bgp 65533 vrf Customer bgp router-id 10.2.0.3 maximum-paths 8 timers bgp 1 3 distance bgp 20 70 neighbor 10.103.11.2 remote-as 65533 neighbor 10.103.11.39 remote-as 65532 neighbor 10.103.11.39 passive neighbor 10.103.11.40 remote-as 65532 neighbor 10.103.11.40 passive neighbor 10.103.11.41 remote-as 65532 neighbor 10.103.11.41 passive address-family ipv4 unicast neighbor 10.103.11.2 activate neighbor 10.103.11.39 activate neighbor 10.103.11.40 activate neighbor 10.103.11.41 activate https-server vrf Customer  Using the remediation config, apply prefix-list and route-maps first.  sw-spine-002(config)# ip prefix-list pl-cmn seq 10 permit 10.103.11.0/25 ge 25 sw-spine-002(config)# route-map ncn-w003 permit seq 40 sw-spine-002(config-route-map-ncn-w003-40)# no match ip address prefix-list pl-can sw-spine-002(config-route-map-ncn-w003-40)# no set ip next-hop 10.103.11.8 sw-spine-002(config-route-map-ncn-w003-40)# match ip address prefix-list pl-cmn sw-spine-002(config-route-map-ncn-w003-40)# set ip next-hop 10.103.11.39 sw-spine-002(config-route-map-ncn-w003-40)# route-map ncn-w002 permit seq 40 sw-spine-002(config-route-map-ncn-w002-40)# no match ip address prefix-list pl-can sw-spine-002(config-route-map-ncn-w002-40)# no set ip next-hop 10.103.11.9 sw-spine-002(config-route-map-ncn-w002-40)# match ip address prefix-list pl-cmn sw-spine-002(config-route-map-ncn-w002-40)# set ip next-hop 10.103.11.40 sw-spine-002(config-route-map-ncn-w002-40)# route-map ncn-w001 permit seq 40 sw-spine-002(config-route-map-ncn-w001-40)# no match ip address prefix-list pl-can sw-spine-002(config-route-map-ncn-w001-40)# no set ip next-hop 10.103.11.10 sw-spine-002(config-route-map-ncn-w001-40)# match ip address prefix-list pl-cmn sw-spine-002(config-route-map-ncn-w001-40)# set ip next-hop 10.103.11.41  Copy in the remaining configuration.  sw-spine-002(config-route-map-ncn-w001-40)# no ip dns server-address 10.92.100.74 sw-spine-002(config)# no ip prefix-list pl-can seq 10 permit 10.103.11.0/25 ge 25 sw-spine-002(config)# banner motd ^ sw-spine-002(config-banner-motd)# ############################################################################### sw-spine-002(config-banner-motd)# # CSM version: 1.2 sw-spine-002(config-banner-motd)# # CANU version: 1.1.11 sw-spine-002(config-banner-motd)# ############################################################################### sw-spine-002(config-banner-motd)# ^ sw-spine-002(config)# vrf Customer sw-spine-002(config-vrf)# ssh server vrf Customer sw-spine-002(config)# access-list ip mgmt sw-spine-002(config-acl-ip)# no 10 comment ALLOW SSH, HTTPS, AND SNMP ON HMN SUBNET sw-spine-002(config-acl-ip)# no 60 comment ALLOW SNMP FROM HMN METALLB SUBNET sw-spine-002(config-acl-ip)# no 70 permit udp 10.94.100.0/255.255.255.0 any eq snmp sw-spine-002(config-acl-ip)# no 80 permit udp 10.94.100.0/255.255.255.0 any eq snmp-trap sw-spine-002(config-acl-ip)# no 90 comment BLOCK SSH, HTTPS, AND SNMP FROM EVERYWHERE ELSE sw-spine-002(config-acl-ip)# no 100 deny tcp any any eq ssh sw-spine-002(config-acl-ip)# no 110 deny tcp any any eq https sw-spine-002(config-acl-ip)# no 120 deny udp any any eq snmp sw-spine-002(config-acl-ip)# no 130 deny udp any any eq snmp-trap sw-spine-002(config-acl-ip)# no 140 comment ALLOW ANYTHING ELSE sw-spine-002(config-acl-ip)# no 150 permit any any any sw-spine-002(config-acl-ip)# 10 comment ALLOW SSH, HTTPS, AND SNMP ON HMN SUBNET and CMN sw-spine-002(config-acl-ip)# 60 permit tcp 10.103.11.0/255.255.255.128 any eq ssh sw-spine-002(config-acl-ip)# 70 permit tcp 10.103.11.0/255.255.255.128 any eq https sw-spine-002(config-acl-ip)# 80 permit udp 10.103.11.0/255.255.255.128 any eq snmp sw-spine-002(config-acl-ip)# 90 permit udp 10.103.11.0/255.255.255.128 any eq snmp-trap sw-spine-002(config-acl-ip)# 100 comment ALLOW SNMP FROM HMN METALLB SUBNET sw-spine-002(config-acl-ip)# 110 permit udp 10.94.100.0/255.255.255.0 any eq snmp sw-spine-002(config-acl-ip)# 120 permit udp 10.94.100.0/255.255.255.0 any eq snmp-trap sw-spine-002(config-acl-ip)# 130 comment BLOCK SSH, HTTPS, AND SNMP FROM EVERYWHERE ELSE sw-spine-002(config-acl-ip)# 140 deny tcp any any eq ssh sw-spine-002(config-acl-ip)# 150 deny tcp any any eq https sw-spine-002(config-acl-ip)# 160 deny udp any any eq snmp sw-spine-002(config-acl-ip)# 170 deny udp any any eq snmp-trap sw-spine-002(config-acl-ip)# 180 comment ALLOW ANYTHING ELSE sw-spine-002(config-acl-ip)# 190 permit any any any sw-spine-002(config-acl-ip)# access-list ip cmn-can sw-spine-002(config-acl-ip)# 10 deny any 10.103.11.0/255.255.255.128 10.103.11.128/255.255.255.192 sw-spine-002(config-acl-ip)# 20 deny any 10.103.11.128/255.255.255.192 10.103.11.0/255.255.255.128 sw-spine-002(config-acl-ip)# 30 permit any any any sw-spine-002(config-acl-ip)# vlan 7 sw-spine-002(config-vlan-7)# name CMN sw-spine-002(config-vlan-7)# apply access-list ip cmn-can in sw-spine-002(config-vlan-7)# apply access-list ip cmn-can out sw-spine-002(config-vlan-7)# vlan 6 sw-spine-002(config-vlan-6)# name CAN sw-spine-002(config-vlan-6)# apply access-list ip cmn-can in sw-spine-002(config-vlan-6)# apply access-list ip cmn-can out sw-spine-002(config-vlan-6)# interface lag 1 multi-chassis sw-spine-002(config-lag-if)# vlan trunk allowed 1-2,4,6-7 sw-spine-002(config-lag-if)# interface lag 3 multi-chassis sw-spine-002(config-lag-if)# vlan trunk allowed 1-2,4,6-7 sw-spine-002(config-lag-if)# interface lag 5 multi-chassis sw-spine-002(config-lag-if)# vlan trunk allowed 1-2,4,6-7 sw-spine-002(config-lag-if)# interface lag 7 multi-chassis sw-spine-002(config-lag-if)# vlan trunk allowed 1-2,4,6-7 sw-spine-002(config-lag-if)# interface lag 8 multi-chassis sw-spine-002(config-lag-if)# vlan trunk allowed 1-2,4,6-7 sw-spine-002(config-lag-if)# interface lag 9 multi-chassis sw-spine-002(config-lag-if)# vlan trunk allowed 1-2,4,6-7 sw-spine-002(config-lag-if)# interface lag 11 multi-chassis sw-spine-002(config-lag-if)# vlan trunk allowed 1-2,4,6-7 sw-spine-002(config-lag-if)# interface lag 13 multi-chassis sw-spine-002(config-lag-if)# vlan trunk allowed 1-2,4,6-7 sw-spine-002(config-lag-if)# interface lag 15 multi-chassis sw-spine-002(config-lag-if)# vlan trunk allowed 1-2,4,6-7 sw-spine-002(config-lag-if)# interface lag 151 multi-chassis sw-spine-002(config-lag-if)# vlan trunk allowed 1-2,4,7 sw-spine-002(config-lag-if)# interface vlan 7 sw-spine-002(config-if-vlan)# no ip helper-address 10.92.100.222 sw-spine-002(config-if-vlan)# vrf attach Customer sw-spine-002(config-if-vlan)# description CMN sw-spine-002(config-if-vlan)# ip ospf 2 area 0.0.0.0 sw-spine-002(config-if-vlan)# interface vlan 6 sw-spine-002(config-if-vlan)# vrf attach Customer sw-spine-002(config-if-vlan)# description CAN sw-spine-002(config-if-vlan)# ip mtu 9198 sw-spine-002(config-if-vlan)# ip address 10.103.11.131/26 sw-spine-002(config-if-vlan)# active-gateway ip mac 12:00:00:00:6b:00 sw-spine-002(config-if-vlan)# active-gateway ip 10.103.11.129 sw-spine-002(config-if-vlan)# router ospf 2 vrf Customer sw-spine-002(config-ospf-2)# router-id 10.2.0.3 sw-spine-002(config-ospf-2)# default-information originate sw-spine-002(config-ospf-2)# area 0.0.0.0 sw-spine-002(config-ospf-2)# router bgp 65533 sw-spine-002(config-bgp)# vrf Customer sw-spine-002(config-bgp-vrf)# bgp router-id 10.2.0.3 sw-spine-002(config-bgp-vrf)# maximum-paths 8 sw-spine-002(config-bgp-vrf)# timers bgp 1 3 sw-spine-002(config-bgp-vrf)# distance bgp 20 70 sw-spine-002(config-bgp-vrf)# neighbor 10.103.11.2 remote-as 65533 sw-spine-002(config-bgp-vrf)# neighbor 10.103.11.39 remote-as 65532 sw-spine-002(config-bgp-vrf)# neighbor 10.103.11.39 passive sw-spine-002(config-bgp-vrf)# neighbor 10.103.11.40 remote-as 65532 sw-spine-002(config-bgp-vrf)# neighbor 10.103.11.40 passive sw-spine-002(config-bgp-vrf)# neighbor 10.103.11.41 remote-as 65532 sw-spine-002(config-bgp-vrf)# neighbor 10.103.11.41 passive sw-spine-002(config-bgp-vrf)# address-family ipv4 unicast sw-spine-002(config-bgp-vrf-ipv4-uc)# neighbor 10.103.11.2 activate sw-spine-002(config-bgp-vrf-ipv4-uc)# neighbor 10.103.11.39 activate sw-spine-002(config-bgp-vrf-ipv4-uc)# neighbor 10.103.11.40 activate sw-spine-002(config-bgp-vrf-ipv4-uc)# neighbor 10.103.11.41 activate sw-spine-002(config-bgp-vrf-ipv4-uc)# https-server vrf Customer  Paste in the vlan 7 interface information.  Aruba Manual Configuration  Because we add the vlan7 interface to the Customer VRF, it removes all previous configuration. This will need to be fixed.  Get the interface vlan 7 configuration\nncn-m001# grep -A 7 \u0026#34;interface vlan 7\u0026#34; sw-spine-002.cfg interface vlan 7 vrf attach Customer description CMN ip mtu 9198 ip address 10.103.11.3/25 active-gateway ip mac 12:00:00:00:6b:00 active-gateway ip 10.103.11.1 ip ospf 2 area 0.0.0.0 Apply VLAN interface configuration to the switch.\nsw-spine-002(config)# interface vlan 7 sw-spine-002(config-if-vlan)# vrf attach Customer sw-spine-002(config-if-vlan)# description CMN sw-spine-002(config-if-vlan)# ip mtu 9198 sw-spine-002(config-if-vlan)# ip address 10.103.11.3/25 sw-spine-002(config-if-vlan)# active-gateway ip mac 12:00:00:00:6b:00 sw-spine-002(config-if-vlan)# active-gateway ip 10.103.11.1 sw-spine-002(config-if-vlan)# ip ospf 2 area 0.0.0.0 Add site connections to Customer VRF.\n The site connections are in the SHCD.  CAN switch cfcanb6s1 - 31 sw-25g01 x3000 u39 - j36 CAN switch cfcanb6s1 - 46 sw-25g02 x3000 u40 - j36 This example has the site connections on port 36 on both spine switches.\n Add the interface to the Customer VRF and re-add the IP address.  sw-spine-002(config)# show run interface 1/1/36 interface 1/1/36 no shutdown ip address 10.103.15.190/30 exit sw-spine-002(config)# int 1/1/36 sw-spine-002(config-if)# vrf attach Customer sw-spine-002(config-if)# ip address 10.103.15.190/30  Move the default route to the Customer VRF.  sw-spine-002(config)# show run | include \u0026#34;ip route\u0026#34; ip route 0.0.0.0/0 10.103.15.189 sw-spine-002(config)# no ip route 0.0.0.0/0 10.103.15.189 sw-spine-002(config)# ip route 0.0.0.0/0 10.103.15.189 vrf Customer Save the configuration and create a checkpoint using the CSM version and the CANU version\nsw-spine-002(config)# show banner motd ############################################################################### # CSM version: 1.2 # CANU version: 1.1.11 ############################################################################### sw-spine-002(config)# write mem Copying configuration: [Success] sw-spine-002(config)# copy running-config checkpoint CSM1_2_CANU_1_1_11 Aruba Leaf and Leaf BMC Use CANU Validate to see the differences between the 1.0 and 1.2 switch configurations.\nncn-m001# canu validate switch config --running surtur/1.0/sw-leaf-bmc-001.cfg --generated surtur/1.2/sw-leaf-bmc-001.cfg --vendor aruba --remediation Remediation Config This feature is experimental and has limited testing. banner motd ^ ############################################################################### # CSM version: 1.2 # CANU version: 1.1.11 ############################################################################### ^ vrf Customer ssh server vrf Customer access-list ip mgmt no 10 comment ALLOW SSH, HTTPS, AND SNMP ON HMN SUBNET no 60 comment ALLOW SNMP FROM HMN METALLB SUBNET no 70 permit udp 10.94.100.0/255.255.255.0 any eq snmp no 80 permit udp 10.94.100.0/255.255.255.0 any eq snmp-trap no 90 comment BLOCK SSH, HTTPS, AND SNMP FROM EVERYWHERE ELSE no 100 deny tcp any any eq ssh no 110 deny tcp any any eq https no 120 deny udp any any eq snmp no 130 deny udp any any eq snmp-trap no 140 comment ALLOW ANYTHING ELSE no 150 permit any any any 10 comment ALLOW SSH, HTTPS, AND SNMP ON HMN SUBNET and CMN 60 permit tcp 10.103.11.0/255.255.255.128 any eq ssh 70 permit tcp 10.103.11.0/255.255.255.128 any eq https 80 permit udp 10.103.11.0/255.255.255.128 any eq snmp 90 permit udp 10.103.11.0/255.255.255.128 any eq snmp-trap 100 comment ALLOW SNMP FROM HMN METALLB SUBNET 110 permit udp 10.94.100.0/255.255.255.0 any eq snmp 120 permit udp 10.94.100.0/255.255.255.0 any eq snmp-trap 130 comment BLOCK SSH, HTTPS, AND SNMP FROM EVERYWHERE ELSE 140 deny tcp any any eq ssh 150 deny tcp any any eq https 160 deny udp any any eq snmp 170 deny udp any any eq snmp-trap 180 comment ALLOW ANYTHING ELSE 190 permit any any any access-list ip cmn-can 10 deny any 10.103.11.0/255.255.255.128 10.103.11.128/255.255.255.192 20 deny any 10.103.11.128/255.255.255.192 10.103.11.0/255.255.255.128 30 permit any any any vlan 7 name CMN apply access-list ip cmn-can in apply access-list ip cmn-can out interface lag 255 vlan trunk allowed 1-2,4,7 interface vlan 7 vrf attach Customer description CMN ip mtu 9198 ip address 10.103.11.4/25 ip ospf 2 area 0.0.0.0 router ospf 2 vrf Customer router-id 10.2.0.4 area 0.0.0.0 https-server vrf Customer Copy in the entire remediation configuration block.\nsw-leaf-bmc-001(config)# banner motd ^ sw-leaf-bmc-001(config-banner-motd)# ############################################################################### sw-leaf-bmc-001(config-banner-motd)# # CSM version: 1.2 sw-leaf-bmc-001(config-banner-motd)# # CANU version: 1.1.11 sw-leaf-bmc-001(config-banner-motd)# ############################################################################### sw-leaf-bmc-001(config-banner-motd)# ^ sw-leaf-bmc-001(config)# vrf Customer sw-leaf-bmc-001(config-vrf)# ssh server vrf Customer sw-leaf-bmc-001(config)# access-list ip mgmt sw-leaf-bmc-001(config-acl-ip)# no 10 comment ALLOW SSH, HTTPS, AND SNMP ON HMN SUBNET sw-leaf-bmc-001(config-acl-ip)# no 60 comment ALLOW SNMP FROM HMN METALLB SUBNET sw-leaf-bmc-001(config-acl-ip)# no 70 permit udp 10.94.100.0/255.255.255.0 any eq snmp sw-leaf-bmc-001(config-acl-ip)# no 80 permit udp 10.94.100.0/255.255.255.0 any eq snmp-trap sw-leaf-bmc-001(config-acl-ip)# no 90 comment BLOCK SSH, HTTPS, AND SNMP FROM EVERYWHERE ELSE sw-leaf-bmc-001(config-acl-ip)# no 100 deny tcp any any eq ssh sw-leaf-bmc-001(config-acl-ip)# no 110 deny tcp any any eq https sw-leaf-bmc-001(config-acl-ip)# no 120 deny udp any any eq snmp sw-leaf-bmc-001(config-acl-ip)# no 130 deny udp any any eq snmp-trap sw-leaf-bmc-001(config-acl-ip)# no 140 comment ALLOW ANYTHING ELSE sw-leaf-bmc-001(config-acl-ip)# no 150 permit any any any sw-leaf-bmc-001(config-acl-ip)# 10 comment ALLOW SSH, HTTPS, AND SNMP ON HMN SUBNET and CMN sw-leaf-bmc-001(config-acl-ip)# 60 permit tcp 10.103.11.0/255.255.255.128 any eq ssh sw-leaf-bmc-001(config-acl-ip)# 70 permit tcp 10.103.11.0/255.255.255.128 any eq https sw-leaf-bmc-001(config-acl-ip)# 80 permit udp 10.103.11.0/255.255.255.128 any eq snmp sw-leaf-bmc-001(config-acl-ip)# 90 permit udp 10.103.11.0/255.255.255.128 any eq snmp-trap sw-leaf-bmc-001(config-acl-ip)# 100 comment ALLOW SNMP FROM HMN METALLB SUBNET sw-leaf-bmc-001(config-acl-ip)# 110 permit udp 10.94.100.0/255.255.255.0 any eq snmp sw-leaf-bmc-001(config-acl-ip)# 120 permit udp 10.94.100.0/255.255.255.0 any eq snmp-trap sw-leaf-bmc-001(config-acl-ip)# 130 comment BLOCK SSH, HTTPS, AND SNMP FROM EVERYWHERE ELSE sw-leaf-bmc-001(config-acl-ip)# 140 deny tcp any any eq ssh sw-leaf-bmc-001(config-acl-ip)# 150 deny tcp any any eq https sw-leaf-bmc-001(config-acl-ip)# 160 deny udp any any eq snmp sw-leaf-bmc-001(config-acl-ip)# 170 deny udp any any eq snmp-trap sw-leaf-bmc-001(config-acl-ip)# 180 comment ALLOW ANYTHING ELSE sw-leaf-bmc-001(config-acl-ip)# 190 permit any any any sw-leaf-bmc-001(config-acl-ip)# access-list ip cmn-can sw-leaf-bmc-001(config-acl-ip)# 10 deny any 10.103.11.0/255.255.255.128 10.103.11.128/255.255.255.192 sw-leaf-bmc-001(config-acl-ip)# 20 deny any 10.103.11.128/255.255.255.192 10.103.11.0/255.255.255.128 sw-leaf-bmc-001(config-acl-ip)# 30 permit any any any sw-leaf-bmc-001(config-acl-ip)# vlan 7 sw-leaf-bmc-001(config-vlan-7)# name CMN sw-leaf-bmc-001(config-vlan-7)# apply access-list ip cmn-can in sw-leaf-bmc-001(config-vlan-7)# apply access-list ip cmn-can out sw-leaf-bmc-001(config-vlan-7)# interface lag 255 sw-leaf-bmc-001(config-lag-if)# vlan trunk allowed 1-2,4,7 sw-leaf-bmc-001(config-lag-if)# interface vlan 7 sw-leaf-bmc-001(config-if-vlan)# vrf attach Customer sw-leaf-bmc-001(config-if-vlan)# description CMN sw-leaf-bmc-001(config-if-vlan)# ip mtu 9198 sw-leaf-bmc-001(config-if-vlan)# ip address 10.103.11.4/25 sw-leaf-bmc-001(config-if-vlan)# ip ospf 2 area 0.0.0.0 sw-leaf-bmc-001(config-if-vlan)# router ospf 2 vrf Customer sw-leaf-bmc-001(config-ospf-2)# router-id 10.2.0.4 sw-leaf-bmc-001(config-ospf-2)# area 0.0.0.0 sw-leaf-bmc-001(config-ospf-2)# https-server vrf Customer This should copy into the terminal without any errors, if there are errors stop here and make sure that the generated configuration gets applied correctly.\nSave the running configuration and create a checkpoint using the CSM version and the CANU version.\nsw-leaf-bmc-001(config)# show banner motd ############################################################################### # CSM version: 1.2 # CANU version: 1.1.11 ############################################################################### sw-leaf-bmc-001(config)# write mem Copying configuration: [Success] sw-leaf-bmc-001(config)# copy running-config checkpoint CSM1_2_CANU_1_1_11 "
},
{
	"uri": "/docs-csm/en-12/operations/network/dns/dns/",
	"title": "Domain Name Service (DNS) Overview",
	"tags": [],
	"description": "",
	"content": "Domain Name Service (DNS) Overview DNS Architecture This diagram shows how the various components of the DNS infrastructure interact.\nDNS Components The DNS infrastructure is comprised of a number of components.\nUnbound (cray-dns-unbound) Unbound is a caching DNS resolver which is also used as the primary DNS server.\nThe DNS records served by Unbound include system component names (xnames), node hostnames, and service names and these records are read from the cray-dns-unbound ConfigMap which is populated by cray-dns-unbound-manager.\nThe DNS server functionality will be migrated to PowerDNS in a future release leaving Unbound acting purely as a caching DNS resolver.\nUnbound also forwards queries to PowerDNS or the site DNS server if the query cannot be answered by local data.\nUnbound Manager (cray-dns-unbound-manager) The cray-dns-unbound-manager cron job runs every three minutes and queries the System Layout Service, the Hardware State Manager, and the Kea DHCP server for new or changed hardware components and creates DNS records for these components in the cray-dns-unbound ConfigMap.\nThis job also initiates a rolling restart of Unbound if the cray-dns-unbound ConfigMap was modified.\nKubernetes DNS (coredns) Kubernetes creates DNS records for services and pods. A CoreDNS server running in the kube-system namespace is used for this purpose.\nThe CoreDNS service is also configured to forward DNS requests to Unbound in order to allow pods to resolve system hardware components and other services. This configuration is performed by the cray-dns-unbound-coredns job which is invoked whenever the cray-dns-unbound Helm chart is deployed or upgraded.\nSee the Kubernetes documentation for more information.\nExternalDNS (cray-externaldns-external-dns) ExternalDNS creates DNS records for services that are intended to be accessible via the Customer Access Network (CAN), Customer Management Network (CMN), and Customer High-Speed Network (CHN). For example grafana.cmn.wasp.dev.cray.com.\nKubernetes Services annotated with external-dns.alpha.kubernetes.io/hostname have DNS records created.\nStarting with CSM version 1.1 these DNS records are created in the PowerDNS server. Earlier versions of CSM used a dedicated CoreDNS server for ExternalDNS.\n Only DNS A records are created as ExternalDNS currently does not support the creation of the PTR records required for reverse lookup.\n PowerDNS (cray-dns-powerdns) PowerDNS is an authoritative DNS server which over the next few CSM releases will replace Unbound sa the primary DNS server within a CSM system.\nPowerDNS is able to respond to queries for services accessible via the CAN, CMN, or CHN. Records are externally accessible via the LoadBalancer IP address specified for the CSI --cmn-external-dns option.\nAs with earlier CSM releases it is possible to delegate to PowerDNS to resolve services and it is also possible to configure zone transfer to sync the DNS records from PowerDNS to Site DNS.\nPowerDNS Manager (cray-powerdns-manager) The PowerDNS Manager serves a similar purpose to the Unbound Manager. It runs in the background and periodically queries the System Layout Service, the Hardware State Manager, and the Kea DHCP server for new or changed hardware components and creates DNS records for these components in PowerDNS.\nThe PowerDNS Manager also configures the PowerDNS server for zone transfer and DNSSEC if required.\nSite DNS This term is used to refer the external DNS server specified the CSI --site-dns option.\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/dns/enable_ncsd_on_uans/",
	"title": "Enable Ncsd On UANs",
	"tags": [],
	"description": "",
	"content": "Enable ncsd on UANs Configure User Access Nodes (UANs) to start the ncsd service at boot time.\nThe nscd service is not currently enabled by default and systemd does not start it at boot time. There are two ways to start nscd on UAN nodes: manually starting the service or enabling the service in the UAN image. While restarting nscd manually has to be performed each time the UAN is rebooted, enabling nscd in the image only has to be done once. Then all UANs that use the image will have nscd started automatically on boot.\nProcedure   Start ncsd manually on each UAN.\n  Log into a UAN.\n  Start ncsd using systemctl.\nuan# systemctl start nscd   Repeat the previous two substeps for every UAN.\n    Enable ncsd in the UAN image.\n  Determine the ID of the image used by the UAN. This ID can be found in the BOS session template used to boot the UAN:\n{ \u0026#34;boot_sets\u0026#34;: { \u0026#34;uan\u0026#34;: { \u0026#34;boot_ordinal\u0026#34;: 2, \u0026#34;kernel_parameters\u0026#34;: \u0026#34;console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=nmn0:dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y quiet rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 ifmap=net2:nmn0,lan0:hsn0,lan1:hsn1 spire_join_token=${SPIRE_JOIN_TOKEN}\u0026#34;, \u0026#34;network\u0026#34;: \u0026#34;nmn\u0026#34;, \u0026#34;node_list\u0026#34;: [ LIST_OF_APPLICATION_NODES ], \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/IMS_IMAGE_ID/manifest.json\u0026#34;, # \u0026lt;-- image ID is here \u0026#34;rootfs_provider\u0026#34;: \u0026#34;cpss3\u0026#34;, \u0026#34;rootfs_provider_passthrough\u0026#34;: \u0026#34;dvs:api-gw-service-nmn.local:300:nmn0\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34; } }, \u0026#34;cfs\u0026#34;: { \u0026#34;configuration\u0026#34;: \u0026#34;uan-config-PRODUCT_VERSION\u0026#34; }, \u0026#34;enable_cfs\u0026#34;: true, \u0026#34;name\u0026#34;: \u0026#34;uan-sessiontemplate-PRODUCT_VERSION\u0026#34; }   Use the procedure Customize an Image Root Using IMS to enable the nscd service in the image by running these two commands in the image chroot:\nsystemctl enable nscd.service /tmp/images.sh   Obtain the new resultant image ID from the previous step.\n  Update the UAN BOS session template with the new image ID. Refer to Create UAN Boot Images for instructions on updating the BOS session template.\n  Perform Boot UANs to reboot the UANs with the updated session template.\n    "
},
{
	"uri": "/docs-csm/en-12/operations/network/external_dns/external_dns/",
	"title": "External DNS",
	"tags": [],
	"description": "",
	"content": "External DNS External DNS, along with the customer accessible networks CMN and CAN/CHN, PowerDNS, Border Gateway Protocol (BGP), and MetalLB, makes it simpler to access the HPE Cray EX API and system management services. Services are accessible directly from a laptop without needing to tunnel into a non-compute node (NCN) or override /etc/hosts settings. Some services may require a JSON Web Token (JWT) to access them, while others may require OAuth2 to login using a DC LDAP password.\nThe following services are currently available:\n HPE Cray EX API (requires valid JWT) Keycloak Ceph RADOS gateway (requires valid JWT) Nexus System Management Health Prometheus (redirects to OAuth2 Proxy for SSO) System Management Health Grafana (redirects to OAuth2 Proxy for SSO) System Management Health Alertmanager (redirects to OAuth2 Proxy for SSO) Kiali, for Istio service mesh visibility (redirects to OAuth2 Proxy for SSO) Jaeger, for Istio tracing (redirects to OAuth2 Proxy for SSO)  In general, external hostnames should resolve to a external IP address for one of the following services:\n istio-system/istio-ingressgateway-cmn - Istio\u0026rsquo;s ingress gateway on CMN. istio-system/istio-ingressgateway-can - Istio\u0026rsquo;s ingress gateway on CAN. istio-system/istio-ingressgateway-chn - Istio\u0026rsquo;s ingress gateway on CHN. services/cray-oauth2-proxies-customer-access-ingress - OAuth2 Proxy\u0026rsquo;s ingress on CMN that redirects browsers to Keycloak for log in, and then to Istio\u0026rsquo;s ingress gateway with a valid JWT for authorized access. services/cray-oauth2-proxies-customer-management-ingress - OAuth2 Proxy\u0026rsquo;s ingress on CAN that redirects browsers to Keycloak for log in, and then to Istio\u0026rsquo;s ingress gateway with a valid JWT for authorized access. services/cray-oauth2-proxies-customer-high-speed-ingress - OAuth2 Proxy\u0026rsquo;s ingress on CHN that redirects browsers to Keycloak for log in, and then to Istio\u0026rsquo;s ingress gateway with a valid JWT for authorized access.  This can be verified using the dig command to resolve the external hostname and compare it with Kubernetes.\nWhat Happens if External DNS is not Used? Without forwarding to External DNS, administrators will not have the ability to use the externally exposed services, such as Prometheus, Grafana, the HPE Cray EX REST API, and more. See Externally Exposed Services for more information.\nAccessing most of these services by IP address will not work because the Ingress Gateway uses the name to direct requests to the appropriate service.\nDNS for HPE Cray EX Systems There is a separate set of DNS instances within HPE Cray EX that is used by the nodes and pods within the system for resolving names.\n  Unbound\nThe unbound DNS instance is used to resolve names for the physical equipment on the management networks within HPE Cray EX, such as NCNs, UANs, switches, compute nodes, and more. This instance is accessible only within the system.\n  Kubernetes CoreDNS\nThere is a CoreDNS instance within Kubernetes that is used by Kubernetes pods to resolve names for internal pods and services. This instance is accessible only within the HPE Cray EX Kubernetes cluster.\n  Connect Customer DNS to PowerDNS The DNS instance at the customer site should use DNS forwarding to forward the subdomain specified by the system-name and site-domain values (combined to make the system-name.site-domain value) to the IP address specified by the cmn-external-dns value. These values are defined with the csi config init command. The specifics on how to do the forwarding configuration is dependent on the type of DNS used by the customer.\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/external_dns/external_dns_csi_config_init_input_values/",
	"title": "External DNS Csi Input Values",
	"tags": [],
	"description": "",
	"content": "External DNS CSI Input Values External DNS requires the system-name, site-domain, and cmn-external-dns values that are defined with the csi config init command. These values are used to customize the External DNS configuration during installation.\nThe system-name and site-domain values The system-name and site-domain values specified as part of the csi config init are used together in the system-name.site-domain format, creating the external domain for external hostnames for services accessible from the Customer Management Network (CMN). Changing this value requires updating all impacted external-dns.alpha.kubernetes.io/hostname annotations, VirtualService and possibly Gateway objects, the CoreDNS ConfigMap, Keycloak settings for valid OAuth callback URLs, OAuth2 Proxy configuration, and generating new certificates.\nWarning: Changing the system-name.site-domain value post-installation is not recommended because of the complexity of changes required.\nInput for csi config init:\n--system-name testsystem --site-domain example.com The cmn-external-dns value The cmn-external-dns value is the IP address that DNS queries under the combined system-name.site-domain values need to be delegated.\nThis will be the shared IP address for services/cray-dns-powerdns-cmn-tcp and services/cray-dns-powerdns-cmn-udp services, which must be an IP address in the cmn-static-pool subnet defined in the csi config init input. See Customer Accessible Networks for more information.\nChanging this value requires updating the loadBalancerIP value of the services/cray-dns-powerdns-cmn-tcp and services/cray-dns-powerdns-cmn-udp services.\nInput for csi config init:\n--cmn-external-dns 10.102.5.30 This input is the CMN IP address for resolution of system services.\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/external_dns/external_dns_failing_to_discover_services_workaround/",
	"title": "External DNS Failing To Discover Services Workaround",
	"tags": [],
	"description": "",
	"content": "External DNS Failing to Discover Services Workaround Many external DNS issues can be worked around by directly connecting to the desired backend service. This can circumvent authentication and authorization protections, but it may be necessary to access specific services when mitigating critical issues.\nIstio\u0026rsquo;s ingress gateway uses Gateway and VirtualService objects to configure how traffic is routed to backend services. Currently, there are three gateways supporting the externally accessible services. They are services-gateway, customer-admin-gateway and customer-user-gateway. They are configured to support traffic on any host depending on the network over which the services are accessed. It is the VirtualService objects that ultimately control routing based on hostname.\nUse this procedure to resolve any external DNS routing issues with backend services.\nPrerequisites This procedure requires administrative privileges.\nProcedure   Search for the VirtualService object that corresponds to the desired service.\nThe command below will list all external hostnames.\nncn-w001# kubectl get vs -A | grep -v \u0026#39;[*]\u0026#39; Example output:\nNAMESPACE NAME GATEWAYS HOSTS AGE istio-system kiali [services/services-gateway] [kiali-istio.cmn.SYSTEM_DOMAIN_NAME] 2d16h istio-system tracing [services/services-gateway] [jaeger-istio.cmn.SYSTEM_DOMAIN_NAME] 2d16h nexus nexus [services/services-gateway] [packages.local registry.local nexus.cmn.SYSTEM_DOMAIN_NAME] 2d16h services gitea-vcs-external [services/services-gateway] [vcs.cmn.SYSTEM_DOMAIN_NAME] 2d16h services sma-grafana [services-gateway] [sma-grafana.cmn.SYSTEM_DOMAIN_NAME] 2d16h services sma-kibana [services-gateway] [sma-kibana.cmn.SYSTEM_DOMAIN_NAME] 2d16h sysmgmt-health cray-sysmgmt-health-alertmanager [services/services-gateway] [alertmanager.cmn.SYSTEM_DOMAIN_NAME] 2d16h sysmgmt-health cray-sysmgmt-health-grafana [services/services-gateway] [grafana.cmn.SYSTEM_DOMAIN_NAME] 2d16h sysmgmt-health cray-sysmgmt-health-prometheus [services/services-gateway] [prometheus.cmn.SYSTEM_DOMAIN_NAME] 2d16h   Inspect the VirtualService object(s) to learn the destination service and port.\nUse the NAME value returned in the previous step. The following example is for the cray-sysmgmt-health-prometheus service.\nncn-w001# kubectl get vs -n sysmgmt-health cray-sysmgmt-health-prometheus -o yaml Example output:\napiVersion: networking.istio.io/v1beta1 kind: VirtualService metadata: creationTimestamp: \u0026quot;2020-07-09T17:49:07Z\u0026quot; generation: 1 labels: app: cray-sysmgmt-health-prometheus app.kubernetes.io/instance: cray-sysmgmt-health app.kubernetes.io/managed-by: Tiller app.kubernetes.io/name: cray-sysmgmt-health app.kubernetes.io/version: 8.15.4 helm.sh/chart: cray-sysmgmt-health-0.3.1 name: cray-sysmgmt-health-prometheus namespace: sysmgmt-health resourceVersion: \u0026quot;41620\u0026quot; selfLink: /apis/networking.istio.io/v1beta1/namespaces/sysmgmt-health/virtualservices/cray-sysmgmt-health-prometheus uid: d239dfcc-a827-4a51-9b73-6eccfb937088 spec: gateways: - services/services-gateway hosts: - prometheus.cmn.SYSTEM_DOMAIN_NAME http: - match: - authority: exact: prometheus.cmn.SYSTEM_DOMAIN_NAME route: - destination: host: cray-sysmgmt-health-promet-prometheus port: number: 9090 From the VirtualService data, it is straightforward to see how traffic will be routed. In this example, connections to prometheus.cmn.SYSTEM_DOMAIN_NAME will be routed to the cray-sysmgmt-health-prometheus service in the sysmgmt-health namespace on port 9090.\n  External DNS will now be connected to the back-end service.\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/external_dns/ingress_routing/",
	"title": "Ingress Routing",
	"tags": [],
	"description": "",
	"content": "Ingress Routing Ingress routing to services via Istio\u0026rsquo;s ingress gateway is configured by VirtualService custom resource definitions (CRD). When using external hostnames, there needs to be a VirtualService CRD that matches the external hostname to the desired destination.\nFor example, the configuration below controls the ingress routing for prometheus.cmn.SYSTEM_DOMAIN_NAME:\nncn-w001# kubectl get vs -n sysmgmt-health cray-sysmgmt-health-prometheus Example output:\nNAME GATEWAYS HOSTS AGE cray-sysmgmt-health-prometheus [services/services-gateway] [prometheus.cmn.SYSTEM_DOMAIN_NAME] 22h ncn-w001# kubectl get vs -n sysmgmt-health cray-sysmgmt-health-prometheus -o yaml Example output:\napiVersion: networking.istio.io/v1beta1 kind: VirtualService metadata: creationTimestamp: \u0026#34;2020-07-09T17:49:07Z\u0026#34; generation: 1 labels: app: cray-sysmgmt-health-prometheus app.kubernetes.io/instance: cray-sysmgmt-health app.kubernetes.io/managed-by: Tiller app.kubernetes.io/name: cray-sysmgmt-health app.kubernetes.io/version: 8.15.4 helm.sh/chart: cray-sysmgmt-health-0.3.1 name: cray-sysmgmt-health-prometheus namespace: sysmgmt-health resourceVersion: \u0026#34;41620\u0026#34; selfLink: /apis/networking.istio.io/v1beta1/namespaces/sysmgmt-health/virtualservices/cray-sysmgmt-health-prometheus uid: d239dfcc-a827-4a51-9b73-6eccfb937088 spec: gateways: - services/services-gateway hosts: - prometheus.cmn.SYSTEM_DOMAIN_NAME http: - match: - authority: exact: prometheus.cmn.SYSTEM_DOMAIN_NAME route: - destination: host: cray-sysmgmt-health-promet-prometheus port: number: 9090 By matching the external hostname in the authority field, Istio\u0026rsquo;s ingress gateway is able to route incoming traffic from OAuth2 Proxy to the cray-sysmgmt-health-prometheus service in the sysmgmt-health namespace. Also, notice that the VirtualService for prometheus.cmn.SYSTEM_DOMAIN_NAME uses the existing services/services-gateway Gateway CRD and does not create a new one.\nSecure Ingress via OAuth2 Proxy Web apps intended to be accessed via the browser, such as Prometheus, Alertmanager, Grafana, Kiali, Jaeger, Kibana, Elasticsearch, should go through the OAuth2 Proxy reverse proxy. Browser sessions are automatically configured to use a JSON Web Token (JWT) for authorization to Istio\u0026rsquo;s ingress gateway, enabling a central enforcement point of Open Policy Agent (OPA) policies for system management traffic.\nThe OAuth2 Proxy will inject HTTP headers so that an upstream endpoint can identify the user and customize access as needed. To enable ingress via OAuth2 Proxy external hostnames, web apps need to be added to the proxiedWebAppExternalHostnames for the appropriate ingress (customerManagement, customerAccess, or customerHighSpeed) in customizations.yaml (i.e sma-grafana.cmn.{{ network.dns.external }}).\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/dns/manage_the_dns_unbound_resolver/",
	"title": "Manage The DNS Unbound Resolver",
	"tags": [],
	"description": "",
	"content": "Manage the DNS Unbound Resolver The unbound DNS instance is used to resolve names for the physical equipment on the management networks within the system, such as NCNs, UANs, switches, compute nodes, and more. This instance is accessible only within the HPE Cray EX system.\nCheck the Status of the cray-dns-unbound Pods Use the kubectl command to check the status of the pods:\nncn-w001# kubectl get -n services pods | grep unbound Example output:\ncray-dns-unbound-696c58647f-26k4c 2/2 Running 0 121m cray-dns-unbound-696c58647f-rv8h6 2/2 Running 0 121m cray-dns-unbound-coredns-q9lbg 0/2 Completed 0 121m cray-dns-unbound-manager-1596149400-5rqxd 0/2 Completed 0 20h cray-dns-unbound-manager-1596149400-8ppv4 0/2 Completed 0 20h cray-dns-unbound-manager-1596149400-cwksv 0/2 Completed 0 20h cray-dns-unbound-manager-1596149400-dtm9p 0/2 Completed 0 20h cray-dns-unbound-manager-1596149400-hckmp 0/2 Completed 0 20h cray-dns-unbound-manager-1596149400-t24w6 0/2 Completed 0 20h cray-dns-unbound-manager-1596149400-vzxnp 0/2 Completed 0 20h cray-dns-unbound-manager-1596222000-bcsk7 0/2 Completed 0 2m48s cray-dns-unbound-manager-1596222060-8pjx6 0/2 Completed 0 118s cray-dns-unbound-manager-1596222120-hrgbr 0/2 Completed 0 67s cray-dns-unbound-manager-1596222180-sf46q 1/2 NotReady 0 7s For more information about the pods displayed in the output above:\n cray-dns-unbound-xxx - These are the main unbound pods. cray-dns-unbound-manager-yyy - These are job pods that run periodically to update DNS from DHCP (Kea) and the SLS/SMD content for the Hardware State Manager (HSM). Pods will go into the Completed status, and then independently be reaped \u0026ldquo;later\u0026rdquo; by the Kubernetes job\u0026rsquo;s processes. cray-dns-unbound-coredns-zzz - This pod is run one time during installation of Unbound (Stage 4) and reconfigures CoreDNS/ExternalDNS to point to Unbound for all site/internet lookups.  The table below describes what the status of each pod means for the health of the cray-dns-unbound services and pods. The Init and NotReady states are not necessarily bad, but it means the pod is being started or is processing. The cray-dns-manager and cray-dns-coredns pods for cray-dns-unbound are job pods that run periodically.\n   Pod Healthy Status Error Status Other     cray-dns-unbound Running CrashLoopBackOff    cray-dns-coredns Completed CrashLoopBackOff InitNotReady   cray-dns-manager Completed CrashLoopBackOff InitNotReady    Unbound Logs Logs for the unbound Pods will show the status and health of actual DNS lookups. Any logs with ERROR or Exception are an indication that the Unbound service is not healthy.\nncn-w001# kubectl logs -n services -l app.kubernetes.io/instance=cray-dns-unbound -c unbound Example output:\n[1596224129] unbound[8:0] debug: using localzone health.check.unbound. transparent [1596224129] unbound[8:0] debug: using localzone health.check.unbound. transparent [1596224135] unbound[8:0] debug: using localzone health.check.unbound. transparent [1596224135] unbound[8:0] debug: using localzone health.check.unbound. transparent [1596224140] unbound[8:0] debug: using localzone health.check.unbound. transparent [1596224140] unbound[8:0] debug: using localzone health.check.unbound. transparent [1596224145] unbound[8:0] debug: using localzone health.check.unbound. transparent [1596224145] unbound[8:0] debug: using localzone health.check.unbound. transparent [1596224149] unbound[8:0] debug: using localzone health.check.unbound. transparent [1596224149] unbound[8:0] debug: using localzone health.check.unbound. transparent ...snip... [1597020669] unbound[8:0] error: error parsing local-data at 33 \u0026#39;69.0.254.10.in-addr.arpa. PTR .local\u0026#39;: Empty label [1597020669] unbound[8:0] error: Bad local-data RR 69.0.254.10.in-addr.arpa. PTR .local [1597020669] unbound[8:0] fatal error: Could not set up local zones Troubleshooting: If there are any errors in the Unbound logs:\n The \u0026ldquo;localzone health.check.unbound. transparent\u0026rdquo; log is not an issue. Typically, any error seen in Unbound, including the example above, falls under one of two categories:   A bad configuration can come from a misconfiguration in the Helm chart. Currently, only the site/external DNS lookup can be at fault.\nACTION: See the customization.yaml file and look at the system_to_site_lookup value(s). Ensure that the external lookup values are valid and working.\n  Bad data (as shown in the above example) comes only from the DNS Helper and can be seen in the manager logs.\nACTION: Review and troubleshoot the Manager Logs as shown below.\n    View Manager (DNS Helper) Logs Manager logs will show the status of the latest \u0026ldquo;true up\u0026rdquo; of DNS with respect to DHCP actual leases and SLS/SMD status. The following command shows the last four lines of the last Manager run, and can be adjusted as needed.\nncn-w001# kubectl logs -n services pod/$(kubectl get -n services pods \\ | grep unbound | tail -n 1 | cut -f 1 -d \u0026#39; \u0026#39;) -c manager | tail -n4 Example output:\nuid: bc1e8b7f-39e2-49e5-b586-2028953d2940 Comparing new and existing DNS records. No differences found. Skipping DNS update Any log with ERROR or Exception is an indication that DNS is not healthy. The above example includes one of two possible reports for a healthy manager run. The healthy states are described below, as long as the write to the ConfigMap has not failed:\n No differences found. Skipping DNS update Differences found. Writing new DNS records to our ConfigMap.  Troubleshooting: The Manager runs periodically, about every minute in release v1.4. Check if this is a one-time occurrence or if it is a recurring issue.\n If the error shows in one Manager log, but not during the next one, this is likely a one-time failure. Check to see if the record exists in DNS, and if so, move on. If several or all Manager logs show errors, particularly the same error, this could be of several sources:   Bad network connections to DHCP and/or SLS/SMD.\nACTION: Capture as much log data as possible and contact customer support.\n  Bad data from DHCP and/or SLS/SMD.\nACTION: If connections to DHCP (Kea) are involved, refer to Troubleshoot DHCP Issues.\n    Restart Unbound If any errors discovered in the sections above have been deemed transient or have not been resolved, the Unbound pods can be restarted.\nUse the following command to restart the pods:\n  Restart Unbound\nncn-w001# kubectl -n services rollout restart deployment cray-dns-unbound   A rolling restart of the Unbound pods will occur, old pods will not be terminated and new pods will not be added to the load balancer until the new pods have successfully loaded the DNS records.\nClear Bad Data in the Unbound ConfigMap Unbound stores records it obtains from DHCP, SLS, and SMD via the Manager job in a ConfigMap. It is possible to clear this ConfigMap and allow the next Manager job to regenerate the content.\nThis is useful in the following cases:\n A transient failure in any Unbound process or required services has left the configuration data in a bad state. SLS and SMD data needed to be reset because of bad or incorrect data there. DHCP (Kea) has been restarted to clear errors.  The following clears the (DNS Helper) Manager generated data in the ConfigMap. This is generally safe as Unbound runtime data is held elsewhere.\nncn-w001# kubectl -n services patch configmaps cray-dns-unbound \\ --type merge -p \u0026#39;{\u0026#34;binaryData\u0026#34;:{\u0026#34;records.json.gz\u0026#34;:\u0026#34;H4sICLQ/Z2AAA3JlY29yZHMuanNvbgCLjuUCAETSaHADAAAA\u0026#34;}}\u0026#39; Change the Site DNS Server Use the following procedure to change the site DNS server that Unbound forwards queries to. This may be necessary if the site DNS server is moved to a different IP address.\n  Edit the cray-dns-unbound ConfigMap.\nncn-m001# kubectl -n services edit configmap cray-dns-unbound Update the forward-zone value in unbound.conf.\nforward-zone: name: . forward-addr: 172.30.84.40 Multiple DNS servers can be defined if required.\nforward-zone: name: . forward-addr: 172.30.84.40 forward-addr: 192.168.0.1   Restart cray-dns-unbound for this change to take effect.\nncn-m001# kubectl -n services rollout restart deployment cray-dns-unbound deployment.apps/cray-dns-unbound restarted   Update customizations.yaml.\nIMPORTANT: If this step is not performed, then the Unbound configuration will be overwritten with the previous value the next time CSM or Unbound is upgraded.\n  Extract customizations.yaml from the site-init secret in the loftsman namespace.\nncn-m001# kubectl -n loftsman get secret site-init -o json | jq -r \u0026#39;.data.\u0026#34;customizations.yaml\u0026#34;\u0026#39; | base64 -d \u0026gt; customizations.yaml   Update system_to_site_lookups with the value of the new DNS server.\nspec: network: netstaticips: system_to_site_lookups: 172.30.84.40 If multiple DNS servers are required, add the additional servers into the cray-dns-unbound service configuration.\nspec: kubernetes: services: cray-dns-unbound: forwardZones: - name: \u0026#34;.\u0026#34; forwardIps: - \u0026#34;{{ network.netstaticips.system_to_site_lookups }}\u0026#34; - \u0026#34;192.168.0.1\u0026#34; domain_name: \u0026#39;{{ network.dns.external }}\u0026#39;   Update the site-init secret in the loftsman namespace.\nncn-m001# kubectl delete secret -n loftsman site-init ncn-m001# kubectl create secret -n loftsman generic site-init --from-file=customizations.yaml     "
},
{
	"uri": "/docs-csm/en-12/operations/network/dns/powerdns_configuration/",
	"title": "PowerDNS Configuration",
	"tags": [],
	"description": "",
	"content": "PowerDNS Configuration External DNS PowerDNS replaces the CoreDNS server that earlier versions of CSM used to provide External DNS services.\nThe cray-dns-powerdns-can-tcp and cray-dns-powerdns-can-udp LoadBalancer resources are configured to service external DNS requests using the IP address specified by the CSI --cmn-external-dns command line argument.\nThe CSI --system-name and --site-domain command line arguments are combined to form the subdomain used for External DNS.\nSite setup In the following example, the IP address 10.101.8.113 is used for External DNS and the system has the subdomain system.dev.cray.com\nncn-m001# kubectl -n services get service -l app.kubernetes.io/name=cray-dns-powerdns Example output:\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE cray-dns-powerdns-api ClusterIP 10.24.24.29 \u0026lt;none\u0026gt; 8081/TCP 21d cray-dns-powerdns-can-tcp LoadBalancer 10.27.91.157 10.101.8.113 53:30726/TCP 21d cray-dns-powerdns-can-udp LoadBalancer 10.17.232.118 10.101.8.113 53:30810/UDP 21d cray-dns-powerdns-hmn-tcp LoadBalancer 10.31.228.190 10.94.100.85 53:31080/TCP 21d cray-dns-powerdns-hmn-udp LoadBalancer 10.24.134.53 10.94.100.85 53:31338/UDP 21d cray-dns-powerdns-nmn-tcp LoadBalancer 10.22.159.196 10.92.100.85 53:31996/TCP 21d cray-dns-powerdns-nmn-udp LoadBalancer 10.17.203.241 10.92.100.85 53:31898/UDP 21d A system administrator would typically setup the subdomain system.dev.cray.com in their site DNS and create a record which points to the IP address 10.101.8.113, for example ins1.system.dev.cray.com.\nThe administrator would then delegate queries to system.dev.cray.com to ins1.system.dev.cray.com making it authoritative for that subdomain allowing CSM to respond to queries for services like prometheus.system.dev.cray.com\nThe specifics of how to configure to configuring DNS forwarding is dependent on the DNS server in use, please consult the documentation provided by the DNS server vendor for more information.\nAuthoritative Zone Transfer In addition to responding to external DNS queries, PowerDNS can support replication of domain information to secondary servers via AXFR (Authoritative Zone Transfer) queries.\nConfiguration parameters Zone transfer is configured via customizations.yaml parameters and can also be configured at install time via CSI command line arguments.\nParameter: spec.network.dns.primary_server_name CSI command line argument: --primary-server-name Default value: primary Description: The name of the PowerDNS server, this is combined with the system domain information to create the NS record for zones, for example.\nsystem.dev.cray.com.\t1890\tIN\tNS\tprimary.system.dev.cray.com. This record will also point to the External DNS IP address\n$ dig +short primary.system.dev.cray.com 10.101.8.113 Parameter: spec.network.dns.secondary_servers CSI command line argument: --secondary-servers Default value: \u0026quot;\u0026quot; Description: A comma-separated list of DNS servers to notify in the format server name/ip address.\nexternaldns1.my.domain/1.1.1.1,externaldns2.my.domain/2.2.2.2 If the default value is used no servers to notify on zone update will be configured.\nParameter: spec.network.dns.notify_zones CSI command line argument: --notify-zones Default value: \u0026quot;\u0026quot; Description: A comma-separated list of zones to transfer.\nsystem.dev.cray.com,8.101.10.in-addr.arpa If the default value is used then PowerDNS will attempt to transfer all zones.\nExample configuration for BIND An example configuration demonstrating how to configure BIND as a secondary server for zone transfer.\nFor other DNS servers please consult the documentation provided by the DNS server vendor.\n// This is the primary configuration file for the BIND DNS server named. // // Please read /usr/share/doc/bind9/README.Debian.gz for information on the // structure of BIND configuration files in Debian, *BEFORE* you customize // this configuration file. // // If you are just adding zones, please do that in /etc/bind/named.conf.local include \u0026quot;/etc/bind/named.conf.options\u0026quot;; include \u0026quot;/etc/bind/named.conf.local\u0026quot;; include \u0026quot;/etc/bind/named.conf.default-zones\u0026quot;; include \u0026quot;/etc/bind/named.conf.log\u0026quot;; zone \u0026quot;system.dev.cray.com\u0026quot; { type slave; masters { 10.101.8.113; }; allow-notify { 10.101.8.8; 10.101.8.9; 10.101.8.10; }; file \u0026quot;/var/lib/bind/db.system.dev.cray.com\u0026quot;; }; zone \u0026quot;can.system.dev.cray.com\u0026quot; { type slave; masters { 10.101.8.113; }; allow-notify { 10.101.8.8; 10.101.8.9; 10.101.8.10; }; file \u0026quot;/var/lib/bind/db.can.system.dev.cray.com\u0026quot;; }; zone \u0026quot;8.101.10.in-addr.arpa\u0026quot; { type slave; masters { 10.101.8.113; }; allow-notify { 10.101.8.8; 10.101.8.9; 10.101.8.10; }; file \u0026quot;/var/lib/bind/db.8.101.10.in-addr.arpa\u0026quot;; }; masters should be set to the CMN IP address of the PowerDNS service. This is typically defined at install time by the --cmn-external-dns CSI option.\nallow-notify should contain the CAN IP addresses of all Kubernetes worker nodes.\nDNS Security Extensions and zone transfer Zone signing The CSM implementation of PowerDNS supports the DNS Security Extensions (DNSSEC) and the signing of zones with a user-supplied zone signing key.\nIf DNSSEC is to be used for zone transfer then the dnssec SealedSecret in customizations.yaml should be updated to include a base64 encoded version of the private key portion of the desired zone signing key.\nHere is an example of a zone signing key.\nncn-m001# cat Ksystem.dev.cray.com.+013+63812.private Example output:\nPrivate-key-format: v1.3 Algorithm: 13 (ECDSAP256SHA256) PrivateKey: +WFrfooCjTtoRU5UfhrpuTL0IEm6hYc4YJ6u8CcYquo= Created: 20210817081902 Publish: 20210817081902 Activate: 20210817081902 Encode the key using the base64 utility.\nncn-m001# base64 Ksystem.dev.cray.com.+013+63812.private Example output:\nUHJpdmF0ZS1rZXktZm9ybWF0OiB2MS4zCkFsZ29yaXRobTogMTMgKEVDRFNBUDI1NlNIQTI1NikK UHJpdmF0ZUtleTogK1dGcmZvb0NqVHRvUlU1VWZocnB1VEwwSUVtNmhZYzRZSjZ1OENjWXF1bz0K Q3JlYXRlZDogMjAyMTA4MTcwODE5MDIKUHVibGlzaDogMjAyMTA4MTcwODE5MDIKQWN0aXZhdGU6 IDIwMjEwODE3MDgxOTAyCg== Populate the generate block in customizations.yaml with the encoded key.\n IMPORTANT the name of the key in SealedSecret must match the name of the zone being secured, in the below example the zone name is system.dev.cray.com. If multiple zones are to be secured each zone should have its own entry even if the same key is used.\n spec: kubernetes: sealed_secrets: dnssec: generate: name: dnssec-keys data: - type: static_b64 args: name: system.dev.cray.com value: | UHJpdmF0ZS1rZXktZm9ybWF0OiB2MS4zCkFsZ29yaXRobTogMTMgKEVDRFNBUDI1NlNIQTI1NikK UHJpdmF0ZUtleTogK1dGcmZvb0NqVHRvUlU1VWZocnB1VEwwSUVtNmhZYzRZSjZ1OENjWXF1bz0K Q3JlYXRlZDogMjAyMTA4MTcwODE5MDIKUHVibGlzaDogMjAyMTA4MTcwODE5MDIKQWN0aXZhdGU6 IDIwMjEwODE3MDgxOTAyCg== Transaction signatures Transaction signatures (TSIG) provide a secure communication channel between a primary and secondary DNS server\nTo configure TSIG add the desired key to the dnssec generate block in customizations.yaml. At this time only a single transaction signing key is supported and that key is applied to all zones.\nspec: kubernetes: sealed_secrets: dnssec: generate: name: dnssec-keys data: - type: static_b64 args: name: system.dev.cray.com value: | UHJpdmF0ZS1rZXktZm9ybWF0OiB2MS4zCkFsZ29yaXRobTogMTMgKEVDRFNBUDI1NlNIQTI1NikK UHJpdmF0ZUtleTogK1dGcmZvb0NqVHRvUlU1VWZocnB1VEwwSUVtNmhZYzRZSjZ1OENjWXF1bz0K Q3JlYXRlZDogMjAyMTA4MTcwODE5MDIKUHVibGlzaDogMjAyMTA4MTcwODE5MDIKQWN0aXZhdGU6 IDIwMjEwODE3MDgxOTAyCg== - type: static args: name: system-key.tsig value: name: system-key algorithm: hmac-sha256 key: dnFC5euKixIKXAr6sZhI7kVQbQCXoDG5R5eHSYZiBxY=  IMPORTANT The key used for TSIG must have .tsig in the name and unlike the zone signing key it should not be base64 encoded.\n Example configuration for BIND An example configuration demonstrating how to extend the previous BIND configuration example and add the TSIG key.\nkey \u0026quot;system-key\u0026quot; { algorithm hmac-sha256; secret \u0026quot;dnFC5euKixIKXAr6sZhI7kVQbQCXoDG5R5eHSYZiBxY=\u0026quot;; }; # Primary server IP address (i.e., PowerDNS CAN ip) server 10.101.8.113 { keys { system-key; }; }; For other DNS servers please consult the documentation provided by the DNS server vendor.\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/dns/powerdns_migration/",
	"title": "PowerDNS Migration Guide",
	"tags": [],
	"description": "",
	"content": "PowerDNS Migration Guide The migration to PowerDNS as the authoritative DNS source and the introduction of Bifurcated CAN (Customer Access Network) will result in some changes to the node and service naming conventions.\nDNS Record Naming Changes Fully qualified domain names will be introduced for all DNS records.\nCanonical name: hostname.network-path.system-name.site-domain\n hostname - The hostname of the node or service network-path - The network path used to access the node  .nmn - Node Management Network .nmnlb - Node Management Network LoadBalancers .hmn - Hardware Management Network .hmnlb - Hardware management Network LoadBalancers .hsn - High Speed Network (Slingshot) .can - Customer Access Network .chn - Customer High Speed network .cmn - Customer Management Network   system-name - The customer defined name of the system site-domain - The top-level domain  It will be possible to refer to a hostname via a short name consisting of hostname.network-path, for example ncn-w001.nmn.\nUnderscores (_) will be removed from all names in favor of hyphens (-) to ensure compliance with RFC 1035.\nNetwork paths such as -nmn and -hmn in the hostname will be removed. The fully qualified domain name will be used to define the network path.\nKubernetes services that were accessed via the .local domain will now be accessed via a fully qualified domain name.\nBackwards Compatibility The old service and node names will not be migrated to PowerDNS however they will be maintained in Unbound as local records for the purpose of backwards compatibility. These records will be removed entirely in a future release when the cray-dns-unbound-manager job is deprecated. Unbound will remain as the front-end cache.\nThe user and administrative traffic segregation introduced by Bifurcated CAN has changed the URLs for certain services as it is now necessary to include the network path in the fully qualified domain name.\nIn the following table of examples the Backwards Compatible column indicates whether the old DNS name can be expected to function in CSM 1.2.\nExamples The following table of examples assumes that the system was configured with a system-name of shasta and a site-domain of dev.cray.com\n   Old Name New Name Short name Backwards Compatible     api-gw-service-nmn.local api.nmnlb.shasta.dev.cray.com api.nmnlb Yes   registry.local registry.nmnlb.shasta.dev.cray.com registry.nmnlb Yes   packages.local packages.nmnlb.shasta.dev.cray.com packages.nmnlb Yes   spire.local spire.nmnlb.shasta.dev.cray.com spire.nmnlb Yes   rgw-vip.nmn rgw-vip.nmn.local rgw-vip.nmn.shasta.dev.cray.com rgw-vip.nmn Yes   rgw-vip.hmn rgw-vip.hmn.local rgw-vip.hmn.shasta.dev.cray.com rgw-vip.hmn Yes   ncn-w001 ncn-w001.nmn.shasta.dev.cray.com ncn-w001.nmn Yes   ncn-w001-mgmt ncn-w001-mgmt.hmn.shasta.dev.cray.com ncn-w001-mgmt.hmn Yes   nid000001-nmn nid000001.nmn.shasta.dev.cray.com nid000001.nmn Yes   x3000c0s2b0 x3000c0s2b0.hmn.shasta.dev.cray.com x3000c0s2b0.hmn Yes   x3000c0s2b0n0 x3000c0s2b0n0.nmn.shasta.dev.cray.com x3000c0s2b0n0.nmn Yes   x1000c5s0b0n0h0 x1000c5s0b0n0h0.hsn.shasta.dev.cray.com x1000c5s0b0n0h0.hsn Yes   x1000c5s0b0n0h1 x1000c5s0b0n0h1.hsn.shasta.dev.cray.com x1000c5s0b0n0h1.hsn Yes   auth.shasta.dev.cray.com auth.cmn.shasta.dev.cray.com  No   nexus.shasta.dev.cray.com nexus.cmn.shasta.dev.cray.com  No   grafana.shasta.dev.cray.com grafana.cmn.shasta.dev.cray.com  No   prometheus.shasta.dev.cray.com prometheus.cmn.shasta.dev.cray.com  No   alertmanager.shasta.dev.cray.com alertmanager.cmn.shasta.dev.cray.com  No   vcs.shasta.dev.cray.com vcs.cmn.shasta.dev.cray.com  No   kiali-istio.shasta.dev.cray.com kiali-istio.cmn.shasta.dev.cray.com  No   s3.shasta.dev.cray.com s3.cmn.shasta.dev.cray.com  No   sma-grafana.shasta.dev.cray.com sma-grafana.cmn.shasta.dev.cray.com  No   sma-kibana.shasta.dev.cray.com sma-kibana.cmn.shasta.dev.cray.com  No   api.shasta.dev.cray.com api.cmn.shasta.dev.cray.com\napi.chn.shasta.dev.cray.com\napi.can.shasta.dev.cray.com  No    "
},
{
	"uri": "/docs-csm/en-12/operations/network/dns/troubleshoot_common_dns_issues/",
	"title": "Troubleshoot Common DNS Issues",
	"tags": [],
	"description": "",
	"content": "Troubleshoot Common DNS Issues The Domain Name Service (DNS) is part of an integrated infrastructure set designed to provide dynamic host discovery, addressing, and naming. There are several different place to look for troubleshooting as DNS interacts with Dynamic Host Configuration Protocol (DHCP), the Hardware Management Service (HMS), the System Layout Service (SLS), and the State Manager Daemon (SMD).\nThe information below describes what to check when experiencing issues with DNS.\nTroubleshoot an invalid hostname It is important to verify if a hostname is correct. The values in the networks.yml or networks_derived.yml files are sometimes inaccurate.\nThe formats show below are valid hostnames:\n Component names (xnames)  Node Management Network (NMN):  \u0026lt;xname\\\u0026gt; \u0026lt;xname\\\u0026gt;.local   Hardware Management Network (HMN):  \u0026lt;xname\\\u0026gt;-mgmt \u0026lt;xname\\\u0026gt;-mgmt.local     NID  Node Management Network (NMN):  nid\u0026lt;nid\\_number\\\u0026gt;-nmn nid\u0026lt;nid\\_number\\\u0026gt;-nmn.local      Additional steps are needed if a hostname or component name (xname) is either listed incorrectly or not listed at all in the networks.yml or networks_derived.yml files. In that case, the following actions must be taken:\n Update the hostname in the Hardware State Manager (HSM). Re-run any Ansible plays that require the data in these files.  Check if a host is in DNS Use the dig or nslookup commands directly against the Unbound resolver. A host is correctly in DNS if the response from the dig command includes the following:\n The ANSWER SECTION value exists with a valid hostname and IP address. A QUERY value exists that has the status: NOERROR message.  ncn# dig HOSTNAME @10.92.100.225 Example output:\n; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.11.2 \u0026lt;\u0026lt;\u0026gt;\u0026gt; x3000c0r41b0 @10.92.100.225 ;; global options: +cmd ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 57196 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ;; QUESTION SECTION: ;x3000c0r41b0. IN A ;; ANSWER SECTION: x3000c0r41b0. 3600 IN A 10.254.127.200 ;; Query time: 0 msec ;; SERVER: 10.92.100.225#53(10.92.100.225) ;; WHEN: Fri Jul 17 18:49:48 UTC 2020 ;; MSG SIZE rcvd: 57 If either of the commands fail to meet the two conditions mentioned above, then collect the logs to troubleshoot.\nIf there no record in the Unbound pod, that is also an indication that the host is not in DNS.\nncn-mw# kubectl -n services get cm cray-dns-unbound -o jsonpath=\u0026#39;{.binaryData.records\\.json\\.gz}\u0026#39; | base64 --decode | gzip -dc | jq -c \u0026#39;.[]\u0026#39; | grep XNAME Example output excerpt:\n{\u0026#34;hostname\u0026#34;: \u0026#34;x1003c7s7b0\u0026#34;, \u0026#34;ip-address\u0026#34;: \u0026#34;10.104.12.191\u0026#34;} Check the cray-dns-unbound logs for errors Use the following command to check the logs. Any logs with a message saying ERROR or Exception are an indication that the Unbound service is not healthy.\nncn-mw# kubectl logs -n services -l app.kubernetes.io/instance=cray-dns-unbound -c cray-dns-unbound Example output excerpt:\n[1596224129] unbound[8:0] debug: using localzone health.check.unbound. transparent [1596224129] unbound[8:0] debug: using localzone health.check.unbound. transparent [1596224135] unbound[8:0] debug: using localzone health.check.unbound. transparent [1596224135] unbound[8:0] debug: using localzone health.check.unbound. transparent To view the DNS Helper logs:\nncn-mw# kubectl logs -n services pod/$(kubectl get -n services pods | grep unbound | tail -n 1 | cut -f 1 -d \u0026#39; \u0026#39;) -c manager | tail -n4 Example output:\nuid: bc1e8b7f-39e2-49e5-b586-2028953d2940 Comparing new and existing DNS records. No differences found. Skipping DNS update Verify that MetalLB/BGP peering and routes are correct Log in to the spine switches and verify that MetalLB is peering to the spines via BGP.\nCheck both spines if they are available and powered up. All worker nodes should be peered with the spine BGP.\nsw-spine# show ip bgp neighbors Example output:\nBGP neighbor: 10.252.0.4, remote AS: 65533, link: internal: Route-map (in/out) : rm-ncn-w001 BGP version : 4 Configured hold time in seconds : 180 keepalive interval in seconds (configured) : 60 keepalive interval in seconds (established with peer): 30 Minimum holdtime from neighbor in seconds : 90BGP neighbor: 10.252.0.5, remote AS: 65533, link: internal: Route-map (in/out) : rm-ncn-w002 BGP version : 4 Configured hold time in seconds : 180 keepalive interval in seconds (configured) : 60 keepalive interval in seconds (established with peer): 30 Minimum holdtime from neighbor in seconds : 90BGP neighbor: 10.252.0.6, remote AS: 65533, link: internal: Route-map (in/out) : rm-ncn-w003 BGP version : 4 Configured hold time in seconds : 180 keepalive interval in seconds (configured) : 60 keepalive interval in seconds (established with peer): 30 Minimum holdtime from neighbor in seconds : 90 Confirm that routes to Kea (10.92.100.222) via all the NCN worker nodes are available:\nsw-spine# show ip route 10.92.100.222 Example output:\nFlags: F: Failed to install in H/W B: BFD protected (static route) i: BFD session initializing (static route) x: protecting BFD session failed (static route) c: consistent hashing p: partial programming in H/W VRF Name default: ------------------------------------------------------------------------------------------------------ Destination Mask Flag Gateway Interface Source AD/M ------------------------------------------------------------------------------------------------------ default 0.0.0.0 c 10.102.255.9 eth1/16 static 1/1 10.92.100.222 255.255.255.255 c 10.252.0.4 vlan2 bgp 200/0 c 10.252.0.5 vlan2 bgp 200/0 c 10.252.0.6 vlan2 bgp 200/0 tcpdump Verify that the NCN is receiving DNS queries. On an NCN worker or manager with kubectl installed, run the following command:\nncn-mw# tcpdump -envli bond0.nmn0 port 53 The ping and ssh commands fail for hosts in DNS If the IP address returned by the ping command is different than the IP address returned by the dig command, then restart nscd on the impacted node. This is done with the following command:\nncn# systemctl restart nscd.service Attempt to ping or ssh to the IP address that was experiencing issues after restarting nscd.\nCheck for missing DHCP leases Search for a DHCP lease by checking active leases for the service:\nncn# curl -s -k -H \u0026#34;Authorization: Bearer ${TOKEN}\u0026#34; -X POST -H \\  \u0026#34;Content-Type: application/json\u0026#34; \\-d \u0026#39;{ \u0026#34;command\u0026#34;: \u0026#34;lease4-get-all\u0026#34;, \u0026#34;service\u0026#34;: \\ [ \u0026#34;dhcp4\u0026#34; ] }\u0026#39; https://api-gw-service-nmn.local/apis/dhcp-kea | jq For example:\nncn# curl -s -k -H \u0026#34;Authorization: Bearer ${TOKEN}\u0026#34; -X \\  POST -H \u0026#34;Content-Type: application/json\u0026#34; \\-d \u0026#39;{ \u0026#34;command\u0026#34;: \u0026#34;lease4-get-all\u0026#34;, \u0026#34;service\u0026#34;: \\ [ \u0026#34;dhcp4\u0026#34; ] }\u0026#39; https://api-gw-service-nmn.local/apis/dhcp-kea \\  | jq | grep x3000c0s19b4 -A 6 -B 4 Example output:\n{ \u0026#34;cltt\u0026#34;: 1597777241, \u0026#34;fqdn-fwd\u0026#34;: true, \u0026#34;fqdn-rev\u0026#34;: true, \u0026#34;hostname\u0026#34;: \u0026#34;x3000c0s19b4\u0026#34;, \u0026#34;hw-address\u0026#34;: \u0026#34;a4:bf:01:3e:d2:94\u0026#34;, \u0026#34;ip-address\u0026#34;: \u0026#34;10.254.127.205\u0026#34;, \u0026#34;state\u0026#34;: 0, \u0026#34;subnet-id\u0026#34;: 1, \u0026#34;valid-lft\u0026#34;: 300 } If there is not a DHCP lease found, then:\n Ensure the system is running and that its DHCP client is still sending requests. Reboot the system via Redfish/IPMI if required. See Troubleshoot DHCP Issues for more information.  "
},
{
	"uri": "/docs-csm/en-12/operations/network/external_dns/troubleshoot_systems_not_provisioned_with_external_ip_addresses/",
	"title": "Troubleshoot Connectivity To Services With External Ip Addresses",
	"tags": [],
	"description": "",
	"content": "Troubleshoot Connectivity to Services with External IP addresses Systems that do not support CMN/CAN/CHN will not have services provisioned with external IP addresses on CMN/CAN/CHN. Kubernetes will report a \u0026lt;pending\u0026gt; status for the external IP address of the service experiencing connectivity issues.\nIf SSH access to a non-compute node (NCN) is available, it is possible to override resolution of external hostnames and forward local ports into the cluster for the cluster IP address of the corresponding service.\nWARNING: This will bypass the OAuth2 Proxy and Istio ingress gateway, which handle authentication and authorization.\nEnable systems without CMN to provision services with external hostnames.\nPrerequisites The Customer Management Network (CMN) is not supported on the system.\nProcedure   Search for the VirtualService object that corresponds to the desired service.\nThe command below will list all external hostnames.\nncn-w001# kubectl get vs -A | grep -v \u0026#39;[*]\u0026#39; Example output:\nNAMESPACE NAME GATEWAYS HOSTS AGE istio-system kiali [services/services-gateway] [kiali-istio.cmn.SYSTEM_DOMAIN_NAME] 2d16h istio-system tracing [services/services-gateway] [jaeger-istio.cmn.SYSTEM_DOMAIN_NAME] 2d16h nexus nexus [services/services-gateway] [packages.local registry.local nexus.cmn.SYSTEM_DOMAIN_NAME] 2d16h services gitea-vcs-external [services/services-gateway] [vcs.cmn.SYSTEM_DOMAIN_NAME] 2d16h services sma-grafana [services-gateway] [sma-grafana.cmn.SYSTEM_DOMAIN_NAME] 2d16h services sma-kibana [services-gateway] [sma-kibana.cmn.SYSTEM_DOMAIN_NAME] 2d16h sysmgmt-health cray-sysmgmt-health-alertmanager [services/services-gateway] [alertmanager.cmn.SYSTEM_DOMAIN_NAME] 2d16h sysmgmt-health cray-sysmgmt-health-grafana [services/services-gateway] [grafana.cmn.SYSTEM_DOMAIN_NAME] 2d16h sysmgmt-health cray-sysmgmt-health-prometheus [services/services-gateway] [prometheus.cmn.SYSTEM_DOMAIN_NAME] 2d16h   Lookup the cluster IP and port for service.\nThe example below is for the cray-sysmgmt-health-promet-prometheus service.\nncn-w001# kubectl -n sysmgmt-health get service cray-sysmgmt-health-promet-prometheus Example output:\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE cray-sysmgmt-health-promet-prometheus ClusterIP 10.25.124.159 \u0026lt;none\u0026gt; 9090/TCP 23h   Setup port forwarding from a laptop or workstation to access the service.\nUse the cluster IP and port for the service obtained in the previous step. If the port is unprivileged, use the same port number on the local side.\nReplace the cluster IP, port, and system name values in the example below.\n# ssh -L 9090:10.25.124.159:9090 root@SYSTEM_NCN_DOMAIN_NAME   Visit http://localhost:9090/ in a laptop or workstation browser.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/network/external_dns/troubleshoot_dns_configuration_issues/",
	"title": "Troubleshoot DNS Configuration Issues",
	"tags": [],
	"description": "",
	"content": "Troubleshoot DNS Configuration Issues Troubleshoot issues when DNS is not properly configured to delegate name resolution to the core DNS instance on a specific cluster. Although the CMN/CAN/CHN IP address may still be routable using the IP address directly, it may not work because Istio\u0026rsquo;s ingress gateway depends on the hostname (or SNI) to route traffic. For command line tools like cURL, using the \u0026ndash;resolve option to force correct resolution can be used to work around this issue.\nTo get names to resolve correctly in a browser, modifying /etc/hosts to map the external hostname to the appropriate CMN/CAN/CHN IP address may be necessary. In either case, knowing the correct CMN/CAN/CHN IP address is required to use the cURL --resolve option or to update /etc/hosts.\nAssuming CMN/CAN/CHN, BGP, MetalLB, and external DNS are properly configured on a system, name resolution requests can be sent directly to the desired DNS server.\nGain access to system services when external DNS is not configured properly.\nPrerequisites The Domain Name Service (DNS) is not configured properly.\nProcedure   View the DNS configuration on the system.\nncn# kubectl -n services get svc cray-dns-powerdns-cmn-udp Example output:\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE cray-dns-powerdns-cmn-udp LoadBalancer 10.25.156.88 10.101.5.61 53:32674/UDP 45h   Confirm that DNS is configured properly.\nRun the following command from a laptop or workstation.\n# dig SERVICE.NETWORK.SYSTEM_DOMAIN_NAME +short If an IP address is returned, DNS is configured properly and the remaining steps in this procedure can be skipped. If an IP address is not returned, proceed to the next step.\n  Use the IP address to direct DNS requests directly to the cray-dns-powerdns-cmn-udp service.\nReplace the example IP address (10.101.5.61) with the EXTERNAL-IP value returned in step 1. If an IP address is returned, it means upstream IT DNS is not configured correctly.\n# dig SERVICE.NETWORK.SYSTEM_DOMAIN_NAME +short @10.101.5.61   Direct DNS requests to the cluster IP address from an NCN.\nReplace the example cluster IP address (10.25.156.88) with the CLUSTER-IP value returned in step 1. If an IP address is returned, external DNS is configured on the cluster and something is likely wrong with CMN or BGP.\nncn# dig SERVICE.NETWORK.SYSTEM_DOMAIN_NAME +short @10.25.156.88   Access services in the event that external DNS is down, the backing etcd database is having issues, or something was configured incorrectly.\nSearch through Kubernetes service objects for external-dns.alpha.kubernetes.io/hostname annotations to find the corresponding external IP. The kubectl command makes it easy to generate an /etc/hosts compatible listing of IP addresses to hostnames using the go-template output format shown below.\nncn# kubectl get svc --all-namespaces -o go-template --template \\ \u0026#39;{{ range .items }}{{ $lb := .status.loadBalancer }}{{ with .metadata.annotations }} {{ with (index . \u0026#34;external-dns.alpha.kubernetes.io/hostname\u0026#34;) }} {{ $hostnames := . }}{{ with $lb }}{{ range .ingress }} {{ printf \u0026#34;%s\\t%s\\n\u0026#34; .ip $hostnames }}{{ end }}{{ end }} {{ end }}{{ end }}{{ end }}\u0026#39; | sort -u | tr , \u0026#39; \u0026#39; Example output:\n10.101.5.128 opa-gpm.cmn.SYSTEM_DOMAIN_NAME jaeger-istio.cmn.SYSTEM_DOMAIN_NAME kiali-istio.cmn.SYSTEM_DOMAIN_NAME prometheus.cmn.SYSTEM_DOMAIN_NAME alertmanager.cmn.SYSTEM_DOMAIN_NAME grafana.cmn.SYSTEM_DOMAIN_NAME vcs.cmn.SYSTEM_DOMAIN_NAME sma-grafana.cmn.SYSTEM_DOMAIN_NAME sma-kibana.cmn.SYSTEM_DOMAIN_NAME csms.cmn.SYSTEM_DOMAIN_NAME 10.101.5.129 api.cmn.SYSTEM_DOMAIN_NAME auth.cmn.SYSTEM_DOMAIN_NAME nexus.cmn.SYSTEM_DOMAIN_NAME 10.101.5.130 s3.cmn.SYSTEM_DOMAIN_NAME 10.92.100.71 api.nmn.SYSTEM_DOMAIN_NAME auth.nmn.SYSTEM_DOMAIN_NAME 10.92.100.222 cray-dhcp-kea 10.92.100.225 cray-dns-unbound 10.94.100.222 cray-dhcp-kea 10.94.100.225 cray-dns-unbound   "
},
{
	"uri": "/docs-csm/en-12/operations/network/dns/troubleshoot_powerdns/",
	"title": "Troubleshoot PowerDNS",
	"tags": [],
	"description": "",
	"content": "Troubleshoot PowerDNS  List DNS zone contents PowerDNS logging Verify DNSSEC operation  Verify zones are being signed with the zone signing key Verify TSIG operation    List DNS zone contents The PowerDNS zone database is populated with data from two sources:\n The cray-powerdns-manager service creates the zones and DNS records based on data sourced from the System Layout Service (SLS). The external DNS records are populated by the cray-externaldns-external-dns service using data sourced from Kubernetes annotations and virtual service definitions.  Use the cray-powerdns-visualizer command to view the zone structure that cray-powerdns-manager will create.\nncn# kubectl -n services exec deployment/cray-powerdns-manager -c cray-powerdns-manager -- cray-powerdns-visualizer Example output:\n. ├── 252.10.in-addr.arpa. │ ├── [PTR] 5.252.10.in-addr.arpa. │ │ └── sw-leaf-002.nmn.system.dev.cray.com. │ ├── [PTR] 4.252.10.in-addr.arpa. │ │ └── sw-leaf-001.nmn.system.dev.cray.com. │ ├── [PTR] 3.252.10.in-addr.arpa. │ │ └── sw-spine-002.nmn.system.dev.cray.com. │ ├── [PTR] 6.2.252.10.in-addr.arpa. │ │ └── pbs_comm_service.nmn.system.dev.cray.com. │ ├── [PTR] 5.2.252.10.in-addr.arpa. │ │ └── pbs_service.nmn.system.dev.cray.com. │ ├── [PTR] 4.2.252.10.in-addr.arpa. │ │ └── slurmdbd_service.nmn.system.dev.cray.com. │ ├── [PTR] 3.2.252.10.in-addr.arpa. │ │ └── slurmctld_service.nmn.system.dev.cray.com. │ ├── [PTR] 2.2.252.10.in-addr.arpa. │ │ └── uai_macvlan_bridge.nmn.system.dev.cray.com. [...] For more information on External DNS and troubleshooting steps, see the External DNS documentation.\nPowerDNS logging When troubleshooting DNS problems, it may prove helpful to increase the level of logging from the default value of 3 (error).\n  Edit the cray-dns-powerdns Kubernetes ConfigMap.\nncn# kubectl -n services edit cm cray-dns-powerdns   Set the loglevel parameter in pdns.conf to the desired setting.\npdns.conf: |config-dir=/etc/pdns include-dir=/etc/pdns/conf.d guardian=yes loglevel=3 setgid=pdns setuid=pdns socket-dir=/var/run version-string=anonymous   Restart the PowerDNS service.\nncn# kubectl -n services rollout restart deployment cray-dns-powerdns Example output:\ndeployment.apps/cray-dns-powerdns restarted   Refer to the external PowerDNS documentation for more information.\nVerify DNSSEC operation Verify zones are being signed with the zone signing key Check that the required zone has a DNSKEY entry; this should match the public key portion of the zone signing key.\n In the command below, be sure to replace system.dev.cray.com with the correct value for the system.\n ncn# kubectl -n services exec deployment/cray-dns-powerdns -c cray-dns-powerdns -- pdnsutil show-zone system.dev.cray.com Example output:\nThis is a Master zone Last SOA serial number we notified: 2021090901 == 2021090901 (serial in the database) Zone has following allowed TSIG key(s): system-key Zone uses following TSIG key(s): system-key Metadata items: AXFR-MASTER-TSIG system-key SOA-EDIT-API DEFAULT TSIG-ALLOW-AXFR system-key Zone has NSEC semantics keys: ID = 1 (CSK), flags = 257, tag = 26690, algo = 13, bits = 256 Active Published ( ECDSAP256SHA256 ) CSK DNSKEY = system.dev.cray.com. IN DNSKEY 257 3 13 TAi+aXL+Z8ZSFHxz+iEWB3MEdi1JWgM/tb3Q1M76yVOq5Kaur9k+oIAHXvCSR19Iuu+0ZUAyLB0vKkhScJp3Tw== ; ( ECDSAP256SHA256 ) DS = system.dev.cray.com. IN DS 26690 13 1 8c926281afb822a2bea767f08c79b856a2427c26 ; ( SHA1 digest ) DS = system.dev.cray.com. IN DS 26690 13 2 2bfd71e5403f99d25496f5f7f352e71747bb72ee6eb240dcaf8b56b95d18ef6c ; ( SHA256 digest ) DS = system.dev.cray.com. IN DS 26690 13 4 df40f23a7ee051d7e3d40d4059640bda3558cd74a37110b25f7b8cf4e60506c77bf33a660400710d397df0a1cde26d70 ; ( SHA-384 digest ) If the DNSKEY record is incorrect, then verify that the zone name is correct in the dnssec SealedSecret in customizations.yaml, and that the desired zone signing key was used. See the PowerDNS Configuration Guide for more information.\nVerify TSIG operation  IMPORTANT: These examples are for informational purposes only. The use of the dig command -y option to present the key should be avoided in favor of the -k option with the secret in a file, in order to avoid the key being displayed in ps command output or the shell history.\n   Determine the IP address of the external DNS service.\nncn# kubectl -n services get service cray-dns-powerdns-can-tcp Example output:\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE cray-dns-powerdns-can-tcp LoadBalancer 10.27.91.157 10.101.8.113 53:30726/TCP 6d   Verify that an AXFR query to the external DNS service works when the correct TSIG key is presented.\nncn# dig -t axfr system.dev.cray.com @10.101.8.113 -y \\ \u0026#34;hmac-sha256:system-key:dnFC5euKixIKXAr6sZhI7kVQbQCXoDG5R5eHSYZiBxY=\u0026#34; +nocrypto | head Example output:\n; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.10.6 \u0026lt;\u0026lt;\u0026gt;\u0026gt; -t axfr system.dev.cray.com @10.101.8.113 -y hmac-sha256:system-key:dnFC5euKixIKXAr6sZhI7kVQbQCXoDG5R5eHSYZiBxY= +nocrypto ;; global options: +cmd system.dev.cray.com. 3600 IN SOA a.misconfigured.dns.server.invalid. hostmaster.system.dev.cray.com. 2021090901 10800 3600 604800 3600 system.dev.cray.com. 3600 IN RRSIG SOA 13 4 3600 20210930000000 20210909000000 26690 system.dev.cray.com. [omitted] system-key. 0 ANY TSIG hmac-sha256. 1632302505 300 32 XoySAOtCD52OzO/2MeFk0/x7MG6m93IxtWaNfhzaRkg= 44483 NOERROR 0 system.dev.cray.com. 3600 IN DNSKEY 257 3 13 [key id = 26690] system.dev.cray.com. 3600 IN RRSIG DNSKEY 13 4 3600 20210930000000 20210909000000 26690 system.dev.cray.com. [omitted] sma-kibana.system.dev.cray.com. 300 IN A 10.101.8.128 sma-kibana.system.dev.cray.com. 300 IN RRSIG A 13 5 300 20210930000000 20210909000000 26690 system.dev.cray.com. [omitted] When presented with an invalid key, the transfer should fail.\nncn# dig -t axfr system.dev.cray.com @10.101.8.113 -y \u0026#34;hmac-sha256:system-key:B7n/sK74pa7r0ygOZkKpW9mWkPjq8fV71j1SaTpzJMQ=\u0026#34; Example output:\n;; Couldn\u0026#39;t verify signature: expected a TSIG or SIG(0) ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.10.6 \u0026lt;\u0026lt;\u0026gt;\u0026gt; -t axfr system.dev.cray.com @10.101.8.113 -y hmac-sha256:system-key:B7n/sK74pa7r0ygOZkKpW9mWkPjq8fV71j1SaTpzJMQ= ;; global options: +cmd ; Transfer failed. The cray-dns-powerdns pod log will also indicate that the request failed.\nncn# kubectl -n services logs cray-dns-powerdns-64fdf6597c-pqgdt -c cray-dns-powerdns Example output:\n--- Sep 22 09:31:17 Packet for \u0026#39;system.dev.cray.com\u0026#39; denied: Signature with TSIG key \u0026#39;system-key\u0026#39; failed to validate   "
},
{
	"uri": "/docs-csm/en-12/operations/network/external_dns/update_the_cmn-external-dns_value_post-installation/",
	"title": "Update The Cmn-external-DNS Value Post-installation",
	"tags": [],
	"description": "",
	"content": "Update the cmn-external-dns value post-installation By default, the services/cray-dns-powerdns-cmn-tcp and services/cray-dns-powerdns-cmn-udp services both share the same Customer Management Network (CMN) external IP address. This is defined by the cmn-external-dns value, which is specified during the csi config init input.\nThe IP address must be in the static range reserved in MetalLB\u0026rsquo;s cmn-static-pool subnet. Currently, this is the only CMN IP address that must be known external to the system, in order for external DNS to delegate the system-name.site-domain zone to services/cray-dns-powerdns deployment.\nChanging this value after install is relatively straightforward, and only requires the external IP address for services/cray-dns-powerdns-cmn-tcp and services/cray-dns-powerdns-cmn-udp services to be changed. This procedure will update the IP addresses that DNS queries.\nPrerequisites The system is installed.\nProcedure Update the LoadBalancer IP address   Find the external IP address for the services/cray-dns-powerdns-cmn-tcp and services/cray-dns-powerdns-cmn-tcp services.\nncn-m001# kubectl -n services get svc | grep cray-dns-powerdns-cmn- Example output:\ncray-dns-powerdns-cmn-tcp LoadBalancer 10.25.211.48 10.102.14.113 53:31111/TCP 2d2h cray-dns-powerdns-cmn-udp LoadBalancer 10.25.156.88 10.102.14.113 53:32674/UDP 2d2h   Edit the services and change spec.loadBalancerIP to the desired CMN IP address.\n  Edit the cray-dns-powerdns-cmn-tcp service.\nncn-m001# kubectl -n services edit svc cray-dns-powerdns-cmn-tcp   Edit the cray-dns-powerdns-cmn-udp service.\nncn-m001# kubectl -n services edit svc cray-dns-powerdns-cmn-udp     Update SLS The external-dns IP address reservation in the SLS CMN cmn_metallb_static_pool subnet should be updated to the desired CMN IP address.\n  Retrieve the SLS data for CMN.\nncn-m001# export TOKEN=$(curl -s -k -S -d grant_type=client_credentials \\  -d client_id=admin-client -d client_secret=`kubectl get secrets admin-client-auth \\  -o jsonpath=\u0026#39;{.data.client-secret}\u0026#39; | base64 -d` \\  https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token \\  | jq -r \u0026#39;.access_token\u0026#39;) ncn-m001# curl -s -k -H \u0026#34;Authorization: Bearer ${TOKEN}\u0026#34; \\  https://api-gw-service-nmn.local/apis/sls/v1/networks/CMN|jq \u0026gt; CMN.json ncn-m001# cp CMN.json CMN.json.bak   Update the external-dns IP address in CMN.json to the desired CMN IP address.\n{ \u0026#34;Comment\u0026#34;: \u0026#34;site to system lookups\u0026#34;, \u0026#34;IPAddress\u0026#34;: \u0026#34;x.x.x.x\u0026#34;, \u0026#34;Name\u0026#34;: \u0026#34;external-dns\u0026#34; }   Upload the updated CMN.json file to SLS.\nncn-m001# curl -s -k -H \u0026#34;Authorization: Bearer ${TOKEN}\u0026#34; --header \\  \u0026#34;Content-Type: application/json\u0026#34; --request PUT --data @CMN.json \\  https://api-gw-service-nmn.local/apis/sls/v1/networks/CMN   Update customizations.yaml IMPORTANT: If this step is not performed, then the PowerDNS configuration will be overwritten with the previous value the next time CSM or the cray-dns-powerdns Helm chart is upgraded.\n  Extract customizations.yaml from the site-init secret in the loftsman namespace.\nncn-m001# kubectl -n loftsman get secret site-init -o json | jq -r \u0026#39;.data.\u0026#34;customizations.yaml\u0026#34;\u0026#39; | base64 -d \u0026gt; customizations.yaml   Update system_to_site_lookups in customizations.yaml to the desired CMN IP address.\nspec: network: netstaticips: site_to_system_lookups: x.x.x.x   Update the site-init secret in the loftsman namespace.\nncn-m001# kubectl delete secret -n loftsman site-init ncn-m001# kubectl create secret -n loftsman generic site-init --from-file=customizations.yaml   "
},
{
	"uri": "/docs-csm/en-12/operations/network/customer_accessible_networks/bi-can_arista_aruba_config/",
	"title": "Bi-CAN Aruba/arista Configuration",
	"tags": [],
	"description": "",
	"content": "BI-CAN Aruba/Arista Configuration This is an example configuration of how to connect two Aruba spine switches to two Arista switches. This example is from a running system utilizing the bifurcated CAN feature offered in CSM 1.2.\nSummary:\n Two Aruba 8325 switches running in a VSX cluster. Two Arista 7060CX2-32S switches running MLAG. The Arista switches are connected to the Slingshot/HSN network via static MLAG. The Aruba Spine switches are connected to the Arista switches with point-to-point OSPF links. The Arista Edge switches are redistributing the default route to the Aruba switches via OSPF. This allows the Shasta cluster to have external access. The Arista switches are utilizing a static default route.  Topology Configurations sw-edge-001 ! device: sw-edge-001 (DCS-7060CX2-32S, EOS-4.23.0F) ! ! boot system flash:EOS-4.23.0F.swi ! transceiver qsfp default-mode 4x10G ! hostname sw-edge-001 ! spanning-tree mode none no spanning-tree vlan-id 4094 ! port-channel load-balance trident fields mac src-mac dst-mac port-channel load-balance trident fields ip source-ip destination-ip source-port destination-port ! service unsupported-transceiver PGSPermanentUnlock \u0026lt;removed\u0026gt; ! no aaa root ! username admin privilege 15 role network-admin secret sha512 \u0026lt;removed\u0026gt; ! vlan 5 name CHN ! vlan 4094 trunk group mlagpeer ! interface Port-Channel10 switchport mode trunk switchport trunk group mlagpeer ! interface Port-Channel64 mtu 9214 switchport access vlan 5 mlag 64 ! interface Port-Channel251 mtu 9214 switchport access vlan 5 ! interface Ethernet1/1 mtu 9198 speed auto 100gfull no switchport ip address 192.168.80.0/31 ip ospf network point-to-point ip ospf area 0.0.0.0 ! interface Ethernet2/1 mtu 9198 speed auto 100gfull no switchport ip address 192.168.80.2/31 ip ospf network point-to-point ip ospf area 0.0.0.0 ! interface Ethernet3/1 channel-group 10 mode active ! interface Ethernet4/1 channel-group 10 mode active ! interface Ethernet17/1 speed forced 10000full no switchport ip address 10.103.15.234/30 ! interface Ethernet29/1 mtu 9214 flowcontrol send on flowcontrol receive on speed forced 100gfull error-correction encoding reed-solomon channel-group 64 mode on ! interface Ethernet30/1 mtu 9214 flowcontrol send on flowcontrol receive on speed forced 100gfull error-correction encoding reed-solomon channel-group 64 mode on ! interface Ethernet31/1 mtu 9214 flowcontrol send on flowcontrol receive on speed forced 100gfull error-correction encoding reed-solomon channel-group 64 mode on ! interface Ethernet32/1 mtu 9214 flowcontrol send on flowcontrol receive on speed forced 100gfull error-correction encoding reed-solomon channel-group 64 mode on ! interface Management1 ! interface Vlan5 mtu 9214 ip address 10.103.0.194/26 ip virtual-router address 10.103.0.193 mac address virtual-router ! interface Vlan4094 ip address 10.0.0.1/30 ! ip virtual-router mac-address 00:1c:73:00:0a:13 ! ip route 0.0.0.0/0 10.103.15.233 ! ip routing ! mlag configuration domain-id mlag1 local-interface Vlan4094 peer-address 10.0.0.2 peer-link Port-Channel10 ! router ospf 1 router-id 10.103.15.234 max-lsa 12000 default-information originate ! end sw-edge-002 ! device: sw-edge-002 (DCS-7060CX2-32S, EOS-4.23.0F) ! ! boot system flash:EOS-4.23.0F.swi ! transceiver qsfp default-mode 4x10G ! hostname sw-edge-002 ! spanning-tree mode none no spanning-tree vlan-id 4094 ! port-channel load-balance trident fields mac src-mac dst-mac port-channel load-balance trident fields ip source-ip destination-ip source-port destination-port ! service unsupported-transceiver PGSPermanentUnlock \u0026lt;removed\u0026gt; ! no aaa root ! username admin privilege 15 role network-admin secret sha512 \u0026lt;removed\u0026gt; ! vlan 5 name CHN ! vlan 4094 trunk group mlagpeer ! interface Port-Channel10 switchport mode trunk switchport trunk group mlagpeer ! interface Port-Channel64 mtu 9214 switchport access vlan 5 mlag 64 ! interface Port-Channel252 mtu 9214 switchport access vlan 5 ! interface Ethernet1/1 mtu 9198 speed auto 100gfull no switchport ip address 192.168.80.4/31 ip ospf network point-to-point ip ospf area 0.0.0.0 ! interface Ethernet2/1 mtu 9198 speed auto 100gfull no switchport ip address 192.168.80.6/31 ip ospf network point-to-point ip ospf area 0.0.0.0 ! interface Ethernet3/1 channel-group 10 mode active ! interface Ethernet4/1 channel-group 10 mode active ! interface Ethernet18/1 speed forced 10000full no switchport ip address 10.103.15.238/30 ! interface Ethernet29/1 mtu 9214 flowcontrol send on flowcontrol receive on speed forced 100gfull error-correction encoding reed-solomon channel-group 64 mode on ! interface Ethernet30/1 mtu 9214 flowcontrol send on flowcontrol receive on speed forced 100gfull error-correction encoding reed-solomon channel-group 64 mode on ! interface Ethernet31/1 mtu 9214 flowcontrol send on flowcontrol receive on speed forced 100gfull error-correction encoding reed-solomon channel-group 64 mode on ! interface Ethernet32/1 mtu 9214 flowcontrol send on flowcontrol receive on speed forced 100gfull error-correction encoding reed-solomon channel-group 64 mode on ! interface Management1 ! interface Vlan5 description HSN mtu 9214 ip address 10.103.0.195/26 ip virtual-router address 10.103.0.193 mac address virtual-router ! interface Vlan4094 ip address 10.0.0.2/30 ! ip virtual-router mac-address 00:1c:73:00:0a:13 ! ip route 0.0.0.0/0 10.103.15.237 ! ip routing ! mlag configuration domain-id mlag1 local-interface Vlan4094 peer-address 10.0.0.1 peer-link Port-Channel10 ! router ospf 1 router-id 10.103.15.238 max-lsa 12000 default-information originate ! end sw-spine-001 Current configuration: ! !Version ArubaOS-CX GL.10.09.0010 !export-password: default hostname sw-spine-001 no ip icmp redirect profile leaf vrf Customer vrf keepalive ntp server 10.252.1.10 ntp server 10.252.1.8 ntp server 10.252.1.9 ntp enable ! ! ! ! ! ssh server vrf Customer ssh server vrf default ssh server vrf keepalive ssh server vrf mgmt access-list ip cmn-can 10 deny any 10.103.0.0/255.255.255.128 10.103.0.128/255.255.255.192 20 deny any 10.103.0.128/255.255.255.192 10.103.0.0/255.255.255.128 30 permit any any any access-list ip mgmt 10 comment ALLOW SSH, HTTPS, AND SNMP ON HMN SUBNET and CMN 20 permit tcp 10.254.0.0/255.255.128.0 any eq ssh 30 permit tcp 10.254.0.0/255.255.128.0 any eq https 40 permit udp 10.254.0.0/255.255.128.0 any eq snmp 50 permit udp 10.254.0.0/255.255.128.0 any eq snmp-trap 60 permit tcp 10.103.0.0/255.255.255.128 any eq ssh 70 permit tcp 10.103.0.0/255.255.255.128 any eq https 80 permit udp 10.103.0.0/255.255.255.128 any eq snmp 90 permit udp 10.103.0.0/255.255.255.128 any eq snmp-trap 100 comment ALLOW SNMP FROM HMN METALLB SUBNET 110 permit udp 10.94.100.0/255.255.255.0 any eq snmp 120 permit udp 10.94.100.0/255.255.255.0 any eq snmp-trap 130 comment BLOCK SSH, HTTPS, AND SNMP FROM EVERYWHERE ELSE 140 deny tcp any any eq ssh 150 deny tcp any any eq https 160 deny udp any any eq snmp 170 deny udp any any eq snmp-trap 180 comment ALLOW ANYTHING ELSE 190 permit any any any access-list ip nmn-hmn 10 deny any 10.252.0.0/255.255.128.0 10.254.0.0/255.255.128.0 20 deny any 10.254.0.0/255.255.128.0 10.252.0.0/255.255.128.0 30 deny any 10.252.0.0/255.255.128.0 10.104.0.0/255.255.128.0 40 deny any 10.254.0.0/255.255.128.0 10.100.0.0/255.255.128.0 50 deny any 10.100.0.0/255.255.128.0 10.254.0.0/255.255.128.0 60 deny any 10.100.0.0/255.255.128.0 10.104.0.0/255.255.128.0 70 deny any 10.104.0.0/255.255.128.0 10.252.0.0/255.255.128.0 80 deny any 10.104.0.0/255.255.128.0 10.100.0.0/255.255.128.0 90 deny any 10.92.100.0/255.255.255.0 10.254.0.0/255.255.128.0 100 deny any 10.94.100.0/255.255.255.0 10.252.0.0/255.255.128.0 110 deny any 10.254.0.0/255.255.128.0 10.92.100.0/255.255.255.0 120 deny any 10.252.0.0/255.255.128.0 10.94.100.0/255.255.255.0 130 permit any any any apply access-list ip mgmt control-plane vrf default vlan 1 vlan 2 name NMN apply access-list ip nmn-hmn in apply access-list ip nmn-hmn out vlan 4 name HMN apply access-list ip nmn-hmn in apply access-list ip nmn-hmn out vlan 6 name CAN apply access-list ip cmn-can in apply access-list ip cmn-can out vlan 7 name CMN apply access-list ip cmn-can in apply access-list ip cmn-can out vlan 10 name SUN spanning-tree spanning-tree priority 0 spanning-tree config-name MST0 spanning-tree config-revision 1 interface mgmt shutdown ip dhcp interface lag 101 multi-chassis no shutdown description spine_to_leaf_lag no routing vlan trunk native 1 vlan trunk allowed 1-2,4,6-7 lacp mode active spanning-tree root-guard interface lag 103 multi-chassis no shutdown description spine_to_leaf_lag no routing vlan trunk native 1 vlan trunk allowed 1-2,4,6-7 lacp mode active spanning-tree root-guard interface lag 201 multi-chassis no shutdown description sw-spine-001:15==\u0026gt;sw-cdu-001:49 no routing vlan trunk native 1 vlan trunk allowed 1-2,4,7 lacp mode active spanning-tree root-guard interface lag 256 no shutdown description ISL link no routing vlan trunk native 1 tag vlan trunk allowed all lacp mode active interface 1/1/1 no shutdown mtu 9198 description sw-spine-001:1==\u0026gt;sw-leaf-002:53 lag 101 interface 1/1/2 no shutdown mtu 9198 description sw-spine-001:2==\u0026gt;sw-leaf-001:53 lag 101 interface 1/1/3 no shutdown mtu 9198 description sw-spine-001:3==\u0026gt;sw-leaf-004:53 lag 103 interface 1/1/4 no shutdown mtu 9198 description sw-spine-001:4==\u0026gt;sw-leaf-003:53 lag 103 interface 1/1/15 no shutdown mtu 9198 description sw-spine-001:15==\u0026gt;sw-cdu-001:49 lag 201 interface 1/1/16 no shutdown mtu 9198 description sw-spine-001:16==\u0026gt;sw-cdu-002:49 lag 201 interface 1/1/18 description UNUSED interface 1/1/28 no shutdown vrf attach Customer ip mtu 9198 ip address 192.168.80.5/31 ip ospf 2 area 0.0.0.0 ip ospf network point-to-point interface 1/1/29 no shutdown vrf attach Customer ip mtu 9198 ip address 192.168.80.1/31 ip ospf 2 area 0.0.0.0 ip ospf network point-to-point interface 1/1/30 no shutdown vrf attach keepalive description VSX keepalive ip address 192.168.255.0/31 interface 1/1/31 no shutdown mtu 9198 description vsx isl lag 256 interface 1/1/32 no shutdown mtu 9198 description vsx isl lag 256 interface loopback 0 ip address 10.2.0.2/32 ip ospf 1 area 0.0.0.0 interface vlan 1 description MGMT ip mtu 9198 ip address 10.1.0.2/16 active-gateway ip mac 12:00:00:00:6b:00 active-gateway ip 10.1.0.1 ip helper-address 10.92.100.222 interface vlan 2 description NMN ip mtu 9198 ip address 10.252.0.2/17 active-gateway ip mac 12:00:00:00:6b:00 active-gateway ip 10.252.0.1 ip helper-address 10.92.100.222 ip ospf 1 area 0.0.0.0 interface vlan 4 description HMN ip mtu 9198 ip address 10.254.0.2/17 active-gateway ip mac 12:00:00:00:6b:00 active-gateway ip 10.254.0.1 ip helper-address 10.94.100.222 ip ospf 1 area 0.0.0.0 interface vlan 6 vrf attach Customer description CAN ip mtu 9198 ip address 10.103.0.130/26 active-gateway ip mac 12:00:00:00:6b:00 active-gateway ip 10.103.0.129 interface vlan 7 vrf attach Customer description CMN ip mtu 9198 ip address 10.103.0.2/25 active-gateway ip mac 12:00:00:00:6b:00 active-gateway ip 10.103.0.1 ip ospf 2 area 0.0.0.0 vsx system-mac 02:00:00:00:6b:00 inter-switch-link lag 256 role primary keepalive peer 192.168.255.1 source 192.168.255.0 vrf keepalive linkup-delay-timer 600 vsx-sync vsx-global ip dns server-address 10.92.100.225 ip prefix-list pl-cmn seq 10 permit 10.103.0.0/25 ge 25 ip prefix-list pl-hmn seq 20 permit 10.94.100.0/24 ge 24 ip prefix-list pl-nmn seq 30 permit 10.92.100.0/24 ge 24 ip prefix-list tftp seq 10 permit 10.92.100.60/32 ge 32 le 32 ip prefix-list tftp seq 20 permit 10.94.100.60/32 ge 32 le 32 ! ! ! ! route-map CMN permit seq 10 match interface vlan7 route-map ncn-w001 permit seq 10 match ip address prefix-list tftp match ip next-hop 10.252.1.8 set local-preference 1000 route-map ncn-w001 permit seq 20 match ip address prefix-list tftp match ip next-hop 10.252.1.9 set local-preference 1100 route-map ncn-w001 permit seq 30 match ip address prefix-list tftp match ip next-hop 10.252.1.10 set local-preference 1200 route-map ncn-w001 permit seq 40 match ip address prefix-list pl-cmn set ip next-hop 10.103.0.25 route-map ncn-w001 permit seq 50 match ip address prefix-list pl-hmn set ip next-hop 10.254.1.16 route-map ncn-w001 permit seq 60 match ip address prefix-list pl-nmn set ip next-hop 10.252.1.10 route-map ncn-w002 permit seq 10 match ip address prefix-list tftp match ip next-hop 10.252.1.8 set local-preference 1000 route-map ncn-w002 permit seq 20 match ip address prefix-list tftp match ip next-hop 10.252.1.9 set local-preference 1100 route-map ncn-w002 permit seq 30 match ip address prefix-list tftp match ip next-hop 10.252.1.10 set local-preference 1200 route-map ncn-w002 permit seq 40 match ip address prefix-list pl-cmn set ip next-hop 10.103.0.24 route-map ncn-w002 permit seq 50 match ip address prefix-list pl-hmn set ip next-hop 10.254.1.14 route-map ncn-w002 permit seq 60 match ip address prefix-list pl-nmn set ip next-hop 10.252.1.9 route-map ncn-w003 permit seq 10 match ip address prefix-list tftp match ip next-hop 10.252.1.8 set local-preference 1000 route-map ncn-w003 permit seq 20 match ip address prefix-list tftp match ip next-hop 10.252.1.9 set local-preference 1100 route-map ncn-w003 permit seq 30 match ip address prefix-list tftp match ip next-hop 10.252.1.10 set local-preference 1200 route-map ncn-w003 permit seq 40 match ip address prefix-list pl-cmn set ip next-hop 10.103.0.23 route-map ncn-w003 permit seq 50 match ip address prefix-list pl-hmn set ip next-hop 10.254.1.12 route-map ncn-w003 permit seq 60 match ip address prefix-list pl-nmn set ip next-hop 10.252.1.8 route-map ncn-w004 permit seq 10 match ip address prefix-list tftp match ip next-hop 10.252.1.8 set local-preference 1000 route-map ncn-w004 permit seq 20 match ip address prefix-list tftp match ip next-hop 10.252.1.9 set local-preference 1100 route-map ncn-w004 permit seq 30 match ip address prefix-list tftp match ip next-hop 10.252.1.10 set local-preference 1200 route-map ncn-w004 permit seq 40 match ip address prefix-list pl-cmn set ip next-hop 10.103.0.22 route-map ncn-w004 permit seq 50 match ip address prefix-list pl-hmn set ip next-hop 10.254.1.10 route-map ncn-w004 permit seq 60 match ip address prefix-list pl-nmn set ip next-hop 10.252.1.7 ! router ospf 2 vrf Customer router-id 10.2.0.2 redistribute connected route-map CMN area 0.0.0.0 router ospf 1 router-id 10.2.0.2 redistribute bgp area 0.0.0.0 router ospfv3 1 router-id 10.2.0.2 area 0.0.0.0 router bgp 65533 bgp router-id 10.2.0.2 maximum-paths 8 timers bgp 1 3 distance bgp 20 70 neighbor 10.252.0.3 remote-as 65533 neighbor 10.252.1.7 remote-as 65533 neighbor 10.252.1.7 passive neighbor 10.252.1.8 remote-as 65533 neighbor 10.252.1.8 passive neighbor 10.252.1.9 remote-as 65533 neighbor 10.252.1.9 passive neighbor 10.252.1.10 remote-as 65533 neighbor 10.252.1.10 passive address-family ipv4 unicast neighbor 10.252.0.3 activate neighbor 10.252.1.7 activate neighbor 10.252.1.7 route-map ncn-w004 in neighbor 10.252.1.8 activate neighbor 10.252.1.8 route-map ncn-w003 in neighbor 10.252.1.9 activate neighbor 10.252.1.9 route-map ncn-w002 in neighbor 10.252.1.10 activate neighbor 10.252.1.10 route-map ncn-w001 in exit-address-family ! vrf Customer bgp router-id 10.2.0.2 maximum-paths 8 timers bgp 1 3 distance bgp 20 70 neighbor 10.103.0.3 remote-as 65533 neighbor 10.103.0.22 remote-as 65536 neighbor 10.103.0.22 passive neighbor 10.103.0.23 remote-as 65536 neighbor 10.103.0.23 passive neighbor 10.103.0.24 remote-as 65536 neighbor 10.103.0.24 passive neighbor 10.103.0.25 remote-as 65536 neighbor 10.103.0.25 passive address-family ipv4 unicast neighbor 10.103.0.3 activate neighbor 10.103.0.22 activate neighbor 10.103.0.23 activate neighbor 10.103.0.24 activate neighbor 10.103.0.25 activate exit-address-family ! https-server vrf Customer https-server vrf default https-server vrf mgmt sw-spine-002 Current configuration: ! !Version ArubaOS-CX GL.10.09.0010 !export-password: default hostname sw-spine-002 no ip icmp redirect profile leaf vrf Customer vrf keepalive ntp server 10.252.1.10 ntp server 10.252.1.8 ntp server 10.252.1.9 ntp enable ! ! ! ! ! ssh server vrf Customer ssh server vrf default ssh server vrf keepalive ssh server vrf mgmt access-list ip cmn-can 10 deny any 10.103.0.0/255.255.255.128 10.103.0.128/255.255.255.192 20 deny any 10.103.0.128/255.255.255.192 10.103.0.0/255.255.255.128 30 permit any any any access-list ip mgmt 10 comment ALLOW SSH, HTTPS, AND SNMP ON HMN SUBNET and CMN 20 permit tcp 10.254.0.0/255.255.128.0 any eq ssh 30 permit tcp 10.254.0.0/255.255.128.0 any eq https 40 permit udp 10.254.0.0/255.255.128.0 any eq snmp 50 permit udp 10.254.0.0/255.255.128.0 any eq snmp-trap 60 permit tcp 10.103.0.0/255.255.255.128 any eq ssh 70 permit tcp 10.103.0.0/255.255.255.128 any eq https 80 permit udp 10.103.0.0/255.255.255.128 any eq snmp 90 permit udp 10.103.0.0/255.255.255.128 any eq snmp-trap 100 comment ALLOW SNMP FROM HMN METALLB SUBNET 110 permit udp 10.94.100.0/255.255.255.0 any eq snmp 120 permit udp 10.94.100.0/255.255.255.0 any eq snmp-trap 130 comment BLOCK SSH, HTTPS, AND SNMP FROM EVERYWHERE ELSE 140 deny tcp any any eq ssh 150 deny tcp any any eq https 160 deny udp any any eq snmp 170 deny udp any any eq snmp-trap 180 comment ALLOW ANYTHING ELSE 190 permit any any any access-list ip nmn-hmn 10 deny any 10.252.0.0/255.255.128.0 10.254.0.0/255.255.128.0 20 deny any 10.254.0.0/255.255.128.0 10.252.0.0/255.255.128.0 30 deny any 10.252.0.0/255.255.128.0 10.104.0.0/255.255.128.0 40 deny any 10.254.0.0/255.255.128.0 10.100.0.0/255.255.128.0 50 deny any 10.100.0.0/255.255.128.0 10.254.0.0/255.255.128.0 60 deny any 10.100.0.0/255.255.128.0 10.104.0.0/255.255.128.0 70 deny any 10.104.0.0/255.255.128.0 10.252.0.0/255.255.128.0 80 deny any 10.104.0.0/255.255.128.0 10.100.0.0/255.255.128.0 90 deny any 10.92.100.0/255.255.255.0 10.254.0.0/255.255.128.0 100 deny any 10.94.100.0/255.255.255.0 10.252.0.0/255.255.128.0 110 deny any 10.254.0.0/255.255.128.0 10.92.100.0/255.255.255.0 120 deny any 10.252.0.0/255.255.128.0 10.94.100.0/255.255.255.0 130 permit any any any apply access-list ip mgmt control-plane vrf default vlan 1 vlan 2 name NMN apply access-list ip nmn-hmn in apply access-list ip nmn-hmn out vlan 4 name HMN apply access-list ip nmn-hmn in apply access-list ip nmn-hmn out vlan 6 name CAN apply access-list ip cmn-can in apply access-list ip cmn-can out vlan 7 name CMN apply access-list ip cmn-can in apply access-list ip cmn-can out vlan 10 name SUN spanning-tree spanning-tree priority 0 spanning-tree config-name MST0 spanning-tree config-revision 1 interface mgmt shutdown ip dhcp interface lag 101 multi-chassis no shutdown description spine_to_leaf_lag no routing vlan trunk native 1 vlan trunk allowed 1-2,4,6-7 lacp mode active spanning-tree root-guard interface lag 103 multi-chassis no shutdown description spine_to_leaf_lag no routing vlan trunk native 1 vlan trunk allowed 1-2,4,6-7 lacp mode active spanning-tree root-guard interface lag 201 multi-chassis no shutdown description sw-spine-002:15==\u0026gt;sw-cdu-001:50 no routing vlan trunk native 1 vlan trunk allowed 1-2,4,7 lacp mode active spanning-tree root-guard interface lag 256 no shutdown description ISL link no routing vlan trunk native 1 tag vlan trunk allowed all lacp mode active interface 1/1/1 no shutdown mtu 9198 description sw-spine-002:1==\u0026gt;sw-leaf-002:54 lag 101 interface 1/1/2 no shutdown mtu 9198 description sw-spine-002:2==\u0026gt;sw-leaf-001:54 lag 101 interface 1/1/3 no shutdown mtu 9198 description sw-spine-002:3==\u0026gt;sw-leaf-004:54 lag 103 interface 1/1/4 no shutdown mtu 9198 description sw-spine-002:4==\u0026gt;sw-leaf-003:54 lag 103 interface 1/1/15 no shutdown mtu 9198 description sw-spine-002:15==\u0026gt;sw-cdu-001:50 lag 201 interface 1/1/16 no shutdown mtu 9198 description sw-spine-002:16==\u0026gt;sw-cdu-002:50 lag 201 interface 1/1/28 no shutdown mtu 9198 vrf attach Customer ip mtu 9198 ip address 192.168.80.7/31 ip ospf 2 area 0.0.0.0 ip ospf network point-to-point interface 1/1/29 no shutdown mtu 9198 vrf attach Customer ip mtu 9198 ip address 192.168.80.3/31 ip ospf 2 area 0.0.0.0 ip ospf network point-to-point interface 1/1/30 no shutdown vrf attach keepalive description VSX keepalive ip address 192.168.255.1/31 interface 1/1/31 no shutdown mtu 9198 description vsx isl lag 256 interface 1/1/32 no shutdown mtu 9198 description vsx isl lag 256 interface loopback 0 ip address 10.2.0.3/32 ip ospf 1 area 0.0.0.0 interface vlan 1 description MGMT ip mtu 9198 ip address 10.1.0.3/16 active-gateway ip mac 12:00:00:00:6b:00 active-gateway ip 10.1.0.1 ip helper-address 10.92.100.222 interface vlan 2 description NMN ip mtu 9198 ip address 10.252.0.3/17 active-gateway ip mac 12:00:00:00:6b:00 active-gateway ip 10.252.0.1 ip helper-address 10.92.100.222 ip ospf 1 area 0.0.0.0 interface vlan 4 description HMN ip mtu 9198 ip address 10.254.0.3/17 active-gateway ip mac 12:00:00:00:6b:00 active-gateway ip 10.254.0.1 ip helper-address 10.94.100.222 ip ospf 1 area 0.0.0.0 interface vlan 6 vrf attach Customer description CAN ip mtu 9198 ip address 10.103.0.131/26 active-gateway ip mac 12:00:00:00:6b:00 active-gateway ip 10.103.0.129 interface vlan 7 vrf attach Customer description CMN ip mtu 9198 ip address 10.103.0.3/25 active-gateway ip mac 12:00:00:00:6b:00 active-gateway ip 10.103.0.1 ip ospf 2 area 0.0.0.0 vsx system-mac 02:00:00:00:6b:00 inter-switch-link lag 256 role secondary keepalive peer 192.168.255.0 source 192.168.255.1 vrf keepalive linkup-delay-timer 600 vsx-sync vsx-global ip dns server-address 10.92.100.225 ip prefix-list pl-cmn seq 10 permit 10.103.0.0/25 ge 25 ip prefix-list pl-hmn seq 20 permit 10.94.100.0/24 ge 24 ip prefix-list pl-nmn seq 30 permit 10.92.100.0/24 ge 24 ip prefix-list tftp seq 10 permit 10.92.100.60/32 ge 32 le 32 ip prefix-list tftp seq 20 permit 10.94.100.60/32 ge 32 le 32 ! ! ! ! route-map CMN permit seq 10 match interface vlan7 route-map ncn-w001 permit seq 10 match ip address prefix-list tftp match ip next-hop 10.252.1.8 set local-preference 1000 route-map ncn-w001 permit seq 20 match ip address prefix-list tftp match ip next-hop 10.252.1.9 set local-preference 1100 route-map ncn-w001 permit seq 30 match ip address prefix-list tftp match ip next-hop 10.252.1.10 set local-preference 1200 route-map ncn-w001 permit seq 40 match ip address prefix-list pl-cmn set ip next-hop 10.103.0.25 route-map ncn-w001 permit seq 50 match ip address prefix-list pl-hmn set ip next-hop 10.254.1.16 route-map ncn-w001 permit seq 60 match ip address prefix-list pl-nmn set ip next-hop 10.252.1.10 route-map ncn-w002 permit seq 10 match ip address prefix-list tftp match ip next-hop 10.252.1.8 set local-preference 1000 route-map ncn-w002 permit seq 20 match ip address prefix-list tftp match ip next-hop 10.252.1.9 set local-preference 1100 route-map ncn-w002 permit seq 30 match ip address prefix-list tftp match ip next-hop 10.252.1.10 set local-preference 1200 route-map ncn-w002 permit seq 40 match ip address prefix-list pl-cmn set ip next-hop 10.103.0.24 route-map ncn-w002 permit seq 50 match ip address prefix-list pl-hmn set ip next-hop 10.254.1.14 route-map ncn-w002 permit seq 60 match ip address prefix-list pl-nmn set ip next-hop 10.252.1.9 route-map ncn-w003 permit seq 10 match ip address prefix-list tftp match ip next-hop 10.252.1.8 set local-preference 1000 route-map ncn-w003 permit seq 20 match ip address prefix-list tftp match ip next-hop 10.252.1.9 set local-preference 1100 route-map ncn-w003 permit seq 30 match ip address prefix-list tftp match ip next-hop 10.252.1.10 set local-preference 1200 route-map ncn-w003 permit seq 40 match ip address prefix-list pl-cmn set ip next-hop 10.103.0.23 route-map ncn-w003 permit seq 50 match ip address prefix-list pl-hmn set ip next-hop 10.254.1.12 route-map ncn-w003 permit seq 60 match ip address prefix-list pl-nmn set ip next-hop 10.252.1.8 route-map ncn-w004 permit seq 10 match ip address prefix-list tftp match ip next-hop 10.252.1.8 set local-preference 1000 route-map ncn-w004 permit seq 20 match ip address prefix-list tftp match ip next-hop 10.252.1.9 set local-preference 1100 route-map ncn-w004 permit seq 30 match ip address prefix-list tftp match ip next-hop 10.252.1.10 set local-preference 1200 route-map ncn-w004 permit seq 40 match ip address prefix-list pl-cmn set ip next-hop 10.103.0.22 route-map ncn-w004 permit seq 50 match ip address prefix-list pl-hmn set ip next-hop 10.254.1.10 route-map ncn-w004 permit seq 60 match ip address prefix-list pl-nmn set ip next-hop 10.252.1.7 ! router ospf 2 vrf Customer router-id 10.2.0.3 redistribute connected route-map CMN area 0.0.0.0 router ospf 1 router-id 10.2.0.3 redistribute bgp area 0.0.0.0 router ospfv3 1 router-id 10.2.0.3 area 0.0.0.0 router bgp 65533 bgp router-id 10.2.0.3 maximum-paths 8 timers bgp 1 3 distance bgp 20 70 neighbor 10.252.0.2 remote-as 65533 neighbor 10.252.1.7 remote-as 65533 neighbor 10.252.1.7 passive neighbor 10.252.1.8 remote-as 65533 neighbor 10.252.1.8 passive neighbor 10.252.1.9 remote-as 65533 neighbor 10.252.1.9 passive neighbor 10.252.1.10 remote-as 65533 neighbor 10.252.1.10 passive address-family ipv4 unicast neighbor 10.252.0.2 activate neighbor 10.252.1.7 activate neighbor 10.252.1.7 route-map ncn-w004 in neighbor 10.252.1.8 activate neighbor 10.252.1.8 route-map ncn-w003 in neighbor 10.252.1.9 activate neighbor 10.252.1.9 route-map ncn-w002 in neighbor 10.252.1.10 activate neighbor 10.252.1.10 route-map ncn-w001 in exit-address-family ! vrf Customer bgp router-id 10.2.0.3 maximum-paths 8 timers bgp 1 3 distance bgp 20 70 neighbor 10.103.0.2 remote-as 65533 neighbor 10.103.0.22 remote-as 65536 neighbor 10.103.0.22 passive neighbor 10.103.0.23 remote-as 65536 neighbor 10.103.0.23 passive neighbor 10.103.0.24 remote-as 65536 neighbor 10.103.0.24 passive neighbor 10.103.0.25 remote-as 65536 neighbor 10.103.0.25 passive address-family ipv4 unicast neighbor 10.103.0.2 activate neighbor 10.103.0.22 activate neighbor 10.103.0.23 activate neighbor 10.103.0.24 activate neighbor 10.103.0.25 activate exit-address-family ! https-server vrf Customer https-server vrf default https-server vrf mgmt Below is the desired state of a system running this configuration  two OSPF neighbors on the Customer VRF. two default routes.  sw-spine-001# show ip ospf neighbors vrf Customer VRF : Customer Process : 2 =================================================== Total Number of Neighbors : 11 Neighbor ID Priority State Nbr Address Interface ------------------------------------------------------------------------- 10.103.15.238 n/a FULL 192.168.80.4 1/1/28 10.103.15.234 n/a FULL 192.168.80.0 1/1/29 sw-spine-001# show ip route vrf Customer Displaying ipv4 routes selected for forwarding Origin Codes: C - connected, S - static, L - local R - RIP, B - BGP, O - OSPF Type Codes: E - External BGP, I - Internal BGP, V - VPN, EV - EVPN IA - OSPF internal area, E1 - OSPF external type 1 E2 - OSPF external type 2 VRF: Customer Prefix Nexthop Interface VRF(egress) Origin/ Distance/ Age Type Metric -------------------------------------------------------------------------------------------------------- 0.0.0.0/0 192.168.80.0 1/1/29 - O/E2 [110/1] 00m:01w:01d 192.168.80.4 1/1/28 - [110/1] 00m:01w:01d sw-spine-002# show ip ospf neighbors vrf Customer VRF : Customer Process : 2 =================================================== Total Number of Neighbors : 11 Neighbor ID Priority State Nbr Address Interface ------------------------------------------------------------------------- 10.103.15.238 n/a FULL 192.168.80.6 1/1/28 10.103.15.234 n/a FULL 192.168.80.2 1/1/29 sw-spine-002# show ip route vrf Customer Displaying ipv4 routes selected for forwarding Origin Codes: C - connected, S - static, L - local R - RIP, B - BGP, O - OSPF Type Codes: E - External BGP, I - Internal BGP, V - VPN, EV - EVPN IA - OSPF internal area, E1 - OSPF external type 1 E2 - OSPF external type 2 VRF: Customer Prefix Nexthop Interface VRF(egress) Origin/ Distance/ Age Type Metric -------------------------------------------------------------------------------------------------------- 0.0.0.0/0 192.168.80.6 1/1/28 - O/E2 [110/1] 00m:01w:01d 192.168.80.2 1/1/29 - [110/1] 00m:01w:01d "
},
{
	"uri": "/docs-csm/en-12/operations/network/customer_accessible_networks/dual_spine_configuration/",
	"title": "CAN/cmn With Dual-spine Configuration",
	"tags": [],
	"description": "",
	"content": "CAN/CMN with Dual-Spine Configuration The Customer Access Network (CAN) and Customer Management Network (CMN) needs to be connected to both spines in a dual-spine configuration so that each spine can access the outside network. However, the NCNs should only have one default gateway. Therefore, the multi-active gateway protocol (MAGP) on the Mellanox spines can be used to create a virtual router gateway IP address that can direct to either of the spines, depending on the state of the spines. The Virtual Switching Extension (VSX) for Aruba spines serve the same purpose.\nFor more information:\n Mellanox: https://community.mellanox.com/s/article/howto-configure-magp-on-mellanox-switches Aruba: https://www.arubanetworks.com/techdocs/AOS-CX/10.04/HTML/5200-6728/index.html#book.html  The following is an example of the point-to-point configuration on the spine switches. The IP address should be replaced with the IP address chosen by the customer that matches the switch configuration.\nIn CSM 1.2 the Customer VRF is introduced, this requires the interface that is connected to the site to be configured to use this VRF.\n  Mellanox:\ninterface ethernet 1/11 speed auto force interface ethernet 1/11 description to-can interface ethernet 1/11 no switchport force interface ethernet 1/11 vrf forwarding Customer interface ethernet 1/11 ip address 10.101.15.150/30 primary   Aruba:\ninterface 1/1/36 no shutdown vrf attach Customer description to-can ip address 10.101.15.150/30 exit   There must then be two routes on the customer\u0026rsquo;s switch directing traffic for the customer_access_network and customer_management_network subnet to the endpoint on the spine switch. The following is an example of the route configuration on the customer switch.\nip route 10.103.9.0/25 10.101.15.150 ip route 10.103.9.0/25 10.101.15.152 The next hop IP address 10.101.15.150 would be the interface IP address on the Spine switch.\nThere must be a default route on each spine switch that will direct traffic that does not match other routes to the endpoint on the customer switch. The following examples are for the route configuration on sw-spine-001.\n  Mellanox:\nip route vrf Customer 0.0.0.0/0 10.101.15.149   Aruba:\nip route 0.0.0.0/0 10.101.15.149 vrf Customer   Distribution/Site Spine Switch Connection The connection between the distribution/site switch and the spines require two separate uplinks from the spine switch to the distribution switch. Two static routes need to be created on the distribution switch to route the CAN subnet to each of the spine switches. These routes will have equal cost (ECMP) to split the load across the two spines and provide redundancy if one of the spines should go down.\nExample\ninterface 1/1/41 no shutdown description WASP spine-001 1/11 ip address 10.101.15.149/30 interface 1/1/42 no shutdown description WASP spine-002 1/11 ip address 10.101.15.153/30 ip route 10.102.5/26 10.101.15.150 ip route 10.102.5/26 10.101.15.154 "
},
{
	"uri": "/docs-csm/en-12/operations/network/customer_accessible_networks/connect_to_the_cmn_can/",
	"title": "Connect To The Cmn And CAN",
	"tags": [],
	"description": "",
	"content": "Connect to the CMN and CAN How to connect to the CMN and CAN physically and via layer 3.\nThere are multiple ways to connect to the Customer Management Network (CMN) and Customer Access Network (CAN), both physically and via a layer 3 connection.\nPhysical Connection to the CMN and CAN The physical connection to the CMN and CAN is made via the load balancer or the spine switches. The uplink connection from the system to the customer network is achieved by using the highest numbered port(s). Customer can select a single uplink port or multiple uplink ports.\nIn the example below, a Mellanox SN2700 with a single uplink connection is being used. The cable would connect to port 32 as shown in the diagram below:\nLayer 3 Connection to the CMN and CAN The CMN and CAN clients in the system require a routing topology that is setup to route traffic to the customer network. This can be done in a variety of ways and will vary depending on the system setup and configuration. The different options for connecting to the CMN and CAN from layer 3 are described below.\nOption 1: Point-to-Point This option provides a point-to-point routing topology between the customer switch and the HPE Cray EX TOR Spine Switch. See CMN/CAN with Dual-Spine Configuration for more information on using this topology for a dual-spine configuration.\nThe diagram below shows how the point-to-point routing topology works:\nOption 2: Single Gateway The single gateway options requires the customer to provide an IP address that is on a /24 network. This IP address will act as the gateway for traffic bound to the HPE Cray EX CMN and CAN.\nFor example, a customer could use the 192.168.30.0/24 network to connect via the HPE Cray EX CMN and CAN uplink connection. The customer also needs to provide an IP address on this network, such as 192.168.30.253. This IP address will be assigned to the uplink port on the HPE Cray EX TOR Spine Switch.\nFor a dual-spine configuration, the admin would need to extended the customer network to both switches using one IP address for each switch. After extending the network, two equal routes need to be configured. The spine switches are configured to support multi-chassis link aggregation group (MLAG) from NCNs and UANs. These nodes are configured for bonding mode layer 2 and layer 3. See CMN/CAN with Dual-Spine Configuration for more information.\nThe diagram below shows how the connection is established:\nOption 3: Customer Specific The system can be setup using other customer requirements. In order to do so, the following information will be needed:\n   Item Description     Customer network IP address Specifies an IP address on the customer network that is routable to the customer network gateway   CMN IP address space Specifies a dedicated network (typically /24) that is routable from the customer network to be used for the CMN   CAN IP address space Specifies a dedicated network that is routable from the customer network to be used for the CAN (optional)   System name Specifies the system name to be used and configured   Domain namespace extension Specifies the domain extension to be used; for example, customer.com   Customer network IP address for ncn-m001 Specifies an IP address for administrative access on the customer network for ncn-m001   (Optional) BMC customer network IP address for ncn-m001 Specifies an IP address for BMC access on the customer network for ncn-m001    "
},
{
	"uri": "/docs-csm/en-12/operations/network/connect_to_the_hpe_cray_ex_environment/",
	"title": "Connect To The HPE Cray Ex Environment",
	"tags": [],
	"description": "",
	"content": "Connect to the HPE Cray EX Environment The HPE Cray EX Management Network (SMNet) has multiple separate physical and logical links that are used to segregate traffic.\nThe diagram below shows the available connections from within the SMNet, as well as the connections to the customer network:\nThere are multiple ways to connect to the HPE Cray EX environment. The various methods are described in the following table:\n   Role Description     Administrative External customer network connection to the worker node\u0026rsquo;s hardware management and administrative port   Application node access External customer network connection to an Application Node   Customer Access Network (CAN) Customer connection to the CAN gateway to access the HPE Cray EX CAN    There are also several ways to physically connect to the nodes on the system. The following table describes the physical connections to the administrative and application nodes:\n   Role Description     Administrative node 1GB copper connection made from the customer network that provides administrative access and hardware management   Application node Different interconnect types are available from the customer network based on customer requirements    For more information on connecting to the CAN, see Connect to the CMN and CAN.\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/create_a_csm_configuration_upgrade_plan/",
	"title": "Create A Configuration Upgrade Plan",
	"tags": [],
	"description": "",
	"content": "Create a CSM Configuration Upgrade Plan Creating an upgrade plan is unique and dependent on the requirements of the upgrade path. Some release versions of the network configuration require coupled upgrade of software to enable new software functionality, or bug fixes that may add time required to do the full upgrade.\nFor example, in CSM release 1.2, Aruba and Mellanox switches are being upgraded to newer code.\nIn this case and cases where configuration changes are extensive, consider taking the generated configurations after review and uploading them to the switches startup config prior to booting to new code to upgrade both configuration and software simultaneously. This will prevent human error, especially from extensive changes such as modifying a high number of ports away and installing the generated configuration via the system without having to do the individual changes by hand.\nIn addition to firmware upgrade paths, the application of CANU-generated switch configurations should be carefully considered and detailed. The following are important considerations:\n Critically analyze proposed changes to ensure the customer does not have an unexpected outage. Provide a holistic upgrade plan, which includes switch-by-switch ordered changes and minimizes system outages. Typically, this should begin on the periphery of the network (leaf-bmcs) and move centrally towards spines and site uplinks. Where system outages or interruptions are expected to occur, provide details on the change order of operations, expected timing of interruptions, and guidance should the interruption be beyond expected timing.  The resulting \u0026ldquo;plan\u0026rdquo; will provide a procedure to upgrade the system from the current state to a newer version.\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/customer_accessible_networks/customer_accessible_networks/",
	"title": "Customer Accessible Networks",
	"tags": [],
	"description": "",
	"content": "Customer Accessible Networks There are generally two networks accessible by devices outside of the CSM cluster. One network is for administrators managing the cluster and one is for users accessing user services provided by the cluster.\nCustomer Management Network The Customer Management Network (CMN) provides access from outside the customer network to administrative services and non-compute nodes (NCNs). This allows for the following:\n Administrator clients outside of the system:  Log in to NCNs. Access administrative web UIs within the system (e.g. Prometheus, Grafana, and more). Access the administrative REST APIs. Access a DNS server within the system for resolution of names for the webUI and REST API services. Run administrative Cray CLI commands from outside the system.   NCNs to access systems outside the cluster (e.g. LDAP, license servers, and more). Services within the cluster to access systems outside the cluster.  These nodes and services need an IP address that routes to the customer\u0026rsquo;s network in order to be accessed from outside the network.\nImplications if CAN is not Configured  No direct access to the NCNs other than ncn-m001. Will need to hop through ncn-m001 to get to the rest of the NCNs. No direct access to the UANs unless the UAN has a direct connection to the customer network. NCNs other than ncn-m001 do not have access to services outside of the system (e.g. LDAP, license servers, and more).  These nodes will not have an interface on any network with access outside of the HPE Cray EX system. These nodes will not have a default route. This includes access to any of the externally exposed services from these nodes.   Pods running on NCNs other than ncn-m001 will not have access to services outside of the system. No access to externally exposed services. See Externally Exposed Services for more information.  Customer User Networks (CAN/CHN) The CSM cluster can be configured with a user network that uses either the management network or the high-speed network. The cluster cannot have both CAN and CHN.\nThe Customer Access Network (CAN) will use a VLAN on the management switches. The Customer High-Speed Network (CHN) will use the high-speed network.\nThe user network will allow for the following:\n User clients outside of the system:  Log in to UANs. Access user web UIs within the system (e.g. Capsules). Access the user REST APIs. Run user Cray CLI commands from outside the system. Access the User Access Instances (UAI).   UANs to access systems outside the cluster (e.g. LDAP, license servers, and more).  Subnet Configuration CMN Subnets CMN IP addresses are allocated from a single IP subnet that is configured as the cmn-cidr value in the csi config init input. This subnet is further divided into three smaller subnets:\n Subnet for NCNs and switches. Subnet for the MetalLB static pool (cmn-static-pool).  This is used for services that need to be pinned to the same IP address. For example, the PowerDNS service that needs to be configured in the upstream DNS server. This subnet currently needs only a few IP addresses.   Subnet for the MetalLB dynamic pool (cmn-dynamic-pool).  This is used for the rest of the externally exposed services and are allocated dynamically. These IP addresses can be allocated differently across deployments because these services are accessed by DNS name rather than by IP.    The minimum size for the CMN subnet is /25. The CMN /25 subnet allows for the following:\n  16 IP addresses for NCNs\n  16 IP Addresses for Switches.\n  4 IP addresses for the CMN static service IP addresses.\n  64 IP addresses for the rest of the external CMN services.\nThe 64 service IP addresses will be used for the 6 standard CMN service IP addresses and the remaining 58 IP addresses are for IMS services.\n  If there are more IP addresses needed for any of those sections, then the CMN subnet will need to be larger than a /25.\nCAN/CHN Subnets CAN or CHN IP addresses are allocated from a single IP subnet that is configured as the can-cidr or chn-cidr value in the csi config init input. Only one of these two networks should be defined. The user network subnet is further divided into two smaller subnets:\n Subnet for NCNs, UANs, and switches. Subnet for the MetalLB dynamic pool (can-dynamic-pool) or (chn-dynamic-pool).  This is used for all of the externally exposed services and are allocated dynamically. These IP addresses can be allocated differently across deployments because these services are accessed by DNS name rather than by IP.    The minimum size for the CAN or CHN subnet is /27. The /27 subnet allows for the following:\n  16 IP addresses for NCNs, UANs, and Switches\n  16 IP addresses for the external CAN or CHN services.\nThe 16 service IP addresses will be used for the 2 standard CAN/CHN service IP addresses and the remaining 14 IP addresses are for UAI services.\n  If there are more than 16 IP addresses needed for either of those sections, then the CAN/CHN subnet will need to be larger than a /27.\nCustomer Variables The following variables are defined in the csi config init input. These examples use values for the layouts described above. cmn-external-dns must be an IP within the cmn-static-pool CIDR.\nbican-user-network-name specifies whether the user network is on the management network (CAN) or the high-speed network (CHN).\nlinux# csi config init Example output with CAN:\n[...] --system-name testsystem --site-domain example.com --bican-user-network-name CAN --cmn-cidr 10.102.5.0/25 --cmn-gateway 10.102.5.1 --cmn-static-pool 10.102.5.60/30 --cmn-dynamic-pool 10.102.5.64/26 --cmn-external-dns 10.102.5.61 --can-cidr 10.102.6.0/27 --can-gateway 10.102.6.1 --can-dynamic-pool 10.102.6.16/28 [...] Example output with CHN:\n[...] --system-name testsystem --site-domain example.com --bican-user-network-name CHN --cmn-cidr 10.102.5.0/25 --cmn-gateway 10.102.5.1 --cmn-static-pool 10.102.5.60/30 --cmn-dynamic-pool 10.102.5.64/26 --cmn-external-dns 10.102.5.61 --chn-cidr 10.102.6.0/27 --chn-gateway 10.102.6.1 --chn-dynamic-pool 10.102.6.16/28 [...] "
},
{
	"uri": "/docs-csm/en-12/operations/network/default_ip_address_ranges/",
	"title": "Default Ip Address Ranges",
	"tags": [],
	"description": "",
	"content": "Default IP Address Ranges The initial installation of the system creates default networks with default settings and with no external exposure. These IP address default ranges ensure that no nodes in the system attempt to use the same IP address as a Kubernetes service or pod, which would result in undefined behavior that is extremely difficult to reproduce or debug.\nThe following table shows the default IP address ranges:\n   Network IP Address Range     Kubernetes service network 10.16.0.0/12   Kubernetes pod network 10.32.0.0/12   Install Network (MTL) 10.1.0.0/16   Node Management Network (NMN) 10.252.0.0/17   High Speed Network (HSN) 10.253.0.0/16   Hardware Management Network (HMN) 10.254.0.0/17   Mountain NMN (see note below table) 10.100.0.0/17   Mountain HMN (see note below table) 10.104.0.0/17   River NMN 10.106.0.0/17   River HMN 10.107.0.0/17   Load Balanced NMN 10.92.100.0/24   Load Balanced HMN 10.94.100.0/24    For the Mountain NMN:\nAllocate a /22 from this range per liquid-cooled cabinet. For example, the following cabinets would be given the following IP addresses in the allocated ranges:\n cabinet 1 = 10.100.0.0/22 cabinet 2 = 10.100.4.0/22 cabinet 3 = 10.100.8.0/22 \u0026hellip;  For the Mountain HMN:\nAllocate a /22 from this range per liquid-cooled cabinet. For example, the following cabinets would be given the following IP addresses in the allocated ranges:\n cabinet 1 = 10.104.0.0/22 cabinet 2 = 10.104.4.0/22 cabinet 3 = 10.104.8.0/22 \u0026hellip;  The values in the table could be modified prior to install if there is a need to ensure that there are no conflicts with customer resources, such as LDAP or license servers. If a customer has more than one HPE Cray EX system, these values can be safely reused across them all.\nContact customer support for this site if it is required to change the IP address range for Kubernetes services or pods; for example, if the IP addresses within those ranges must be used for something else. The cluster must be fully reinstalled if either of those ranges are changed.\nCustomizable Network Values There are several network values and other pieces of system information that must be unique to the customer system.\n  IP address values and the network for ncn-m001 and the BMC on ncn-m001.\n  The main Customer Management Network (CMN) subnet. The two address pools mentioned below need to be part of this subnet.\nFor more information on the CMN, see Customer Accessible Networks.\n Subnet for the MetalLB static address pool (cmn-static-pool), which is used for services that need to be pinned to the same IP address, such as the system DNS service. Subnet for the MetalLB dynamic address pool (cmn-dynamic-pool), which is used for services such as Prometheus and Nexus that can be reached by DNS.    HPE Cray EX Domain: The value of the subdomain that is used to access externally exposed services.\nFor example, if the system is named TestSystem, and the site is example.com, the HPE Cray EX domain would be testsystem.example.com. Central DNS would need to be configured to delegate requests for addresses in this domain to the HPE Cray EX DNS IP address for resolution.\n  HPE Cray EX DNS IP: The IP address used for the HPE Cray EX DNS service. Central DNS delegates the resolution for addresses in the HPE Cray EX Domain to this server. The IP address must be in the cmn-static-pool subnet.\n  CMN gateway IP address: The IP address assigned to a specific port on the spine switch, which will act as the gateway between the CMN and the rest of the customer\u0026rsquo;s internal networks. This address would be the last-hop route to the CMN network. This will default to the first IP in the main CMN subnet if it is not specified otherwise.\n  The User Network subnet which will be either the Customer Access Network (CAN) or Customer High-speed Network (CHN). The address pool mentioned below needs to be part of this subnet.\nFor more information on the CAN and CHN, see Customer Accessible Networks.\n Subnet for the MetalLB dynamic address pool (can-dynamic-pool) or (chn-dynamic-pool), which is used for services such as User Access Instances (UAIs) that can be reached by DNS.    "
},
{
	"uri": "/docs-csm/en-12/operations/network/dhcp/dhcp/",
	"title": "DHCP",
	"tags": [],
	"description": "",
	"content": "DHCP The Dynamic Host Configuration Protocol (DHCP) service on the HPE Cray EX system uses the Internet Systems Consortium (ISC) Kea tool. Kea provides more robust management capabilities for DHCP servers.\nFor more information: https://www.isc.org/kea/.\nThe following improvements to the DHCP service are included:\n Persistent and resilient data store for DHCP leases in Postgres API access to manage DHCP Scalable pod that uses MetalLB instead of host networking Options for updates to HPE Cray EX management system IP addresses  DHCP Helper Workflow The DHCP-Helper uses the following workflow:\nThe order can vary in the workflow outlined below, and the services in this workflow can run asynchronously.\n Retrieve the network information.   Query the System Layout Service (SLS) Update Kea   Query Kea for active leases to check if SMD knows about the NIC.   Check MACs in KEA active lease against SMD known NIC MACs.   Query SMD for all known NICs and create DHCP leases.   Each NIC in SMD create DHCP reservation in Kea Create DHCP reservation in Kea Create hostname/MAC/IP address DHCP reservations Create hostname(alias)/MAC in DHCP reservation   Check to see if the NIC in SMD needs to have an IP added.   Update the IP address from Kea if NIC in SMD does not have an IP address set   Remove any potential race conditions between the DHCP reservation in Kea and the NIC information in SMD.   Compare information in NIC information in SMD and Kea DHCP reservation configurations Delete any active leases that did not match SMD  "
},
{
	"uri": "/docs-csm/en-12/operations/network/customer_accessible_networks/externally_exposed_services/",
	"title": "Externally Exposed Services",
	"tags": [],
	"description": "",
	"content": "Externally Exposed Services The following services are exposed on one or more of the external networks (CMN, CAN, and CHN). Each of these services requires an IP address in the relevant subnets so they are reachable on that network. This IP address is allocated by the MetalLB component.\nServices under Istio Ingress Gateway and OAuth2 Proxy Ingress share an ingress, so they all use the IP allocated to the Ingress.\nEach service is given a DNS name that is served by the PowerDNS service to make them resolvable from the site network. This makes it possible to access each of these services by name rather than finding the allocated IP. The DNS name and network are prepended to the system-name.site-domain specified during csi config init. For example, if the system is named TestSystem, and the site is example.com, the HPE Cray EX domain would be testsystem.example.com.\nSee External DNS for more information.\n   Service DNS Name Address Pool Requires CMN/CAN/CHN IP External Port Notes     Istio Ingress Gateway - CMN   customer-management Yes 80/443, 8081, 8888     Istio Ingress Gateway - CAN   customer-access Yes 80/443, 8081, 8888     Istio Ingress Gateway - CHN   customer-high-speed Yes 80/443, 8081, 8888     HPE Cray EX REST API api    No Uses the IP address of Istio Ingress Gateway (CMN/CAN/CHN)   Authentication auth    No Uses the IP address of Istio Ingress Gateway (CMN/CAN/CHN)   S3 s3 customer-management Yes 8080     PowerDNS   customer-management Yes 53     OAuth2 Proxy Ingress - CMN   customer-management Yes 443     OAuth2 Proxy Ingress - CAN   customer-access Yes 443     OAuth2 Proxy Ingress - CHN   customer-high-speed Yes 443     System Management Health Prometheus prometheus    No Uses the IP address of OAuth2 Proxy Ingress (CMN)   System Management Health Alert Manager alertmanager    No Uses the IP address of OAuth2 Proxy Ingress (CMN)   System Management Health Grafana grafana    No Uses the IP address of OAuth2 Proxy Ingress (CMN)   Istio Kiali kiali-istio    No Uses the IP address of OAuth2 Proxy Ingress (CMN)   VCS vcs    No Uses the IP address of OAuth2 Proxy Ingress (CMN)   SMA Kibana sma-kibana    No Uses the IP address of OAuth2 Proxy Ingress (CMN)   SMA Grafana sma-grafana    No Uses the IP address of OAuth2 Proxy Ingress (CMN)   OPA GPM opa-gpm    No Uses the IP address of OAuth2 Proxy Ingress (CMN)   CSMS csms    No Uses the IP address of OAuth2 Proxy Ingress (CMN)   Nexus nexus    No Uses the IP address of Istio Ingress Gateway (CMN)   Rsyslog Aggregator rsyslog customer-management Yes 514/8514     UAI   customer-access or customer-high-speed Yes (multiple) 22 Can be several of these each with a unique ID   IMS \u0026lt;uid\\\u0026gt;.ims customer-management Yes (multiple) 22 Can be several of these each with a unique ID    "
},
{
	"uri": "/docs-csm/en-12/operations/network/customer_accessible_networks/bi-can_arista_metallb_peering/",
	"title": "Metallb Peering With Arista Edge Router",
	"tags": [],
	"description": "",
	"content": "MetalLB Peering with Arista Edge Router This is an example configuration of how to connect a pair of Arista switches to MetalLB running inside of Kubernetes.\nPrerequisites  Pair of Arista switches already connected to the high-speed network. Updated System Layout Service (SLS) file that has the CHN network configured.  Example Configuration Below is a snippet from an upgraded SLS.\n\u0026#34;CHN\u0026#34;: { \u0026#34;Name\u0026#34;: \u0026#34;CHN\u0026#34;, \u0026#34;FullName\u0026#34;: \u0026#34;Customer High-Speed Network\u0026#34;, \u0026#34;IPRanges\u0026#34;: [ \u0026#34;10.103.9.0/25\u0026#34; ], \u0026#34;Type\u0026#34;: \u0026#34;ethernet\u0026#34;, \u0026#34;LastUpdated\u0026#34;: 1646843463, \u0026#34;LastUpdatedTime\u0026#34;: \u0026#34;2022-03-09 16:31:03.504156 +0000 +0000\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;CIDR\u0026#34;: \u0026#34;10.103.9.0/25\u0026#34;, \u0026#34;MTU\u0026#34;: 9000, \u0026#34;MyASN\u0026#34;: 65530, \u0026#34;PeerASN\u0026#34;: 65533, \u0026#34;Subnets\u0026#34;: [ { \u0026#34;CIDR\u0026#34;: \u0026#34;10.103.9.64/27\u0026#34;, \u0026#34;FullName\u0026#34;: \u0026#34;CHN Dynamic MetalLB\u0026#34;, \u0026#34;Gateway\u0026#34;: \u0026#34;10.103.9.65\u0026#34;, \u0026#34;MetalLBPoolName\u0026#34;: \u0026#34;customer-high-speed\u0026#34;, \u0026#34;Name\u0026#34;: \u0026#34;chn_metallb_address_pool\u0026#34;, \u0026#34;VlanID\u0026#34;: 5 }, { \u0026#34;CIDR\u0026#34;: \u0026#34;10.103.9.0/25\u0026#34;, \u0026#34;DHCPEnd\u0026#34;: \u0026#34;10.103.9.62\u0026#34;, \u0026#34;DHCPStart\u0026#34;: \u0026#34;10.103.9.16\u0026#34;, \u0026#34;FullName\u0026#34;: \u0026#34;CHN Bootstrap DHCP Subnet\u0026#34;, \u0026#34;Gateway\u0026#34;: \u0026#34;10.103.9.1\u0026#34;, \u0026#34;IPReservations\u0026#34;: [ { \u0026#34;IPAddress\u0026#34;: \u0026#34;10.103.9.2\u0026#34;, \u0026#34;Name\u0026#34;: \u0026#34;chn-switch-1\u0026#34; }, { \u0026#34;IPAddress\u0026#34;: \u0026#34;10.103.9.3\u0026#34;, \u0026#34;Name\u0026#34;: \u0026#34;chn-switch-2\u0026#34; }, { \u0026#34;Aliases\u0026#34;: [ \u0026#34;ncn-w004-chn\u0026#34;, \u0026#34;time-chn\u0026#34;, \u0026#34;time-chn.local\u0026#34; ], \u0026#34;Comment\u0026#34;: \u0026#34;x3000c0s7b0n0\u0026#34;, \u0026#34;IPAddress\u0026#34;: \u0026#34;10.103.9.7\u0026#34;, \u0026#34;Name\u0026#34;: \u0026#34;ncn-w004\u0026#34; }, { \u0026#34;Aliases\u0026#34;: [ \u0026#34;ncn-w003-chn\u0026#34;, \u0026#34;time-chn\u0026#34;, \u0026#34;time-chn.local\u0026#34; ], \u0026#34;Comment\u0026#34;: \u0026#34;x3000c0s6b0n0\u0026#34;, \u0026#34;IPAddress\u0026#34;: \u0026#34;10.103.9.8\u0026#34;, \u0026#34;Name\u0026#34;: \u0026#34;ncn-w003\u0026#34; }, { \u0026#34;Aliases\u0026#34;: [ \u0026#34;ncn-w002-chn\u0026#34;, \u0026#34;time-chn\u0026#34;, \u0026#34;time-chn.local\u0026#34; ], \u0026#34;Comment\u0026#34;: \u0026#34;x3000c0s5b0n0\u0026#34;, \u0026#34;IPAddress\u0026#34;: \u0026#34;10.103.9.9\u0026#34;, \u0026#34;Name\u0026#34;: \u0026#34;ncn-w002\u0026#34; }, { \u0026#34;Aliases\u0026#34;: [ \u0026#34;ncn-w001-chn\u0026#34;, \u0026#34;time-chn\u0026#34;, \u0026#34;time-chn.local\u0026#34; ], \u0026#34;Comment\u0026#34;: \u0026#34;x3000c0s4b0n0\u0026#34;, \u0026#34;IPAddress\u0026#34;: \u0026#34;10.103.9.10\u0026#34;, \u0026#34;Name\u0026#34;: \u0026#34;ncn-w001\u0026#34; }, In this example, chn-switch-1 and chn-switch-2 will be the Arista pair.\nSLS entries from the above output:\n{ \u0026#34;IPAddress\u0026#34;: \u0026#34;10.103.9.2\u0026#34;, \u0026#34;Name\u0026#34;: \u0026#34;chn-switch-1\u0026#34; }, { \u0026#34;IPAddress\u0026#34;: \u0026#34;10.103.9.3\u0026#34;, \u0026#34;Name\u0026#34;: \u0026#34;chn-switch-2\u0026#34; } The following configuration is needed on both switches:\n  The prefix list will be the subnet of the CHN, the ge will equal the CIDR.\n This prevents routes from other networks being installed into the routing table.    router bgp 65533 will match the ASN from SLS.\u0026quot;MyASN\u0026quot;: 65533,\n  The neighbor will match every worker node.\n  ip prefix-list CHN seq 10 permit 10.103.9.64/27 ge 27 ! route-map CHN permit 5 match ip address prefix-list CHN ! router bgp 65533 maximum-paths 32 neighbor 10.103.9.7 remote-as 65530 neighbor 10.103.9.7 passive neighbor 10.103.9.7 route-map CHN in neighbor 10.103.9.7 maximum-routes 12000 neighbor 10.103.9.8 remote-as 65530 neighbor 10.103.9.8 passive neighbor 10.103.9.8 route-map CHN in neighbor 10.103.9.8 maximum-routes 12000 neighbor 10.103.9.9 remote-as 65530 neighbor 10.103.9.9 passive neighbor 10.103.9.9 route-map CHN in neighbor 10.103.9.9 maximum-routes 12000 neighbor 10.103.9.10 remote-as 65530 neighbor 10.103.9.10 passive neighbor 10.103.9.10 route-map CHN in neighbor 10.103.9.10 maximum-routes 12000 "
},
{
	"uri": "/docs-csm/en-12/operations/network/network/",
	"title": "Network",
	"tags": [],
	"description": "",
	"content": "Network There are several different networks supported by the HPE Cray EX system. The following are the available internal and external networks, as well as the devices that connect to each network:\n Networks external to the system:  Customer Network (Data Center)  ncn-m001 BMC is connected by the customer network switch to the customer management network All NCNs (worker, master, and storage) are connected ClusterStor System Management Unit (SMU) interfaces User Access Nodes (UANs)     System networks:  Customer Network (Data Center)  ncn-m001 BMC is connected by the customer network switch to the customer management network ClusterStor SMU interfaces User Access Nodes (UANs)   Hardware Management Network (HMN)  BMCs for Admin tasks Power distribution units (PDU) Keyboard/video/mouse (KVM)   Node Management Network (NMN)  All NCNs and compute nodes User Access Nodes (UANs)   ClusterStor Management Network  ClusterStor controller management interfaces of all ClusterStor components (SMU, Metadata Management Unit (MMU), and Scalable Storage Unit (SSU))   High-Speed Network (HSN), which connects the following devices:  Kubernetes worker nodes UANs ClusterStor controller data interfaces of all ClusterStor components (SMU, MMU, and SSU) There must be at least two NCNs whose BMCs are on the HMN. If these are not present, there cannot be multiple DVS servers that function correctly, which will have an effect on compute node root file system and PE scaling/performance/reliability.      During initial installation, several of those networks are created with default IP address ranges. See Default IP Address Ranges.\nA default configuration of Access Control Lists (ACL) is also set when the system is installed. The default configuration of ACLs between the NMN and HMN are described below:\nThe network management system (NMS) data model and REST API enable customer sites to construct their own \u0026ldquo;networks\u0026rdquo; of nodes within the high-speed fabric, where a \u0026ldquo;network\u0026rdquo; is a collection of nodes that share a VLAN and an IP subnet.\nThe low-level network management components (switch, DHCP service, ARP service) of the NCNs and ClusterStor interfaces are configured to serve one particular network (the \u0026ldquo;supported network\u0026rdquo;) on the high-speed fabric. The supported network includes all of the compute nodes, thereby enabling those compute nodes to access the gateway, user access services, and ClusterStor devices. A site may create other networks as well, but it is only the supported network that is served by those devices.\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/customer_accessible_networks/troubleshoot_cmn_issues/",
	"title": "Troubleshoot Cmn Issues",
	"tags": [],
	"description": "",
	"content": "Troubleshoot CMN issues Various connection points to check when using the CMN and how to fix any issues that arise.\nThe most frequent issue with the Customer Management Network (CMN) is trouble accessing IP addresses outside of the HPE Cray EX system from a node or pod inside the system.\nThe best way to resolve this issue is to try to ping an outside IP address from one of the NCNs other than ncn-m001, which has a direct connection that it can use instead of the Customer Management Network (CMN). The following are some things to check to make sure CMN is configured correctly:\nDoes the NCN have an IP Address Configured on the bond0.cmn0 Interface? Check the status of the bond0.cmn0 interface. Make sure it has an address specified.\nip addr show bond0.cmn0 Example output:\n534: bond0.cmn0@bond0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP group default qlen 1000 link/ether 98:03:9b:b4:27:62 brd ff:ff:ff:ff:ff:ff inet 10.102.5.5/26 brd 10.101.8.255 scope global bond0.cmn0 valid_lft forever preferred_lft forever inet6 fe80::9a03:9bff:feb4:2762/64 scope link valid_lft forever preferred_lft forever If there is not an address specified, make sure the cmn- values have been defined in csi config init input.\nDoes the NCN have a Default Gateway Configured? Check the default route on an NCN other than ncn-m001. There should be a default route with a gateway matching the cmn-gateway value.\nip route | grep default Example output:\ndefault via 10.102.5.1 dev bond0.cmn0 If there is not an address specified, make sure the can- values have been defined in csi config init input.\nCan the Node Reach the Default CMN Gateway? Check that the node can ping the default gateway shown in the default route.\nping 10.102.5.1 Example output:\nPING 10.102.5.1 (10.102.5.1) 56(84) bytes of data. 64 bytes from 10.102.5.1: icmp_seq=1 ttl=64 time=0.148 ms 64 bytes from 10.102.5.1: icmp_seq=2 ttl=64 time=0.107 ms 64 bytes from 10.102.5.1: icmp_seq=3 ttl=64 time=0.133 ms 64 bytes from 10.102.5.1: icmp_seq=4 ttl=64 time=0.122 ms ^C --- 10.102.5.1 ping statistics --- 4 packets transmitted, 4 received, 0% packet loss, time 3053ms rtt min/avg/max/mdev = 0.107/0.127/0.148/0.018 ms If the default gateway cannot be accessed, check the spine switch configuration.\nCan the Spines Reach Outside of the System? Check that each of the spines can ping an IP address outside of the HPE Cray EX system. This must be an IP address that is reachable from the network to which the CMN is connected. If there is only one spine being used on the system, only spine-001 needs to be checked.\nsw-spine-001 [standalone: master] # ping 8.8.8.8 Example output:\nPING 8.8.8.8 (8.8.8.8) 56(84) bytes of data. 64 bytes from 8.8.8.8: icmp_seq=1 ttl=112 time=12.6 ms 64 bytes from 8.8.8.8: icmp_seq=2 ttl=112 time=12.5 ms 64 bytes from 8.8.8.8: icmp_seq=3 ttl=112 time=22.4 ms 64 bytes from 8.8.8.8: icmp_seq=4 ttl=112 time=12.5 ms ^C --- 8.8.8.8 ping statistics --- 4 packets transmitted, 4 received, 0% packet loss, time 3004ms rtt min/avg/max/mdev = 12.501/15.022/22.440/4.285 ms If the outside IP address cannot be reached, check the spine switch configuration and the connection to the customer network.\nCan the Spines Reach the NCN? Check that each of the spines can ping one or more of the NCNs at its bond0.cmn0 IP address. If there is only one spine being used on the system, only spine-001 needs to be checked.\nsw-spine-001 [standalone: master] # ping 10.102.5.5 Example output:\nPING 10.102.5.5 (10.102.5.5) 56(84) bytes of data. 64 bytes from 10.102.5.5: icmp_seq=1 ttl=64 time=0.140 ms 64 bytes from 10.102.5.5: icmp_seq=2 ttl=64 time=0.134 ms 64 bytes from 10.102.5.5: icmp_seq=3 ttl=64 time=0.126 ms 64 bytes from 10.102.5.5: icmp_seq=4 ttl=64 time=0.178 ms ^C --- 10.102.5.5 ping statistics --- 4 packets transmitted, 4 received, 0% packet loss, time 3058ms rtt min/avg/max/mdev = 0.126/0.144/0.178/0.023 ms If the NCN cannot be reached, check the spine switch configuration.\nCan a Device Outside the System Reach the CMN Gateway? Check that a device outside the HPE Cray EX system that is expected to have access to nodes and services on the CMN can ping the CMN gateway.\n# ping 10.102.5.1 Example output:\nPING 10.102.5.1 (10.102.5.1): 56 data bytes 64 bytes from 10.102.5.1: icmp_seq=0 ttl=58 time=54.724 ms 64 bytes from 10.102.5.1: icmp_seq=1 ttl=58 time=65.902 ms 64 bytes from 10.102.5.1: icmp_seq=2 ttl=58 time=51.960 ms 64 bytes from 10.102.5.1: icmp_seq=3 ttl=58 time=55.032 ms 64 bytes from 10.102.5.1: icmp_seq=4 ttl=58 time=57.606 ms ^C --- 10.102.5.1 ping statistics --- 5 packets transmitted, 5 packets received, 0.0% packet loss round-trip min/avg/max/stddev = 51.960/57.045/65.902/4.776 ms If the CMN gateway cannot be reached from outside, check the spine switch configuration and the connection to the customer network.\n"
},
{
	"uri": "/docs-csm/en-12/operations/network/dhcp/troubleshoot_dhcp_issues/",
	"title": "Troubleshoot DHCP Issues",
	"tags": [],
	"description": "",
	"content": "Troubleshoot DHCP Issues There are several things to check for when troubleshooting issues with Dynamic Host Configuration Protocol (DHCP) servers.\nIncorrect DHCP IP Addresses One of the most common issues is when the DHCP IP addresses are not matching in the Domain Name Service (DNS).\nCheck to make sure cray-dhcp is not running in Kubernetes:\nncn-w001# kubectl get pods -A | grep cray-dhcp Example output:\nservices cray-dhcp-5f8c8767db-hg6ch 1/1 Running 0 35d If the cray-dhcp pod is running, use the following command to shut down the pod:\nncn-w001# kubectl scale deploy cray-dhcp --replicas=0 If the IP addresses are still not lining up with DNS and cray-dhcp is confirmed not running, wait 800 seconds for DHCP leases to expire and renew.\nVerify the Status of the cray-dhcp-kea Pods and Services Check to see if the Kea DHCP services are running:\nncn-w001# kubectl get services -n services | grep kea Example output:\ncray-dhcp-kea-api ClusterIP 10.26.142.204 \u0026lt;none\u0026gt; 8000/TCP 5d23h cray-dhcp-kea-postgres ClusterIP 10.19.97.142 \u0026lt;none\u0026gt; 5432/TCP 5d23h cray-dhcp-kea-postgres-0 ClusterIP 10.30.214.27 \u0026lt;none\u0026gt; 5432/TCP 5d23h cray-dhcp-kea-postgres-1 ClusterIP 10.27.232.156 \u0026lt;none\u0026gt; 5432/TCP 5d23h cray-dhcp-kea-postgres-2 ClusterIP 10.22.242.251 \u0026lt;none\u0026gt; 5432/TCP 5d23h cray-dhcp-kea-postgres-config ClusterIP None \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; 5d23h cray-dhcp-kea-postgres-repl ClusterIP 10.17.107.16 \u0026lt;none\u0026gt; 5432/TCP 5d23h cray-dhcp-kea-tcp-hmn LoadBalancer 10.24.79.120 10.94.100.222 67:32120/TCP 5d23h cray-dhcp-kea-tcp-nmn LoadBalancer 10.19.139.179 10.92.100.222 67:31652/TCP 5d23h cray-dhcp-kea-udp-hmn LoadBalancer 10.25.203.31 10.94.100.222 67:30840/UDP 5d23h cray-dhcp-kea-udp-nmn LoadBalancer 10.19.187.168 10.92.100.222 67:31904/UDP 5d23h If the services shown in the output above are not present, it could be an indication that something is not working correctly. To check to see if the Kea pods are running:\nncn-w001# kubectl get pods -n services -o wide | grep kea Example output:\ncray-dhcp-kea-788b4c899b-x6ltd 3/3 Running 0 36h 10.40.3.183 ncn-w002 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-dhcp-kea-postgres-0 2/2 Running 0 5d23h 10.40.3.121 ncn-w002 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-dhcp-kea-postgres-1 2/2 Running 0 5d23h 10.42.2.181 ncn-w003 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-dhcp-kea-postgres-2 2/2 Running 0 5d23h 10.39.0.208 ncn-w001 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; The pods should be in a Running state. The output above will also indicate which worker node the kea-dhcp pod is currently running on.\nTo restart the pods:\nncn-w001# kubectl delete pods -n services -l app.kubernetes.io/name=cray-dhcp-kea Use the command mentioned above to verify the pods are running again after restarting the pods.\nCheck the Current DHCP Leases Use the Kea API to retrieve data from the DHCP lease database. An authentication token will be needed to access the Kea API. To retrieve a token, run the following command from an NCN worker or manager:\nncn-w001# export TOKEN=$(curl -s -k -S -d grant_type=client_credentials \\ -d client_id=admin-client -d client_secret=`kubectl get secrets admin-client-auth \\ -o jsonpath=\u0026#39;{.data.client-secret}\u0026#39; | base64 -d` \\ https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token \\ | jq -r \u0026#39;.access_token\u0026#39;) Once a token has been generated, the DHCP lease database can be viewed. The commands below are the most effective way to check the current DHCP leases:\n  View all leases:\nncn-w001# curl -H \u0026#34;Authorization: Bearer ${TOKEN}\u0026#34; -X POST -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{ \u0026#34;command\u0026#34;: \u0026#34;lease4-get-all\u0026#34;, \u0026#34;service\u0026#34;: [ \u0026#34;dhcp4\u0026#34; ] }\u0026#39; \\ https://api-gw-service-nmn.local/apis/dhcp-kea | jq   View the total amount of leases:\nncn-w001# curl -H \u0026#34;Authorization: Bearer ${TOKEN}\u0026#34; -X POST -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{ \u0026#34;command\u0026#34;: \u0026#34;lease4-get-all\u0026#34;, \u0026#34;service\u0026#34;: [ \u0026#34;dhcp4\u0026#34; ] }\u0026#39; \\ https://api-gw-service-nmn.local/apis/dhcp-kea | jq \u0026#39;.[].text\u0026#39;   Use an IP address to search for a hostname or MAC address:\nncn-w001# curl -H \u0026#34;Authorization: Bearer ${TOKEN}\u0026#34; -X POST -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{ \u0026#34;command\u0026#34;: \u0026#34;lease4-get\u0026#34;, \u0026#34;service\u0026#34;: [ \u0026#34;dhcp4\u0026#34; ], \u0026#34;arguments\u0026#34;: { \u0026#34;ip-address\u0026#34;: \u0026#34;x.x.x.x\u0026#34; } }\u0026#39; \\ https://api-gw-service-nmn.local/apis/dhcp-kea | jq   Use a MAC address to find a hostname or IP address:\nncn-w001# curl -H \u0026#34;Authorization: Bearer ${TOKEN}\u0026#34; -X POST -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{ \u0026#34;command\u0026#34;: \u0026#34;lease4-get-all\u0026#34;, \u0026#34;service\u0026#34;: [ \u0026#34;dhcp4\u0026#34; ] }\u0026#39; \\ https://api-gw-service-nmn.local/apis/dhcp-kea | jq \u0026#39;.[].arguments.leases[] | \\ select(.\u0026#34;hw-address\u0026#34;==\u0026#34;XX:XX:XX:XX:XX:5d\u0026#34;)\u0026#39;   Use a hostname to find a MAC address or IP address:\nncn-w001# curl -H \u0026#34;Authorization: Bearer ${TOKEN}\u0026#34; -X POST -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{ \u0026#34;command\u0026#34;: \u0026#34;lease4-get-all\u0026#34;, \u0026#34;service\u0026#34;: [ \u0026#34;dhcp4\u0026#34; ] }\u0026#39; \\ https://api-gw-service-nmn.local/apis/dhcp-kea | jq \u0026#39;.[].arguments.leases[] | \\ select(.\u0026#34;hostname\u0026#34;==\u0026#34;xNAME\u0026#34;)\u0026#39;   Check the Hardware State Manager (HSM) for Issues The HSM includes two important components:\n Systems Layout Service (SLS): This is the expected state of the system, as populated by the networks.yaml and other sources. State Manager Daemon (SMD): This is the discovered or active state of the system during runtime.  To view the information stored in SLS for a specific component name (xname):\nncn-w001# cray sls hardware describe XNAME To view the information in SMD:\nncn-w001# cray hsm inventory ethernetInterfaces describe XNAME View the cray-dhcp-kea Logs The specific pod name is needed in order to check the logs for a pod. Run the command below to see the pod name:\nncn-w001# kubectl logs -n services -l \\ app.kubernetes.io/instance=cray-dhcp-kea -c cray-dhcp-kea Example output:\n2020-08-03 21:47:50.580 INFO [kea-dhcp4.dhcpsrv/10] DHCPSRV_MEMFILE_LEASE_FILE_LOAD loading leases from file /cray-dhcp-kea-socket/dhcp4.leases 2020-08-03 21:47:50.580 INFO [kea-dhcp4.dhcpsrv/10] DHCPSRV_MEMFILE_LFC_SETUP setting up the Lease File Cleanup interval to 3600 sec 2020-08-03 21:47:50.580 WARN [kea-dhcp4.dhcpsrv/10] DHCPSRV_OPEN_SOCKET_FAIL failed to open socket: the interface eth0 has no usable IPv4 addresses configured 2020-08-03 21:47:50.580 WARN [kea-dhcp4.dhcpsrv/10] DHCPSRV_NO_SOCKETS_OPEN no interface configured to listen to DHCP traffic 2020-08-03 21:48:00.602 INFO [kea-dhcp4.commands/10] COMMAND_RECEIVED Received command 'lease4-get-all' {\u0026quot;Dhcp4\u0026quot;: {\u0026quot;control-socket\u0026quot;: {\u0026quot;socket-name\u0026quot;: \u0026quot;/cray-dhcp-kea-socket/cray-dhcp-kea.socket\u0026quot;, \u0026quot;socket-type\u0026quot;: \u0026quot;unix\u0026quot;}, \u0026quot;hooks-libraries\u0026quot;: [{\u0026quot;library\u0026quot;: \u0026quot;/usr/local/lib/kea/hooks/libdhcp_lease_cmds.so\u0026quot;}, ...SNIP... waiting 10 seconds for any leases to be given out... [{'arguments': {'leases': []}, 'result': 3, 'text': '0 IPv4 lease(s) found.'}] 2020-08-03 21:48:22.734 INFO [kea-dhcp4.commands/10] COMMAND_RECEIVED Received command 'config-get' To view the Kea logs:\nncn-w001# kubectl logs -n services -l app.kubernetes.io/instance=cray-dhcp-kea \\ -c cray-dhcp-kea | grep -i error TCPDUMP If a host is not getting an IP address, run a packet capture to see if DHCP traffic is being transmitted.\nncn-w001# tcpdump -w dhcp.pcap -envli bond0.nmn0 port 67 or port 68 This will make a .pcap file named dhcp in the current directory. It will collect all DHCP traffic on the specified port. In this example. it would be the DHCP traffic on interface bond0.nmn0 (10.252.0.0/17).\nTo view the DHCP traffic:\nncn-w001# tcpdump -r dhcp.pcap -v -n The output may be very long, so use any desired filters to narrow the results.\nTo do a tcpdump for a certain MAC address:\nncn-w001# tcpdump -i eth0 -vvv -s 1500 \u0026#39;((port 67 or port 68) and (udp[38:4] = 0x993b7030))\u0026#39; This example is using the MAC of b4:2e:99:3b:70:30. It will show the output on the terminal and will not save to a file.\nVerify that MetalLB/BGP Peering and Routes are Correct Log in to the spine switches and check that MetalLB is peering to the spines via BGP.\nCheck both spines if they are available and powered up. All worker nodes should be peered with the spine BGP.\nsw-spine-001 [standalone: master] # show ip bgp neighbors Example output:\nBGP neighbor: 10.252.0.4, remote AS: 65533, link: internal: Route-map (in/out) : rm-ncn-w001 BGP version : 4 Configured hold time in seconds : 180 keepalive interval in seconds (configured) : 60 keepalive interval in seconds (established with peer): 30 Minimum holdtime from neighbor in seconds : 90BGP neighbor: 10.252.0.5, remote AS: 65533, link: internal: Route-map (in/out) : rm-ncn-w002 BGP version : 4 Configured hold time in seconds : 180 keepalive interval in seconds (configured) : 60 keepalive interval in seconds (established with peer): 30 Minimum holdtime from neighbor in seconds : 90BGP neighbor: 10.252.0.6, remote AS: 65533, link: internal: Route-map (in/out) : rm-ncn-w003 BGP version : 4 Configured hold time in seconds : 180 keepalive interval in seconds (configured) : 60 keepalive interval in seconds (established with peer): 30 Minimum holdtime from neighbor in seconds : 90 Confirm that routes to Kea (10.92.100.222) via all the NCN worker nodes are available:\nsw-spine-001 [standalone: master] # show ip route 10.92.100.222 Example output:\nFlags: F: Failed to install in H/W B: BFD protected (static route) i: BFD session initializing (static route) x: protecting BFD session failed (static route) c: consistent hashing p: partial programming in H/W VRF Name default: ------------------------------------------------------------------------------------------------------ Destination Mask Flag Gateway Interface Source AD/M ------------------------------------------------------------------------------------------------------ default 0.0.0.0 c 10.102.255.9 eth1/16 static 1/1 10.92.100.222 255.255.255.255 c 10.252.0.4 vlan2 bgp 200/0 c 10.252.0.5 vlan2 bgp 200/0 c 10.252.0.6 vlan2 bgp 200/0 "
},
{
	"uri": "/docs-csm/en-12/operations/network/access_to_system_management_services/",
	"title": "Access To System Management Services",
	"tags": [],
	"description": "",
	"content": "Access to System Management Services The standard configuration for System Management Services (SMS) is the containerized REST micro-service with a public API. All of the micro-services provide an HTTP interface and are collectively exposed through a single gateway URL. The API gateway for the system is available at a well known URL based on the domain name of the system. It acts as a single HTTPS endpoint for terminating Transport Layer Security (TLS) using the configured certificate authority. All services and the API gateway are not dependent on any single node. This resilient arrangement ensures that services remain available during possible underlying hardware and network failures.\nAccess to individual APIs through the gateway is controlled by a policy-driven access control system. Administrators and users must retrieve a token for authentication before attempting to access APIs through the gateway and present a valid token with each API call. The authentication and authorization decisions are made at the gateway level which prevent unauthorized API calls from reaching the underlying micro-services. Refer to Retrieve an Authentication Token for more detail on the process of obtaining tokens and user management.\nThe APIs are accessible on multiple networks. Individual APIs may only be accessible on some of the networks depending on the nature of the API. For example, administrative APIs will not be available on networks that do not allow administrative users. The authentication token must be retrieved from the same network.\nThe available networks are:\n Customer Management Network (cmn)  external network administrative and user APIs   Customer Access Network (can) and Customer High-Speed Network (chn)  external network only user APIs   Node Management Network - Load Balancers (nmnlb)  internal network administrative and user APIs   Hardware Management Network - Load Balancers (hmnlb)  internal network only the cray-hms-hmcollector-ingress service is available    Review the API documentation in the supplied container before attempting to use the API services. This container is generated with the release using the most current API descriptions in OpenAPI 2.0 format. Because this file serves as both an internal definition of the API contract and the external documentation of the API function, it is the most up-to-date reference available.\nThe API Gateway URL for accessing the APIs on a site-specific system is https://api.NETWORK.SYSTEM-NAME_DOMAIN-NAME/apis/.\n"
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/rebalance_healthy_etcd_clusters/",
	"title": "Rebalance Healthy Etcd Clusters",
	"tags": [],
	"description": "",
	"content": "Rebalance Healthy etcd Clusters Rebalance the etcd clusters. The clusters need to be in a healthy state, and there needs to be the same number of pods running on each worker node for the etcd clusters to be balanced.\nRestoring the balance of etcd clusters will help with the storage of Kubernetes cluster data.\nPrerequisites  etcd clusters are in a healthy state. etcd clusters do not have the same number of pods on each worker node.  Procedure   Check to see if clusters have two or more pods on the same worker node.\nThe following is an example of an unhealthy cluster. Two of the pods are on ncn-w001, and only one pod is on ncn-w003.\nncn-w001# kubectl get pods -o wide -A -l app=etcd Example output:\nNAMESPACE NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES services cray-bos-etcd-cqjr66ldlr 1/1 Running 0 5d10h 10.39.1.55 ncn-w001 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; services cray-bos-etcd-hsb2zfzxqv 1/1 Running 0 5d10h 10.36.0.13 ncn-w003 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; services cray-bos-etcd-v9sfkxcpzc 1/1 Running 0 3d 10.39.2.58 ncn-w001 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt;   Confirm the clusters are healthy.\nRefer to Check the Health and Balance of etcd Clusters.\n  Delete one of the pods that is on the same node as another in the cluster.\nncn-w001# kubectl -A delete pod POD_NAME   Check the health of the pods.\nRefer to Check the Health and Balance of etcd Clusters.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/rebuild_unhealthy_etcd_clusters/",
	"title": "Rebuild Unhealthy Etcd Clusters",
	"tags": [],
	"description": "",
	"content": "Rebuild Unhealthy etcd Clusters Rebuild any cluster that does not have healthy pods by deleting and redeploying unhealthy pods. This procedure includes examples for rebuilding etcd clusters in the services namespace. This procedure must be used for each unhealthy cluster, not just the services used in the following examples.\nThis process also applies when etcd is not visible when running the kubectl get pods command.\nA special use case is also included for the Content Projection Service (CPS) as the process for rebuilding the cluster is slightly different.\n NOTE\nEtcd Clusters can be rebuilt using the automation script or the manual procedure below. The automation script follows the same steps as the manual procedure. If the automation script fails at any step, continue rebuilding the cluster using the manual procedure.\n Prerequisites An etcd cluster has pods that are not healthy, or the etcd cluster has no pods. See Check the Health and Balance of etcd Clusters for more information.\nAutomation Script for Clusters in the Services Namespace The automated script will restore the cluster from a backup if it finds a backup created within the last 7 days. If it does not discover a backup within the last 7 days, it will ask the user if they would like to rebuild the cluster.\nncn-w001 # cd /opt/cray/platform-utils/etcd_restore_rebuild_util # rebuild/restore a single cluster ncn-w001:/opt/cray/platform-utils/etcd_restore_rebuild_util # ./etcd_restore_rebuild.sh -s cray-bos-etcd # rebuild/restore multiple clusters ncn-w001:/opt/cray/platform-utils/etcd_restore_rebuild_util # ./etcd_restore_rebuild.sh -m cray-bos-etcd,cray-uas-mgr-etcd # rebuild/restore all clusters ncn-w001:/opt/cray/platform-utils/etcd_restore_rebuild_util # ./etcd_restore_rebuild.sh -a An example using the automation script is below.\nncn-w001:/opt/cray/platform-utils/etcd_restore_rebuild_util # ./etcd_restore_rebuild.sh -s cray-uas-mgr-etcd Example output:\nThe following etcd clusters will be restored/rebuilt: cray-uas-mgr-etcd You will be accepting responsibility for any missing data if there is a restore/rebuild over a running etcd k/v. HPE assumes no responsibility. Proceed restoring/rebuilding? (yes/no) yes Proceeding: restoring/rebuilding etcd clusters. The following etcd clusters did not have backups so they will need to be rebuilt: cray-uas-mgr-etcd Would you like to proceed rebuilding all of these etcd clusters? (yes/no) yes ----- Rebuilding cray-uas-mgr-etcd ----- Deployment and etcd cluster objects captured in yaml file yaml files edited deployment.apps \u0026quot;cray-uas-mgr\u0026quot; deleted etcdcluster.etcd.database.coreos.com \u0026quot;cray-uas-mgr-etcd\u0026quot; deleted Waiting for pods to terminate. etcdcluster.etcd.database.coreos.com/cray-uas-mgr-etcd created Waiting for pods to be 'Running'. - 0/3 Running - 1/3 Running - 2/3 Running - 3/3 Running error: unable to upgrade connection: container not found (\u0026quot;etcd\u0026quot;) cray-uas-mgr-etcd-42qj56htp5 - Could not reach endpoint. 1/5 Attempts. Will try again in 15 seconds. error: unable to upgrade connection: container not found (\u0026quot;etcd\u0026quot;) cray-uas-mgr-etcd-42qj56htp5 - Could not reach endpoint. 2/5 Attempts. Will try again in 15 seconds. cray-uas-mgr-etcd-42qj56htp5 - Endpoint reached successfully cray-uas-mgr-etcd-6rpprkwbpp - Endpoint reached successfully cray-uas-mgr-etcd-nzbzl7k6gm - Endpoint reached successfully deployment.apps/cray-uas-mgr created SUCCESSFUL REBUILD cray-uas-mgr-etcd. Could not find existing backup definition. If one exists, it should be deleted so a new one can be created that points to the new cluster IP. Example delete command: groot-ncn-w001:~ # kubectl delete etcdbackup -n services cray-bos-etcd-cluster-periodic-backup Rerun the etcd cluster health check (see Check the Health and Balance of etcd Clusters) after recovering one or more clusters. Ensure that the clusters are healthy and have the correct number of pods.\nManual Procedure for Clusters in the Services Namespace The following examples use the cray-bos etcd cluster, but these steps must be repeated for every unhealthy service.\n  Retrieve the .yaml file for the deployment and the etcd cluster objects.\nncn-w001# kubectl -n services get deployment cray-bos -o yaml \u0026gt; /root/etcd/cray-bos.yaml ncn-w001# kubectl -n services get etcd cray-bos-etcd -o yaml \u0026gt; /root/etcd/cray-bos-etcd.yaml Only two files must be retrieved in most cases. There is a third file needed if rebuilding clusters for the CPS. CPS must be unmounted before running the commands to rebuild the etcd cluster.\nncn-w001# kubectl -n services get deployment cray-cps -o yaml \u0026gt; /root/etcd/cray-cps.yaml ncn-w001# kubectl -n services get daemonset cray-cps-cm-pm -o yaml \u0026gt; /root/etcd/cray-cps-cm-pm.yaml ncn-w001# kubectl -n services get etcd cray-cps-etcd -o yaml \u0026gt; /root/etcd/cray-cps-etcd.yaml   Edit each .yaml file to remove the entire line for creationTimestamp, generation, resourceVersion, uid, and everything after status (including status).\nFor example:\ncreationTimestamp: \u0026quot;2019-11-26T16:54:23Z\u0026quot; generation: 1 resourceVersion: \u0026quot;5340297\u0026quot; uid: 65f4912e-106d-11ea-88b0-b42e993e060a status: availableReplicas: 1 conditions: - lastTransitionTime: \u0026quot;2019-11-26T16:54:23Z\u0026quot; lastUpdateTime: \u0026quot;2019-11-26T16:57:36Z\u0026quot; message: ReplicaSet \u0026quot;cray-bos-6f4475d59b\u0026quot; has successfully progressed. reason: NewReplicaSetAvailable status: \u0026quot;True\u0026quot; type: Progressing - lastTransitionTime: \u0026quot;2019-11-29T03:25:29Z\u0026quot; lastUpdateTime: \u0026quot;2019-11-29T03:25:29Z\u0026quot; message: Deployment has minimum availability. reason: MinimumReplicasAvailable status: \u0026quot;True\u0026quot; type: Available observedGeneration: 1 readyReplicas: 1 replicas: 1 updatedReplicas: 1   Delete the deployment and the etcd cluster objects.\nWait for the pods to terminate before proceeding to the next step.\nncn-w001# kubectl delete -f /root/etcd/cray-bos.yaml ncn-w001# kubectl delete -f /root/etcd/cray-bos-etcd.yaml In the use case of CPS clusters being rebuilt, the following files must be deleted:\nncn-w001# kubectl delete -f /root/etcd/cray-cps.yaml ncn-w001# kubectl delete -f /root/etcd/cray-cps-cm-pm.yaml ncn-w001# kubectl delete -f /root/etcd/cray-cps-etcd.yaml   Apply the etcd cluster file.\nncn-w001# kubectl apply -f /root/etcd/cray-bos-etcd.yaml Wait for all three pods to go into the Running state before proceeding to the next step. Use the following command to monitor the status of the pods:\nncn-w001# kubectl get pods -n services | grep bos-etcd Example output:\ncray-bos-etcd-hwcw4429b9 1/1 Running 1 7d18h cray-bos-etcd-mdnl28vq9c 1/1 Running 0 36h cray-bos-etcd-w5vv7j4ghh 1/1 Running 0 18h   Apply the deployment file.\nncn-w001# kubectl apply -f /root/etcd/cray-bos.yaml If using CPS, the etcd cluster file, deployment file, and daemonset file must be reapplied:\nncn-w001# kubectl apply -f /root/etcd/cray-cps.yaml ncn-w001# kubectl apply -f /root/etcd/cray-cps-cm-pm.yaml ncn-w001# kubectl apply -f /root/etcd/cray-cps-etcd.yaml Proceed to the next step to finish rebuilding the cluster.\n  Post-Rebuild   Update the IP address needed to interact with the rebuilt cluster.\nAfter recreating the etcd cluster, the IP address needed to interact with the cluster changes, which requires recreating the etcd backup. The IP address is created automatically via a cronjob that runs at the top of each hour.\n  Determine the periodic backup name for the cluster.\nThe following example is for the bos cluster:\nncn-w001# kubectl get etcdbackup -n services | grep bos.*periodic cray-bos-etcd-cluster-periodic-backup   Delete the etcd backup definition.\nA new backup will be created that points to the new IP address. Use the value returned in the previous substep.\nncn-w001# kubectl delete etcdbackup -n services \\ cray-bos-etcd-cluster-periodic-backup     Rerun the etcd cluster health check (see Check the Health and Balance of etcd Clusters) after recovering one or more clusters. Ensure that the clusters are healthy and have the correct number of pods.\n"
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/recover_from_postgres_wal_event/",
	"title": "Recover From Postgres Wal Event",
	"tags": [],
	"description": "",
	"content": "Recover from Postgres WAL Event A WAL event can occur because of lag, network communication, or bandwidth issues. This can cause the PVC hosted by Ceph and mounted inside the container on /home/postgres/pgdata to fill and the database to stop running. If no database dump exists, the disk space issue needs to be fixed so that a dump can be taken. Then the dump can be restored to a newly created postgresql cluster. If a dump already exists, skip to Rebuild the cluster and Restore the data.\nIf no database dump exists and neither option results in a successful dump, then services specific Disaster Recovery for Postgres will be required.\nThe Recovery Workflow:\n Attempt to Recover to a Running Database  Option 1: Clear Logs and/or WAL Files Option 2: Resize the Postgres PVCs   Dump the Data Rebuild the Cluster and Restore the Data  Attempt to Recover to a Running Database A running database is needed to be able to dump the current data.\nThe following example is based on cray-smd-postgres.\nConfirm that the database is down (no endpoint exists) and that the disk is full on one or more postgresql cluster member.\nncn-mw# POSTGRESQL=cray-smd-postgres ncn-mw# NAMESPACE=services ncn-mw# kubectl get endpoints ${POSTGRESQL} -n ${NAMESPACE} Expected output looks similar to:\nNAME ENDPOINTS AGE cray-smd-postgres 3d22h ncn-mw# for i in {0..2}; do echo \u0026#34;${POSTGRESQL}-${i}:\u0026#34; kubectl exec ${POSTGRESQL}-${i} -n ${NAMESPACE} -c postgres -- df -h pgdata done Expected output looks similar to:\ncray-smd-postgres-0: Filesystem Size Used Avail Use% Mounted on /dev/rbd8 30G 28G 1.6G 95% /home/postgres/pgdata cray-smd-postgres-1: Filesystem Size Used Avail Use% Mounted on /dev/rbd15 30G 30G 0 100% /home/postgres/pgdata cray-smd-postgres-2: Filesystem Size Used Avail Use% Mounted on /dev/rbd6 30G 383M 30G 2% /home/postgres/pgdata If the database is down and the disk is full because of replication issues, there are two ways to attempt to get back to a running database: either delete files or resize the Postgres PVCs until the database is able to start running again.\nOption 1 : Clear logs and/or WAL files The following example is based on cray-smd-postgres.\n  Clear files from /home/postgres/pgdata/pgroot/pg_log/ until the database is running again and you can successfully connect. For example, if the disk space is at 100%, exec into that pod, copy the logs off (optional) and then clear the logs to recover some disk space.\nncn-mw# kubectl cp \u0026#34;${POSTGRESQL}-1\u0026#34;:/home/postgres/pgdata/pgroot/pg_log /tmp -c postgres -n ${NAMESPACE} ncn-mw# kubectl exec \u0026#34;${POSTGRESQL}-1\u0026#34; -n ${NAMESPACE} -c postgres -it -- bash root@cray-smd-postgres-1:/home/postgres# for i in {0..7}; do \u0026gt; /home/postgres/pgdata/pgroot/pg_log/postgresql-$i.csv; done   Restart the Postgres cluster and postgres-operator.\nncn-mw# kubectl delete pod -n ${NAMESPACE} \u0026#34;${POSTGRESQL}-0\u0026#34; \u0026#34;${POSTGRESQL}-1\u0026#34; \u0026#34;${POSTGRESQL}-2\u0026#34; ncn-mw# kubectl delete pod -n services -l app.kubernetes.io/name=postgres-operator   Check if the database is running. If it is running, then continue with Dumping the data.\nncn-mw# kubectl exec \u0026#34;${POSTGRESQL}-1\u0026#34; -n ${NAMESPACE} -c postgres -it -- psql -U postgres psql (12.2 (Ubuntu 12.2-1.pgdg18.04+1), server 11.7 (Ubuntu 11.7-1.pgdg18.04+1)) Type \u0026#34;help\u0026#34; for help. postgres=# \u0026lt;----- success!! Type \\q   If the database is still not running, then delete files from /home/postgres/pgdata/pgroot/data/pg_wal/.\n CAUTION: This method could result in unintended consequences for the Postgres database and long service downtime; do not use unless there is a known Disaster Recovery for Postgres procedure for repopulating the Postgres cluster.\n ncn-mw# kubectl exec \u0026#34;${POSTGRESQL}-1\u0026#34; -n ${NAMESPACE} -c postgres -it -- bash root@cray-smd-postgres-1:/home/postgres# rm pgdata/pgroot/data/pg_wal/0*   Restart the Postgres cluster and postgres-operator.\nncn-mw# kubectl delete pod -n ${NAMESPACE} \u0026#34;${POSTGRESQL}-0\u0026#34; \u0026#34;${POSTGRESQL}-1\u0026#34; \u0026#34;${POSTGRESQL}-2\u0026#34; ncn-mw# kubectl delete pod -n services -l app.kubernetes.io/name=postgres-operator   Check if the database is running.\nncn-mw# kubectl exec \u0026quot;${POSTGRESQL}-1\u0026quot; -n ${NAMESPACE} -c postgres -it -- psql -U postgres psql (12.2 (Ubuntu 12.2-1.pgdg18.04+1), server 11.7 (Ubuntu 11.7-1.pgdg18.04+1)) Type \u0026quot;help\u0026quot; for help. postgres=# \u0026lt;----- success!! Type \\q   If the database is still not running, then try recovering using the other option listed in this document.\n  Option 2 : Resize the Postgres PVCs The following example is based on cray-smd-postgres, where the postgresql cray-smd-postgres resource and the pgdata-cray-smd-postgres PVCs will be resized from 100Gi to 120Gi.\n  Determine the current size of the Postgres PVCs and set PGRESIZE to the desired new size (it must be larger than the current size).\nncn-mw# kubectl get postgresql -A | grep \u0026#34;smd\\|NAME\u0026#34; NAMESPACE NAME TEAM VERSION PODS VOLUME CPU-REQUEST MEMORY-REQUEST AGE STATUS services cray-smd-postgres cray-smd 11 3 100Gi 4 8Gi 18h Running ncn-mw# kubectl get pvc -A | grep \u0026#34;cray-smd-postgres\\|NAME\u0026#34; NAMESPACE NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE services pgdata-cray-smd-postgres-0 Bound pvc-c86859f4-a57f-4694-a66a-8120e96a1ab4 100Gi RWO k8s-block-replicated 18h services pgdata-cray-smd-postgres-1 Bound pvc-300f52e4-f88d-47ef-9a1e-e598fd919047 100Gi RWO k8s-block-replicated 18h services pgdata-cray-smd-postgres-2 Bound pvc-f33879f3-0e99-4299-b796-210fbb693a2f 100Gi RWO k8s-block-replicated 18h ncn-mw# PGRESIZE=120Gi ncn-mw# POSTGRESQL=cray-smd-postgres ncn-mw# PGDATA=pgdata-cray-smd-postgres ncn-mw# NAMESPACE=services   Edit numberOfInstances in the postgresql resource from 3 to 1.\nncn-mw# kubectl patch postgresql ${POSTGRESQL} -n ${NAMESPACE} --type=json -p=\u0026#39;[{\u0026#34;op\u0026#34; : \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;:\u0026#34;/spec/numberOfInstances\u0026#34;, \u0026#34;value\u0026#34; : 1}]\u0026#39; postgresql.acid.zalan.do/cray-smd-postgres patched   Wait for 2 of the 3 postgresql pods to terminate.\nncn-mw# while [ $(kubectl get pods -l \u0026quot;application=spilo,cluster-name=${POSTGRESQL}\u0026quot; -n ${NAMESPACE} | grep -v NAME | wc -l) != 1 ] ; do echo \u0026quot; waiting for pods to terminate\u0026quot; sleep 2 done   Delete the PVCs from the non-running Postgres pods.\nncn-mw# kubectl delete pvc \u0026#34;${PGDATA}-1\u0026#34; \u0026#34;${PGDATA}-2\u0026#34; -n ${NAMESPACE} persistentvolumeclaim \u0026#34;pgdata-cray-smd-postgres-1\u0026#34; deleted persistentvolumeclaim \u0026#34;pgdata-cray-smd-postgres-2\u0026#34; deleted   Resize the remaining Postgres PVC resources.requests.storage to $PGRESIZE.\nncn-mw# kubectl patch -p \u0026#39;{\u0026#34;spec\u0026#34;: {\u0026#34;resources\u0026#34;: {\u0026#34;requests\u0026#34;: {\u0026#34;storage\u0026#34;: \u0026#34;\u0026#39;${PGRESIZE}\u0026#39;\u0026#34;}}}}\u0026#39; \u0026#34;pvc/${PGDATA}-0\u0026#34; -n ${NAMESPACE} persistentvolumeclaim/pgdata-cray-smd-postgres-0 patched   Wait for the PVC to resize.\nncn-mw# while [ -z \u0026#39;$(kubectl describe pvc \u0026#34;${PGDATA}-0\u0026#34; -n ${NAMESPACE} | grep FileSystemResizeSuccessful\u0026#39; ] ; do echo \u0026#34; waiting for PVC to resize\u0026#34; sleep 2 done   Update the postgresql resource spec.volume.size to $PGRESIZE.\nncn-mw# kubectl get \u0026#34;postgresql/${POSTGRESQL}\u0026#34; -n ${NAMESPACE} -o json | jq \u0026#39;.spec.volume = {\u0026#34;size\u0026#34;: \u0026#34;\u0026#39;${PGRESIZE}\u0026#39;\u0026#34;}\u0026#39; | kubectl apply -f - postgresql.acid.zalan.do/cray-smd-postgres configured   Restart the existing postgresql pod.\nncn-mw# kubectl delete pod \u0026#34;${POSTGRESQL}-0\u0026#34; -n services pod \u0026#34;cray-smd-postgres-0\u0026#34; deleted   Verify that the single instance pod is Running with 3/3 Ready, patronictl reports the member is running, and the postgresql resource is Running with new volume size ($PGRESIZE).\nncn-mw# kubectl get pods -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; -n ${NAMESPACE} NAME READY STATUS RESTARTS AGE cray-smd-postgres-0 3/3 Running 0 14s $ kubectl exec \u0026#34;${POSTGRESQL}-0\u0026#34; -n ${NAMESPACE} -c postgres -it -- patronictl list +-------------------+---------------------+------------+--------+---------+----+-----------+ | Cluster | Member | Host | Role | State | TL | Lag in MB | +-------------------+---------------------+------------+--------+---------+----+-----------+ | cray-smd-postgres | cray-smd-postgres-0 | 10.44.0.38 | Leader | running | 2 | | +-------------------+---------------------+------------+--------+---------+----+-----------+ ncn-mw# kubectl get postgresql ${POSTGRESQL} -n ${NAMESPACE} NAME TEAM VERSION PODS VOLUME CPU-REQUEST MEMORY-REQUEST AGE STATUS cray-smd-postgres cray-smd 11 1 120Gi 500m 100Mi 11m Running   Verify that the database is running.\nncn-mw# kubectl exec \u0026#34;${POSTGRESQL}-0\u0026#34; -n services -c postgres -it -- psql -U postgres psql (12.2 (Ubuntu 12.2-1.pgdg18.04+1), server 11.7 (Ubuntu 11.7-1.pgdg18.04+1)) Type \u0026#34;help\u0026#34; for help. postgres=# \u0026lt;----- success!! Type \\q   Scale numberOfInstances in postgresql resource from 1 back to 3.\nncn-mw# kubectl patch postgresql \u0026#34;${POSTGRESQL}\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34; : \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;:\u0026#34;/spec/numberOfInstances\u0026#34;, \u0026#34;value\u0026#34; : 3}]\u0026#39; postgresql.acid.zalan.do/cray-smd-postgres patched   Logs may indicate WAL error such as the following, but a dump can be taken at this point.\nncn-mw# kubectl logs \u0026#34;${POSTGRESQL}-0\u0026#34; -n ${NAMESPACE} -c postgres | grep -i error ncn-mw# kubectl logs \u0026#34;${POSTGRESQL}-1\u0026#34; -n ${NAMESPACE} -c postgres | grep -i error ncn-mw# kubectl logs \u0026#34;${POSTGRESQL}-2\u0026#34; -n ${NAMESPACE} -c postgres | grep -i error error: could not get write-ahead log end position from server: ERROR: invalid segment number   In order to persist any Postgres PVC storage volume size changes, it is necessary that this change also be made to the customer-managed customizations.yaml file. See the Postgres PVC Resize information in the Post Install Customizations.\n  Dump the data If the recovery was successful such that the database is now running, then continue with the following steps to dump the data.\n\n  Scale the client service to 0.\nThe following example is based on cray-smd. The cray-smd client service is deployed as a deployment. Other services may differ; e.g. statefulset.\nncn-mw# CLIENT=cray-smd ncn-mw# POSTGRESQL=cray-smd-postgres ncn-mw# NAMESPACE=services ncn-mw# kubectl scale deployment ${CLIENT} -n ${NAMESPACE} --replicas=0 deployment.apps/cray-smd scaled ncn-mw# while [ $(kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=\u0026#34;${CLIENT}\u0026#34; | grep -v NAME | wc -l) != 0 ] ; do echo \u0026#34; waiting for pods to terminate\u0026#34; sleep 2 done   Dump all the data.\nDetermine which Postgres member is the leader and kubectl exec into the leader pod in order to dump the data to a local file:\nncn-mw# kubectl exec \u0026#34;${POSTGRESQL}-0\u0026#34; -n ${NAMESPACE} -c postgres -it -- patronictl list +-------------------+---------------------+------------+--------+---------+----+-----------+ | Cluster | Member | Host | Role | State | TL | Lag in MB | +-------------------+---------------------+------------+--------+---------+----+-----------+ | cray-smd-postgres | cray-smd-postgres-0 | 10.42.0.25 | Leader | running | 1 | | | cray-smd-postgres | cray-smd-postgres-1 | 10.44.0.34 | | running | | 0 | | cray-smd-postgres | cray-smd-postgres-2 | 10.36.0.44 | | running | | 0 | +-------------------+---------------------+------------+--------+---------+----+-----------+ ncn-mw# POSTGRES_LEADER=cray-smd-postgres-0 ncn-mw# kubectl exec -it ${POSTGRES_LEADER} -n ${NAMESPACE} -c postgres -- pg_dumpall -c -U postgres \u0026gt; \u0026#34;${POSTGRESQL}-dumpall.sql\u0026#34; ncn-mw# ls \u0026#34;${POSTGRESQL}-dumpall.sql\u0026#34; cray-smd-postgres-dumpall.sql   Rebuild the cluster and restore the data If recovery was successful such that a dump could be taken or a dump already exists, then continue with the following steps to rebuild the postgresql cluster and restore the data.\nThe following example restores the dump to the cray-smd-postgres cluster.\n  If the client service is not yet scaled to 0, follow the step above to scale the client service to 0.\n  Delete and re-create the postgresql resource (which includes the PVCs).\nncn-mw# CLIENT=cray-smd ncn-mw# POSTGRESQL=cray-smd-postgres ncn-mw# NAMESPACE=services ncn-mw# kubectl get postgresql ${POSTGRESQL} -n ${NAMESPACE} -o json | jq \u0026#39;del(.spec.selector)\u0026#39; | jq \u0026#39;del(.spec.template.metadata.labels.\u0026#34;controller-uid\u0026#34;)\u0026#39; | jq \u0026#39;del(.status)\u0026#39; \u0026gt; postgres-cr.yaml ncn-mw# kubectl delete -f postgres-cr.yaml postgresql.acid.zalan.do \u0026#34;cray-smd-postgres\u0026#34; deleted ncn-mw# while [ $(kubectl get pods -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; -n ${NAMESPACE} | grep -v NAME | wc -l) != 0 ] ; do echo \u0026#34; waiting for pods to terminate\u0026#34; sleep 2 done ncn-mw# kubectl create -f postgres-cr.yaml postgresql.acid.zalan.do/cray-smd-postgres created ncn-mw# while [ $(kubectl get pods -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; -n ${NAMESPACE} | grep -v NAME | wc -l) != 3 ] ; do echo \u0026#34; waiting for pods to start running\u0026#34; sleep 2 done   Determine which Postgres member is the leader.\nncn-mw# kubectl exec \u0026#34;${POSTGRESQL}-0\u0026#34; -n ${NAMESPACE} -c postgres -it -- patronictl list +-------------------+---------------------+------------+--------+---------+----+-----------+ | Cluster | Member | Host | Role | State | TL | Lag in MB | +-------------------+---------------------+------------+--------+---------+----+-----------+ | cray-smd-postgres | cray-smd-postgres-0 | 10.42.0.25 | Leader | running | 1 | | | cray-smd-postgres | cray-smd-postgres-1 | 10.44.0.34 | | running | | 0 | | cray-smd-postgres | cray-smd-postgres-2 | 10.36.0.44 | | running | | 0 | +-------------------+---------------------+------------+--------+---------+----+-----------+ ncn-mw# POSTGRES_LEADER=cray-smd-postgres-0   Copy the dump taken above to the Postgres leader pod and restore the data.\nIf the dump exists in a different location, adjust this example as needed.\nncn-mw# kubectl cp ./cray-smd-postgres-dumpall.sql ${POSTGRES_LEADER}:/home/postgres/cray-smd-postgres-dumpall.sql -c postgres -n ${NAMESPACE} ncn-mw# kubectl exec ${POSTGRES_LEADER} -c postgres -n ${NAMESPACE} -it -- psql -U postgres \u0026lt; cray-smd-postgres-dumpall.sql   Restore the secrets.\nOnce the dump has been restored onto the newly built postgresql cluster, the current Kubernetes secrets need to be updated in the postgresql cluster, otherwise the service will experience readiness and liveness probe failures because it will be unable to authenticate to the database.\n  Determine what secrets are associated with the postgresql credentials.\nncn-mw# kubectl get secrets -n ${NAMESPACE} | grep \u0026#34;${POSTGRESQL}.credentials\u0026#34; services hmsdsuser.cray-smd-postgres.credentials Opaque 2 31m services postgres.cray-smd-postgres.credentials Opaque 2 31m services service-account.cray-smd-postgres.credentials Opaque 2 31m services standby.cray-smd-postgres.credentials Opaque 2 31m   For each secret above, get the username and password from Kubernetes and update the Postgres database with this information.\nFor example (hmsdsuser.cray-smd-postgres.credentials):\nncn-mw# kubectl get secret hmsdsuser.cray-smd-postgres.credentials -n ${NAMESPACE} -ojsonpath=\u0026#39;{.data.username}\u0026#39; | base64 -d hmsdsuser ncn-mw# kubectl get secret hmsdsuser.cray-smd-postgres.credentials -n ${NAMESPACE} -ojsonpath=\u0026#39;{.data.password}\u0026#39;| base64 -d ABCXYZ   kubectl exec into the leader pod to reset the user\u0026rsquo;s password:\nncn-mw# kubectl exec ${POSTGRES_LEADER} -n ${NAMESPACE} -c postgres -it -- bash root@cray-smd-postgres-0:/home/postgres# /usr/bin/psql postgres postgres postgres=# ALTER USER hmsdsuser WITH PASSWORD \u0026#39;ABCXYZ\u0026#39;; ALTER ROLE postgres=#   Continue the above process until all ${POSTGRESQL}.credentials secrets have been updated in the database.\n    Restart the postgresql cluster\nncn-mw# kubectl delete pod \u0026#34;${POSTGRESQL}-0\u0026#34; \u0026#34;${POSTGRESQL}-1\u0026#34; \u0026#34;${POSTGRESQL}-2\u0026#34; -n ${NAMESPACE} ncn-mw# while [ $(kubectl get postgresql ${POSTGRESQL} -n ${NAMESPACE} -o json |jq -r \u0026#39;.status.PostgresClusterStatus\u0026#39;) != \u0026#34;Running\u0026#34; ]; do echo \u0026#34;waiting for ${POSTGRESQL}to start running\u0026#34; sleep 2 done   Scale the client service back to 3\nncn-mw# kubectl scale deployment ${CLIENT} -n ${NAMESPACE} --replicas=3 ncn-mw# while [ $(kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=\u0026#34;${CLIENT}\u0026#34; | grep -v NAME | wc -l) != 3 ] ; do echo \u0026#34; waiting for pods to start running\u0026#34; sleep 2 done   "
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/repopulate_data_in_etcd_clusters_when_rebuilding_them/",
	"title": "Repopulate Data In Etcd Clusters When Rebuilding Them",
	"tags": [],
	"description": "",
	"content": "Repopulate Data in etcd Clusters When Rebuilding Them When an etcd cluster is not healthy, it needs to be rebuilt. During that process, the pods that rely on etcd clusters lose data. That data needs to be repopulated in order for the cluster to go back to a healthy state.\nThe following services need their data repopulated in the etcd cluster:\n Boot Orchestration Service (BOS) Boot Script Service (BSS) Content Projection Service (CPS) Compute Rolling Upgrade Service (CRUS) External DNS Firmware Action Service (FAS) HMS Notification Fanout Daemon (HMNFD) Mountain Endpoint Discovery Service (MEDS) River Endpoint Discovery Service (REDS)  Prerequisites An etcd cluster was rebuilt. See Rebuild Unhealthy etcd Clusters.\nBOS   Reconstruct boot session templates for impacted product streams to repopulate data.\nBoot preparation information for other product streams can be found in the following locations:\n UANs: Refer to the UAN product stream repository and search for the \u0026ldquo;PREPARE UAN BOOT SESSION TEMPLATES\u0026rdquo; header in the \u0026ldquo;Install and Configure UANs\u0026rdquo; procedure. Cray Operating System (COS): Refer to the \u0026ldquo;Create a Boot Session Template\u0026rdquo; header in the \u0026ldquo;Boot COS\u0026rdquo; procedure in the COS product stream documentation.    CPS Repopulate clusters for CPS.\n If there are no clients using CPS when the etcd cluster is rebuilt, then nothing needs to be done other than to rebuild the cluster and make sure all of the components are up and running. See Rebuild Unhealthy etcd Clusters for more information. If any clients have already mounted content provided by CPS, that content should be unmounted before rebuilding the etcd cluster, and then re-mounted after the etcd cluster is rebuilt. Compute nodes that use CPS to access their root file system must be shut down to unmount, and then booted to perform the re-mount.  CRUS Note: CRUS is deprecated in CSM 1.2.0. It will be removed in a future CSM release and replaced with BOS V2, which will provide similar functionality. See Deprecated features.\n  View the progress of existing CRUS sessions.\n  List the existing CRUS sessions to find the upgrade_id for the desired session.\nncn# cray crus session list Example output:\n[[results]] api_version = \u0026#34;1.0.0\u0026#34; completed = false failed_label = \u0026#34;failed-nodes\u0026#34; kind = \u0026#34;ComputeUpgradeSession\u0026#34; messages = [ \u0026#34;Quiesce requested in step 0: moving to QUIESCING\u0026#34;, \u0026#34;All nodes quiesced in step 0: moving to QUIESCED\u0026#34;, \u0026#34;Began the boot session for step 0: moving to BOOTING\u0026#34;,] starting_label = \u0026#34;slurm-nodes\u0026#34; state = \u0026#34;UPDATING\u0026#34; upgrade_id = \u0026#34;e0131663-dbee-47c2-aa5c-13fe9b110242\u0026#34; \u0026lt;\u0026lt;-- Note this value upgrade_step_size = 50 upgrade_template_id = \u0026#34;boot-template\u0026#34; upgrading_label = \u0026#34;upgrading-nodes\u0026#34; workload_manager_type = \u0026#34;slurm\u0026#34;   Describe the CRUS session to see if the session failed or is stuck.\nIf the session continued and appears to be in a healthy state, proceed to the BSS section.\nncn# cray crus session describe CRUS_UPGRADE_ID Example output:\napi_version = \u0026#34;1.0.0\u0026#34; completed = false failed_label = \u0026#34;failed-nodes\u0026#34; kind = \u0026#34;ComputeUpgradeSession\u0026#34; messages = [ \u0026#34;Quiesce requested in step 0: moving to QUIESCING\u0026#34;, \u0026#34;All nodes quiesced in step 0: moving to QUIESCED\u0026#34;, \u0026#34;Began the boot session for step 0: moving to BOOTING\u0026#34;,] starting_label = \u0026#34;slurm-nodes\u0026#34; state = \u0026#34;UPDATING\u0026#34; upgrade_id = \u0026#34;e0131663-dbee-47c2-aa5c-13fe9b110242\u0026#34; upgrade_step_size = 50 upgrade_template_id = \u0026#34;boot-template\u0026#34; upgrading_label = \u0026#34;upgrading-nodes\u0026#34; workload_manager_type = \u0026#34;slurm\u0026#34;     Find the name of the running CRUS pod.\nncn# kubectl get pods -n services | grep cray-crus Example output:\ncray-crus-549cb9cb5d-jtpqg 3/4 Running 528 25h   Restart the CRUS pod.\nDeleting the pod will restart CRUS and start the discovery process for any data recovered in etcd.\nncn# kubectl delete pods -n services POD_NAME   BSS Data is repopulated in BSS when the REDS init job is run.\n  Get the current REDS job.\nncn# kubectl get -o json -n services job/cray-reds-init | jq \u0026#39;del(.spec.template.metadata.labels[\u0026#34;controller-uid\u0026#34;], .spec.selector)\u0026#39; \u0026gt; cray-reds-init.json   Delete the reds-client-init job.\nncn# kubectl delete -n services -f cray-reds-init.json   Restart the reds-client-init job.\nncn# kubectl apply -n services -f cray-reds-init.json   REDS   Restart REDS.\nncn# kubectl -n services delete pods --selector=\u0026#39;app.kubernetes.io/name=cray-reds\u0026#39;   MEDS   Restart MEDS.\nncn# kubectl -n services delete pods --selector=\u0026#39;app.kubernetes.io/name=cray-meds\u0026#39;   FAS  Reload the firmware images from Nexus.  Refer to the Load Firmware from Nexus section in FAS Admin Procedures for more information.\nWhen the etcd cluster is rebuilt, all historic data for firmware actions and all recorded snapshots will be lost. Image data will be reloaded from Nexus. Any images that were loaded into FAS outside of Nexus will need to be reloaded using the Load Firmware from RPM or ZIP file section in FAS Admin Procedures. After images are reloaded, any running actions at time of failure will need to be recreated.\nHMNFD   Resubscribe the compute nodes and any NCNs that use the ORCA daemon for their State Change Notifications (SCN).\n Resubscribe all compute nodes.  ncn-m001# TMPFILE=$(mktemp) ncn-m001# sat status --no-borders --no-headings | grep Ready | grep Compute | awk \u0026#39;{printf(\u0026#34;nid%06d-nmn\\n\u0026#34;,$3);}\u0026#39; \u0026gt; $TMPFILE ncn-m001# pdsh -w ^${TMPFILE} \u0026#34;systemctl restart cray-dvs-orca\u0026#34; ncn-m001# rm -rf $TMPFILE   Resubscribe the NCNs.\nNOTE: Modify the -w arguments in the following commands to reflect the number of worker and storage nodes in the system.\nncn-m001# pdsh -w ncn-w00[0-4]-can.local \u0026#34;systemctl restart cray-dvs-orca\u0026#34; ncn-m001# pdsh -w ncn-s00[0-4]-can.local \u0026#34;systemctl restart cray-dvs-orca\u0026#34;     "
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/report_the_endpoint_status_for_etcd_clusters/",
	"title": "Report The Endpoint Status For Etcd Clusters",
	"tags": [],
	"description": "",
	"content": "Report the Endpoint Status for etcd Clusters Report etcd cluster end point status. The report includes a cluster\u0026rsquo;s endpoint, database size, and leader status.\nThis procedure provides the ability to view the etcd cluster endpoint status.\nPrerequisites  This procedure requires root privileges. The etcd clusters are in a healthy state.  Procedure   Report the endpoint status for all etcd clusters in a namespace.\nThe following example is for the services namespace.\nfor pod in $(kubectl get pods -l app=etcd -n services \\  -o jsonpath=\u0026#39;{.items[*].metadata.name}\u0026#39;) do echo \u0026#34;### ${pod}Endpoint Status: ###\u0026#34; kubectl -n services exec ${pod} -- /bin/sh \\  -c \u0026#34;ETCDCTL_API=3 etcdctl endpoint status -w table\u0026#34; done Example of command being run:\nncn-w001# for pod in $(kubectl get pods -l app=etcd -n services -o \\ jsonpath=\u0026#39;{.items[*].metadata.name}\u0026#39;); do echo \u0026#34;### ${pod}Endpoint Status: ###\u0026#34;; \\ kubectl -n services exec ${pod} -- /bin/sh -c \\ \u0026#34;ETCDCTL_API=3 etcdctl endpoint status -w table\u0026#34;; done; Example output:\n### cray-bos-etcd-7cxq6qrhz5 Endpoint Status: ### +----------------+------------------+---------+---------+-----------+-----------+------------+ | ENDPOINT | ID | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX | +----------------+------------------+---------+---------+-----------+-----------+------------+ | 127.0.0.1:2379 | e57d42e2a85763bb | 3.3.22 | 139 kB | true | 26 | 78360 | +----------------+------------------+---------+---------+-----------+-----------+------------+ ### cray-bos-etcd-b9m4k5qfrd Endpoint Status: ### +----------------+------------------+---------+---------+-----------+-----------+------------+ | ENDPOINT | ID | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX | +----------------+------------------+---------+---------+-----------+-----------+------------+ | 127.0.0.1:2379 | 355baed6cb6e3022 | 3.3.22 | 139 kB | false | 26 | 78360 | +----------------+------------------+---------+---------+-----------+-----------+------------+ ### cray-bos-etcd-tnpv8x6cxv Endpoint Status: ### +----------------+------------------+---------+---------+-----------+-----------+------------+ | ENDPOINT | ID | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX | +----------------+------------------+---------+---------+-----------+-----------+------------+ | 127.0.0.1:2379 | 78949579ff08b422 | 3.3.22 | 139 kB | false | 26 | 78360 | +----------------+------------------+---------+---------+-----------+-----------+------------+ ### cray-bss-etcd-q4k54rbbfj Endpoint Status: ### +----------------+------------------+---------+---------+-----------+-----------+------------+ | ENDPOINT | ID | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX | +----------------+------------------+---------+---------+-----------+-----------+------------+ | 127.0.0.1:2379 | cbeb570f568c6ca6 | 3.3.22 | 70 kB | true | 29 | 41321 | +----------------+------------------+---------+---------+-----------+-----------+------------+ ### cray-bss-etcd-r75mlv6ffd Endpoint Status: ### +----------------+------------------+---------+---------+-----------+-----------+------------+ | ENDPOINT | ID | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX | +----------------+------------------+---------+---------+-----------+-----------+------------+ | 127.0.0.1:2379 | 7343edb17d8e6fd4 | 3.3.22 | 70 kB | false | 29 | 41321 | +----------------+------------------+---------+---------+-----------+-----------+------------+ ### cray-bss-etcd-xprv5ht5d4 Endpoint Status: ### +----------------+------------------+---------+---------+-----------+-----------+------------+ | ENDPOINT | ID | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX | +----------------+------------------+---------+---------+-----------+-----------+------------+ | 127.0.0.1:2379 | d7404ad66483bd37 | 3.3.22 | 70 kB | false | 29 | 41321 | +----------------+------------------+---------+---------+-----------+-----------+------------+ [...]   Report the endpoint status for a singe etcd cluster in a namespace.\nThe following example is for the services namespace.\nfor pod in $(kubectl get pods -l etcd_cluster=cray-bos-etcd -n services \\  -o jsonpath=\u0026#39;{.items[*].metadata.name}\u0026#39;) do echo \u0026#34;### ${pod}Endpoint Status: ###\u0026#34; kubectl -n services exec ${pod} -- /bin/sh \\  -c \u0026#34;ETCDCTL_API=3 etcdctl endpoint status -w table\u0026#34; done Example of command being run:\nncn-w001# for pod in $(kubectl get pods -l etcd_cluster=cray-bos-etcd -n services \\ -o jsonpath=\u0026#39;{.items[*].metadata.name}\u0026#39;); do echo \u0026#34;### ${pod}Endpoint Status: \\ ###\u0026#34;; kubectl -n services exec ${pod} -- /bin/sh -c \\ \u0026#34;ETCDCTL\\_API=3 etcdctl endpoint status -w table\u0026#34;; done Example output:\n### cray-bos-etcd-7cxq6qrhz5 Endpoint Status: ### +----------------+------------------+---------+---------+-----------+-----------+------------+ | ENDPOINT | ID | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX | +----------------+------------------+---------+---------+-----------+-----------+------------+ | 127.0.0.1:2379 | e57d42e2a85763bb | 3.3.22 | 139 kB | true | 26 | 78333 | +----------------+------------------+---------+---------+-----------+-----------+------------+ ### cray-bos-etcd-b9m4k5qfrd Endpoint Status: ### +----------------+------------------+---------+---------+-----------+-----------+------------+ | ENDPOINT | ID | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX | +----------------+------------------+---------+---------+-----------+-----------+------------+ | 127.0.0.1:2379 | 355baed6cb6e3022 | 3.3.22 | 139 kB | false | 26 | 78333 | +----------------+------------------+---------+---------+-----------+-----------+------------+ ### cray-bos-etcd-tnpv8x6cxv Endpoint Status: ### +----------------+------------------+---------+---------+-----------+-----------+------------+ | ENDPOINT | ID | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX | +----------------+------------------+---------+---------+-----------+-----------+------------+ | 127.0.0.1:2379 | 78949579ff08b422 | 3.3.22 | 139 kB | false | 26 | 78333 | +----------------+------------------+---------+---------+-----------+-----------+------------+   "
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/restore_an_etcd_cluster_from_a_backup/",
	"title": "Restore An Etcd Cluster From A Backup",
	"tags": [],
	"description": "",
	"content": "Restore an etcd Cluster from a Backup Use an existing backup of a healthy etcd cluster to restore an unhealthy cluster to a healthy state.\nThe commands in this procedure can be run on any master node (ncn-mXXX) or worker node (ncn-wXXX) on the system.\n NOTE\nEtcd Clusters can be restored using the automation script or the manual procedure below. The automation script follows the same steps as the manual procedure. If the automation script fails to get the date from backups, follow the manual procedure.\n Prerequisites A backup of a healthy etcd cluster has been created.\nRestore with Automation Script The automated script will restore the cluster from the most recent backup if it finds a backup created within the last 7 days. If it does not discover a backup within the last 7 days, it will ask the user if they would like to rebuild the cluster.\nncn-w001# cd /opt/cray/platform-utils/etcd_restore_rebuild_util # rebuild/restore a single cluster ncn-w001:/opt/cray/platform-utils/etcd_restore_rebuild_util # ./etcd_restore_rebuild.sh -s cray-bos-etcd # rebuild/restore multiple clusters ncn-w001:/opt/cray/platform-utils/etcd_restore_rebuild_util # ./etcd_restore_rebuild.sh -m cray-bos-etcd,cray-uas-mgr-etcd # rebuild/restore all clusters ncn-w001:/opt/cray/platform-utils/etcd_restore_rebuild_util # ./etcd_restore_rebuild.sh -a An example using the automation script is below.\nncn-m001:/opt/cray/platform-utils/etcd_restore_rebuild_util # ./etcd_restore_rebuild.sh -s cray-externaldns-etcd The following etcd clusters will be restored/rebuilt: cray-externaldns-etcd You will be accepting responsibility for any missing data if there is a restore/rebuild over a running etcd k/v. HPE assumes no responsibility. Proceed restoring/rebuilding? (yes/no) yes Proceeding: restoring/rebuilding etcd clusters. ----- Restoring from cray-externaldns/etcd.backup_v8362_2021-08-18-20:00:09 etcdrestore.etcd.database.coreos.com/cray-externaldns-etcd created - 3/3 Running Successfully restored cray-externaldns-etcd etcdrestore.etcd.database.coreos.com \u0026quot;cray-externaldns-etcd\u0026quot; deleted Restore with Manual Procedure   List the backups for the desired etcd cluster.\nThe example below uses the Boot Orchestration Service (BOS).\nncn-w001# kubectl exec -it -n operators \\ $(kubectl get pod -n operators | grep etcd-backup-restore | head -1 | awk \u0026#39;{print $1}\u0026#39;) \\ -c boto3 -- list_backups cray-bos Example output:\ncray-bos/etcd.backup_v108497_2020-03-20-23:42:37 cray-bos/etcd.backup_v125815_2020-03-21-23:42:37 cray-bos/etcd.backup_v143095_2020-03-22-23:42:38 cray-bos/etcd.backup_v160489_2020-03-23-23:42:37 cray-bos/etcd.backup_v176621_2020-03-24-23:42:37 cray-bos/etcd.backup_v277935_2020-03-30-23:52:54 cray-bos/etcd.backup_v86767_2020-03-19-18:00:05   Restore the cluster using a backup.\nReplace etcd.backup_v277935_2020-03-30-23:52:54 in the command below with the name of the backup being used.\nncn-w001# kubectl exec -it -n operators \\ $(kubectl get pod -n operators | grep etcd-backup-restore | head -1 | awk \u0026#39;{print $1}\u0026#39;) \\ -c util -- restore_from_backup cray-bos etcd.backup_v277935_2020-03-30-23:52:54 Example output:\netcdrestore.etcd.database.coreos.com/cray-bos-etcd created   Restart the pods for the etcd cluster.\n  Watch the pods come back online.\nThis may take a couple minutes.\nncn-w001# kubectl -n services get pod | grep SERVICE_NAME Example output:\ncray-bos-etcd-498jn7th6p 1/1 Running 0 4h1m cray-bos-etcd-dj7d894227 1/1 Running 0 3h59m cray-bos-etcd-tk4pr4kgqk 1/1 Running 0 4   Delete the EtcdRestore custom resource.\nThis step will make it possible for future restores to occur. Replace the etcdrestore.etcd.database.coreos.com/cray-bos-etcd value with the name returned in step 2.\nncn-w001# kubectl -n services delete etcdrestore.etcd.database.coreos.com/cray-bos-etcd Example output:\netcdrestore.etcd.database.coreos.com \u0026quot;cray-bos-etcd\u0026quot; deleted     "
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/restore_bare-metal_etcd_clusters_from_an_s3_snapshot/",
	"title": "Restore Bare-metal Etcd Clusters From An S3 Snapshot",
	"tags": [],
	"description": "",
	"content": "Restore Bare-Metal etcd Clusters from an S3 Snapshot The etcd cluster that serves Kubernetes on master nodes is backed up every 10 minutes. These backups are pushed to Ceph Rados Gateway (S3).\nRestoring the etcd cluster from backup is only meant to be used in a catastrophic scenario, whereby the Kubernetes cluster and master nodes are being rebuilt. This procedure shows how to restore the bare-metal etcd cluster from an Simple Storage Service (S3) snapshot.\nThe etcd cluster needs to be restored from a backup when the Kubernetes cluster and master nodes are being rebuilt.\nPrerequisites The Kubernetes cluster on master nodes is being rebuilt.\nProcedure   Select a snapshot to restore a backup.\nThe following command lists the available backups. It must be run from the /opt/cray/platform-utils/s3 directory.\nncn# ./list-objects.py --bucket-name etcd-backup Example output:\nbare-metal/etcd-backup-2020-02-04-18-00-10.tar.gz bare-metal/etcd-backup-2020-02-04-18-10-06.tar.gz bare-metal/etcd-backup-2020-02-04-18-20-02.tar.gz bare-metal/etcd-backup-2020-02-04-18-30-10.tar.gz bare-metal/etcd-backup-2020-02-04-18-40-06.tar.gz bare-metal/etcd-backup-2020-02-04-18-50-03.tar.gz Note the file name for the desired snapshot/backup.\n  Download the snapshot and copy it to all NCN master nodes.\n  Retrieve the backup from S3 and uncompress it.\nncn# mkdir /tmp/etcd_restore ncn# cd /opt/cray/platform-utils/s3 ncn# ./download-file.py --bucket-name etcd-backup \\ --key-name bare-metal/etcd-backup-2020-02-04-18-50-03.tar.gz \\ --file-name /tmp/etcd_restore/etcd-backup-2020-02-04-18-50-03.tar.gz ncn# cd /tmp/etcd_restore ncn# gunzip etcd-backup-2020-02-04-18-50-03.tar.gz ncn# tar -xvf etcd-backup-2020-02-04-18-50-03.tar ncn# mv etcd-backup-2020-02-04-18-50-03/etcd-dump.bin /tmp   Push the file to the other NCN master nodes.\nncn# scp /tmp/etcd-dump.bin ncn-m002:/tmp ncn# scp /tmp/etcd-dump.bin ncn-m003:/tmp     Prepare to restore the member directory for ncn-m001.\n  Log in as root to ncn-m001.\n  Create a new temporary /tmp/etcd_restore directory.\nncn-m001# mkdir /tmp/etcd_restore   Change to the /tmp/etcd_restore directory.\nncn-m001# cd /tmp/etcd_restore   Retrieve the \u0026lsquo;initial-cluster\u0026rsquo; and \u0026lsquo;initial-advertise-peer-urls\u0026rsquo; values from the kubeadmcfg.yaml file.\nThe returned values will be used in the next step.\nncn-m001# grep -e initial-cluster: -e initial-advertise-peer-urls: \\ /etc/kubernetes/kubeadmcfg.yaml Example output:\ninitial-cluster: ncn-m001=https://10.252.1.7:2380,ncn-m002=https://10.252.1.8:2380,ncn-m003=https://10.252.1.9:2380 initial-advertise-peer-urls: https://10.252.1.7:2380   Restore the member directory.\nncn-m001# ETCDCTL_API=3 etcdctl --cacert /etc/kubernetes/pki/etcd/ca.crt \\  --cert /etc/kubernetes/pki/etcd/server.crt \\  --key /etc/kubernetes/pki/etcd/server.key \\  --name ncn-m001 \\  --initial-cluster ncn-m001=https://10.252.1.7:2380,ncn-m002=https://10.252.1.8:2380,ncn-m003=https://10.252.1.9:2380 \\  --initial-cluster-token tkn \\  --initial-advertise-peer-urls https://10.252.1.7:2380 \\  snapshot restore /tmp/etcd-dump.bin     Prepare to restore the member directory for ncn-m002.\n  Log in as root to ncn-m002.\n  Create a new temporary /tmp/etcd_restore directory.\nncn-m002# mkdir /tmp/etcd_restore   Change to the /tmp/etcd_restore directory.\nncn-m002# cd /tmp/etcd_restore   Retrieve the \u0026lsquo;initial-cluster\u0026rsquo; and \u0026lsquo;initial-advertise-peer-urls\u0026rsquo; values from the kubeadmcfg.yaml file.\nThe returned values will be used in the next step.\nncn-m002# grep -e initial-cluster: -e initial-advertise-peer-urls: \\ /etc/kubernetes/kubeadmcfg.yaml Example output:\ninitial-cluster: ncn-m001=https://10.252.1.7:2380,ncn-m002=https://10.252.1.8:2380,ncn-m003=https://10.252.1.9:2380 initial-advertise-peer-urls: https://10.252.1.8:2380   Restore the member directory.\nncn-m002# ETCDCTL_API=3 etcdctl --cacert /etc/kubernetes/pki/etcd/ca.crt \\ --cert /etc/kubernetes/pki/etcd/server.crt \\ --key /etc/kubernetes/pki/etcd/server.key \\ --name ncn-m002 \\ --initial-cluster ncn-m001=https://10.252.1.7:2380,ncn-m002=https://10.252.1.8:2380,ncn-m003=https://10.252.1.9:2380 \\ --initial-cluster-token tkn \\ --initial-advertise-peer-urls https://10.252.1.8:2380 \\ snapshot restore /tmp/etcd-dump.bin     Prepare to restore the member directory for ncn-m003.\n  Log in as root to ncn-m003.\n  Create a new temporary /tmp/etcd_restore directory.\nncn-m003# mkdir /tmp/etcd_restore   Change to the /tmp/etcd_restore directory.\nncn-m003# cd /tmp/etcd_restore   Retrieve the \u0026lsquo;initial-cluster\u0026rsquo; and \u0026lsquo;initial-advertise-peer-urls\u0026rsquo; values from the kubeadmcfg.yaml file.\nThe returned values will be used in the next step.\nncn-m003# grep -e initial-cluster: -e initial-advertise-peer-urls: \\ /etc/kubernetes/kubeadmcfg.yaml Example output:\ninitial-cluster: ncn-m001=https://10.252.1.7:2380,ncn-m002=https://10.252.1.8:2380,ncn-m003=https://10.252.1.9:2380 initial-advertise-peer-urls: https://10.252.1.9:2380   Restore the member directory.\nncn-m003# ETCDCTL_API=3 etcdctl --cacert /etc/kubernetes/pki/etcd/ca.crt \\ --cert /etc/kubernetes/pki/etcd/server.crt \\ --key /etc/kubernetes/pki/etcd/server.key \\ --name ncn-m003 \\ --initial-cluster ncn-m001=https://10.252.1.7:2380,ncn-m002=https://10.252.1.8:2380,ncn-m003=https://10.252.1.9:2380 \\ --initial-cluster-token tkn \\ --initial-advertise-peer-urls https://10.252.1.9:2380 \\ snapshot restore /tmp/etcd-dump.bin     Stop the current running cluster.\nIf the cluster is currently running, run the following command on all three master nodes (ncn-m001, ncn-m002, ncn-m003).\n  Stop the cluster on ncn-m001.\nncn-m001# systemctl stop etcd   Stop the cluster on ncn-m002.\nncn-m002# systemctl stop etcd   Stop the cluster on ncn-m003.\nncn-m003# systemctl stop etcd     Start the restored cluster on each master node.\nRun the following commands on all three master nodes (ncn-m001, ncn-m002, ncn-m003) to start the restored cluster.\n  Start the cluster on ncn-m001.\nncn-m001# rm -rf /var/lib/etcd/member ncn-m001# mv ncn-m001.etcd/member/ /var/lib/etcd/ ncn-m001# systemctl start etcd   Start the cluster on ncn-m002.\nncn-m002# rm -rf /var/lib/etcd/member ncn-m002# mv ncn-m002.etcd/member/ /var/lib/etcd/ ncn-m002# systemctl start etcd   Start the cluster on ncn-m003.\nncn-m003# rm -rf /var/lib/etcd/member ncn-m003# mv ncn-m003.etcd/member/ /var/lib/etcd/ ncn-m003# systemctl start etcd     Confirm the membership of the cluster.\nncn-m001# ETCDCTL_API=3 etcdctl --cacert /etc/kubernetes/pki/etcd/ca.crt \\ --cert /etc/kubernetes/pki/etcd/server.crt \\ --key /etc/kubernetes/pki/etcd/server.key member list Example output:\n448a8d056377359a, started, ncn-m001, https://10.252.1.7:2380, https://10.252.1.7:2379,https://127.0.0.1:2379 986f6ff2a30b01cb, started, ncn-m002, https://10.252.1.8:2380, https://10.252.1.8:2379,https://127.0.0.1:2379 d5a8e497e2788510, started, ncn-m003, https://10.252.1.9:2380, https://10.252.1.9:2379,https://127.0.0.1:2379   "
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/restore_postgres/",
	"title": "Restore Postgres",
	"tags": [],
	"description": "",
	"content": "Restore Postgres Below are the service specific steps required to restore data to a Postgres cluster.\nRestore Postgres Procedures by Service:\n Restore Postgres for Spire Restore Postgres for Keycloak Restore Postgres for VCS Restore Postgres for Capsules  Capsules Warehouse Server Capsules Dispatch Server    \nRestore Postgres for Spire In the event that the Spire Postgres cluster is in a state that the cluster must be rebuilt and the data restored, the following procedures are recommended. This assumes that a dump of the database exists.\n  Copy the database dump to an accessible location.\n If a manual dump of the database was taken, check that the dump file exists in a location off the Postgres cluster. It will be needed in the steps below. If the database is being automatically backed up, then the most recent version of the dump and the secrets should exist in the postgres-backup S3 bucket. These will be needed in the steps below. List the files in the postgres-backup S3 bucket and if the files exist, download the dump and secrets out of the S3 bucket. The python3 scripts below can be used to help list and download the files. Note that the .psql file contains the database dump and the .manifest file contains the secrets. The aws_access_key_id and aws_secret_access_key will need to be set based on the postgres-backup-s3-credentials secret.  ncn-w001# export S3_ACCESS_KEY=`kubectl get secrets postgres-backup-s3-credentials -ojsonpath=\u0026#39;{.data.access_key}\u0026#39; | base64 --decode` ncn-w001# export S3_SECRET_KEY=`kubectl get secrets postgres-backup-s3-credentials -ojsonpath=\u0026#39;{.data.secret_key}\u0026#39; | base64 --decode` list.py:\nimport io import boto3 import os # postgres-backup-s3-credentials are needed to list keys in the postgres-backup bucket s3_access_key = os.environ[\u0026#39;S3_ACCESS_KEY\u0026#39;] s3_secret_key = os.environ[\u0026#39;S3_SECRET_KEY\u0026#39;] s3 = boto3.resource( \u0026#39;s3\u0026#39;, endpoint_url=\u0026#39;http://rgw-vip.nmn\u0026#39;, aws_access_key_id=s3_access_key, aws_secret_access_key=s3_secret_key, verify=False) backup_bucket = s3.Bucket(\u0026#39;postgres-backup\u0026#39;) for file in backup_bucket.objects.filter(Prefix=\u0026#39;spire-postgres\u0026#39;): print(file.key) download.py:\nUpdate the script for the specific .manifest and .psql files you wish to download from S3.\nimport io import boto3 import os # postgres-backup-s3-credentials are needed to download from postgres-backup bucket s3_access_key = os.environ[\u0026#39;S3_ACCESS_KEY\u0026#39;] s3_secret_key = os.environ[\u0026#39;S3_SECRET_KEY\u0026#39;] s3_client = boto3.client( \u0026#39;s3\u0026#39;, endpoint_url=\u0026#39;http://rgw-vip.nmn\u0026#39;, aws_access_key_id=s3_access_key, aws_secret_access_key=s3_secret_key, verify=False) response = s3_client.download_file(\u0026#39;postgres-backup\u0026#39;, \u0026#39;spire-postgres-2021-07-21T19:03:18.manifest\u0026#39;, \u0026#39;spire-postgres-2021-07-21T19:03:18.manifest\u0026#39;) response = s3_client.download_file(\u0026#39;postgres-backup\u0026#39;, \u0026#39;spire-postgres-2021-07-21T19:03:18.psql\u0026#39;, \u0026#39;spire-postgres-2021-07-21T19:03:18.psql\u0026#39;)   Scale the Spire service to 0.\nncn-w001# CLIENT=spire-server ncn-w001# NAMESPACE=spire ncn-w001# POSTGRESQL=spire-postgres ncn-w001# kubectl scale statefulset ${CLIENT} -n ${NAMESPACE} --replicas=0 # Wait for the pods to terminate ncn-w001# while [ $(kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=\u0026#34;${CLIENT}\u0026#34; | grep -v NAME | wc -l) != 0 ] ; do echo \u0026#34; waiting for pods to terminate\u0026#34;; sleep 2; done   Delete the Spire Postgres cluster.\nncn-w001# kubectl get postgresql ${POSTGRESQL} -n ${NAMESPACE} -o json | jq \u0026#39;del(.spec.selector)\u0026#39; | jq \u0026#39;del(.spec.template.metadata.labels.\u0026#34;controller-uid\u0026#34;)\u0026#39; | jq \u0026#39;del(.status)\u0026#39; \u0026gt; postgres-cr.json ncn-w001# kubectl delete -f postgres-cr.json # Wait for the pods to terminate ncn-w001# while [ $(kubectl get pods -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; -n ${NAMESPACE} | grep -v NAME | wc -l) != 0 ] ; do echo \u0026#34; waiting for pods to terminate\u0026#34;; sleep 2; done   Create a new single instance Spire Postgres cluster.\nncn-w001# cp postgres-cr.json postgres-orig-cr.json ncn-w001# jq \u0026#39;.spec.numberOfInstances = 1\u0026#39; postgres-orig-cr.json \u0026gt; postgres-cr.json ncn-w001# kubectl create -f postgres-cr.json # Wait for the pod and Postgres cluster to start running ncn-w001# while [ $(kubectl get pods -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; -n ${NAMESPACE} | grep -v NAME | wc -l) != 1 ] ; do echo \u0026#34; waiting for pod to start running\u0026#34;; sleep 2; done ncn-w001# while [ $(kubectl get postgresql \u0026#34;${POSTGRESQL}\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; -o json | jq -r \u0026#39;.status.PostgresClusterStatus\u0026#39;) != \u0026#34;Running\u0026#34; ] ; do echo \u0026#34; waiting for postgresql to start running\u0026#34;; sleep 2; done   Copy the database dump file to the Postgres member.\nncn-w001# DUMPFILE=spire-postgres-2021-07-21T19:03:18.psql ncn-w001# kubectl cp ./${DUMPFILE} \u0026#34;${POSTGRESQL}-0\u0026#34;:/home/postgres/${DUMPFILE} -c postgres -n ${NAMESPACE}   Restore the data.\nncn-w001# kubectl exec \u0026#34;${POSTGRESQL}-0\u0026#34; -c postgres -n ${NAMESPACE} -it -- psql -U postgres \u0026lt; ${DUMPFILE}   Either update or re-create the spire-postgres secrets.\n  Update the secrets in Postgres.\nIf a manual dump was done, and the secrets were not saved, then the secrets in the newly created Postgres cluster will need to be updated.\nBased off the four spire-postgres secrets, collect the password for each Postgres username: postgres, service_account, spire, and standby. Then kubectl exec into the Postgres pod and update the password for each user. For example:\nncn-w001# for secret in postgres.spire-postgres.credentials service-account.spire-postgres.credentials spire. spire-postgres.credentials standby.spire-postgres.credentials; do echo -n \u0026#34;secret ${secret}username \u0026amp; password: \u0026#34;; echo -n \u0026#34;`kubectl get secret ${secret}-n ${NAMESPACE}-ojsonpath=\u0026#39;{.data.username}\u0026#39; | base64 -d` \u0026#34;; echo `kubectl get secret $ {secret} -n ${NAMESPACE} -ojsonpath=\u0026#39;{.data.password}\u0026#39;| base64 -d`; done Example output:\nsecret postgres.spire-postgres.credentials username \u0026amp; password: postgres ABCXYZ secret service-account.spire-postgres.credentials username \u0026amp; password: service_account ABC123 secret spire.spire-postgres.credentials username \u0026amp; password: spire XYZ123 secret standby.spire-postgres.credentials username \u0026amp; password: standby 123456 ncn-w001# kubectl exec \u0026#34;${POSTGRESQL}-0\u0026#34; -n ${NAMESPACE} -c postgres -it -- bash root@spire-postgres-0:/home/postgres# /usr/bin/psql postgres postgres postgres=# ALTER USER postgres WITH PASSWORD \u0026#39;ABCXYZ\u0026#39;; ALTER ROLE postgres=# ALTER USER service_account WITH PASSWORD \u0026#39;ABC123\u0026#39;; ALTER ROLE postgres=#ALTER USER spire WITH PASSWORD \u0026#39;XYZ123\u0026#39;; ALTER ROLE postgres=#ALTER USER standby WITH PASSWORD \u0026#39;123456\u0026#39;; ALTER ROLE postgres=#   Re-create secrets in Kubernetes.\nIf the Postgres secrets were auto-backed up, then re-create the secrets in Kubernetes.\nDelete and re-create the four spire-postgres secrets using the manifest that was copied from S3 in step 1 above.\nncn-w001# MANIFEST=spire-postgres-2021-07-21T19:03:18.manifest ncn-w001# kubectl delete secret postgres.spire-postgres.credentials service-account.spire-postgres.credentials spire.spire-postgres.credentials standby.spire-postgres.credentials -n ${NAMESPACE} ncn-w001# kubectl apply -f ${MANIFEST}     Restart the Postgres cluster.\nncn-w001# kubectl delete pod -n ${NAMESPACE} \u0026#34;${POSTGRESQL}-0\u0026#34; # Wait for the postgresql pod to start ncn-w001# while [ $(kubectl get pods -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; -n ${NAMESPACE} | grep -v NAME | wc -l) != 1 ] ; do echo \u0026#34; waiting for pods to start running\u0026#34;; sleep 2; done   Scale the Postgres cluster back to 3 instances.\nncn-w001# kubectl patch postgresql \u0026#34;${POSTGRESQL}\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34; : \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;:\u0026#34;/spec/numberOfInstances\u0026#34;, \u0026#34;value\u0026#34; : 3}]\u0026#39; # Wait for the postgresql cluster to start running ncn-w001# while [ $(kubectl get postgresql \u0026#34;${POSTGRESQL}\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; -o json | jq -r \u0026#39;.status.PostgresClusterStatus\u0026#39;) != \u0026#34;Running\u0026#34; ] ; do echo \u0026#34; waiting for postgresql to start running\u0026#34;; sleep 2; done   Scale the Spire service back to 3 replicas.\nncn-w001# kubectl scale statefulset ${CLIENT} -n ${NAMESPACE} --replicas=3 # Wait for the spire pods to start ncn-w001# while [ $(kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=\u0026#34;${CLIENT}\u0026#34; | grep -v NAME | wc -l) != 3 ] ; do echo \u0026#34; waiting for pods to start\u0026#34;; sleep 2; done   Restart the spire-agent daemonset and the spire-jwks service.\nncn-w001# kubectl rollout restart daemonset spire-agent -n ${NAMESPACE} # Wait for the restart to complete ncn-w001# kubectl rollout status daemonset spire-agent -n ${NAMESPACE} ncn-w001# kubectl rollout restart deployment spire-jwks -n ${NAMESPACE} # Wait for the restart to complete ncn-w001# kubectl rollout status deployment spire-jwks -n ${NAMESPACE}   Restart the spire-agent on all the nodes.\nncn-w001# pdsh -w ncn-m00[1-3] \u0026#39;systemctl restart spire-agent\u0026#39; ncn-w001# pdsh -w ncn-w00[1-3] \u0026#39;systemctl restart spire-agent\u0026#39; ncn-w001# pdsh -w ncn-s00[1-3] \u0026#39;systemctl restart spire-agent\u0026#39;   Verify the service is working. The following should return a token.\nncn-w001:# /usr/bin/heartbeat-spire-agent api fetch jwt -socketPath=/root/spire/agent.sock -audience test   \nRestore Postgres for Keycloak In the event that the Keycloak Postgres cluster is in a state that the cluster must be rebuilt and the data restored, the following procedures are recommended. This assumes that a dump of the database exists.\n  Copy the database dump to an accessible location.\n If a manual dump of the database was taken, check that the dump file exists in a location off the Postgres cluster. It will be needed in the steps below. If the database is being automatically backed up, then the most recent version of the dump and the secrets should exist in the postgres-backup S3 bucket. These will be needed in the steps below. List the files in the postgres-backup S3 bucket and if the files exist, download the dump and secrets out of the S3 bucket. The python3 scripts below can be used to help list and download the files. Note that the .psql file contains the database dump and the .manifest file contains the secrets. The aws_access_key_id and aws_secret_access_key will need to be set based on the postgres-backup-s3-credentials secret.  ncn-w001# export S3_ACCESS_KEY=`kubectl get secrets postgres-backup-s3-credentials -ojsonpath=\u0026#39;{.data.access_key}\u0026#39; | base64 --decode` ncn-w001# export S3_SECRET_KEY=`kubectl get secrets postgres-backup-s3-credentials -ojsonpath=\u0026#39;{.data.secret_key}\u0026#39; | base64 --decode` list.py:\nimport io import boto3 import os # postgres-backup-s3-credentials are needed to list keys in the postgres-backup bucket s3_access_key = os.environ[\u0026#39;S3_ACCESS_KEY\u0026#39;] s3_secret_key = os.environ[\u0026#39;S3_SECRET_KEY\u0026#39;] s3 = boto3.resource( \u0026#39;s3\u0026#39;, endpoint_url=\u0026#39;http://rgw-vip.nmn\u0026#39;, aws_access_key_id=s3_access_key, aws_secret_access_key=s3_secret_key, verify=False) backup_bucket = s3.Bucket(\u0026#39;postgres-backup\u0026#39;) for file in backup_bucket.objects.filter(Prefix=\u0026#39;keycloak-postgres\u0026#39;): print(file.key) download.py:\nUpdate the script for the specific .manifest and .psql files you wish to download from S3.\nimport io import boto3 import os # postgres-backup-s3-credentials are needed to download from postgres-backup bucket s3_access_key = os.environ[\u0026#39;S3_ACCESS_KEY\u0026#39;] s3_secret_key = os.environ[\u0026#39;S3_SECRET_KEY\u0026#39;] s3_client = boto3.client( \u0026#39;s3\u0026#39;, endpoint_url=\u0026#39;http://rgw-vip.nmn\u0026#39;, aws_access_key_id=s3_access_key, aws_secret_access_key=s3_secret_key, verify=False) response = s3_client.download_file(\u0026#39;postgres-backup\u0026#39;, \u0026#39;keycloak-postgres-2021-07-29T17:56:07.manifest\u0026#39;, \u0026#39;keycloak-postgres-2021-07-29T17:56:07.manifest\u0026#39;) response = s3_client.download_file(\u0026#39;postgres-backup\u0026#39;, \u0026#39;keycloak-postgres-2021-07-29T17:56:07.psql\u0026#39;, \u0026#39;keycloak-postgres-2021-07-29T17:56:07.psql\u0026#39;)   Scale the Keycloak service to 0.\nncn-w001# CLIENT=cray-keycloak ncn-w001# NAMESPACE=services ncn-w001# POSTGRESQL=keycloak-postgres ncn-w001# kubectl scale statefulset ${CLIENT} -n ${NAMESPACE} --replicas=0 # Wait for the pods to terminate ncn-w001# while [ $(kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/instance=\u0026#34;${CLIENT}\u0026#34; | grep -v NAME | wc -l) != 0 ] ; do echo \u0026#34; waiting for pods to terminate\u0026#34;; sleep 2; done   Delete the Keycloak Postgres cluster.\nncn-w001# kubectl get postgresql ${POSTGRESQL} -n ${NAMESPACE} -o json | jq \u0026#39;del(.spec.selector)\u0026#39; | jq \u0026#39;del(.spec.template.metadata.labels.\u0026#34;controller-uid\u0026#34;)\u0026#39; | jq \u0026#39;del(.status)\u0026#39; \u0026gt; postgres-cr.json ncn-w001# kubectl delete -f postgres-cr.json # Wait for the pods to terminate ncn-w001# while [ $(kubectl get pods -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; -n ${NAMESPACE} | grep -v NAME | wc -l) != 0 ] ; do echo \u0026#34; waiting for pods to terminate\u0026#34;; sleep 2; done   Create a new single instance Keycloak Postgres cluster.\nncn-w001# cp postgres-cr.json postgres-orig-cr.json ncn-w001# jq \u0026#39;.spec.numberOfInstances = 1\u0026#39; postgres-orig-cr.json \u0026gt; postgres-cr.json ncn-w001# kubectl create -f postgres-cr.json # Wait for the pod and Postgres cluster to start running ncn-w001# while [ $(kubectl get pods -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; -n ${NAMESPACE} | grep -v NAME | wc -l) != 1 ] ; do echo \u0026#34; waiting for pod to start running\u0026#34;; sleep 2; done ncn-w001# while [ $(kubectl get postgresql \u0026#34;${POSTGRESQL}\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; -o json | jq -r \u0026#39;.status.PostgresClusterStatus\u0026#39;) != \u0026#34;Running\u0026#34; ] ; do echo \u0026#34; waiting for postgresql to start running\u0026#34;; sleep 2; done   Copy the database dump file to the Postgres member.\nncn-w001# DUMPFILE=keycloak-postgres-2021-07-29T17:56:07.psql ncn-w001# kubectl cp ./${DUMPFILE} \u0026#34;${POSTGRESQL}-0\u0026#34;:/home/postgres/${DUMPFILE} -c postgres -n ${NAMESPACE}   Restore the data.\nncn-w001# kubectl exec \u0026#34;${POSTGRESQL}-0\u0026#34; -c postgres -n ${NAMESPACE} -it -- psql -U postgres \u0026lt; ${DUMPFILE}   Either update or re-create the keycloak-postgres secrets.\n  Update the secrets in Postgres.\nIf a manual dump was done, and the secrets were not saved, then the secrets in the newly created Postgres cluster will need to be updated.\nBased off the three keycloak-postgres secrets, collect the password for each Postgres username: postgres, service_account, and standby. Then kubectl exec into the Postgres pod and update the password for each user. For example:\nncn-w001# for secret in postgres.keycloak-postgres.credentials service-account.keycloak-postgres.credentials standby. keycloak-postgres.credentials; do echo -n \u0026#34;secret ${secret}username \u0026amp; password: \u0026#34;; echo -n \u0026#34;`kubectl get secret ${secret} -n ${NAMESPACE}-ojsonpath=\u0026#39;{.data.username}\u0026#39; | base64 -d` \u0026#34;; echo `kubectl get secret ${secret} -n ${NAMESPACE} -ojsonpath=\u0026#39;{.data.password}\u0026#39;| base64 -d`; done secret postgres.keycloak-postgres.credentials username \u0026amp; password: postgres ABCXYZ secret service-account.keycloak-postgres.credentials username \u0026amp; password: service_account ABC123 secret standby.keycloak-postgres.credentials username \u0026amp; password: standby 123456 ncn-w001# kubectl exec \u0026#34;${POSTGRESQL}-0\u0026#34; -n ${NAMESPACE} -c postgres -it -- bash root@keycloak-postgres-0:/home/postgres# /usr/bin/psql postgres postgres postgres=# ALTER USER postgres WITH PASSWORD \u0026#39;ABCXYZ\u0026#39;; ALTER ROLE postgres=# ALTER USER service_account WITH PASSWORD \u0026#39;ABC123\u0026#39;; ALTER ROLE postgres=#ALTER USER standby WITH PASSWORD \u0026#39;123456\u0026#39;; ALTER ROLE postgres=#   Re-create secrets in Kubernetes.\nIf the Postgres secrets were automatically backed up, then re-create the secrets in Kubernetes.\nDelete and re-create the three keycloak-postgres secrets using the manifest that was copied from S3 in step 1 above.\nncn-w001# MANIFEST=keycloak-postgres-2021-07-29T17:56:07.manifest ncn-w001# kubectl delete secret postgres.keycloak-postgres.credentials service-account.keycloak-postgres.credentials standby.keycloak-postgres.credentials -n ${NAMESPACE} ncn-w001# kubectl apply -f ${MANIFEST}     Restart the Postgres cluster.\nncn-w001# kubectl delete pod -n ${NAMESPACE} \u0026#34;${POSTGRESQL}-0\u0026#34; # Wait for the postgresql pod to start ncn-w001# while [ $(kubectl get pods -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; -n ${NAMESPACE} | grep -v NAME | wc -l) != 1 ] ; do echo \u0026#34; waiting for pods to start running\u0026#34;; sleep 2; done   Scale the Postgres cluster back to 3 instances.\nncn-w001# kubectl patch postgresql \u0026#34;${POSTGRESQL}\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34; : \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;:\u0026#34;/spec/numberOfInstances\u0026#34;, \u0026#34;value\u0026#34; : 3}]\u0026#39; # Wait for the postgresql cluster to start running. This may take a few minutes to complete. ncn-w001# while [ $(kubectl get postgresql \u0026#34;${POSTGRESQL}\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; -o json | jq -r \u0026#39;.status.PostgresClusterStatus\u0026#39;) != \u0026#34;Running\u0026#34; ] ; do echo \u0026#34; waiting for postgresql to start running\u0026#34;; sleep 2; done   Scale the Keycloak service back to 3 replicas.\nncn-w001# kubectl scale statefulset ${CLIENT} -n ${NAMESPACE} --replicas=3 # Wait for the keycloak pods to start ncn-w001# while [ $(kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/instance=\u0026#34;${CLIENT}\u0026#34; | grep -v NAME | wc -l) != 3 ] ; do echo \u0026#34; waiting for pods to start\u0026#34;; sleep 2; done Also check the status of the Keycloak pods. If there are pods that do not show that both containers are ready (READY is 2/2), wait a few seconds and re-run the command until all containers are ready.\nncn-w001# kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/instance=\u0026#34;${CLIENT}\u0026#34; NAME READY STATUS RESTARTS AGE cray-keycloak-0 2/2 Running 0 35s cray-keycloak-1 2/2 Running 0 35s cray-keycloak-2 2/2 Running 0 35s   Re-run the keycloak-setup and keycloak-users-localize jobs, and restart Keycloak gatekeeper.\n  Run the keycloak-setup job to restore the Kubernetes client secrets:\nncn-w001# kubectl get job -n ${NAMESPACE} -l app.kubernetes.io/instance=cray-keycloak -o json \u0026gt; keycloak-setup.json ncn-w001# cat keycloak-setup.json | jq \u0026#39;.items[0]\u0026#39; | jq \u0026#39;del(.metadata.creationTimestamp)\u0026#39; | jq \u0026#39;del(.metadata. managedFields)\u0026#39; | jq \u0026#39;del(.metadata.resourceVersion)\u0026#39; | jq \u0026#39;del(.metadata.selfLink)\u0026#39; | jq \u0026#39;del(.metadata.uid)\u0026#39; | jq \u0026#39;del(. spec.selector)\u0026#39; | jq \u0026#39;del(.spec.template.metadata.labels)\u0026#39; | jq \u0026#39;del(.status)\u0026#39; | kubectl replace --force -f - Check the status of the keycloak-setup job. If the COMPLETIONS value is not 1/1, wait a few seconds and run the command again until the COMPLETIONS value is 1/1.\nncn-w001# kubectl get jobs -n ${NAMESPACE} -l app.kubernetes.io/instance=cray-keycloak NAME COMPLETIONS DURATION AGE keycloak-setup-2 1/1 59s 91s   Run the keycloak-users-localize job to restore the users and groups in S3 and the Kubernetes ConfigMap:\nncn-w001# kubectl get job -n ${NAMESPACE} -l app.kubernetes.io/instance=cray-keycloak-users-localize -o json \u0026gt; cray-keycloak-users-localize.json ncn-w001# cat cray-keycloak-users-localize.json | jq \u0026#39;.items[0]\u0026#39; | jq \u0026#39;del(.metadata.creationTimestamp)\u0026#39; | jq \u0026#39;del(. metadata.managedFields)\u0026#39; | jq \u0026#39;del(.metadata.resourceVersion)\u0026#39; | jq \u0026#39;del(.metadata.selfLink)\u0026#39; | jq \u0026#39;del(.metadata.uid)\u0026#39; | jq \u0026#39;del(.spec.selector)\u0026#39; | jq \u0026#39;del(.spec.template.metadata.labels)\u0026#39; | jq \u0026#39;del(.status)\u0026#39; | kubectl replace --force -f -` Check the status of the cray-keycloak-users-localize job. If the COMPLETIONS value is not 1/1, wait a few seconds and run the command again until the COMPLETIONS value is 1/1.\nncn-w001# kubectl get jobs -n ${NAMESPACE} -l app.kubernetes.io/instance=cray-keycloak-users-localize NAME COMPLETIONS DURATION AGE keycloak-users-localize-2 1/1 45s 49s   Restart Keycloak gatekeeper:\nncn-w001# kubectl rollout restart -n ${NAMESPACE} deployment/cray-keycloak-gatekeeper-ingress     Verify the service is working. The following should return an access_token for an existing user. Replace the \u0026lt;username\u0026gt; and \u0026lt;password\u0026gt; as appropriate.\nncn-w001:# curl -s -k -d grant_type=password -d client_id=shasta -d username=\u0026lt;username\u0026gt; -d password=\u0026lt;password\u0026gt; https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token {\u0026#34;access_token\u0026#34;:\u0026#34;....   \nRestore Postgres for VCS In the event that the VCS Postgres cluster is in a state that the cluster must be rebuilt and the data restored, the following procedures are recommended. This assumes that a dump of the database exists, as well as a backup of the VCS PVC.\n  Copy the database dump to an accessible location.\n  If a manual dump of the database was taken, check that the dump file exists in a location off the Postgres cluster. It will be needed in the steps below.\n  If the database is being automatically backed up, then the most recent version of the dump and the secrets should exist in the postgres-backup S3 bucket. These will be needed in the steps below. List the files in the postgres-backup S3 bucket and if the files exist, download the dump and secrets out of the S3 bucket. The python3 scripts below can be used to help list and download the files. Note that the .psql file contains the database dump and the .manifest file contains the secrets. The aws_access_key_id and aws_secret_access_key will need to be set based on the postgres-backup-s3-credentials secret.\nncn-w001# export S3_ACCESS_KEY=`kubectl get secrets postgres-backup-s3-credentials -ojsonpath=\u0026#39;{.data.access_key}\u0026#39; | base64 --decode` ncn-w001# export S3_SECRET_KEY=`kubectl get secrets postgres-backup-s3-credentials -ojsonpath=\u0026#39;{.data.secret_key}\u0026#39; | base64 --decode` list.py:\nimport io import boto3 import os # postgres-backup-s3-credentials are needed to list keys in the postgres-backup bucket s3_access_key = os.environ[\u0026#39;S3_ACCESS_KEY\u0026#39;] s3_secret_key = os.environ[\u0026#39;S3_SECRET_KEY\u0026#39;] s3 = boto3.resource( \u0026#39;s3\u0026#39;, endpoint_url=\u0026#39;http://rgw-vip.nmn\u0026#39;, aws_access_key_id=s3_access_key, aws_secret_access_key=s3_secret_key, verify=False) backup_bucket = s3.Bucket(\u0026#39;postgres-backup\u0026#39;) for file in backup_bucket.objects.filter(Prefix=\u0026#39;vcs-postgres\u0026#39;): print(file.key) download.py:\nUpdate the script for the specific .manifest and .psql files you wish to download from S3.\nimport boto3 import os # postgres-backup-s3-credentials are needed to download from postgres-backup bucket s3_access_key = os.environ[\u0026#39;S3_ACCESS_KEY\u0026#39;] s3_secret_key = os.environ[\u0026#39;S3_SECRET_KEY\u0026#39;] s3_client = boto3.client( \u0026#39;s3\u0026#39;, endpoint_url=\u0026#39;http://rgw-vip.nmn\u0026#39;, aws_access_key_id=s3_access_key, aws_secret_access_key=s3_secret_key, verify=False) response = s3_client.download_file(\u0026#39;postgres-backup\u0026#39;, \u0026#39;vcs-postgres-2021-07-21T19:03:18.manifest\u0026#39;, \u0026#39;vcs-postgres-2021-07-21T19:03:18.manifest\u0026#39;) response = s3_client.download_file(\u0026#39;postgres-backup\u0026#39;, \u0026#39;vcs-postgres-2021-07-21T19:03:18.psql\u0026#39;, \u0026#39;vcs-postgres-2021-07-21T19:03:18.psql\u0026#39;)     Scale the VCS service to 0.\nncn-w001# SERVICE=gitea-vcs ncn-w001# SERVICELABEL=vcs ncn-w001# NAMESPACE=services ncn-w001# POSTGRESQL=gitea-vcs-postgres ncn-w001# kubectl scale deployment ${SERVICE} -n ${NAMESPACE} --replicas=0 # Wait for the pods to terminate ncn-w001# while [ $(kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=\u0026#34;${SERVICELABEL}\u0026#34; | grep -v NAME | wc -l) != 0 ] ; do echo \u0026#34; waiting for pods to terminate\u0026#34;; sleep 2; done   Delete the VCS Postgres cluster.\nncn-w001# kubectl get postgresql ${POSTGRESQL} -n ${NAMESPACE} -o json | jq \u0026#39;del(.spec.selector)\u0026#39; | jq \u0026#39;del(.spec.template.metadata.labels.\u0026#34;controller-uid\u0026#34;)\u0026#39; | jq \u0026#39;del(.status)\u0026#39; \u0026gt; postgres-cr.json ncn-w001# kubectl delete -f postgres-cr.json # Wait for the pods to terminate ncn-w001# while [ $(kubectl get pods -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; -n ${NAMESPACE} | grep -v NAME | wc -l) != 0 ] ; do echo \u0026#34; waiting for pods to terminate\u0026#34;; sleep 2; done   Create a new single instance VCS Postgres cluster.\nncn-w001# cp postgres-cr.json postgres-orig-cr.json ncn-w001# jq \u0026#39;.spec.numberOfInstances = 1\u0026#39; postgres-orig-cr.json \u0026gt; postgres-cr.json ncn-w001# kubectl create -f postgres-cr.json # Wait for the pod and Postgres cluster to start running ncn-w001# while [ $(kubectl get pods -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; -n ${NAMESPACE} | grep -v NAME | wc -l) != 1 ] ; do echo \u0026#34; waiting for pod to start running\u0026#34;; sleep 2; done ncn-w001# while [ $(kubectl get postgresql \u0026#34;${POSTGRESQL}\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; -o json | jq -r \u0026#39;.status.PostgresClusterStatus\u0026#39;) != \u0026#34;Running\u0026#34; ] ; do echo \u0026#34; waiting for postgresql to start running\u0026#34;; sleep 2; done   Copy the database dump file to the Postgres member.\nncn-w001# DUMPFILE=gitea-vcs-postgres-2021-07-21T19:03:18.sql ncn-w001# kubectl cp ./${DUMPFILE} \u0026#34;${SERVICE}-0\u0026#34;:/home/postgres/${DUMPFILE} -c postgres -n services   Restore the data.\nncn-w001# kubectl exec \u0026#34;${SERVICE}-0\u0026#34; -c postgres -n services -it -- psql -U postgres \u0026lt; ${DUMPFILE}   Either update or re-create the gitea-vcs-postgres secrets.\n  Update the secrets in Postgres.\nIf a manual dump was done, and the secrets were not saved, then the secrets in the newly created Postgres cluster will need to be updated.\nBased off the three gitea-vcs-postgres secrets, collect the password for each Postgres username: postgres, service_account, and standby. Then kubectl exec into the Postgres pod and update the password for each user. For example:\nncn-w001# for secret in postgres.gitea-vcs-postgres.credentials service-account.gitea-vcs-postgres.credentials gitea. gitea-vcs-postgres.credentials standby.gitea-vcs-postgres.credentials; do echo -n \u0026#34;secret ${secret}username \u0026amp; password: \u0026#34;; echo -n \u0026#34;`kubectl get secret ${secret}-n ${NAMESPACE}-ojsonpath=\u0026#39;{.data.username}\u0026#39; | base64 -d` \u0026#34;; echo `kubectl get secret ${secret} -n ${NAMESPACE} -ojsonpath=\u0026#39;{.data.password}\u0026#39;| base64 -d`; done secret postgres.gitea-vcs-postgres.credentials username \u0026amp; password: postgres ABCXYZ secret service-account.gitea-vcs-postgres.credentials username \u0026amp; password: service_account ABC123 secret gitea.gitea-vcs-postgres.credentials username \u0026amp; password: gitea XYZ123 secret standby.gitea-vcs-postgres.credentials username \u0026amp; password: standby 123456 ncn-w001# kubectl exec \u0026#34;${POSTGRESQL}-0\u0026#34; -n ${NAMESPACE} -c postgres -it -- bash root@gitea-vcs-postgres-0:/home/postgres# /usr/bin/psql postgres postgres postgres=# ALTER USER postgres WITH PASSWORD \u0026#39;ABCXYZ\u0026#39;; ALTER ROLE postgres=# ALTER USER service_account WITH PASSWORD \u0026#39;ABC123\u0026#39;; ALTER ROLE postgres=#ALTER USER gitea WITH PASSWORD \u0026#39;XYZ123\u0026#39;; ALTER ROLE postgres=#ALTER USER standby WITH PASSWORD \u0026#39;123456\u0026#39;; ALTER ROLE postgres=#   Re-create secrets in Kubernetes.\nIf the Postgres secrets were auto-backed up, then re-create the secrets in Kubernetes.\nDelete and re-create the four gitea-vcs-postgres secrets using the manifest that was copied from S3 in step 1 above.\nncn-w001# MANIFEST=gitea-vcs-postgres-2021-07-21T19:03:18.manifest ncn-w001# kubectl delete secret postgres.gitea-vcs-postgres.credentials service-account.gitea-vcs-postgres.credentials standby.gitea-vcs-postgres.credentials -n services ncn-w001# kubectl apply -f ${MANIFEST}     Restart the Postgres cluster.\nncn-w001# kubectl delete pod -n ${NAMESPACE} \u0026#34;${POSTGRESQL}-0\u0026#34; # Wait for the postgresql pod to start ncn-w001# while [ $(kubectl get pods -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; -n ${NAMESPACE} | grep -v NAME | wc -l) != 1 ] ; do echo \u0026#34; waiting for pods to start running\u0026#34;; sleep 2; done   Scale the Postgres cluster back to 3 instances.\nncn-w001# kubectl patch postgresql \u0026#34;${POSTGRESQL}\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34; : \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;:\u0026#34;/spec/numberOfInstances\u0026#34;, \u0026#34;value\u0026#34; : 3}]\u0026#39; # Wait for the postgresql cluster to start running ncn-w001# while [ $(kubectl get postgresql \u0026#34;${POSTGRESQL}\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; -o json | jq -r \u0026#39;.status.PostgresClusterStatus\u0026#39;) != \u0026#34;Running\u0026#34; ] ; do echo \u0026#34; waiting for postgresql to start running\u0026#34;; sleep 2; done   Scale the Gitea service back up.\nncn-w001# kubectl scale deployment ${SERVICE} -n ${NAMESPACE} --replicas=3 # Wait for the gitea pods to start ncn-w001# while [ $(kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=\u0026#34;${SERVICELABEL}\u0026#34; | grep -v NAME | wc -l) != 3 ] ; do echo \u0026#34; waiting for pods to start\u0026#34;; sleep 2; done   \nRestore Postgres for Capsules Capsules Warehouse Server In the event that the Capsules Warehouse Postgres cluster is in a state that the cluster must be rebuilt and the data restored, the following procedures are recommended. This assumes that a dump of the database exists.\n  Copy the database dump to an accessible location.\n  If a manual dump of the database was taken, check that the dump file exists in a location off the Postgres cluster. It will be needed in the steps below.\n  If the database is being automatically backed up, then the most recent version of the dump and the secrets should exist in the postgres-backup S3 bucket. These will be needed in the steps below. List the files in the postgres-backup S3 bucket and if the files exist, download the dump and secrets out of the S3 bucket. The python3 scripts below can be used to help list and download the files. Note that the .psql file contains the database dump and the .manifest file contains the secrets. The aws_access_key_id and aws_secret_access_key will need to be set based on the postgres-backup-s3-credentials secret.\nncn-w001# export S3_ACCESS_KEY=`kubectl get secrets postgres-backup-s3-credentials -ojsonpath=\u0026#39;{.data.access_key}\u0026#39; | base64 --decode` ncn-w001# export S3_SECRET_KEY=`kubectl get secrets postgres-backup-s3-credentials -ojsonpath=\u0026#39;{.data.secret_key}\u0026#39; | base64 --decode` list.py:\nimport io import boto3 import os # postgres-backup-s3-credentials are needed to list keys in the postgres-backup bucket s3_access_key = os.environ[\u0026#39;S3_ACCESS_KEY\u0026#39;] s3_secret_key = os.environ[\u0026#39;S3_SECRET_KEY\u0026#39;] s3 = boto3.resource( \u0026#39;s3\u0026#39;, endpoint_url=\u0026#39;http://rgw-vip.nmn\u0026#39;, aws_access_key_id=s3_access_key, aws_secret_access_key=s3_secret_key, verify=False) backup_bucket = s3.Bucket(\u0026#39;postgres-backup\u0026#39;) for file in backup_bucket.objects.filter(Prefix=\u0026#39;capsules-warehouse-server-postgres\u0026#39;): print(file.key) download.py:\nUpdate the script for the specific .manifest and .psql files you wish to download from S3.\nimport io import boto3 import os # postgres-backup-s3-credentials are needed to download from postgres-backup bucket s3_access_key = os.environ[\u0026#39;S3_ACCESS_KEY\u0026#39;] s3_secret_key = os.environ[\u0026#39;S3_SECRET_KEY\u0026#39;] s3_client = boto3.client( \u0026#39;s3\u0026#39;, endpoint_url=\u0026#39;http://rgw-vip.nmn\u0026#39;, aws_access_key_id=s3_access_key, aws_secret_access_key=s3_secret_key, verify=False) response = s3_client.download_file(\u0026#39;postgres-backup\u0026#39;, \u0026#39;capsules-warehouse-server-postgres-2021-07-21T19:03:18.manifest\u0026#39;, \u0026#39;capsules-warehouse-server-postgres-2021-07-21T19:03:18.manifest\u0026#39;) response = s3_client.download_file(\u0026#39;postgres-backup\u0026#39;, \u0026#39;capsules-warehouse-server-postgres-2021-07-21T19:03:18.psql\u0026#39;, \u0026#39;capsules-warehouse-server-postgres-2021-07-21T19:03:18.psql\u0026#39;)     Scale the capsules-warehouse-server service to 0.\nncn-w001# CLIENT=capsules-warehouse-server ncn-w001# NAMESPACE=services ncn-w001# POSTGRESQL=capsules-warehouse-server-postgres ncn-w001# kubectl scale -n ${NAMESPACE} --replicas=0 deployment/${CLIENT} # Wait for the pods to terminate ncn-w001# while [ $(kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=\u0026#34;${CLIENT}\u0026#34; | grep -v NAME | wc -l) != 0 ] ; do echo \u0026#34; waiting for pods to terminate\u0026#34;; sleep 2; done   Delete the capsules-warehouse-server Postgres cluster.\nncn-w001# kubectl get postgresql ${POSTGRESQL} -n ${NAMESPACE} -o json | jq \u0026#39;del(.spec.selector)\u0026#39; | jq \u0026#39;del(.spec.template.metadata.labels.\u0026#34;controller-uid\u0026#34;)\u0026#39; | jq \u0026#39;del(.status)\u0026#39; \u0026gt; postgres-cr.json ncn-w001# kubectl delete -f postgres-cr.json # Wait for the pods to terminate ncn-w001# while [ $(kubectl get pods -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; -n ${NAMESPACE} | grep -v NAME | wc -l) != 0 ] ; do echo \u0026#34; waiting for pods to terminate\u0026#34;; sleep 2; done   Create a new single instance capsules-warehouse-server Postgres cluster.\nncn-w001# cp postgres-cr.json postgres-orig-cr.json ncn-w001# jq \u0026#39;.spec.numberOfInstances = 1\u0026#39; postgres-orig-cr.json \u0026gt; postgres-cr.json ncn-w001# kubectl create -f postgres-cr.json # Wait for the pod and Postgres cluster to start running ncn-w001# while [ $(kubectl get pods -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; -n ${NAMESPACE} | grep -v NAME | wc -l) != 1 ] ; do echo \u0026#34; waiting for pod to start running\u0026#34;; sleep 2; done ncn-w001# while [ $(kubectl get postgresql \u0026#34;${POSTGRESQL}\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; -o json | jq -r \u0026#39;.status.PostgresClusterStatus\u0026#39;) != \u0026#34;Running\u0026#34; ] ; do echo \u0026#34; waiting for postgresql to start running\u0026#34;; sleep 2; done   Copy the database dump file to the Postgres member.\nncn-w001# DUMPFILE=capsules-warehouse-server-postgres-2021-07-21T19:03:18.psql ncn-w001# kubectl cp ./${DUMPFILE} \u0026#34;${POSTGRESQL}-0\u0026#34;:/home/postgres/${DUMPFILE} -c postgres -n ${NAMESPACE}   Restore the data.\nncn-w001# kubectl exec \u0026#34;${POSTGRESQL}-0\u0026#34; -c postgres -n ${NAMESPACE} -it -- psql -U postgres \u0026lt; ${DUMPFILE}   Either update or re-create the capsules-warehouse-server-postgres secrets.\n  Update the secrets in Postgres.\nIf a manual dump was done, and the secrets were not saved, then the secrets in the newly created Postgres cluster will need to be updated.\nBased off the four capsules-warehouse-server-postgres secrets, collect the password for each Postgres username: postgres, service_account, and standby. Then kubectl exec into the Postgres pod and update the password for each user. For example:\nncn-w001# for secret in postgres.capsules-warehouse-server-postgres.credentials service-account. capsules-warehouse-server-postgres.credentials standby.capsules-warehouse-server-postgres.credentials; do echo -n \u0026#34;secret ${secret}username \u0026amp; password: \u0026#34;; echo -n \u0026#34;`kubectl get secret ${secret}-n ${NAMESPACE}-ojsonpath=\u0026#39;{.data.username}\u0026#39; | base64 -d` \u0026#34;; echo `kubectl get secret ${secret} -n ${NAMESPACE} -ojsonpath=\u0026#39;{.data.password}\u0026#39;| base64 -d`; done Example output:\nsecret postgres.capsules-warehouse-server-postgres.credentials username \u0026amp; password: postgres ABCXYZ secret service-account.capsules-warehouse-server-postgres.credentials username \u0026amp; password: service_account ABC123 secret standby.capsules-warehouse-server-postgres.credentials username \u0026amp; password: standby 123456 ncn-w001# kubectl exec \u0026#34;${POSTGRESQL}-0\u0026#34; -n ${NAMESPACE} -c postgres -it -- bash root@capsules-warehouse-server-postgres-0:/home/postgres# /usr/bin/psql postgres postgres postgres=# ALTER USER postgres WITH PASSWORD \u0026#39;ABCXYZ\u0026#39;; ALTER ROLE postgres=# ALTER USER service_account WITH PASSWORD \u0026#39;ABC123\u0026#39;; ALTER ROLE postgres=#ALTER USER standby WITH PASSWORD \u0026#39;123456\u0026#39;; ALTER ROLE postgres=#   Re-create secrets in Kubernetes.\nIf the Postgres secrets were auto-backed up, then re-create the secrets in Kubernetes.\nDelete and re-create the three capsules-warehouse-server-postgres secrets using the manifest that was copied from S3 in step 1 above.\nncn-w001# MANIFEST=capsules-warehouse-server-postgres-2021-07-21T19:03:18.manifest ncn-w001# kubectl delete secret postgres.capsules-warehouse-server-postgres.credentials service-account.capsules-warehouse-server-postgres.credentials standby.capsules-warehouse-server-postgres.credentials -n ${NAMESPACE} ncn-w001# kubectl apply -f ${MANIFEST}     Restart the Postgres cluster.\nncn-w001# kubectl delete pod -n ${NAMESPACE} \u0026#34;${POSTGRESQL}-0\u0026#34; # Wait for the postgresql pod to start ncn-w001# while [ $(kubectl get pods -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; -n ${NAMESPACE} | grep -v NAME | wc -l) != 1 ] ; do echo \u0026#34; waiting for pods to start running\u0026#34;; sleep 2; done   Scale the Postgres cluster back to 3 instances.\nncn-w001# kubectl patch postgresql \u0026#34;${POSTGRESQL}\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34; : \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;:\u0026#34;/spec/numberOfInstances\u0026#34;, \u0026#34;value\u0026#34; : 3}]\u0026#39; # Wait for the postgresql cluster to start running ncn-w001# while [ $(kubectl get postgresql \u0026#34;${POSTGRESQL}\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; -o json | jq -r \u0026#39;.status.PostgresClusterStatus\u0026#39;) != \u0026#34;Running\u0026#34; ] ; do echo \u0026#34; waiting for postgresql to start running\u0026#34;; sleep 2; done   Scale the capsules-warehouse-server service back to 3 replicas.\nncn-w001# kubectl scale -n ${NAMESPACE} --replicas=3 deployment/${CLIENT} # Wait for the capsules-warehouse-server pods to start ncn-w001# while [ $(kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=\u0026#34;${CLIENT}\u0026#34; | grep -v NAME | wc -l) != 3 ] ; do echo \u0026#34; waiting for pods to start\u0026#34;; sleep 2; done Also check the status of the capsules-warehouse-server pods. If there are pods that do not show that both containers are ready (READY is 2/2), wait a few seconds and re-run the command until all containers are ready.\nncn-w001# kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/instance=\u0026#34;${CLIENT}\u0026#34; Example output:\nNAME READY STATUS RESTARTS AGE capsules-warehouse-server-0 2/2 Running 0 35s capsules-warehouse-server-1 2/2 Running 0 35s capsules-warehouse-server-2 2/2 Running 0 35s   Verify Capsules services are accessible and contain the expected data. You may need to configure your default warehouse and default warehouse user as well as login though the Keycloak service depending on where you login from. It is recommended to use a UAN.\nncn-w001# capsule list Example output:\n2 Capsules found: someusername/a-preexisting-capsule someusername/another-preexisting-capsule   Capsules Dispatch Server The Capsules Dispatch Server can be restored in the same manner as the warehouse server by substituting the keyword warehouse with dispatch;however, the dispatch server maintains temporary information for running Capsules Environments. Therefore, restoring data to this service is not necessary. Using the analytics docs, you can instead cleanup existing jobs and skip this step.\n"
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/retrieve_cluster_health_information_using_kubernetes/",
	"title": "Retrieve Cluster Health Information Using Kubernetes",
	"tags": [],
	"description": "",
	"content": "Retrieve Cluster Health Information Using Kubernetes The kubectl CLI commands can be used to retrieve information about the Kubernetes cluster components.\nNodes Retrieve node status ncn# kubectl get nodes Example output:\nNAME STATUS ROLES AGE VERSION ncn-m001 Ready control-plane,master 27h v1.20.13 ncn-m002 Ready control-plane,master 8d v1.20.13 ncn-m003 Ready control-plane,master 8d v1.20.13 ncn-w001 Ready \u0026lt;none\u0026gt; 8d v1.20.13 ncn-w002 Ready \u0026lt;none\u0026gt; 8d v1.20.13 ncn-w003 Ready \u0026lt;none\u0026gt; 8d v1.20.13 Pods Retrieve information about individual pods ncn# kubectl describe pod POD_NAME -n NAMESPACE_NAME Retrieve a list of all pods ncn# kubectl get pods -A Retrieve a list of healthy pods ncn# kubectl get pods -A | grep -E \u0026#39;Completed|Running\u0026#39; Retrieve a list of unhealthy pods   Option 1: List all pods that are not reported as Completed or Running.\nncn# kubectl get pods -A | grep -Ev \u0026#39;Completed|Running\u0026#39;   Option 2: List all pods that are reported as Creating, ImagePull, Error, Init, or Crash.\nncn# kubectl get pods -A | grep -E \u0026#39;Creating|ImagePull|Error|Init|Crash\u0026#39;   Retrieve status of pods in a specific namespace ncn# kubectl get pods -n NAMESPACE_NAME Example output for vault namespace:\nNAME READY STATUS RESTARTS AGE cray-vault-0 5/5 Running 2 7d cray-vault-1 5/5 Running 2 7d cray-vault-2 5/5 Running 2 7d cray-vault-configurer-7c7dcdb958-p8jfv 2/2 Running 0 7d cray-vault-operator-b48b7874f-flstw 2/2 Running 1 7d spire-intermediate-1-ltzwk 0/2 Completed 0 7d Retrieve pod logs ncn# kubectl logs -n NAMESPACE_NAME POD_NAME Services Retrieve a list of all services ncn# kubectl get services -A Retrieve status of services in a specific namespace ncn# kubectl get services -n NAMESPACE_NAME Example output for operators namespace:\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE cray-hms-trs-operator-metrics ClusterIP 10.16.222.4 \u0026lt;none\u0026gt; 8383/TCP,8686/TCP 7d cray-kiali-kiali-operator-metrics ClusterIP 10.20.177.208 \u0026lt;none\u0026gt; 8383/TCP,8686/TCP 7d etcd-restore-operator ClusterIP 10.28.72.18 \u0026lt;none\u0026gt; 19999/TCP 7d "
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/tds_lower_cpu_requests/",
	"title": "Tds Lower Cpu Requests",
	"tags": [],
	"description": "",
	"content": "TDS Lower CPU Requests Systems with only three worker nodes (typically Test and Development Systems (TDS)) will encounter pod scheduling issues when worker nodes are taken out of the Kubernetes cluster to be upgraded.\nFor systems with only three worker nodes, execute the following script to reduce the CPU request for some services with high CPU requests, in order to allow critical upgrade-related services to be successfully scheduled on only two worker nodes:\nncn-mw# /usr/share/doc/csm/upgrade/1.2/scripts/k8s/tds_lower_cpu_requests.sh Note that some services with these lower CPU request may encounter CPU throttling (see Determine if Pods are Hitting Resource Limits). If needed, the top portion of the script (see below) can be edited and re-run to further adjust these CPU requests. Note that commenting out any of the lines below will indicate the script should not adjust the CPU resource for that service. Also see the Kubernetes/Compute Resources/Namespace (Pods) Grafana page for a historical view of a given pod\u0026rsquo;s CPU utilization for this specific system. See Access System Management Health Services.\nspire_postgres_new_limit=1000m elasticsearch_master_new_cpu_request=1500m cluster_kafka_new_cpu_request=1 sma_grafana_new_cpu_request=100m sma_kibana_new_cpu_request=100m cluster_zookeeper_new_cpu_request=100m cray_smd_new_cpu_request=1 cray_smd_postgres_new_cpu_request=500m sma_postgres_cluster_new_cpu_request=500m cray_capmc_new_cpu_request=500m nexus_new_cpu_request=2 cray_metallb_speaker_new_cpu_request=1 The script will output the current value of the request along with the new value. It is recommended to capture and save the output from this script, and store it external to the cluster. This record of the value changes is helpful in the event that rolling back to the original value is desired.\nExample output:\nPatching cray-capmc deployment with new cpu request of 500m (from 2100m) deployment.apps/cray-capmc patched Waiting for deployment spec update to be observed... Waiting for deployment \u0026#34;cray-capmc\u0026#34; rollout to finish: 0 out of 3 new replicas have been updated... Waiting for deployment \u0026#34;cray-capmc\u0026#34; rollout to finish: 1 out of 3 new replicas have been updated... Waiting for deployment \u0026#34;cray-capmc\u0026#34; rollout to finish: 1 out of 3 new replicas have been updated... Waiting for deployment \u0026#34;cray-capmc\u0026#34; rollout to finish: 1 out of 3 new replicas have been updated... Waiting for deployment \u0026#34;cray-capmc\u0026#34; rollout to finish: 2 out of 3 new replicas have been updated... Waiting for deployment \u0026#34;cray-capmc\u0026#34; rollout to finish: 2 out of 3 new replicas have been updated... Waiting for deployment \u0026#34;cray-capmc\u0026#34; rollout to finish: 2 out of 3 new replicas have been updated... Waiting for deployment \u0026#34;cray-capmc\u0026#34; rollout to finish: 1 old replicas are pending termination... Waiting for deployment \u0026#34;cray-capmc\u0026#34; rollout to finish: 1 old replicas are pending termination... deployment \u0026#34;cray-capmc\u0026#34; successfully rolled out "
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/troubleshoot_intermittent_503s/",
	"title": "Troubleshoot Intermittent HTTP 503 Code Failures",
	"tags": [],
	"description": "",
	"content": "Troubleshoot Intermittent HTTP 503 Code Failures There are cases where API calls or cray command invocations will intermittently return an HTTP 503 code, even when the backing service is up and functional. In the event that this occurs, the following steps may be useful to remediate the issue.\n  Inspect the istio-ingressgateway pod logs:\nncn-m # kubectl -n istio-system logs -l app=istio-ingressgateway If the logs include TLS errors similar to the following, then proceed to the next step to restart the istio-ingressgateway pods. Istio can occasionally get into this state when NCNs are being rebooted, as well as when many deployments are being created.\n[2022-05-10T16:27:29.232Z] \u0026#34;POST /apis/hbtd/hmi/v1/heartbeat HTTP/2\u0026#34; 503 UF,URX \u0026#34;-\u0026#34; \u0026#34;TLS error: Secret is not supplied by SDS\u0026#34; 132 91 25 - \u0026#34;10.39.0.0\u0026#34; \u0026#34;-\u0026#34; \u0026#34;08274ec4-2d93-4070-8fe1-fc6946f1cf26\u0026#34; \u0026#34;api-gw-service-nmn.local\u0026#34; \u0026#34;10.33.0.90:28500\u0026#34; outbound|80||cray-hbtd.services.svc.cluster.local - 10.33.0.43:443 10.39.0.0:29543 api-gw-service-nmn.local -   Perform a rolling restart of the istio-ingressgateway pods:\nncn-m # kubectl rollout restart -n istio-system deployment.apps/istio-ingressgateway   Wait for the roll out to complete:\nncn-m # kubectl rollout status -n istio-system deployment.apps/istio-ingressgateway deployment \u0026#34;istio-ingressgateway\u0026#34; successfully rolled out   Once the roll out is complete, the HTTP 503 messages should clear, and the intermittent API behavior should resolve.\n"
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/troubleshoot_postgres_database/",
	"title": "Troubleshoot Postgres Database",
	"tags": [],
	"description": "",
	"content": "Troubleshoot Postgres Database This page contains general Postgres troubleshooting topics.\n The patronictl tool Database unavailable Database disk full Replication lagging Postgres status SyncFailed Cluster member missing Postgres leader missing  The patronictl tool The patronictl tool is used to call a REST API that interacts with Postgres databases. It handles a variety of tasks, such as listing cluster members and the replication status, configuring and restarting databases, and more.\nThe tool is installed in the database containers:\nncn-mw# kubectl exec -it -n services keycloak-postgres-0 -c postgres -- su postgres Use the following command for more information on the patronictl command:\npostgres@keycloak-postgres-0:~$ patronictl --help Database unavailable If there are no endpoints for the main service, Patroni will mark the database as unavailable.\nThe following is an example for keycloak-postgres where no endpoints are listed, which means the database is unavailable.\nncn-mw# kubectl get endpoints keycloak-postgres -n services Example output:\nNAME ENDPOINTS AGE keycloak-postgres \u0026lt;none\u0026gt; 3d22h If the database is unavailable, check if Disk Full is the cause of the issue. Otherwise, check the postgres-operator logs for errors.\nncn-mw# kubectl logs -l app.kubernetes.io/name=postgres-operator -n services Database disk full The following is an example for keycloak-postgres. One cluster member is failing to start because of a full pgdata disk. This was likely due to replication issues, which caused the pg_wal files to grow.\nncn-mw# POSTGRESQL=keycloak-postgres ncn-mw# NAMESPACE=services ncn-mw# kubectl exec \u0026#34;${POSTGRESQL}-1\u0026#34; -c postgres -it -n ${NAMESPACE} -- patronictl list Example output:\n+-------------------+---------------------+------------+--------+--------------+----+-----------+ | Cluster | Member | Host | Role | State | TL | Lag in MB | +-------------------+---------------------+------------+--------+--------------+----+-----------+ | keycloak-postgres | keycloak-postgres-0 | 10.42.0.11 | | start failed | | unknown | | keycloak-postgres | keycloak-postgres-1 | 10.44.0.7 | | running | 4 | 0 | | keycloak-postgres | keycloak-postgres-2 | 10.36.0.40 | Leader | running | 4 | | +-------------------+---------------------+------------+--------+--------------+----+-----------+ ncn-mw# for i in {0..2}; do echo \u0026#34;${POSTGRESQL}-${i}:\u0026#34;; kubectl exec \u0026#34;${POSTGRESQL}-${i}\u0026#34; -n ${NAMESPACE} -c postgres -- df -h pgdata; done Example output:\nkeycloak-postgres-0: Filesystem Size Used Avail Use% Mounted on /dev/sde 976M 960M 0 100% /home/postgres/pgdata keycloak-postgres-1: Filesystem Size Used Avail Use% Mounted on /dev/rbd12 976M 152M 809M 16% /home/postgres/pgdata keycloak-postgres-2: Filesystem Size Used Avail Use% Mounted on /dev/rbd3 976M 136M 825M 15% /home/postgres/pgdata ncn-mw# kubectl logs \u0026#34;${POSTGRESQL}-0\u0026#34; -n ${NAMESPACE} -c postgres | grep FATAL Example output:\n2021-07-14 17:52:48 UTC [30495]: [1-1] 60ef2470.771f 0 FATAL: could not write lock file \u0026#34;postmaster.pid\u0026#34;: No space left on device ncn-mw# kubectl exec \u0026#34;${POSTGRESQL}-0\u0026#34; -n ${NAMESPACE} -c postgres -it -- du -h --max-depth 1 /home/postgres/pgdata/pgroot/data/pg_wal To recover the cluster member that had failed to start because of disk pressure, attempt to reclaim some space on the pgdata disk.\nkubectl exec into that pod, copy the logs off (optional), and then clear the logs in order to recover some disk space. Finally, restart the Postgres cluster and postgres-operator.\n  Copy off the logs (optional).\nncn-mw# kubectl cp \u0026#34;${POSTGRESQL}-1\u0026#34;:/home/postgres/pgdata/pgroot/pg_log /tmp -c postgres -n ${NAMESPACE}   Clear the logs.\nncn-mw# kubectl exec \u0026#34;${POSTGRESQL}-1\u0026#34; -n ${NAMESPACE} -c postgres -it -- bash root@cray-smd-postgres-1:/home/postgres# for i in {0..7}; do \u0026gt; /home/postgres/pgdata/pgroot/pg_log/postgresql-$i.csv; done   Restart the pods by deleting them.\nncn-mw# kubectl delete pod \u0026#34;${POSTGRESQL}-0\u0026#34; \u0026#34;${POSTGRESQL}-1\u0026#34; \u0026#34;${POSTGRESQL}-2\u0026#34; -n ${NAMESPACE}   Restart the operator by deleting it.\nncn-mw# kubectl delete pod -l app.kubernetes.io/name=postgres-operator -n services   If disk issues persist or exist on multiple nodes and the above does not resolve the issue, then see the Recover from Postgres WAL Event procedure.\nReplication lagging Postgres replication lag can be detected with Prometheus alerts and alert notifications (See Configure Prometheus Email Alert Notifications). If replication lag is not caught early, it can cause the disk mounted on /home/postgres/pgdata to fill up and the database to stop running. If this issue is caught before the database stops, it can be easily remediated using a patronictl command to reinitialize the lagging cluster member.\nCheck if replication is working When services have a Postgres cluster of pods, they need to be able to replicate data between them. When the pods are not able to replicate data, the database will become full. The patronictl list command will show the status of replication.\nReplication is working The following is an example where replication is working:\nncn-mw# kubectl exec keycloak-postgres-0 -c postgres -n services -it -- patronictl list Example output:\n+-------------------+---------------------+------------+--------+---------+----+-----------+ | Cluster | Member | Host | Role | State | TL | Lag in MB | +-------------------+---------------------+------------+--------+---------+----+-----------+ | keycloak-postgres | keycloak-postgres-0 | 10.40.0.23 | Leader | running | 1 | | | keycloak-postgres | keycloak-postgres-1 | 10.42.0.25 | | running | 1 | 0 | | keycloak-postgres | keycloak-postgres-2 | 10.42.0.29 | | running | 1 | 0 | +-------------------+---------------------+------------+--------+---------+----+-----------+ Replication is not working The following is an example where replication is broken:\n+-------------------+---------------------+--------------+--------+----------+----+-----------+ | Cluster | Member | Host | Role | State | TL | Lag in MB | +-------------------+---------------------+--------------+--------+----------+----+-----------+ | keycloak-postgres | keycloak-postgres-0 | 10.42.10.22 | | starting | | unknown | | keycloak-postgres | keycloak-postgres-1 | 10.40.11.191 | Leader | running | 47 | | | keycloak-postgres | keycloak-postgres-2 | 10.40.11.190 | | running | 14 | 608 | +-------------------+---------------------+--------------+--------+----------+----+-----------+ Recover replication In the event that a state of broken Postgres replication persists and the space allocated for the WAL files fills up, the affected database will likely shut down and create a state where it can be very difficult to recover. This can impact the reliability of the related service and may require that it be redeployed with data repopulation procedures. If replication lag is caught and remediated before the database shuts down, replication can be recovered using patronictl reinit.\nA reinitialize will get the lagging replica member re-synced and replicating again. This should be done as soon as replication lag is detected. In the preceding example, keycloak-postgres-0 and keycloak-postgres-2 were not replicating properly (unknown or non-zero lag). To remediate, kubectl exec into the leader pod and use patronictl reinit \u0026lt;cluster\u0026gt; \u0026lt;lagging cluster member\u0026gt; to reinitialize the lagging member(s).\nFor example:\n  Reinitialize the first lagging replica member.\nncn-mw# kubectl exec keycloak-postgres-1 -n services -it -- bash root@keycloak-postgres-1:/home/postgres# patronictl reinit keycloak-postgres keycloak-postgres-0 Example output:\nAre you sure you want to reinitialize members keycloak-postgres-0? [y/N]: y Failed: reinitialize for member keycloak-postgres-0, status code=503, (restarting after failure already in progress) Do you want to cancel it and reinitialize anyway? [y/N]: y Success: reinitialize for member keycloak-postgres-0   Reinitialize the next lagging replica member.\nroot@keycloak-postgres-1:/home/postgres# patronictl reinit keycloak-postgres keycloak-postgres-2 Example output:\nAre you sure you want to reinitialize members keycloak-postgres-2? [y/N]: y Failed: reinitialize for member keycloak-postgres-2, status code=503, (restarting after failure already in progress) Do you want to cancel it and reinitialize anyway? [y/N]: y Success: reinitialize for member keycloak-postgres-2   Verify that replication has recovered.\nncn-mw# kubectl exec keycloak-postgres-0 -c postgres -n services -it -- patronictl list Example output:\n+-------------------+---------------------+--------------+--------+---------+----+-----------+ | Cluster | Member | Host | Role | State | TL | Lag in MB | +-------------------+---------------------+--------------+--------+---------+----+-----------+ | keycloak-postgres | keycloak-postgres-0 | 10.42.10.22 | | running | 47 | 0 | | keycloak-postgres | keycloak-postgres-1 | 10.40.11.191 | Leader | running | 47 | | | keycloak-postgres | keycloak-postgres-2 | 10.40.11.190 | | running | 47 | 0 | +-------------------+---------------------+--------------+--------+---------+----+-----------+   Troubleshooting   If patronictl reinit fails with Failed: reinitialize for member \u0026hellip; status code=503, (Cluster has no leader, can not reinitialize):\nFor example:\nncn-mw# kubectl exec cray-console-data-postgres-0 -n services -- bash root@cray-console-data-postgres-0:~# patronictl reinit cray-console-data-postgres cray-console-data-postgres-1 Example output:\n+ Cluster: cray-console-data-postgres (7072784871993835594) ---+----+-----------+ | Member | Host | Role | State | TL | Lag in MB | +------------------------------+------------+--------+---------+----+-----------+ | cray-console-data-postgres-0 | 10.39.0.74 | Leader | running | 1 | | | cray-console-data-postgres-1 | 10.36.0.37 | | running | 1 | 16 | | cray-console-data-postgres-2 | 10.32.0.1 | | running | 1 | 16 | +------------------------------+------------+--------+---------+----+-----------+ Are you sure you want to reinitialize members cray-console-data-postgres-1? [y/N]: y Failed: reinitialize for member cray-console-data-postgres-1, status code=503, (Cluster has no leader, can not reinitialize)   Delete the Postgres leader pod and wait for the leader to restart.\n  Delete the leader pod.\nncn-mw# kubectl delete pod cray-console-data-postgres-0 -n services   Wait for the leader to restart.\nRe-run the following command until it succeeds and reports that the leader pod is running.\nncn-mw# kubectl exec keycloak-postgres-0 -c postgres -n services -it -- patronictl list Example output:\n+ Cluster: cray-console-data-postgres (7072784871993835594) ---+----+-----------+ | Member | Host | Role | State | TL | Lag in MB | +------------------------------+------------+--------+---------+----+-----------+ | cray-console-data-postgres-0 | 10.39.0.80 | Leader | running | 2 | | | cray-console-data-postgres-1 | 10.36.0.37 | | running | 1 | 49 | | cray-console-data-postgres-2 | 10.32.0.1 | | running | 1 | 49 | +------------------------------+------------+--------+---------+----+-----------+     Re-run Is Replication Lagging? to reinit any lagging members.\n  If the reinit still fails, then delete member pods that are still reporting lag. This should clear up any remaining lag.\n  Determine which pods are reporting lag.\nncn-mw# kubectl exec cray-console-postgres-0 -c postgres -n services -it -- patronictl list Example output:\n+ Cluster: cray-console-data-postgres (7072784871993835594) ---+----+-----------+ | Member | Host | Role | State | TL | Lag in MB | +------------------------------+------------+--------+---------+----+-----------+ | cray-console-data-postgres-0 | 10.39.0.80 | Leader | running | 2 | | | cray-console-data-postgres-1 | 10.36.0.37 | | running | 1 | 49 | | cray-console-data-postgres-2 | 10.32.0.1 | | running | 1 | 49 | +------------------------------+------------+--------+---------+----+-----------+   Delete the pods that are still reporting lag.\nncn-mw# kubectl delete pod cray-console-data-postgres-1 cray-console-data-postgres-2 -n services   Once the pods restart, verify that the lag has resolved.\nncn-mw# kubectl exec cray-console-postgres-0 -c postgres -n services -it -- patronictl list Example output:\n+ Cluster: cray-console-data-postgres (7072784871993835594) ---+----+-----------+ | Member | Host | Role | State | TL | Lag in MB | +------------------------------+------------+--------+---------+----+-----------+ | cray-console-data-postgres-0 | 10.39.0.80 | Leader | running | 2 | | | cray-console-data-postgres-1 | 10.36.0.37 | | running | 2 | 0 | | cray-console-data-postgres-2 | 10.32.0.1 | | running | 2 | 0 | +------------------------------+------------+--------+---------+----+-----------+       If a cluster member is stopped after a successful reinitialization, check for pg_internal.init.* files that may need to be cleaned up. This can occur if the pgdata disk was full prior to the reinitialization, leaving truncated pg_internal.init.* files in the pgdata directory.\n  Determine if any pods are stopped.\nncn-mw# kubectl exec keycloak-postgres-0 -c postgres -n services -it -- patronictl list Example output:\n+-------------------+---------------------+--------------+--------+---------+----+-----------+ | Cluster | Member | Host | Role | State | TL | Lag in MB | +-------------------+---------------------+--------------+--------+---------+----+-----------+ | keycloak-postgres | keycloak-postgres-0 | 10.42.10.22 | | running | 47 | 0 | | keycloak-postgres | keycloak-postgres-1 | 10.40.11.191 | Leader | running | 47 | | | keycloak-postgres | keycloak-postgres-2 | 10.40.11.190 | | stopped | | unknown | +-------------------+---------------------+--------------+--------+---------+----+-----------+   Check the most recent Postgres log in the stopped pod.\nkubectl exec into that pod that is stopped and check the most recent Postgres log for any invalid segment number 0 errors relating to pg_internal.init.* files.\nncn-mw# kubectl exec keycloak-postgres-2 -n services -it -- bash postgres@keycloak-postgres-2:~$ export LOG=`ls -t /home/postgres/pgdata/pgroot/pg_log/*.csv | head -1` postgres@keycloak-postgres-2:~$ grep pg_internal.init $LOG | grep \u0026#34;invalid segment number 0\u0026#34; | tail -1 Example output:\n2022-02-01 16:59:35.529 UTC,\u0026#34;standby\u0026#34;,\u0026#34;\u0026#34;,227600,\u0026#34;127.0.0.1:42264\u0026#34;,61f966f7.37910,3,\u0026#34;sending backup \u0026#34;\u0026#34;pg_basebackup base backup\u0026#34;\u0026#34;\u0026#34;,2022-02-01 16:59:35 UTC,7/0,0,ERROR,XX000,\u0026#34;invalid segment number 0 in file \u0026#34;\u0026#34;pg_internal.init.2239188\u0026#34;\u0026#34;\u0026#34;,,,,,,,,,\u0026#34;pg_basebackup\u0026#34;   If the check in the previous step finds such files, then first find any zero length pg_internal.init.* files.\nThis command should be run inside the kubectl exec session from the previous steps.\npostgres@keycloak-postgres-2:~$ find /home/postgres/pgdata -name pg_internal.init.* -size 0 Example output:\n./pgroot/data/base/16622/pg_internal.init.2239004 ... ./pgroot/data/base/16622/pg_internal.init.2239010   Delete the zero length pg_internal.init.* files.\nThis command should be run inside the kubectl exec session from the previous steps. Double check the syntax of the command in this step before executing it.\npostgres@keycloak-postgres-2:~$ find /home/postgres/pgdata -name pg_internal.init.* -size 0 -exec rm {} \\;   Find any non-zero length pg_internal.init.* files that were truncated when the file system filled up.\nThis command should be run inside the kubectl exec session from the previous step.\npostgres@keycloak-postgres-2:~$ grep pg_internal.init $LOG | grep \u0026#34;invalid segment number 0\u0026#34; | tail -1 Example output:\n2022-02-01 16:59:35.529 UTC,\u0026#34;standby\u0026#34;,\u0026#34;\u0026#34;,227600,\u0026#34;127.0.0.1:42264\u0026#34;,61f966f7.37910,3,\u0026#34;sending backup \u0026#34;\u0026#34;pg_basebackup base backup\u0026#34;\u0026#34;\u0026#34;,2022-02-01 16:59:35 UTC,7/0,0,ERROR,XX000,\u0026#34;invalid segment number 0 in file \u0026#34;\u0026#34;pg_internal.init.2239188\u0026#34;\u0026#34;\u0026#34;,,,,,,,,,\u0026#34;pg_basebackup\u0026#34;   Locate the non-zero length pg_internal.init.* file.\nThis command should be run inside the kubectl exec session from the previous step.\npostgres@keycloak-postgres-2:~$ find ~/pgdata -name pg_internal.init.2239188 Example output:\n/home/postgres/pgdata/pgroot/data/base/16622/pg_internal.init.2239188   Delete (or move to a different location) the non-zero length pg_internal.init.* file.\nThis command should be run inside the kubectl exec session from the previous step.\npostgres@keycloak-postgres-2:~$ rm /home/postgres/pgdata/pgroot/data/base/16622/pg_internal.init.2239188   Repeat the above steps to find, locate, and delete non-zero length pg_internal.init.* files until there are no more new invalid segment number 0 messages.\n  Verify that the cluster member has started.\nncn-mw# kubectl exec keycloak-postgres-0 -c postgres -n services -it -- patronictl list Example output:\n+-------------------+---------------------+--------------+--------+---------+----+-----------+ | Cluster | Member | Host | Role | State | TL | Lag in MB | +-------------------+---------------------+--------------+--------+---------+----+-----------+ | keycloak-postgres | keycloak-postgres-0 | 10.42.10.22 | | running | 47 | 0 | | keycloak-postgres | keycloak-postgres-1 | 10.40.11.191 | Leader | running | 47 | | | keycloak-postgres | keycloak-postgres-2 | 10.40.11.190 | | running | 47 | 0 | +-------------------+---------------------+--------------+--------+---------+----+-----------+     Setup alerts for replication lag Alerts exist in Prometheus for the following:\n PostgresqlReplicationLagSMA PostgresqlReplicationLagServices PostgresqlFollowerReplicationLagSMA PostgresqlFollowerReplicationLagServices  When alert notifications are configured, replication issues can be detected quickly. If the replication issue persists such that the database becomes unavailable, recovery will likely be much more involved. Catching such issues as soon as possible is desired. See Configure Prometheus Email Alert Notifications.\nPostgres status SyncFailed Check all the postgresql resources Check for any postgresql resource that has a STATUS of SyncFailed. SyncFailed generally means that there is something between the postgres-operator and the Postgres cluster that is out of sync. This does not always mean that the cluster is unhealthy. Check the postgres-operator logs for messages in order to further determine the root cause of the issue.\nOther STATUS values such as Updating are a non-issue. It is expected that this will eventually change to Running or possibly SyncFailed, if the postgres-operator encounters issues syncing updates to the postgresql cluster.\n  Check for any postgresql resource that has a STATUS of SyncFailed.\nncn-mw# kubectl get postgresql -A Example output:\nNAMESPACE NAME TEAM VERSION PODS VOLUME CPU-REQUEST MEMORY-REQUEST AGE STATUS services cray-console-data-postgres cray-console-data 11 3 2Gi 4h10m Running services cray-sls-postgres cray-sls 11 3 1Gi 4h12m SyncFailed services cray-smd-postgres cray-smd 11 3 30Gi 500m 8Gi 4h12m Updating services gitea-vcs-postgres gitea-vcs 11 3 50Gi 4h11m Running services keycloak-postgres keycloak 11 3 1Gi 4h13m Running spire spire-postgres spire 11 3 20Gi 1 4Gi 4h10m Running   Find the the postgres-operator pod name.\nncn-mw# kubectl get pods -l app.kubernetes.io/name=postgres-operator -n services Example output:\nNAME READY STATUS RESTARTS AGE cray-postgres-operator-6fffc48b4c-mqz7z 2/2 Running 0 5h26m   Check the logs for the postgres-operator.\nncn-mw# kubectl logs cray-postgres-operator-6fffc48b4c-mqz7z -n services \\  -c postgres-operator | grep -i sync | grep -i msg   Case 1: some persistent volumes are not compatible with existing resizing providers Case 1: Symptom msg=\u0026#34;could not sync cluster: could not sync persistent volumes: could not sync volumes: could not resize EBS volumes: some persistent volumes are not compatible with existing resizing providers\u0026#34; Case 1: Details This generally means that the postgresql resource was updated to change the volume size from the Postgres operator\u0026rsquo;s perspective, but the additional step to resize the actual PVCs was not done so the operator and the Postgres cluster are not able to sync the resize change. The cluster is still healthy, but to complete the resize of the underlying Postgres PVCs, additional steps are needed.\nThe following example assumes that cray-smd-postgres is in SyncFailed and the volume size was recently increased to 100Gi (possibly by editing the volume size of postgresql cray-smd-postgres resource), but the pgdata-cray-smd-postgres PVC\u0026rsquo;s storage capacity was not updated to align with the change. To confirm this is the case:\nncn-mw# kubectl get postgresql cray-smd-postgres -n services -o jsonpath=\u0026#34;{.spec.volume.size}\u0026#34; 100Gi ncn-mw# kubectl get pvc -n services -l application=spilo,cluster-name=cray-smd-postgres NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE pgdata-cray-smd-postgres-0 Bound pvc-020cf339-e372-46ae-bc37-de2b55320e88 30Gi RWO k8s-block-replicated 70m pgdata-cray-smd-postgres-1 Bound pvc-3d42598a-188e-4301-a58e-0f0ce3944c89 30Gi RWO k8s-block-replicated 27m pgdata-cray-smd-postgres-2 Bound pvc-0d659080-7d39-409a-9ee5-1a1806971054 30Gi RWO k8s-block-replicated 27m To resolve this SyncFailed case, resize the pgdata PVCs for the selected Postgres cluster. Create the following function in the shell and execute the function by calling it with the appropriate arguments. For this example the pgdata-cray-smd-postgres PVCs will be resized to 100Gi to match that of the postgresql cray-smd-postgres volume size.\nfunction resize-postgresql-pvc { POSTGRESQL=$1 PGDATA=$2 NAMESPACE=$3 PGRESIZE=$4 # Check for required arguments if [ $# -ne 4 ]; then echo \u0026#34;Illegal number of parameters ($#). Function requires exactly 4 arguments.\u0026#34; exit 2 fi ## Check that PGRESIZE matches current postgresql volume size postgresql_volume_size=$(kubectl get postgresql \u0026#34;${POSTGRESQL}\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; -o jsonpath=\u0026#34;{.spec.volume.size}\u0026#34;) if [ \u0026#34;${postgresql_volume_size}\u0026#34; != \u0026#34;${PGRESIZE}\u0026#34; ]; then echo \u0026#34;Invalid resize ${PGRESIZE}, expected ${postgresql_volume_size}\u0026#34; exit 2 fi ## Scale the postgres cluster to 1 member kubectl patch postgresql \u0026#34;${POSTGRESQL}\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34; : \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;:\u0026#34;/spec/numberOfInstances\u0026#34;, \u0026#34;value\u0026#34; : 1}]\u0026#39; while [ $(kubectl get pods -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; | grep -v NAME | wc -l) != 1 ] ; do echo \u0026#34; waiting for pods to terminate\u0026#34; sleep 2 done ## Delete the inactive PVCs, resize the active PVC, and wait for the resize to complete kubectl delete pvc \u0026#34;${PGDATA}-1\u0026#34; \u0026#34;${PGDATA}-2\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; kubectl patch -p \u0026#39;{\u0026#34;spec\u0026#34;: {\u0026#34;resources\u0026#34;: {\u0026#34;requests\u0026#34;: {\u0026#34;storage\u0026#34;: \u0026#34;\u0026#39;${PGRESIZE}\u0026#39;\u0026#34;}}}}\u0026#39; \u0026#34;pvc/${PGDATA}-0\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; while [ -z \u0026#39;$(kubectl describe pvc \u0026#34;{PGDATA}-0\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; | grep FileSystemResizeSuccessful\u0026#39; ] ; do echo \u0026#34; waiting for PVC to resize\u0026#34; sleep 2 done ## Scale the postgres cluster back to 3 members kubectl patch postgresql \u0026#34;${POSTGRESQL}\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34; : \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;:\u0026#34;/spec/numberOfInstances\u0026#34;, \u0026#34;value\u0026#34; : 3}]\u0026#39; while [ $(kubectl get pods -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; | grep -v NAME | grep -c \u0026#34;Running\u0026#34;) != 3 ] ; do echo \u0026#34; waiting for pods to restart\u0026#34; sleep 2 done } ncn-mw# resize-postgresql-pvc cray-smd-postgres pgdata-cray-smd-postgres services 100Gi In order to persist any Postgres PVC storage volume size changes, it is necessary that this change also be made to the customer-managed customizations.yaml file. See the Postgres PVC Resize information in the Post Install Customizations document.\nCase 2: could not init db connection Case 2: Symptom msg=\u0026#34;could not sync cluster: could not sync roles: could not init db connection: could not init db connection: still failing after 8 retries\u0026#34; Case 2: Details This generally means that some state in the Postgres operator is out of sync with that of the postgresql cluster, resulting in database connection issues.\nCase 2: Restart the Postgres operator To resolve this SyncFailed case, restarting the Postgres operator by deleting the pod may clear up the issue.\n  Delete the pod.\nncn-mw# kubectl delete pod -l app.kubernetes.io/name=postgres-operator -n services   Wait for the postgres-operator to restart.\nncn-mw# kubectl get pods -l app.kubernetes.io/name=postgres-operator -n services Example output of restarted pod:\nNAME READY STATUS RESTARTS AGE cray-postgres-operator-6fffc48b4c-mqz7z 2/2 Running 0 6m   Case 2: Restart the cluster and operator If the database connection has been down for a long period of time and the SyncFailed persists after the above steps, a restart of the cluster and the postgres-operator may be needed for the service to reconnect to the Postgres cluster. For example, if the cray-gitea service is not able to connect to the Postgres database and the connection has been failing for many hours, restart the cluster and operator.\n  Set necessary variables.\nReplace the values of these variables for the appropriate ones for the particular cluster being remediated.\nncn-mw# CLIENT=gitea-vcs ncn-mw# POSTGRESQL=gitea-vcs-postgres ncn-mw# NAMESPACE=services   Scale the service to 0.\nncn-mw# kubectl scale deployment ${CLIENT} -n ${NAMESPACE} --replicas=0   Restart the Postgres cluster and the postgres-operator.\nncn-mw# kubectl delete pod \u0026#34;${POSTGRESQL}-0\u0026#34; \u0026#34;${POSTGRESQL}-1\u0026#34; \u0026#34;${POSTGRESQL}-2\u0026#34; -n ${NAMESPACE} ncn-mw# kubectl delete pods -n services -lapp.kubernetes.io/name=postgres-operator ncn-mw# while [ $(kubectl get postgresql ${POSTGRESQL} -n ${NAMESPACE} -o json | jq -r \u0026#39;.status.PostgresClusterStatus\u0026#39;) != \u0026#34;Running\u0026#34; ]; do echo \u0026#34;waiting for ${POSTGRESQL}to start running\u0026#34;; sleep 2 done   Scale the service back to 1 (for different services this may be to 3).\nncn-mw# kubectl scale deployment ${CLIENT} -n ${NAMESPACE} --replicas=1   Case 3: password authentication failed for user Case 3: Symptom msg=\u0026#34;error while syncing cluster state: could not sync roles: could not init db connection: could not init db connection: pq: password authentication failed for user \\\u0026lt;username\\\u0026gt;\u0026#34; Case 3: Details This generally means that the password for the given user is not the same as that specified in the Kubernetes secret. This can occur if the postgresql cluster was rebuilt and the data was restored, leaving the Kubernetes secrets out of sync with the Postgres cluster. To resolve this SyncFailed case, gather the username and password for the credential from Kubernetes, and update the database with these values. For example, if the user postgres is failing to authenticate between the cray-smd services and the cray-smd-postgres cluster, then get the password for the postgres user from the Kubernetes secret and update the password in the database.\n  Set necessary variables.\nncn-mw# CLIENT=cray-smd ncn-mw# POSTGRESQL=cray-smd-postgres ncn-mw# NAMESPACE=services   Scale the service to 0.\nncn-mw# kubectl scale deployment ${CLIENT} -n ${NAMESPACE} --replicas=0 ncn-mw# while [ $(kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=\u0026#34;${CLIENT}\u0026#34; | grep -v NAME | wc -l) != 0 ] ; do echo \u0026#34; waiting for pods to terminate\u0026#34; sleep 2 done   Determine what secrets are associated with the postgresql credentials.\nncn-mw# kubectl get secrets -n ${NAMESPACE} | grep \u0026#34;${POSTGRESQL}.credentials\u0026#34; Example output:\nservices hmsdsuser.cray-smd-postgres.credentials Opaque 2 31m services postgres.cray-smd-postgres.credentials Opaque 2 31m services service-account.cray-smd-postgres.credentials Opaque 2 31m services standby.cray-smd-postgres.credentials Opaque 2 31m   Gather the decoded username and password for the user that is failing to authenticate.\n  Save the name of the secret with the failing authentication in a variable.\nReplace the secret name in this command with the secret determined in the previous step.\nncn-mw# SECRET=postgres.cray-smd-postgres.credentials   Decode the username.\nncn-mw# kubectl get secret ${SECRET} -n ${NAMESPACE} -ojsonpath=\u0026#39;{.data.username}\u0026#39; | base64 -d Example output:\npostgres   Decode the password.\nncn-mw# kubectl get secret ${SECRET} -n ${NAMESPACE} -ojsonpath=\u0026#39;{.data.password}\u0026#39;| base64 -d Example output:\nABCXYZ     Update the username and password in the database.\n  Determine which pod is the leader.\nncn-mw# kubectl exec \u0026#34;${POSTGRESQL}-0\u0026#34; -n ${NAMESPACE} -c postgres -it -- patronictl list Example output:\n+-------------------+---------------------+------------+--------+---------+----+-----------+ | Cluster | Member | Host | Role | State | TL | Lag in MB | +-------------------+---------------------+------------+--------+---------+----+-----------+ | cray-smd-postgres | cray-smd-postgres-0 | 10.42.0.25 | Leader | running | 1 | | | cray-smd-postgres | cray-smd-postgres-1 | 10.44.0.34 | | running | | 0 | | cray-smd-postgres | cray-smd-postgres-2 | 10.36.0.44 | | running | | 0 | +-------------------+---------------------+------------+--------+---------+----+-----------+   kubectl exec into the Postgres leader and update the username and password in the database.\nncn-mw# POSTGRES_LEADER=cray-smd-postgres-0 ncn-mw# kubectl exec ${POSTGRES_LEADER} -n ${NAMESPACE} -c postgres -it -- bash root@cray-smd-postgres-0:/home/postgres# /usr/bin/psql postgres postgres postgres=# ALTER USER postgres WITH PASSWORD 'ABCXYZ'; ALTER ROLE postgres=#     Restart the postgresql cluster.\nncn-mw# kubectl delete pod \u0026#34;${POSTGRESQL}-0\u0026#34; \u0026#34;${POSTGRESQL}-1\u0026#34; \u0026#34;${POSTGRESQL}-2\u0026#34; -n ${NAMESPACE} ncn-mw# while [ $(kubectl get postgresql ${POSTGRESQL} -n ${NAMESPACE} -o json | jq -r \u0026#39;.status.PostgresClusterStatus\u0026#39;) != \u0026#34;Running\u0026#34; ]; do echo \u0026#34;waiting for ${POSTGRESQL}to start running\u0026#34; sleep 2 done   Scale the service back to 3.\nncn-mw# kubectl scale deployment ${CLIENT} -n ${NAMESPACE} --replicas=3 ncn-mw# while [ $(kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=\u0026#34;${CLIENT}\u0026#34; | grep -v NAME | wc -l) != 3 ] ; do echo \u0026#34; waiting for pods to start running\u0026#34; sleep 2 done   Cluster member missing Most services expect to maintain a Postgres cluster consisting of three pods for resiliency (SMA is one exception where only two pods are expected to exist).\nDetermine if a cluster member is missing For a given Postgres cluster, check how many pods are running.\nncn-mw# POSTGRESQL=keycloak-postgres ncn-mw# NAMESPACE=services ncn-mw# kubectl get pods -A -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; Recover from a missing member If the number of Postgres pods for the given cluster is more or less than expected, increase or decrease as needed. This example will patch the keycloak-postgres cluster resource so that three pods are running.\n  Set the POSTGRESQL and NAMESPACE variables.\nncn-mw# POSTGRESQL=keycloak-postgres ncn-mw# NAMESPACE=services   Patch the keycloak-postgres cluster resource to ensure three pods are running.\nncn-mw# kubectl patch postgresql \u0026#34;${POSTGRESQL}\u0026#34; -n \u0026#34;${NAMESPACE}\u0026#34; --type=\u0026#39;json\u0026#39; \\  -p=\u0026#39;[{\u0026#34;op\u0026#34; : \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;:\u0026#34;/spec/numberOfInstances\u0026#34;, \u0026#34;value\u0026#34; : 3}]\u0026#39;   Confirm the number of cluster members, otherwise known as pods, by checking the postgresql resource.\nncn-mw# kubectl get postgresql ${POSTGRESQL} -n ${NAMESPACE} Example output:\nNAME TEAM VERSION PODS VOLUME CPU-REQUEST MEMORY-REQUEST AGE STATUS keycloak-postgres keycloak 11 3 10Gi 29m Running   If a pod is starting but remains in Pending, CrashLoopBackOff, ImagePullBackOff, or other non-Running states, then describe the pod and get logs from the pod for further analysis.\n  Find the pod name.\nncn-mw# kubectl get pods -A -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; Example output:\nNAMESPACE NAME READY STATUS RESTARTS AGE services keycloak-postgres-0 0/3 Pending 0 36m services keycloak-postgres-1 3/3 Running 0 35m services keycloak-postgres-2 3/3 Running 0 34m   Describe the pod.\nncn-mw# kubectl describe pod \u0026#34;${POSTGRESQL}-0\u0026#34; -n ${NAMESPACE}   View the pod logs.\nncn-mw# kubectl logs \u0026#34;${POSTGRESQL}-0\u0026#34; -c postgres -n ${NAMESPACE}     Postgres leader missing If a Postgres cluster no longer has a leader, the database will need to be recovered.\nDetermine if the Postgres leader is missing   Set the POSTGRESQL and NAMESPACE variables.\nncn-mw# POSTGRESQL=cray-smd-postgres ncn-mw# NAMESPACE=services   Check if the leader is missing.\nncn-mw# kubectl exec ${POSTGRESQL}-0 -n ${NAMESPACE} -c postgres -- patronictl list Example output:\n+-------------------+---------------------+------------+------+--------------+----+-----------+ | Cluster | Member | Host | Role | State | TL | Lag in MB | +-------------------+---------------------+------------+------+--------------+----+-----------+ | cray-smd-postgres | cray-smd-postgres-0 | 10.42.0.25 | | running | | unknown | | cray-smd-postgres | cray-smd-postgres-1 | 10.44.0.34 | | start failed | | unknown | | cray-smd-postgres | cray-smd-postgres-2 | 10.36.0.44 | | start failed | | unknown | +-------------------+---------------------+------------+------+--------------+----+-----------+ If the output does not list a leader, then proceed to Recover from a missing Postgres leader.\n  Check if there is conflicting leader information.\nIt sometimes happen that the above check reports a leader, but other checks report no leader, or report conflicting leader information. The following steps show the status reported by each member of the cluster.\n  Make a list of the Kubernetes pods of the cluster members.\nncn-mw# PODS=$(kubectl get pods -n ${NAMESPACE} --no-headers -o custom-columns=:.metadata.name | grep \u0026#34;^${POSTGRESQL}-[0-9]$\u0026#34;) ; echo ${PODS} Example output:\ncray-smd-postgres-0 cray-smd-postgres-1 cray-smd-postgres-2   Query each pod about the status of the cluster.\nThis script reports the cluster status as perceived by each member of the cluster.\nncn-mw# for POD in ${PODS} ; do echo \u0026#34;Checking ${POD}...\u0026#34; kubectl exec ${POD} -n ${NAMESPACE} -c postgres -- curl -s http://localhost:8008/cluster | jq ; echo done Example output:\nChecking cray-smd-postgres-0... { \u0026#34;members\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;cray-smd-postgres-0\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;leader\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;running\u0026#34;, \u0026#34;api_url\u0026#34;: \u0026#34;http://10.32.0.33:8008/patroni\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;10.32.0.33\u0026#34;, \u0026#34;port\u0026#34;: 5432, \u0026#34;timeline\u0026#34;: 1 }, { \u0026#34;name\u0026#34;: \u0026#34;cray-smd-postgres-1\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;replica\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;running\u0026#34;, \u0026#34;api_url\u0026#34;: \u0026#34;http://10.44.0.30:8008/patroni\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;10.44.0.30\u0026#34;, \u0026#34;port\u0026#34;: 5432, \u0026#34;timeline\u0026#34;: 1, \u0026#34;lag\u0026#34;: 0 }, { \u0026#34;name\u0026#34;: \u0026#34;cray-smd-postgres-2\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;replica\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;running\u0026#34;, \u0026#34;api_url\u0026#34;: \u0026#34;http://10.47.0.33:8008/patroni\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;10.47.0.33\u0026#34;, \u0026#34;port\u0026#34;: 5432, \u0026#34;timeline\u0026#34;: 1, \u0026#34;lag\u0026#34;: 0 } ] } Checking cray-smd-postgres-1... { \u0026#34;members\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;cray-smd-postgres-0\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;leader\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;running\u0026#34;, \u0026#34;api_url\u0026#34;: \u0026#34;http://10.32.0.33:8008/patroni\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;10.32.0.33\u0026#34;, \u0026#34;port\u0026#34;: 5432, \u0026#34;timeline\u0026#34;: 1 }, { \u0026#34;name\u0026#34;: \u0026#34;cray-smd-postgres-1\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;replica\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;running\u0026#34;, \u0026#34;api_url\u0026#34;: \u0026#34;http://10.44.0.30:8008/patroni\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;10.44.0.30\u0026#34;, \u0026#34;port\u0026#34;: 5432, \u0026#34;timeline\u0026#34;: 1, \u0026#34;lag\u0026#34;: 0 }, { \u0026#34;name\u0026#34;: \u0026#34;cray-smd-postgres-2\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;replica\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;running\u0026#34;, \u0026#34;api_url\u0026#34;: \u0026#34;http://10.47.0.33:8008/patroni\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;10.47.0.33\u0026#34;, \u0026#34;port\u0026#34;: 5432, \u0026#34;timeline\u0026#34;: 1, \u0026#34;lag\u0026#34;: 0 } ] } And so on for every member of the cluster. This script does not do any checking \u0026ndash; it only displays the information.\n  Check the output for errors or inconsistencies.\nIn particular, validate the following:\n Every cluster member reports exactly one leader. Every cluster member reports the same leader. Every cluster member reports the same states for each member.  If any of the above are not true, this indicates that the cluster members are no longer properly synchronized. In this case, attempt the Recover replication remediation procedures.\n    Recover from a missing Postgres leader See the Recover from Postgres WAL Event procedure.\n"
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/view_postgres_information_for_system_databases/",
	"title": "View Postgres Information For System Databases",
	"tags": [],
	"description": "",
	"content": "View Postgres Information for System Databases Postgres uses SQL language to store and manage databases on the system. This procedure describes how to view and obtain helpful information about system databases, as well as the types of data being stored.\nPrerequisites This procedure requires administrative privileges.\nProcedure   Log in to the Postgres container.\nncn-w001# kubectl -n services exec -it cray-smd-postgres-0 -- bash Example output:\nDefaulting container name to postgres. Use 'kubectl describe pod/cray-smd-postgres-0 -n services' to see all of the containers in this pod. ____ _ _ / ___| _ __ (_) | ___ \\___ \\| '_ \\| | |/ _ \\ ___) | |_) | | | (_) | |____/| .__/|_|_|\\___/ |_| This container is managed by runit, when stopping/starting services use sv Examples: sv stop cron sv restart patroni Current status: (sv status /etc/service/*) run: /etc/service/cron: (pid 26) 487273s run: /etc/service/patroni: (pid 24) 487273s run: /etc/service/pgqd: (pid 25) 487273s   Log in as the postgres user.\nroot@cray-smd-postgres-0:/home/postgres# psql -U postgres Example output:\npsql (12.2 (Ubuntu 12.2-1.pgdg18.04+1), server 11.7 (Ubuntu 11.7-1.pgdg18.04+1)) Type \u0026quot;help\u0026quot; for help. postgres=#   List the existing databases.\npostgres=# \\l Example output:\n List of databases Name | Owner | Encoding | Collate | Ctype | Access privileges ------------+-----------------+----------+-------------+-------------+----------------------- hmsds | hmsdsuser | UTF8 | en_US.UTF-8 | en_US.UTF-8 | postgres | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 | service_db | service_account | UTF8 | en_US.UTF-8 | en_US.UTF-8 | template0 | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 | =c/postgres + | | | | | postgres=CTc/postgres template1 | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 | =c/postgres + | | | | | postgres=CTc/postgres (5 rows)   Establish a connection to the desired database.\nIn the example below, the hmsds database is used.\npostgres=# \\c hmsds Example output:\npsql (12.2 (Ubuntu 12.2-1.pgdg18.04+1), server 11.7 (Ubuntu 11.7-1.pgdg18.04+1)) You are now connected to database \u0026quot;hmsds\u0026quot; as user \u0026quot;postgres\u0026quot;. hmsds=#   List the data types that are in the database being viewed.\nhmsds-# \\dt Example output:\n List of relations Schema | Name | Type | Owner --------+-------------------------+-------+----------- public | comp_endpoints | table | hmsdsuser public | comp_eth_interfaces | table | hmsdsuser public | component_group_members | table | hmsdsuser public | component_groups | table | hmsdsuser public | component_lock_members | table | hmsdsuser public | component_locks | table | hmsdsuser public | components | table | hmsdsuser public | discovery_status | table | hmsdsuser public | hwinv_by_fru | table | hmsdsuser public | hwinv_by_loc | table | hmsdsuser public | hwinv_hist | table | hmsdsuser public | job_state_rf_poll | table | hmsdsuser public | job_sync | table | hmsdsuser public | node_nid_mapping | table | hmsdsuser public | power_mapping | table | hmsdsuser public | rf_endpoints | table | hmsdsuser public | schema_migrations | table | hmsdsuser public | scn_subscriptions | table | hmsdsuser public | service_endpoints | table | hmsdsuser public | system | table | hmsdsuser (20 rows)   "
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/check_for_and_clear_etcd_cluster_alarms/",
	"title": "Check For And Clear Etcd Cluster Alarms",
	"tags": [],
	"description": "",
	"content": "Check for and Clear etcd Cluster Alarms Check for any etcd cluster alarms and clear them as needed. An etcd cluster alarm must be manually cleared.\nFor example, a cluster\u0026rsquo;s database \u0026ldquo;NOSPACE\u0026rdquo; alarm is set when database storage space is no longer available. A subsequent defrag may free up database storage space, but writes to the database will continue to fail while the \u0026ldquo;NOSPACE\u0026rdquo; alarm is set.\nPrerequisites  This procedure requires root privileges. The etcd clusters are in a healthy state.  Procedure   Check for etcd cluster alarms.\nAn empty list will be returned if no alarms are set.\n  Check if any etcd alarms are set for etcd clusters in the services namespace.\nfor pod in $(kubectl get pods -l etcd_cluster=cray-bos-etcd \\  -n services -o jsonpath=\u0026#39;{.items[*].metadata.name}\u0026#39;) do echo \u0026#34;### ${pod}Alarms Set: ###\u0026#34; kubectl -n services exec ${pod} -- /bin/sh \\  -c \u0026#34;ETCDCTL_API=3 etcdctl alarm list\u0026#34; done ncn-w001# for pod in $(kubectl get pods -l app=etcd -n services \\ -o jsonpath=\u0026#39;{.items[*].metadata.name}\u0026#39;); \\ do echo \u0026#34;### ${pod}Alarms Set: ###\u0026#34;; kubectl -n services exec ${pod} -- /bin/sh -c \\ \u0026#34;ETCDCTL_API=3 etcdctl alarm list\u0026#34;; done Example output:\n### cray-bos-etcd-7cxq6qrhz5 Alarms Set: ### ### cray-bos-etcd-b9m4k5qfrd Alarms Set: ### ### cray-bos-etcd-tnpv8x6cxv Alarms Set: ### ### cray-bss-etcd-q4k54rbbfj Alarms Set: ### ### cray-bss-etcd-r75mlv6ffd Alarms Set: ### ### cray-bss-etcd-xprv5ht5d4 Alarms Set: ### ### cray-cps-etcd-8hpztfkjdp Alarms Set: ### ### cray-cps-etcd-fp4kfsf799 Alarms Set: ### ### cray-cps-etcd-g6gz9vmmdn Alarms Set: ### ### cray-crus-etcd-6z9zskl6cr Alarms Set: ### ### cray-crus-etcd-krp255f97q Alarms Set: ### ### cray-crus-etcd-tpclqfln67 Alarms Set: ### ### cray-externaldns-etcd-2vnb5t4657 Alarms Set: ### ### cray-externaldns-etcd-sc4b88ptg2 Alarms Set: ### [...]   Check if any etcd alarms are set for a particular etcd cluster in the services namespace.\nfor pod in $(kubectl get pods -l etcd_cluster=cray-bos-etcd \\  -n services -o jsonpath=\u0026#39;{.items[*].metadata.name}\u0026#39;) do echo \u0026#34;### ${pod}Alarms Set: ###\u0026#34; kubectl -n services exec ${pod} -- /bin/sh \\  -c \u0026#34;ETCDCTL_API=3 etcdctl alarm list\u0026#34; done ncn-w001# for pod in $(kubectl get pods -l etcd_cluster=cray-bos-etcd \\ -n services -o jsonpath=\u0026#39;{.items[*].metadata.name}\u0026#39;); do echo \u0026#34;### \\ ${pod}Alarms Set: ###\u0026#34;; kubectl -n services exec ${pod} -- /bin/sh -c \\ \u0026#34;ETCDCTL_API=3 etcdctl alarm list\u0026#34;; done Example output:\n### cray-bos-etcd-7cxq6qrhz5 Alarms Set: ### ### cray-bos-etcd-b9m4k5qfrd Alarms Set: ### ### cray-bos-etcd-tnpv8x6cxv Alarms Set: ###     Clear any etcd cluster alarms.\nA list of disarmed alarms will be returned. An empty list is returned if no alarms were set.\n  Clear all etcd alarms set in etcd clusters.\nfor pod in $(kubectl get pods -l app=etcd -n services \\  -o jsonpath=\u0026#39;{.items[*].metadata.name}\u0026#39;) do echo \u0026#34;### ${pod}Disarmed Alarms: ###\u0026#34; kubectl -n services exec ${pod} -- /bin/sh \\  -c \u0026#34;ETCDCTL_API=3 etcdctl alarm disarm\u0026#34; done ncn-w001# for pod in $(kubectl get pods -l app=etcd -n services -o \\ jsonpath=\u0026#39;{.items[*].metadata.name}\u0026#39;); do echo \u0026#34;### ${pod}Disarmed Alarms: \\ ###\u0026#34;; kubectl -n services exec ${pod} -- /bin/sh -c \\ \u0026#34;ETCDCTL_API=3 etcdctl alarm disarm\u0026#34;; done Example output:\n### cray-bos-etcd-7cxq6qrhz5 Disarmed Alarms: ### ### cray-bos-etcd-b9m4k5qfrd Disarmed Alarms: ### ### cray-bos-etcd-tnpv8x6cxv Disarmed Alarms: ### ### cray-bss-etcd-q4k54rbbfj Disarmed Alarms: ### ### cray-bss-etcd-r75mlv6ffd Disarmed Alarms: ### ### cray-bss-etcd-xprv5ht5d4 Disarmed Alarms: ### ### cray-cps-etcd-8hpztfkjdp Disarmed Alarms: ### ### cray-cps-etcd-fp4kfsf799 Disarmed Alarms: ### [...]   Clear all alarms in one particular etcd cluster.\nfor pod in $(kubectl get pods -l etcd_cluster=cray-bos-etcd \\  -n services -o jsonpath=\u0026#39;{.items[*].metadata.name}\u0026#39;) do echo \u0026#34;### ${pod}Disarmed Alarms: ###\u0026#34; kubectl -n services exec ${pod} -- /bin/sh \\  -c \u0026#34;ETCDCTL_API=3 etcdctl alarm disarm\u0026#34; done ncn-w001# for pod in $(kubectl get pods -l etcd_cluster=cray-bos-etcd \\ -n services -o jsonpath=\u0026#39;{.items[*].metadata.name}\u0026#39;); do echo \u0026#34;### ${pod}\\ Disarmed Alarms: ###\u0026#34;; kubectl -n services exec ${pod} -- /bin/sh \\ -c \u0026#34;ETCDCTL_API=3 etcdctl alarm disarm\u0026#34;; done Example output:\n### cray-bos-etcd-7cxq6qrhz5 Disarmed Alarms: ### memberID:14039380531903955557 alarm:NOSPACE memberID:10060051157615504224 alarm:NOSPACE memberID:9418794810465807950 alarm:NOSPACE ### cray-bos-etcd-b9m4k5qfrd Disarmed Alarms: ### ### cray-bos-etcd-tnpv8x6cxv Disarmed Alarms: ###     "
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/check_the_health_and_balance_of_etcd_clusters/",
	"title": "Check The Health And Balance Of Etcd Clusters",
	"tags": [],
	"description": "",
	"content": "Check the Health and Balance of etcd Clusters Check to see if all of the etcd clusters have healthy pods, are balanced, and have a healthy cluster database. There needs to be the same number of pods running on each worker node for the etcd clusters to be balanced. If the number of pods is not the same for each worker node, the cluster is not balanced.\nAny clusters that do not have healthy pods will need to be rebuilt. Kubernetes cluster data will not be stored as efficiently when etcd clusters are not balanced.\nPrerequisites This procedure requires root privileges.\nProcedure   Check the health of the clusters.\nTo check the health of the etcd clusters in the services namespace without TLS authentication:\nncn-w001# for pod in $(kubectl get pods -l app=etcd -n services \\ -o jsonpath=\u0026#39;{.items[*].metadata.name}\u0026#39;); do echo \u0026#34;### ${pod}###\u0026#34;; \\ kubectl -n services exec ${pod} -- /bin/sh -c \u0026#34;ETCDCTL_API=3 etcdctl endpoint health\u0026#34;; done Example output:\n### cray-bos-etcd-6nkn6dzhv7 ### 127.0.0.1:2379 is healthy: successfully committed proposal: took = 1.670457ms ### cray-bos-etcd-6xtp2gqs64 ### 127.0.0.1:2379 is healthy: successfully committed proposal: took = 954.462µs ### cray-bos-etcd-gnt9rxcbvl ### 127.0.0.1:2379 is healthy: successfully committed proposal: took = 1.313505ms ### cray-bss-etcd-4jsn7p49rj ### 127.0.0.1:2379 is healthy: successfully committed proposal: took = 2.054509ms ### cray-bss-etcd-9q6xf5wl5q ### 127.0.0.1:2379 is healthy: successfully committed proposal: took = 1.174929ms ### cray-bss-etcd-ncwkjmlq8b ### 127.0.0.1:2379 is healthy: successfully committed proposal: took = 1.632738ms ### cray-cps-etcd-8ml5whzhjh ### 127.0.0.1:2379 is healthy: successfully committed proposal: took = 1.792795ms [...] If any of the etcd clusters are not healthy, refer to Rebuild Unhealthy etcd Clusters.\n  Check the number of pods in each cluster and verify they are balanced.\nEach cluster should contain at least three pods, but may contain more. Ensure that no two pods in a given cluster exist on the same worker node.\nncn-w001# kubectl get pod -n services -o wide | head -n 1; for cluster in \\ $(kubectl get etcdclusters.etcd.database.coreos.com -n services | grep -v NAME | \\ awk \u0026#39;{print $1}\u0026#39;); do kubectl get pod -n services -o wide | grep $cluster; echo \u0026#34;\u0026#34;; done Example output:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATE cray-bos-etcd-7gl9dccmrq 1/1 Running 0 8d 10.40.0.88 ncn-w003 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-bos-etcd-g65fjhhlbg 1/1 Running 0 8d 10.42.0.36 ncn-w002 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-bos-etcd-lbsppj5kt7 1/1 Running 0 20h 10.47.0.98 ncn-w001 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-bss-etcd-dbhxvz824w 1/1 Running 0 8d 10.42.0.45 ncn-w002 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-bss-etcd-hzpbrcn2pb 1/1 Running 0 20h 10.47.0.99 ncn-w001 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-bss-etcd-kpc64v64wd 1/1 Running 0 8d 10.40.0.43 ncn-w003 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-cps-etcd-8ndvn4dlx4 1/1 Running 0 20h 10.47.0.100 ncn-w001 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-cps-etcd-gvlql48gwk 1/1 Running 0 8d 10.40.0.89 ncn-w003 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-cps-etcd-wsvhmp4f7p 1/1 Running 0 8d 10.42.0.64 ncn-w002 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-crus-etcd-2wvb2bpczb 1/1 Running 0 20h 10.47.0.117 ncn-w001 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-crus-etcd-fhbcvknghh 1/1 Running 0 8d 10.42.0.34 ncn-w002 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-crus-etcd-nrxqzftrzr 1/1 Running 0 8d 10.40.0.45 ncn-w003 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-externaldns-etcd-7skqmr825d 1/1 Running 0 20h 10.47.0.119 ncn-w001 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-externaldns-etcd-gm2s7nkjgl 1/1 Running 0 8d 10.42.0.13 ncn-w002 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-externaldns-etcd-ttnchdrwjl 1/1 Running 0 8d 10.40.0.22 ncn-w003 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-fas-etcd-29qcrd8qdt 1/1 Running 0 20h 10.47.0.102 ncn-w001 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-fas-etcd-987c87m4mv 1/1 Running 0 8d 10.40.0.66 ncn-w003 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-fas-etcd-9fxbzkzrsv 1/1 Running 0 8d 10.42.0.43 ncn-w002 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-hbtd-etcd-2sf24nw5zs 1/1 Running 0 8d 10.40.0.78 ncn-w003 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-hbtd-etcd-5r6mgvjct8 1/1 Running 0 20h 10.47.0.105 ncn-w001 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-hbtd-etcd-t78x5wqkjt 1/1 Running 0 8d 10.42.0.51 ncn-w002 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-hmnfd-etcd-99j5zt5ln6 1/1 Running 0 8d 10.40.0.74 ncn-w003 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-hmnfd-etcd-h9gnvvs7rs 1/1 Running 0 8d 10.42.0.39 ncn-w002 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-hmnfd-etcd-lj72f8xjkv 1/1 Running 0 20h 10.47.0.103 ncn-w001 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-reds-etcd-97wr66d4pj 1/1 Running 0 20h 10.47.0.129 ncn-w001 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-reds-etcd-kmggscpzrf 1/1 Running 0 8d 10.40.0.64 ncn-w003 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-reds-etcd-zcwrhm884l 1/1 Running 0 8d 10.42.0.53 ncn-w002 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-uas-mgr-etcd-7gmh92t2hx 1/1 Running 0 20h 10.47.0.94 ncn-w001 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-uas-mgr-etcd-7m4qmtgp6t 1/1 Running 0 8d 10.42.0.67 ncn-w002 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; cray-uas-mgr-etcd-pldlkpr48w 1/1 Running 0 8d 10.40.0.94 ncn-w003 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; If the etcd clusters are not balanced, see Rebalance Healthy etcd Clusters.\n  Check the health of an etcd cluster database.\n  To check the health of an etcd cluster\u0026rsquo;s database in the services namespace:\nfor pod in $(kubectl get pods -l app=etcd -n services \\  -o jsonpath=\u0026#39;{.items[*].metadata.name}\u0026#39;) do echo \u0026#34;### ${pod}Etcd Database Check: ###\u0026#34; dbc=$(kubectl -n services exec ${pod} -- /bin/sh \\  -c \u0026#34;ETCDCTL_API=3 etcdctl put foo fooCheck \u0026amp;\u0026amp; \\ ETCDCTL_API=3 etcdctl get foo \u0026amp;\u0026amp; \\ ETCDCTL_API=3 etcdctl del foo \u0026amp;\u0026amp; \\ ETCDCTL_API=3 etcdctl get foo\u0026#34; 2\u0026gt;\u0026amp;1) echo $dbc | awk \u0026#39;{ if ( $1==\u0026#34;OK\u0026#34; \u0026amp;\u0026amp; $2==\u0026#34;foo\u0026#34; \u0026amp;\u0026amp; \\ $3==\u0026#34;fooCheck\u0026#34; \u0026amp;\u0026amp; $4==\u0026#34;1\u0026#34; \u0026amp;\u0026amp; $5==\u0026#34;\u0026#34; ) print \\ \u0026#34;PASS: \u0026#34; PRINT $0; else \\ print \u0026#34;FAILED DATABASE CHECK - EXPECTED: OK foo fooCheck 1 \\ GOT: \u0026#34; PRINT $0 }\u0026#39; done Example of command being entered:\nncn-w001# for pod in $(kubectl get pods -l app=etcd -n services -o \\ jsonpath=\u0026#39;{.items[*].metadata.name}\u0026#39;); do echo \u0026#34;### ${pod}\\ Etcd Database Check: ###\u0026#34;; dbc=$(kubectl -n services exec ${pod} \\ -- /bin/sh -c \u0026#34;ETCDCTL_API=3 etcdctl put foo fooCheck \u0026amp;\u0026amp; ETCDCTL_API=3 \\ etcdctl get foo \u0026amp;\u0026amp; ETCDCTL_API=3 etcdctl del foo \u0026amp;\u0026amp; ETCDCTL_API=3 \\ etcdctl get foo\u0026#34; 2\u0026gt;\u0026amp;1); echo $dbc | awk \u0026#39;{ if ( $1==\u0026#34;OK\u0026#34; \u0026amp;\u0026amp; \\ $2==\u0026#34;foo\u0026#34; \u0026amp;\u0026amp; $3==\u0026#34;fooCheck\u0026#34; \u0026amp;\u0026amp; $4==\u0026#34;1\u0026#34; \u0026amp;\u0026amp; $5==\u0026#34;\u0026#34; ) print \u0026#34;PASS: \\ \u0026#34; PRINT $0; else print \u0026#34;FAILED DATABASE CHECK - \\ EXPECTED: OK foo fooCheck 1 GOT: \u0026#34; PRINT $0 \\}\u0026#39;; done Example output:\n### cray-bos-etcd-7cxq6qrhz5 Etcd Database Check: ### PASS: OK foo fooCheck 1 ### cray-bos-etcd-b9m4k5qfrd Etcd Database Check: ### PASS: OK foo fooCheck 1 ### cray-bos-etcd-tnpv8x6cxv Etcd Database Check: ### PASS: OK foo fooCheck 1 ### cray-bss-etcd-q4k54rbbfj Etcd Database Check: ### PASS: OK foo fooCheck 1 ### cray-bss-etcd-r75mlv6ffd Etcd Database Check: ### PASS: OK foo fooCheck 1 ### cray-bss-etcd-xprv5ht5d4 Etcd Database Check: ### PASS: OK foo fooCheck 1 ### cray-cps-etcd-8hpztfkjdp Etcd Database Check: ### PASS: OK foo fooCheck 1 ### cray-cps-etcd-fp4kfsf799 Etcd Database Check: ### PASS: OK foo fooCheck 1 ### cray-cps-etcd-g6gz9vmmdn Etcd Database Check: ### PASS: OK foo fooCheck 1 ### cray-crus-etcd-6z9zskl6cr Etcd Database Check: ### PASS: OK foo fooCheck 1 ### cray-crus-etcd-krp255f97q Etcd Database Check: ### PASS: OK foo fooCheck 1 ### cray-crus-etcd-tpclqfln67 Etcd Database Check: ### PASS: OK foo fooCheck 1 ### cray-externaldns-etcd-2vnb5t4657 Etcd Database Check: ### PASS: OK foo fooCheck 1 [...]   To check one cluster:\nfor pod in $(kubectl get pods -l etcd_cluster=cray-bos-etcd -n services \\  -o jsonpath=\u0026#39;{.items[*].metadata.name}\u0026#39;) do echo \u0026#34;### ${pod}Etcd Database Check: ###\u0026#34; dbc=$(kubectl -n services exec ${pod} -- /bin/sh \\  -c \u0026#34;ETCDCTL_API=3 etcdctl put foo fooCheck \u0026amp;\u0026amp; \\ ETCDCTL_API=3 etcdctl get foo \u0026amp;\u0026amp; \\ ETCDCTL_API=3 etcdctl del foo \u0026amp;\u0026amp; \\ ETCDCTL_API=3 etcdctl get foo\u0026#34; 2\u0026gt;\u0026amp;1) echo $dbc | awk \u0026#39;{ if ( $1==\u0026#34;OK\u0026#34; \u0026amp;\u0026amp; $2==\u0026#34;foo\u0026#34; \u0026amp;\u0026amp; \\ $3==\u0026#34;fooCheck\u0026#34; \u0026amp;\u0026amp; $4==\u0026#34;1\u0026#34; \u0026amp;\u0026amp; $5==\u0026#34;\u0026#34; ) print \\ \u0026#34;PASS: \u0026#34; PRINT $0; else \\ print \u0026#34;FAILED DATABASE CHECK - EXPECTED: OK foo fooCheck 1 \\ GOT: \u0026#34; PRINT $0 }\u0026#39; done Example of command being entered:\nncn-w001# for pod in $(kubectl get pods -l etcd_cluster=cray-bos-etcd \\ -n services -o jsonpath=\u0026#39;{.items[*].metadata.name}\u0026#39;); do echo \\ \u0026#34;### ${pod}Etcd Database Check: ###\u0026#34;; dbc=$(kubectl -n \\ services exec ${pod} -- /bin/sh -c \u0026#34;ETCDCTL_API=3 etcdctl \\ put foo fooCheck \u0026amp;\u0026amp; ETCDCTL_API=3 etcdctl get foo \u0026amp;\u0026amp; \\ ETCDCTL_API=3 etcdctl del foo \u0026amp;\u0026amp; ETCDCTL_API=3 etcdctl get \\ foo\u0026#34; 2\u0026gt;\u0026amp;1); echo $dbc | awk \u0026#39;{ if ( $1==\u0026#34;OK\u0026#34; \u0026amp;\u0026amp; $2==\u0026#34;foo\u0026#34; \u0026amp;\u0026amp; \\ $3==\u0026#34;fooCheck\u0026#34; \u0026amp;\u0026amp; $4==\u0026#34;1\u0026#34; \u0026amp;\u0026amp; $5==\u0026#34;\u0026#34; ) print \u0026#34;PASS: \u0026#34; PRINT $0; \\ else print \u0026#34;FAILED DATABASE CHECK - EXPECTED: \\ OK foo fooCheck 1 GOT: \u0026#34; PRINT $0 }\u0026#39;; done Example output:\n### cray-bos-etcd-7cxq6qrhz5 Etcd Database Check: ### PASS: OK foo fooCheck 1 ### cray-bos-etcd-b9m4k5qfrd Etcd Database Check: ### PASS: OK foo fooCheck 1 ### cray-bos-etcd-tnpv8x6cxv Etcd Database Check: ### PASS: OK foo fooCheck 1   If any of the etcd cluster databases are not healthy, refer to the following procedures:\n Refer to Check for and Clear etcd Cluster Alarms Refer to Clear Space in an etcd Cluster Database    "
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/clear_space_in_an_etcd_cluster_database/",
	"title": "Clear Space In An Etcd Cluster Database",
	"tags": [],
	"description": "",
	"content": "Clear Space in an etcd Cluster Database Use this procedure to clear the etcd cluster NOSPACE alarm. Once it is set it will remain set. If needed, defrag the database cluster before clearing the NOSPACE alarm.\nDefragging the database cluster and clearing the etcd cluster NOSPACE alarm will free up database space.\nPrerequisites  This procedure requires root privileges The etcd clusters are in a healthy state  Procedure   Clear up space when the etcd database space has exceeded and has been defragged, but the NOSPACE alarm remains set.\n  Verify that the attempt to store a new key-value fails.\nReplace hbtd-ETCD_CLUSTER before running the following command. hbtd-etcd-h59j42knjv is an example replacement value.\nncn-w001# kubectl -n services exec -it hbtd-ETCD_CLUSTER -- sh Example output:\n# export ETCDCTL_API=3 # etcdctl put foo bar {\u0026quot;level\u0026quot;:\u0026quot;warn\u0026quot;,\u0026quot;ts\u0026quot;:\u0026quot;2020-10-23T23:56:48.408Z\u0026quot;,\u0026quot;caller\u0026quot;:\u0026quot;clientv3/retry_interceptor.go:62\u0026quot;,\u0026quot;msg\u0026quot;:\u0026quot;retrying of unary invoker failed\u0026quot;,\u0026quot;target\u0026quot;:\u0026quot;endpoint://client-208534eb-2ab4-4c58-8853-58bff088c394/127.0.0.1:2379\u0026quot;,\u0026quot;attempt\u0026quot;:0,\u0026quot;error\u0026quot;:\u0026quot;rpc error: code = ResourceExhausted desc = etcdserver: mvcc: database space exceeded\u0026quot;} Error: etcdserver: mvcc: database space exceeded   Check to see if the default 2G disk usage space (unless defined different in the helm chart) is currently exceeded.\nIn the following example, the disk usage is 375.5 M, which means the disk space has not been exceeded.\nReplace hbtd-ETCD_CLUSTER before running the following command. hbtd-etcd-h59j42knjv is an example replacement value.\nncn-w001# kubectl -n services exec -it hbtd-ETCD_CLUSTER -- sh Example output:\n# df -h Filesystem Size Used Available Use% Mounted on overlay 396.3G 59.6G 316.5G 16% / tmpfs 64.0M 0 64.0M 0% /dev tmpfs 125.7G 0 125.7G 0% /sys/fs/cgroup /dev/rbd21 2.9G 375.5M 2.5G 13% /var/etcd. \u0026lt;------/dev/sdc4 396.3G 22.0G 354.1G 6% /etc/hosts /dev/sdc4 396.3G 22.0G 354.1G 6% /dev/termination-log /dev/sdc5 396.3G 59.6G 316.5G 16% /etc/hostname /dev/sdc5 396.3G 59.6G 316.5G 16% /etc/resolv.conf   Clear the NOSPACE alarm.\nfor pod in $(kubectl get pods -l etcd_cluster=hbtd-etcd \\  -n services -o jsonpath=\u0026#39;{.items[*].metadata.name}\u0026#39;) do echo \u0026#34;### ${pod}###\u0026#34; kubectl -n services exec ${pod} -- /bin/sh \\  -c \u0026#34;ETCDCTL_API=3 etcdctl alarm disarm\u0026#34; done Example of command being entered:\nncn-w001# for pod in $(kubectl get pods -l etcd_cluster=hbtd-etcd \\ -n services -o jsonpath=\u0026#39;{.items[*].metadata.name}\u0026#39;); do echo \u0026#34;### ${pod}###\u0026#34;; \\ kubectl -n services exec ${pod} -- /bin/sh \\ -c \u0026#34;ETCDCTL_API=3 etcdctl alarm disarm\u0026#34;; done Example output:\n### hbtd-etcd-h59j42knjv ### memberID:6004340417806974740 alarm:NOSPACE memberID:10618826089438871005 alarm:NOSPACE memberID:6927946043724325475 alarm:NOSPACE ### hbtd-etcd-jfwh9l49lm ### ### hbtd-etcd-mhklm4n5qd ###   Verify a new key-value can now be successfully stored.\nReplace hbtd-ETCD_CLUSTER before running the following command. hbtd-etcd-h59j42knjv is an example replacement value.\nncn-w001# kubectl -n services exec -it hbtd-ETCD_CLUSTER -- sh ncn-w001# export ETCDCTL_API=3 ncn-w001# etcdctl put foo bar OK     Clear the NOSPACE alarm. If the database needs to be defragged, the alarm will be reset.\n  Confirm the \u0026ldquo;database space exceeded\u0026rdquo; message is present.\nncn-w001# kubectl logs -n services --tail=-1 --prefix=true -l \\ \u0026#34;app.kubernetes.io/name=cray-hbtd\u0026#34; -c cray-hbtd | grep \u0026#34;x3005c0s19b1n0\u0026#34; Example output:\n[pod/cray-hbtd-56bc4f6fdb-92bqx/cray-hbtd] 2020/09/15 20:00:44 INTERNAL ERROR storing key {\u0026quot;Component\u0026quot;:\u0026quot;x3005c0s19b1n0\u0026quot;,\u0026quot;Last_hb_rcv_time\u0026quot;:\u0026quot;5f611d6c\u0026quot;,\u0026quot;Last_hb_timestamp\u0026quot;:\u0026quot;2020-09-15T15:00:44.878876-06:00\u0026quot;,\u0026quot;Last_hb_status\u0026quot;:\u0026quot;OK\u0026quot;,\u0026quot;Had_warning\u0026quot;:\u0026quot;\u0026quot;} : etcdserver: mvcc: database space exceeded [pod/cray-hbtd-56bc4f6fdb-92bqx/cray-hbtd] 2020/09/15 20:00:47 INTERNAL ERROR storing key {\u0026quot;Component\u0026quot;:\u0026quot;x3005c0s19b1n0\u0026quot;,\u0026quot;Last_hb_rcv_time\u0026quot;:\u0026quot;5f611d6f\u0026quot;,\u0026quot;Last_hb_timestamp\u0026quot;:\u0026quot;2020-09-15T15:00:47.893757-06:00\u0026quot;,\u0026quot;Last_hb_status\u0026quot;:\u0026quot;OK\u0026quot;,\u0026quot;Had_warning\u0026quot;:\u0026quot;\u0026quot;} : etcdserver: mvcc: database space exceeded [pod/cray-hbtd-56bc4f6fdb-92bqx/cray-hbtd] 2020/09/15 20:00:53 INTERNAL ERROR storing key {\u0026quot;Component\u0026quot;:\u0026quot;x3005c0s19b1n0\u0026quot;,\u0026quot;Last_hb_rcv_time\u0026quot;:\u0026quot;5f611d75\u0026quot;,\u0026quot;Last_hb_timestamp\u0026quot;:\u0026quot;2020-09-15T15:00:53.926195-06:00\u0026quot;,\u0026quot;Last_hb_status\u0026quot;:\u0026quot;OK\u0026quot;,\u0026quot;Had_warning\u0026quot;:\u0026quot;\u0026quot;} : etcdserver: mvcc: database space exceeded [pod/cray-hbtd-56bc4f6fdb-92bqx/cray-hbtd] 2020/09/15 20:01:02 INTERNAL ERROR storing key {\u0026quot;Component\u0026quot;:\u0026quot;x3005c0s19b1n0\u0026quot;,\u0026quot;Last_hb_rcv_time\u0026quot;:\u0026quot;5f611d7e\u0026quot;,\u0026quot;Last_hb_timestamp\u0026quot;:\u0026quot;2020-09-15T15:01:02.970168-06:00\u0026quot;,\u0026quot;Last_hb_status\u0026quot;:\u0026quot;OK\u0026quot;,\u0026quot;Had_warning\u0026quot;:\u0026quot;\u0026quot;} : etcdserver: mvcc: database space exceeded [pod/cray-hbtd-56bc4f6fdb-92bqx/cray-hbtd] 2020/09/15 20:01:05 INTERNAL ERROR storing key {\u0026quot;Component\u0026quot;:\u0026quot;x3005c0s19b1n0\u0026quot;,\u0026quot;Last_hb_rcv_time\u0026quot;:\u0026quot;5f611d81\u0026quot;,\u0026quot;Last_hb_timestamp\u0026quot;:\u0026quot;2020-09-15T15:01:05.983828-06:00\u0026quot;,\u0026quot;Last_hb_status\u0026quot;:\u0026quot;OK\u0026quot;,\u0026quot;Had_warning\u0026quot;:\u0026quot;\u0026quot;} : etcdserver: mvcc: database space exceeded   Check if the default 2G (unless defined different in the helm chart) disk usage has been exceeded.\nReplace ETCD_CLUSTER_NAME before running the following command. For example, cray-hbtd-etcd-6p4tc4jdgm could be used.\nncn-w001# kubectl exec -it -n services ETCD_CLUSTER_NAME -- sh Example output:\n# df -h Filesystem Size Used Available Use% Mounted on overlay 439.1G 15.2G 401.5G 4% / tmpfs 64.0M 0 64.0M 0% /dev tmpfs 125.7G 0 125.7G 0% /sys/fs/cgroup /dev/rbd3 7.8G 2.4G 5.4G 31% /var/etcd   Resolve the space issue by either increasing the frequency of how often the etcd-defrag cron job is run, or by triggering it manually.\nSelect one of the following options:\n  Increase the frequency of the kube-etcd-defrag from every 24 hours to 12 hours.\nncn-w001# kubectl edit -n operators cronjob.batch/kube-etcd-defrag Example output:\n[...] name: etcd-defrag name: etcd-defrag schedule: 0 */12 * * * successfulJobsHistoryLimit: 1 suspend: false status: [...]   Trigger the job manually.\nkubectl -n operators create job --from=cronjob/kube-etcd-defrag kube-etcd-defrag ncn-w001# kubectl -n operators create job \\ --from=cronjob/kube-etcd-defrag kube-etcd-defrag     Check the log messages after the defrag job is triggered.\nncn-w001# kubectl logs -f -n operators pod/kube-etcd-defrag-1600171200-fxpn7 Example output:\nDefragging cray-bos-etcd-j7czpr9pbr Defragging cray-bos-etcd-k4qtjtgqjb Defragging cray-bos-etcd-wcm8cs7dvc Defragging cray-bss-etcd-2h6k4l4j2g Defragging cray-bss-etcd-5dqwvrdtnf Defragging cray-bss-etcd-zlwmzkcjhz Defragging cray-cps-etcd-6cqw8sw5k6 Defragging cray-cps-etcd-psjm9lpw66 Defragging cray-cps-etcd-rp6fp94ccv Defragging cray-crus-etcd-228mdpm2h6 Defragging cray-crus-etcd-hldtxr6f9s Defragging cray-crus-etcd-sfsckpv4vw Defragging cray-externaldns-etcd-6l772b2cdv [...]   Verify the disk space is less than the size limit.\nReplace ETCD_CLUSTER_NAME before running the following command. For example, cray-hbtd-etcd-6p4tc4jdgm could be used.\nncn-w001# kubectl exec -it -n services ETCD_CLUSTER_NAME -- sh Example output:\n# df -h Filesystem Size Used Available Use% Mounted on overlay 439.1G 15.2G 401.5G 4% / tmpfs 64.0M 0 64.0M 0% /dev tmpfs 125.7G 0 125.7G 0% /sys/fs/cgroup /dev/rbd3 7.8G 403.0M 7.4G 5% /var/etcd.   Turn off the NOSPACE alarm.\nReplace ETCD_CLUSTER_NAME before running the following command. For example, cray-hbtd-etcd-6p4tc4jdgm could be used.\nncn-w001# kubectl exec -it -n services ETCD_CLUSTER_NAME -- sh Example output:\n# ETCDCTL_API=3 etcdctl alarm disarm memberID:14039380531903955557 alarm:NOSPACE memberID:10060051157615504224 alarm:NOSPACE memberID:9418794810465807950 alarm:NOSPACE     "
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/configure_kubectl_credentials_to_access_the_kubernetes_apis/",
	"title": "Configure Kubectl Credentials To Access The Kubernetes Apis",
	"tags": [],
	"description": "",
	"content": "Configure kubectl Credentials to Access the Kubernetes APIs The credentials for kubectl are located in the admin configuration file on all non-compute node (NCN) master and worker nodes. They can be found at /etc/kubernetes/admin.conf for the root user. Use kubectl to access the Kubernetes cluster from a device outside the cluster.\nFor more information, refer to https://kubernetes.io/\nPrerequisites This procedure requires administrative privileges and assumes that the device being used has:\n kubectl is installed Access to the site admin network  Procedure   Access the credentials file used by kubectl at /etc/kubernetes/admin.conf on any one of the master or worker NCNs.\nIf copying this file to another system, be sure to set the environmental variable KUBECONFIG to the new location on that system.\n  Verify access by executing the following command:\nncn# kubectl get nodes If the command was successful, the system will return output similar to the following:\nNAME STATUS ROLES AGE VERSION ncn-m001 Ready control-plane,master 27h v1.20.13 ncn-m002 Ready control-plane,master 8d v1.20.13 ncn-m003 Ready control-plane,master 8d v1.20.13 ncn-w001 Ready \u0026lt;none\u0026gt; 8d v1.20.13 ncn-w002 Ready \u0026lt;none\u0026gt; 8d v1.20.13 ncn-w003 Ready \u0026lt;none\u0026gt; 8d v1.20.13 The information above is only an example and may appear differently than it is shown above.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/containerd/",
	"title": "Containerd",
	"tags": [],
	"description": "",
	"content": "Containerd Containerd is a daemonset that runs on the host. It is used to run containers on the Kubernetes platform.\n/var/lib/containerd filling up In older versions of containerd, there are cases where the /var/lib/containerd directory fills up. In the event that this occurs, the following steps can be used to remediate the issue.\n  Restart containerd on the NCN:\nncn-w001 # systemctl restart containerd Many times this will free up space in /var/lib/containerd \u0026ndash; if not proceed to Step 2. See notes below for subsequent steps that must be taken after containerd is restarted (independent of disk space issues).\n  Restart kubelet on the NCN:\nncn-w001 # systemctl restart kubelet If restarting kubelet fails to free up space in /var/lib/containerd, proceed to Step 3.\n  Prune unused container images on the NCN:\nncn-w001 # crictl rmi --prune Any unused images will be pruned. Finally, if still encountering disk space issues in /var/lib/containerd, proceed to the next step to reboot the NCN.\n  Reboot the NCN:\nFollow the Reboot_NCNs process to properly cordon/drain the NCN and reboot. Generally this final step will free up space in /var/lib/containerd.\n  Restart containerd If the containerd service is restarted on a worker node, this may cause the sonar-jobs-watcher pod running on that worker node to fail when attempting to cleanup unneeded containers. For example:\n  Restart containerd.\nncn-w001# systemctl restart containerd   Retrieve the name of the sonar-jobs-watcher pod.\nncn-w001# kubectl get pods -l name=sonar-jobs-watcher -n services -o wide | grep ncn-w001 Example output:\nsonar-jobs-watcher-8z6th 1/1 Running 0 95d 10.42.0.6 ncn-w001 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt;   View the logs for the sonar-jobs-watcher pod.\nncn-w001# kubectl logs sonar-jobs-watcher-8z6th -n services Example output:\nFound pod cray-dns-unbound-manager-1631116980-h69h6 with restartPolicy 'Never' and container 'manager' with status 'Completed' All containers of job pod cray-dns-unbound-manager-1631116980-h69h6 has completed. Killing istio-proxy (1c65dacb960c2f8ff6b07dfc9780c4621beb8b258599453a08c246bbe680c511) to allow job to complete time=\u0026quot;2021-09-08T16:44:18Z\u0026quot; level=fatal msg=\u0026quot;failed to connect: failed to connect, make sure you are running as root and the runtime has been started: context deadline exceeded\u0026quot; When this occurs, pods that are running on the node where containerd was restarted may remain in a NotReady state and never complete.\n  Check if pods are stuck in a NotReady state.\nncn-w001 # kubectl get pods -o wide -A | cray-dns-unbound-manager Example output:\nservices cray-dns-unbound-manager-1631116980-h69h6 1/2 NotReady 0 10m 10.42.0.100 ncn-w001 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt;   If pods are stuck in a NotReady state, restart the sonar-jobs-watcher daemonset to resolve the issue.\nOnce the sonar-jobs-watcher pods restart, the pod(s) that were in a NotReady state should complete within about a minute.\nncn-w001 # kubectl rollout restart -n services daemonset sonar-jobs-watcher daemonset.apps/sonar-jobs-watcher restarted will be returned when the pods have restarted.\n  To learn more in general about containerd, refer to https://containerd.io/.\n"
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/create_a_manual_backup_of_a_healthy_etcd_cluster/",
	"title": "Create A Manual Backup Of A Healthy Etcd Cluster",
	"tags": [],
	"description": "",
	"content": "Create a Manual Backup of a Healthy etcd Cluster Manually create a backup of a healthy etcd cluster and check to see if the backup was created successfully.\nBackups of healthy etcd clusters can be used to restore the cluster if it becomes unhealthy at any point.\nThe commands in this procedure can be run on any master node (ncn-mXXX) or worker node (ncn-wXXX) on the system.\nPrerequisites A healthy etcd cluster is available on the system. See Check the Health and Balance of etcd Clusters.\nProcedure   Create a backup for the desired etcd cluster.\nThe example below is backing up the etcd cluster for the Boot Orchestration Service (BOS). The returned backup name (cray-bos-etcd-cluster-manual-backup-25847) will be used in the next step.\nncn-w001# kubectl exec -it -n operators \\  $(kubectl get pod -n operators | grep etcd-backup-restore | head -1 | awk \u0026#39;{print $1}\u0026#39;) \\  -c util -- create_backup cray-bos wednesday-manual-backup Example output:\netcdbackup.etcd.database.coreos.com/cray-bos-etcd-cluster-manual-backup-25847 created   Check the status of the backup using the name returned in the output of the previous step.\nncn-w001# kubectl -n services get BACKUP_NAME -o yaml Example output:\nstatus: etcdRevision: 1 etcdVersion: 3.3.8 lastSuccessDate: \u0026#34;2020-01-13T21:38:47Z\u0026#34; succeeded: true   "
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/determine_if_pods_are_hitting_resource_limits/",
	"title": "Determine If Pods Are Hitting Resource Limits",
	"tags": [],
	"description": "",
	"content": "Determine if Pods are Hitting Resource Limits Determine if a pod is being CPU throttled or hitting its memory limits (OOMKilled). Use the detect_cpu_throttling.sh script to determine if any pods are being CPU throttled, and check the Kubernetes events to see if any pods are hitting a memory limit.\nIMPORTANT: The presence of CPU throttling does not always indicate a problem, but if a service is being slow or experiencing latency issues, this procedure can be used to evaluate if it is not performing well as a result of CPU throttling.\nIdentify pods that are hitting resource limits in order to increase the resource limits for those pods.\nPrerequisites kubectl is installed.\nProcedure   Use the detect_cpu_throttling.sh script to determine if any pods are being CP throttled.\n  Install the script.\nThe script can be installed on ncn-w001, or any NCN that can SSH to worker nodes.\nncn-w001# cat detect_cpu_throttling.sh #!/bin/sh # Usage: detect_cpu_throttling.sh [pod_name_substr] (default evaluates all pods) str=$1 : ${str:=.} while read ns pod node; do echo \u0026#34;\u0026#34; echo \u0026#34;Checking $pod\u0026#34; while read -r container; do uid=$(echo $container | awk \u0026#39;BEGIN { FS = \u0026#34;/\u0026#34; } ; {print $NF}\u0026#39;) ssh -T ${node} \u0026lt;\u0026lt;-EOF dir=$(find /sys/fs/cgroup/cpu,cpuacct/kubepods/burstable -name *${uid}* 2\u0026gt;/dev/null) [ \u0026#34;${dir}\u0026#34; = \u0026#34;\u0026#34; ] \u0026amp;\u0026amp; { dir=$(find /sys/fs/cgroup/cpu,cpuacct/system.slice/containerd.service -name *${uid}* 2\u0026gt;/dev/null); } if [ \u0026#34;${dir}\u0026#34; != \u0026#34;\u0026#34; ]; then num_periods=$(grep nr_throttled ${dir}/cpu.stat | awk \u0026#39;{print $NF}\u0026#39;) if [ ${num_periods} -gt 0 ]; then echo \u0026#34;*** CPU throttling for containerid ${uid}: ***\u0026#34; cat ${dir}/cpu.stat echo \u0026#34;\u0026#34; fi fi EOF done \u0026lt;\u0026lt;\u0026lt; \u0026#34;`kubectl -n $nsget pod $pod-o yaml | grep \u0026#39; - containerID\u0026#39;`\u0026#34; done \u0026lt;\u0026lt;\u0026lt;\u0026#34;$(kubectl get pods -A -o wide | grep $str | grep Running | awk \u0026#39;{print $1 \u0026#34; \u0026#34; $2 \u0026#34; \u0026#34; $8}\u0026#39;)\u0026#34;   Determine if any pods are being CPU throttled.\nThe script can be used in two different ways:\n    Pass in a substring of the desired pod name(s).\nIn the example below, the externaldns pods are being used.\nncn-w001# ./detect_cpu_throttling.sh externaldns Example output:\nChecking cray-externaldns-coredns-58b5f8494-c45kh Checking cray-externaldns-coredns-58b5f8494-pjvz6 Checking cray-externaldns-etcd-2kn7w6gnsx Checking cray-externaldns-etcd-88x4drpv27 Checking cray-externaldns-etcd-sbnbph52vh Checking cray-externaldns-external-dns-5bb8765896-w87wb *** CPU throttling: *** nr_periods 1127304 nr_throttled 473554 throttled_time 71962850825439   Call the script without a parameter to evaluate all pods.\nIt can take two minutes or more to run when evaluating all pods:\nncn-w001# ./detect_cpu_throttling.sh Example output:\nChecking benji-k8s-fsfreeze-9zlfk Checking benji-k8s-fsfreeze-fgqmd Checking benji-k8s-fsfreeze-qgbcp Checking benji-k8s-maint-796b444bfc-qcrhx Checking benji-k8s-postgresql-0 Checking benji-k8s-pushgateway-777fd86545-qrmbr [...]     Check if a pod was killed/restarted because it reached its memory limit.\n  Look for a Kubernetes event associated with the pod being killed/restarted.\nncn-w001# kubectl get events -A | grep -C3 OOM Example output:\ndefault 54m Warning OOMKilling node/ncn-w003 Memory cgroup out of memory: Kill process 1223856 (prometheus) score 1966 or sacrifice child default 44m Warning OOMKilling node/ncn-w003 Memory cgroup out of memory: Kill process 1372634 (prometheus) score 1966 or sacrifice child   Determine which pod was killed using the output above.\nUse grep on the string returned in the previous step to find the pod name. In this example, prometheus is used.\nncn-w001# kubectl get pod -A | grep prometheus     Follow the procedure to increase the resource limits for the pods identified in this procedure. See Increase Pod Resource Limits.\n"
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/disaster_recovery_postgres/",
	"title": "Disaster Recovery For Postgres",
	"tags": [],
	"description": "",
	"content": "Disaster Recovery for Postgres In the event that the Postgres cluster has failed to the point that it must be recovered and there is no dump available to restore the data, a full service specific disaster recovery is needed.\nBelow are the service specific steps required to cleanup any existing resources, redeploy the resources, and repopulate the data.\nDisaster recovery procedures by service:\n Restore HSM (Hardware State Manger) Postgres without a Backup Restore SLS (System Layout Service) Postgres without a Backup Restore Spire Postgres without a Backup Restore Keycloak Postgres without a Backup Restore console Postgres  Restore Keycloak Postgres without a backup The following procedures are required to rebuild the automatically populated contents of Keycloak\u0026rsquo;s PostgreSQL database if the database has been lost and recreated.\n  Re-run the keycloak-setup job.\n  Fetch the current job definition.\nncn-mw# kubectl get job -n services -l app.kubernetes.io/name=cray-keycloak -oyaml |\\  yq r - \u0026#39;items[0]\u0026#39; | yq d - \u0026#39;spec.selector\u0026#39; | \\  yq d - \u0026#39;spec.template.metadata.labels\u0026#39; \u0026gt; keycloak-setup.yaml There should be no output.\n  Restart the keycloak-setup job.\nncn-mw# kubectl replace --force -f keycloak-setup.yaml The output should be similar to the following:\njob.batch \u0026#34;keycloak-setup-1\u0026#34; deleted job.batch/keycloak-setup-1 replaced   Wait for the job to finish.\nncn-mw# kubectl wait --for=condition=complete -n services job -l app.kubernetes.io/name=cray-keycloak --timeout=-1s The output should be similar to the following:\njob.batch/keycloak-setup-1 condition met     Re-run the keycloak-users-localize job.\n  Fetch the current job definition.\nncn-mw# kubectl get job -n services -l app.kubernetes.io/name=cray-keycloak-users-localize -oyaml |\\  yq r - \u0026#39;items[0]\u0026#39; | yq d - \u0026#39;spec.selector\u0026#39; | \\  yq d - \u0026#39;spec.template.metadata.labels\u0026#39; \u0026gt; keycloak-users-localize.yaml There should be no output.\n  Restart the keycloak-users-localize job.\nncn-mw# kubectl replace --force -f keycloak-users-localize.yaml The output should be similar to the following:\njob.batch \u0026#34;keycloak-users-localize-1\u0026#34; deleted job.batch/keycloak-users-localize-1 replaced   Wait for the job to finish.\nncn-mw# kubectl wait --for=condition=complete -n services job -l app.kubernetes.io/name=cray-keycloak-users-localize --timeout=-1s The output should be similar to the following:\njob.batch/keycloak-users-localize-1 condition met     Restart keycloak-gatekeeper to pick up the newly generated client ID.\n  Restart the keycloak-gatekeeper pods.\nncn-mw# kubectl rollout restart deployment -n services cray-keycloak-gatekeeper-ingress   Expected output:\ndeployment.apps/cray-keycloak-gatekeeper-ingress restarted   Wait for the restart to complete.\nncn-mw# kubectl rollout status deployment -n services cray-keycloak-gatekeeper-ingress     Any other changes made to Keycloak, such as local users that have been created, will have to be manually re-applied.\nRestore console Postgres Many times the PostgreSQL database used for the console services may be restored to health using the techniques described in the following documents:\n Troubleshoot Postgres Database Recover from Postgres WAL Event  If the database is not able to be restored to health, follow the directions below to recover. There is nothing in the console services PostgreSQL database that needs to be backed up and restored. Once the database is healthy it will get rebuilt and populated by the console services from the current system. Recovery consists of uninstalling and reinstalling the Helm chart for the cray-console-data service.\n  Determine the version of cray-console-data that is deployed.\nncn-mw# helm history -n services cray-console-data Output similar to the following will be returned:\nREVISION UPDATED STATUS CHART APP VERSION DESCRIPTION 1 Thu Sep 2 19:56:24 2021 deployed cray-console-data-1.0.8 1.0.8 Install complete Note the version of the helm chart that is deployed.\n  Get the correct Helm chart package to reinstall.\nCopy the chart from the local Nexus repository into the current directory:\n Replace the version in the following example with the version noted in the previous step.\n ncn-mw# wget https://packages.local/repository/charts/cray-console-data-1.0.8.tgz   Uninstall the current cray-console-data service.\nncn-mw# helm uninstall -n services cray-console-data Example output:\nrelease \u0026#34;cray-console-data\u0026#34; uninstalled   Wait for all resources to be removed.\n  Watch the deployed pods terminate.\nWatch the services from the cray-console-data Helm chart as they are terminated and removed:\nncn-mw# watch -n .2 \u0026#39;kubectl -n services get pods | grep cray-console-data\u0026#39; Output similar to the following will be returned:\ncray-console-data-764f9d46b5-vbs7w 2/2 Running 0 4d20h cray-console-data-postgres-0 3/3 Running 0 20d cray-console-data-postgres-1 3/3 Running 0 20d cray-console-data-postgres-2 3/3 Terminating 0 4d20h This may take several minutes to complete. When all of the services have terminated and nothing is displayed any longer, use ctrl-C to exit from the watch command.\n  Check that the data PVC instances have been removed.\nncn-mw# kubectl -n services get pvc | grep console-data-postgres There should be no PVC instances returned by this command. If there are, delete them manually with the following command:\nReplace the name of the PVC in the following example with the PVC to be deleted.\nncn-mw# kubectl -n services delete pvc pgdata-cray-console-data-postgres-0 Repeat until all of the `pgdata-cray-console-data-postgres-' instances are removed.\n    Install the Helm chart.\nInstall using the file downloaded previously:\nncn-mw# helm install -n services cray-console-data ./cray-console-data-1.0.8.tgz Example output:\nNAME: cray-console-data LAST DEPLOYED: Mon Oct 25 22:44:49 2021 NAMESPACE: services STATUS: deployed REVISION: 1 TEST SUITE: None   Verify that all services restart correctly.\n  Watch the services come back up again.\nncn-mw# watch -n .2 \u0026#39;kubectl -n services get pods | grep cray-console-data\u0026#39; After a little time, expected output should look similar to:\ncray-console-data-764f9d46b5-vbs7w 2/2 Running 0 5m cray-console-data-postgres-0 3/3 Running 0 4m cray-console-data-postgres-1 3/3 Running 0 3m cray-console-data-postgres-2 3/3 Running 0 2m It will take a few minutes after these services are back up and running for the console services to settle and rebuild the database.\n  Query cray-console-operator for a node location.\nAfter a few minutes, query cray-console-operator to find the pod a particular node is connected to.\nIn the following example, replace the cray-console-operator pod name with the actual name of the running pod, and replace the component name (xname) with an actual node xname on the system.\nncn-mw# kubectl -n services exec -it cray-console-operator-7fdc797f9f-xz8rt -- sh -c \u0026#39;/app/get-node x9000c3s3b0n1\u0026#39; Example output:\n{\u0026#34;podname\u0026#34;:\u0026#34;cray-console-node-0\u0026#34;} This confirms that the cray-console-data service is up and operational.\n    "
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/increase_kafka_pod_resource_limits/",
	"title": "Increase Kafka Pod Resource Limits",
	"tags": [],
	"description": "",
	"content": "Increase Kafka Pod Resource Limits For larger scale systems, the Kafka resource limits may need to be increased. See Increase Pod Resource Limits for details on how to increase limits.\nIncrease Kafka Resource Limits Example\nFor a 1500 compute node system, increasing the cpu count to 6 and memory limits to 128G should be adequate.\n"
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/increase_pod_resource_limits/",
	"title": "Increase Pod Resource Limits",
	"tags": [],
	"description": "",
	"content": "Increase Pod Resource Limits Increase the appropriate resource limits for pods after determining if a pod is being CPU throttled or OOMKilled.\nReturn Kubernetes pods to a healthy state with resources available.\nPrerequisites  kubectl is installed. The names of the pods hitting their resource limits are known. See Determine if Pods are Hitting Resource Limits.  Procedure   Determine the current limits of a pod.\nIn the example below, cray-hbtd-etcd-8r2scmpb58 is the POD_ID being used.\nncn-w001# kubectl get po -n services POD_ID -o yaml Look for the following section returned in the output:\n[...] resources: limits: cpu: \u0026quot;2\u0026quot; memory: 2Gi requests: cpu: 10m memory: 64Mi   Determine which Kubernetes entity (etcdcluster, deployment, statefulset) is creating the pod.\nThe Kubernetes entity can be found with either of the following options:\n  Find the Kubernetes entity and grep for the pod in question.\nReplace hbtd-etcd with the pod being used.\nncn-w001# kubectl get deployment,statefulset,etcdcluster,postgresql,daemonsets \\ -A | grep hbtd-etcd Example output:\nservices etcdcluster.etcd.database.coreos.com/cray-hbtd-etcd 32d   Describe the pod and look in the Labels section.\nThis section is helpful for tracking down which entity is creating the pod.\nncn-w001# kubectl describe pod -n services POD_ID Example output:\n[...] Labels: app=etcd etcd_cluster=cray-hbtd-etcd etcd_node=cray-hbtd-etcd-8r2scmpb58 [...]     Edit the entity.\nIn the example below, the ENTITY is etcdcluster and the CLUSTER_NAME is cray-hbtd-etcd.\nncn-w001# kubectl edit ENTITY -n services CLUSTER_NAME   Increase the resource limits for the pod.\n resources: {} Replace the text above with the following section, increasing the limits value(s):\n resources: limits: cpu: \u0026quot;4\u0026quot; memory: 8Gi requests: cpu: 10m memory: 64Mi   Run a rolling restart of the pods.\nncn-w001# kubectl get po -n services | grep CLUSTER_NAME Example output:\ncray-hbtd-etcd-8r2scmpb58 1/1 Running 0 5d11h cray-hbtd-etcd-qvz4zzjzw2 1/1 Running 0 5d11h cray-hbtd-etcd-vzjzmbn6nr 1/1 Running 0 5d11h   Kill the pods off one by one.\nncn-w001# kubectl -n services delete pod POD_ID   Wait for a replacement pod to come up and be in a Running state before proceeding to the next pod.\nThey should all be running with a more recent age.\nncn-w001# kubectl get po -n services | grep CLUSTER_NAME Example output:\ncray-hbtd-etcd-8r2scmpb58 1/1 Running 0 12s cray-hbtd-etcd-qvz4zzjzw2 1/1 Running 0 32s cray-hbtd-etcd-vzjzmbn6nr 1/1 Running 0 98s   "
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/kubernetes/",
	"title": "Kubernetes",
	"tags": [],
	"description": "",
	"content": "Kubernetes The system management components are broken down into a series of micro-services. Each service is independently deployable, fine-grained, and uses lightweight protocols. As a result, the system\u0026rsquo;s micro-services are modular, resilient, and can be updated independently. Services within this architecture communicate via REST APIs.\nAbout Kubernetes Kubernetes is a portable and extensible platform for managing containerized workloads and services. Kubernetes serves as a micro-services platform on the system that facilitates application deployment, scaling, and management. The system uses Kubernetes for container orchestration.\nResiliency The resiliency feature of Kubernetes ensures that the desired number of deployments of a micro-service are always running on one or more NCNs. In addition, Kubernetes ensures that if one NCN becomes unresponsive, the micro-services that were running on it are migrated to another NCN that is up and meets the requirements of the micro-services.\nKubernetes Components Kubernetes components can be divided into:\n Master components - Kubernetes master components provide the cluster\u0026rsquo;s control plane. These components make global decisions about the cluster, such as scheduling, and responding to cluster events. Worker components - A Kubernetes worker is a node that provides services necessary to run application containers. It is managed by the Kubernetes master. Node components run on every node and keep pods running, while providing the Kubernetes runtime environment.  An etcd cluster is used for storage and state management of the Kubernetes cluster.\n"
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/kubernetes_networking/",
	"title": "Kubernetes Networking",
	"tags": [],
	"description": "",
	"content": "Kubernetes Networking Every Kubernetes pod has an IP address in the pod network that is reachable within the cluster. The system uses the weave-net plugin for inter-node communication.\nAccess services from outside the cluster All services with a REST API must be accessed from outside the cluster using the Istio Ingress Gateway. This gateway can be accessed using a URL in the following format:\nhttps://api.cmn.SYSTEM-NAME_DOMAIN-NAME https://api.can.SYSTEM-NAME_DOMAIN-NAME https://api.chn.SYSTEM-NAME_DOMAIN-NAME The API requests then get routed to the appropriate node running that service.\nAccess services from within the cluster All services running inside the cluster can access each other using their Pod IP address or the service\u0026rsquo;s cluster IP address, along with the service\u0026rsquo;s exposed port. The exception to this is a service that has a Cray REST API. These services are configured such that they must be accessed through the API gateway service.\nNetwork Policies Kubernetes supports network policies to limit access to pods. Therefore, services running inside the cluster generally cannot access each other using their Pod IP address or the service\u0026rsquo;s cluster IP address. Any other services that must be accessed through a protocol other than REST, can do so using the cluster VIP and the service\u0026rsquo;s NodePort. Only services that are configured to expose a NodePort or ExternalIP can be accessed from outside the cluster.\nAs part of the SMS installation, the following network policies are configured on the system:\n keycloak-database: Allows only keycloak to access the keycloak Postgres instance sma-zookeeper: Allows only Apache Kafka to access the SMA Zookeeper instance sma-postgres: Allows only Grafana to access the SMA Postgres instance hms-mariadb: Allows only SMD to access the MariaDB instance hms-badger: Allows only badger services to access the badger Postgres instance api-gateway-database: Allows only the API gateway to access the API gateway Postgres instance api-gateway-upstream: Allows only the API gateway to access the upstream services vcs-database: Allows only Gitea to access the VCS instance  To learn more about Kubernetes, refer to https://kubernetes.io/.\n"
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/kubernetes_storage/",
	"title": "Kubernetes Storage",
	"tags": [],
	"description": "",
	"content": "Kubernetes Storage Data belonging to micro-services in the management cluster is managed through persistent storage, which provides reliable and resilient data protection for containers running in the Kubernetes cluster.\nThe backing storage for this service is currently provided by JBOD disks that are spread across several nodes of the management cluster. These node disks are managed by Ceph, and are exposed to containers in the form of persistent volumes.\n"
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/pod_resource_limits/",
	"title": "Pod Resource Limits",
	"tags": [],
	"description": "",
	"content": "Pod Resource Limits Kubernetes uses resource requests and Quality of Service (QoS) for scheduling pods. Resource requests can be provided explicitly for pods and containers, whereas pod QoS is implicit, based on the resource requests and limits of the containers in the pod. There are three types of QoS:\n Guaranteed: All containers in a pod have explicit memory and CPU resource requests and limits. For each resource, the limit equals the request. Burstable: Does not meet Guaranteed requirements, but some of the containers have explicit memory and CPU resource requests or limits. BestEffort: None of the containers specify any resources.  Kubernetes will best be able to schedule pods when there are resources associated with each container in each pod.\nResource Limits For systems, all containers should have explicit resource requests and limits. Most pods should fall into the Burstable category. Containers that have resource requests equal to the resource limits should be reserved for very well behaved containers, and will usually be simple, single-function containers. One example of this could be an init container that is waiting for another resource to become available.\nResource limits are set by default at the namespace level, but pods within that namespace can increase or decrease their limits depending on the nature of the workload.\n"
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/about_etcd/",
	"title": "About Etcd",
	"tags": [],
	"description": "",
	"content": "About etcd The system uses etcd for storing all of its cluster data. It is an open source database that is excellent for maintaining the state of Kubernetes. Failures in the etcd cluster at the heart of Kubernetes will cause a failure of Kubernetes. To mitigate this risk, the system is deployed with etcd on dedicated disks and with a specific configuration to optimize Kubernetes workloads. The system also provides additional etcd cluster(s) as necessary to help maintain an operational state of services. These additional clusters are managed by a Kubernetes operator and do not interact with the core Kubernetes etcd service.\nTo learn more about etcd, refer to the following links:\n General documentation - https://github.com/etcd-io/etcd README - https://github.com/etcd-io/etcd/tree/master/etcdctl etcd upstream performance - https://etcd.io/docs/v3.5/benchmarks/  Usage of etcd on the System Communication between etcd machines is handled via the Raft consensus algorithm. Latency from the etcd leader is the most important metric to track because severe latency will introduce instability within the cluster. Raft is only as fast as the slowest machine in the majority. This problem can be mitigated by properly tuning the cluster.\netcd is a highly available key value store that runs on the three non-compute nodes (NCNs) that act as Kubernetes worker nodes. The three node cluster size deployment is used to meet the minimum requirements for resiliency. Scaling to more nodes will provide more resiliency, but it will not provide more speed. For example, one write to the cluster is actually three writes, so one to each instance. Scaling to five or more instances in a cluster would mean that one write will actually equal five writes to the cluster.\nThe system utilizes etcd in two major ways:\n etcd running on bare-metal with a dedicated disk partition  Supports only Kubernetes Includes a dedicated partition to provide the best throughput and scalability  Enables the Kubernetes services to be scaled, as well as the physical nodes running those services Run on the Kubernetes master nodes and will not relocate  Handles replication and instance re-election in the event of a node failure   Backed up to a Ceph Rados Gateway (S3 compatible) bucket     etcd running via a Kubernetes operator  Services utilize this to deploy an etcd cluster on the worker nodes The etcd pods are mobile and will relocate in the event of a pod or node failure Each etcd cluster can be backed up to a Ceph Rados Gateway (S3 compatible) bucket  This option is decided by the service owner or developer as some information has an extremely short lifespan, and by the time the restore could be performed, the data would be invalid      "
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/about_kubectl/",
	"title": "About Kubectl",
	"tags": [],
	"description": "",
	"content": "About kubectl kubectl is a CLI that can be used to run commands against a Kubernetes cluster. The format of the kubectl command is shown below:\nncn# kubectl COMMAND RESOURCE_TYPE RESOURCE_NAME FLAGS An example of using kubectl to retrieve information about a pod is shown below:\nncn# kubectl get pod POD_NAME1 POD_NAME2 kubectl is installed by default on the non-compute node (NCN) image. To learn more about kubectl, refer to https://kubernetes.io/docs\n"
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/about_kubernetes_taints_and_labels/",
	"title": "About Kubernetes Taints And Labels",
	"tags": [],
	"description": "",
	"content": "About Kubernetes Taints and Labels Kubernetes labels control node affinity, which is the property of pods that attracts them to a set of nodes. On the other hand, Kubernetes taints enable a node to repel a set of pods. In addition, pods can have tolerances for taints to allow them to run on nodes with certain taints.\nTaints are controlled with the kubectl taint nodes command, while node labels for various nodes can be customized with a configmap that contains the desired values. For a description of how to modify the default node labels, refer to the Customer Access Network (CAN) documentation.\nThe list of existing labels can be retrieved using the following command:\nncn# kubectl get nodes --show-labels To learn more, refer to https://kubernetes.io/.\n"
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/about_postgres/",
	"title": "About Postgres",
	"tags": [],
	"description": "",
	"content": "About Postgres The system uses PostgreSQL (known as Postgres) as a database solution. Postgres databases use SQL language to store and manage databases on the system.\nTo learn more about Postgres, see https://www.postgresql.org/docs/.\nThe Patroni tool can be used to manage and maintain information in a Postgres database. It handles tasks such as listing cluster members and the replication status, configuring and restarting databases, and more. For more information about this tool, refer to Troubleshoot Postgres Database.\n"
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/backups_for_etcd-operator_clusters/",
	"title": "Backups For Etcd-operator Clusters",
	"tags": [],
	"description": "",
	"content": "Backups for etcd-operator Clusters Backups are periodically created for etcd clusters. These backups are stored in the Ceph Rados Gateway (S3). Not all services are backed up automatically. Services that are not backed up automatically will need to be manually rediscovered if the cluster is unhealthy.\nClusters with Automated Backups The following services are backed up (daily, one week\u0026rsquo;s worth of backups retained) as part of the automated solution:\n Boot Orchestration Service (BOS) Boot Script Service (BSS) Compute Rolling Upgrade Service (CRUS) External DNS Firmware Action Service (FAS) User Access Service (UAS)  Run the following command on any master node (ncn-mXXX) or the first worker node (ncn-w001) to list the backups for a specific project. In the example below, the backups for BSS are listed.\nncn-w001# kubectl exec -it -n operators $(kubectl get pod -n operators \\ | grep etcd-backup-restore | head -1 | awk \u0026#39;{print $1}\u0026#39;) \\ -c boto3 -- list_backups cray-bss Example output:\ncray-bss/etcd.backup_v1450_2020-01-30-20:44:41 cray-bss/etcd.backup_v4183_2020-02-01-20:45:48 cray-bss/etcd.backup_v5771_2020-02-02-20:45:48 cray-bss/etcd.backup_v7210_2020-02-03-20:45:48 To view all available backups across all projects:\nncn-w001# kubectl exec -it -n operators $(kubectl get pod -n operators \\ | grep etcd-backup-restore | head -1 | awk \u0026#39;{print $1}\u0026#39;) -c boto3 -- list_backups \u0026#34;\u0026#34; Example output:\nbare-metal/etcd-backup-2020-02-03-14-40-07.tar.gz bare-metal/etcd-backup-2020-02-03-14-50-03.tar.gz bare-metal/etcd-backup-2020-02-03-15-00-10.tar.gz bare-metal/etcd-backup-2020-02-03-15-10-06.tar.gz bare-metal/etcd-backup-2020-02-03-15-30-05.tar.gz bare-metal/etcd-backup-2020-02-03-15-40-01.tar.gz bare-metal/etcd-backup-2020-02-03-15-50-08.tar.gz cray-bos/etcd.backup_v1200_2020-02-03-20:45:48 cray-bos/etcd.backup_v240_2020-01-30-20:44:34 cray-bos/etcd.backup_v480_2020-01-31-20:44:34 cray-bos/etcd.backup_v720_2020-02-01-20:45:48 cray-bos/etcd.backup_v960_2020-02-02-20:45:48 cray-bss/etcd.backup_v1450_2020-01-30-20:44:41 cray-bss/etcd.backup_v4183_2020-02-01-20:45:48 [...] The returned output includes the date and time of the latest backup for each service. If a recent backup for any service is not included, it is an indication that the service is not backed up automatically. Create a manual backup for that service by following the Create a Manual Backup of a Healthy etcd Cluster procedure.\nClusters without Automated Backups The following projects are not backed up as part of the automated solution:\n Heartbeat Tracking Daemon (HBTD) HMS Notification Fanout Daemon (HMNFD) River Endpoint Discovery Service (REDS) Content Projection Service (CPS)  If these clusters become unhealthy, the process for rediscovering their data should be followed. See Repopulate Data in etcd Clusters When Rebuilding Them.\n"
},
{
	"uri": "/docs-csm/en-12/operations/",
	"title": "Cray System Management Administration Guide",
	"tags": [],
	"description": "",
	"content": "Cray System Management (CSM) Administration Guide The Cray System Management (CSM) operational activities are administrative procedures required to operate an HPE Cray EX system with CSM software installed.\nThe following administrative topics can be found in this guide:\n CSM product management Pre-install Image management Boot orchestration System power off procedures System power on procedures Power management Artifact management Compute rolling upgrades Configuration management Kubernetes Package repository management Security and authentication Resiliency ConMan Utility storage System management health System Layout Service (SLS) System configuration service Hardware State Manager (HSM) Hardware Management (HM) collector HPE Power Distribution Unit (PDU) Node management Network  Management network Customer accessible networks (CMN/CAN/CHN) Dynamic Host Configuration Protocol (DHCP) Domain Name Service (DNS) External DNS MetalLB in BGP-mode   Spire Update firmware with FAS User Access Service (UAS)  CSM product management  Validate CSM Health Configure Keycloak Account Configure the Cray Command Line Interface (Cray CLI) Change Passwords and Credentials Configure Non-Compute Nodes with CFS Configure CSM Packages with CFS Perform NCN Personalization Access the LiveCD USB Device After Reboot Post-Install Customizations Validate Signed RPMs  Pre-install General information on what needs to be done before the initial install of CSM.\n Pre-Install Steps Change Air-Cooled BMC Credentials Change ServerTech PDU Credentials  Image management Build and customize image recipes with the Image Management Service (IMS).\n Image Management Image Management Workflows Upload and Register an Image Recipe Build a New UAN Image Using the Default Recipe Build an Image Using IMS REST Service Import External Image to IMS Customize an Image Root Using IMS  Create UAN Boot Images Convert TGZ Archives to SquashFS Images   Delete or Recover Deleted IMS Content Configure IMS to Validate RPMs  Boot orchestration Use the Boot Orchestration Service (BOS) to boot, configure, and shut down collections of nodes.\n Boot Orchestration Service (BOS) BOS Workflows BOS Session Templates  Manage a Session Template Create a Session Template to Boot Compute Nodes with CPS Boot UANs   BOS Sessions  Manage a BOS Session View the Status of a BOS Session Limit the Scope of a BOS Session Configure the BOS Timeout When Booting Compute Nodes Kernel Boot Parameters Check the Progress of BOS Session Operations Clean Up Logs After a BOA Kubernetes Job Clean Up After a BOS/BOA Job is Completed or Cancelled Troubleshoot UAN Boot Issues Troubleshoot Booting Nodes with Hardware Issues   BOS Limitations for Gigabyte BMC Hardware Stage Changes without BOS Compute Node Boot Sequence  Healthy Compute Node Boot Process Node Boot Root Cause Analysis  Compute Node Boot Issue Symptom: Duplicate Address Warnings and Declined DHCP Offers in Logs Compute Node Boot Issue Symptom: Node is Not Able to Download the Required Artifacts Compute Node Boot Issue Symptom: Message About Invalid EEPROM Checksum in Node Console or Log Boot Issue Symptom: Node HSN Interface Does Not Appear or Show Detected Links Detected Compute Node Boot Issue Symptom: Node Console or Logs Indicate that the Server Response has Timed Out Tools for Resolving Compute Node Boot Issues Troubleshoot Compute Node Boot Issues Related to Unified Extensible Firmware Interface (UEFI) Troubleshoot Compute Node Boot Issues Related to Dynamic Host Configuration Protocol (DHCP) Troubleshoot Compute Node Boot Issues Related to the Boot Script Service Troubleshoot Compute Node Boot Issues Related to Trivial File Transfer Protocol (TFTP) Troubleshoot Compute Node Boot Issues Using Kubernetes Log File Locations and Ports Used in Compute Node Boot Troubleshooting Troubleshoot Compute Node Boot Issues Related to Slow Boot Times   Edit the iPXE Embedded Boot Script Redeploy the iPXE and TFTP Services Upload Node Boot Information to Boot Script Service (BSS)    System power off procedures Procedures required for a full power off of an HPE Cray EX system.\n System Power Off Procedures  Additional links to power off sub-procedures provided for reference. Refer to the main procedure linked above before using any of these sub-procedures:\n Prepare the System for Power Off Shut Down and Power Off Compute and User Access Nodes Save Management Network Switch Configuration Settings Power Off Compute and IO Cabinets Shut Down and Power Off the Management Kubernetes Cluster Power Off the External Lustre File System  System power on procedures Procedures required for a full power on of an HPE Cray EX system.\n System Power On Procedures  Additional links to power on sub-procedures provided for reference. Refer to the main procedure linked above before using any of these sub-procedures:\n Power On the External Lustre File System Power On and Start the Management Kubernetes Cluster Power On Compute and IO Cabinets Power On and Boot Compute and User Access Nodes Recover from a Liquid Cooled Cabinet EPO Event  Power management HPE Cray System Management (CSM) software manages and controls power out-of-band through Redfish APIs.\n Power Management Cray Advanced Platform Monitoring and Control (CAPMC) Liquid Cooled Node Power Management  User Access to Compute Node Power Data   Standard Rack Node Power Management Ignore Nodes with CAPMC Set the Turbo Boost Limit  Artifact management Use the Ceph Object Gateway Simple Storage Service (S3) API to manage artifacts on the system.\n Artifact Management Manage Artifacts with the Cray CLI Use S3 Libraries and Clients Generate Temporary S3 Credentials  Compute rolling upgrades Upgrade sets of compute nodes with the Compute Rolling Upgrade Service (CRUS) without requiring an entire set of nodes to be out of service at once. CRUS enables administrators to limit the impact on production caused from upgrading compute nodes by working through one step of the upgrade process at a time.\nNote: CRUS is deprecated in CSM 1.2.0. It will be removed in a future CSM release and replaced with BOS V2, which will provide similar functionality. See Deprecated features.\n Compute Rolling Upgrade Service (CRUS) CRUS Workflow Upgrade Compute Nodes with CRUS Troubleshoot Nodes Failing to Upgrade in a CRUS Session Troubleshoot a Failed CRUS Session Because of Unmet Conditions Troubleshoot a Failed CRUS Session Because of Bad Parameters  Configuration management The Configuration Framework Service (CFS) is available on systems for remote execution and configuration management of nodes and boot images.\n Configuration Management Configuration Layers  Create a CFS Configuration Update a CFS Configuration   Ansible Inventory  Specifying Hosts and Groups Manage Multiple Inventories in a Single Location   Configuration Sessions  Create a CFS Session with Dynamic Inventory Create an Image Customization CFS Session Set Limits for a Configuration Session Use a Specific Inventory for a Configuration Session Change the Ansible Verbosity Logs Set the ansible.cfg for a Session Delete CFS Sessions Automatic Session Deletion with sessionTTL Track the Status of a Session View Configuration Session Logs Troubleshoot Ansible Play Failures in CFS Sessions Troubleshoot CFS Session Failing to Complete   Configuration Management with the CFS Batcher CFS Flow Diagrams Configuration Management of System Components Ansible Execution Environments  Use a Custom ansible-cfg File Enable Ansible Profiling   CFS Global Options Version Control Service (VCS)  Git Operations VCS Branching Strategy Customize Configuration Values Update the Privacy Settings for Gitea Configuration Content Repositories Create and Populate a VCS Configuration Repository   Write Ansible Code for CFS  Target Ansible Tasks for Image Customization   CFS Key Management  Kubernetes The system management components are broken down into a series of micro-services. Each service is independently deployable, fine-grained, and uses lightweight protocols. As a result, the system\u0026rsquo;s micro-services are modular, resilient, and can be updated independently. Services within the Kubernetes architecture communicate using REST APIs.\n Kubernetes Architecture About kubectl  Configure kubectl Credentials to Access the Kubernetes APIs   About Kubernetes Taints and Labels Kubernetes Storage Kubernetes Networking Retrieve Cluster Health Information Using Kubernetes Pod Resource Limits  Determine if Pods are Hitting Resource Limits Increase Pod Resource Limits Increase Kafka Pod Resource Limits   About etcd  Check the Health and Balance of etcd Clusters Rebuild Unhealthy etcd Clusters Backups for etcd-operator Clusters Create a Manual Backup of a Healthy etcd Cluster Restore an etcd Cluster from a Backup Repopulate Data in etcd Clusters When Rebuilding Them Restore Bare-Metal etcd Clusters from an S3 Snapshot Rebalance Healthy etcd Clusters Check for and Clear etcd Cluster Alarms Report the Endpoint Status for etcd Clusters Clear Space in an etcd Cluster Database   About Postgres  Troubleshoot Postgres Database Recover from Postgres WAL Event Restore Postgres Disaster Recovery for Postgres View Postgres Information for System Databases   Troubleshoot Intermittent HTTP 503 Code Failures  Package repository management Repositories are added to systems to extend the system functionality beyond what is initially delivered. The Sonatype Nexus Repository Manager is the primary method for repository management. Nexus hosts the Yum, Docker, raw, and Helm repositories for software and firmware content.\n Package Repository Management Package Repository Management with Nexus Manage Repositories with Nexus Nexus Configuration Nexus Deployment Restrict Admin Privileges in Nexus Repair Yum Repository Metadata  Security and authentication Mechanisms used by the system to ensure the security and authentication of internal and external requests.\n System Security and Authentication Manage System Passwords  Update NCN Passwords Change Root Passwords for Compute Nodes Set NCN Image Root Password, SSH Keys, and Timezone  Set NCN Image Root Password, SSH Keys, and Timezone on PIT Node Set NCN Image Root Password, SSH Keys, and Timezone   Change EX Liquid-Cooled Cabinet Global Default Password Provisioning a Liquid-Cooled EX Cabinet CEC with Default Credentials Updating the Liquid-Cooled EX Cabinet Default Credentials after a CEC Password Change Update Default Air-Cooled BMC and Leaf-BMC Switch SNMP Credentials Change Air-Cooled Node BMC Credentials Change SNMP Credentials on Leaf-BMC Switches Update Default ServerTech PDU Credentials used by the Redfish Translation Service Change Credentials on ServerTech PDUs Add Root Service Account for Gigabyte Controllers Recovering from Mismatched BMC Credentials   SSH Keys Authenticate an Account with the Command Line Default Keycloak Realms, Accounts, and Clients  Certificate Types Change Keycloak Token Lifetime Change the Keycloak Admin Password Create a Service Account in Keycloak Retrieve the Client Secret for Service Accounts Get a Long-Lived Token for a Service Account Access the Keycloak User Management UI Create Internal User Accounts in the Keycloak Shasta Realm Delete Internal User Accounts in the Keycloak Shasta Realm Create Internal User Groups in the Keycloak Shasta Realm Remove Internal Groups from the Keycloak Shasta Realm Remove the Email Mapper from the LDAP User Federation Re-Sync Keycloak Users to Compute Nodes Keycloak Operations Configure Keycloak for LDAP/AD authentication Configure the RSA Plugin in Keycloak Preserve Username Capitalization for Users Exported from Keycloak Change the LDAP Server IP Address for Existing LDAP Server Content Change the LDAP Server IP Address for New LDAP Server Content Remove the LDAP User Federation from Keycloak Add LDAP User Federation Keycloak User Management with kcadm.sh Keycloak User Localization   Public Key Infrastructure (PKI)  PKI Certificate Authority (CA) Make HTTPS Requests from Sources Outside the Management Kubernetes Cluster Transport Layer Security (TLS) for Ingress Services PKI Services HashiCorp Vault Backup and Restore Vault Clusters Troubleshoot Common Vault Cluster Issues   API Authorization Manage Sealed Secrets  Resiliency HPE Cray EX systems are designed so that system management services (SMS) are fully resilient and that there is no single point of failure.\n Resiliency Resilience of System Management Services Restore System Functionality if a Kubernetes Worker Node is Down Recreate StatefulSet Pods on Another Node NTP Resiliency  ConMan ConMan is a tool used for connecting to remote consoles and collecting console logs. These node logs can then be used for various administrative purposes, such as troubleshooting node boot issues.\n Access Compute Node Logs Access Console Log Data Via the System Monitoring Framework (SMF) Manage Node Consoles Log in to a Node Using ConMan Establish a Serial Connection to NCNs Disable ConMan After System Software Installation Troubleshoot ConMan Blocking Access to a Node BMC Troubleshoot ConMan Failing to Connect to a Console Troubleshoot ConMan Asking for Password on SSH Connection  Utility storage Ceph is the utility storage platform that is used to enable pods to store persistent data. It is deployed to provide block, object, and file storage to the management services running on Kubernetes, as well as for telemetry data coming from the compute nodes.\n Utility Storage Collect Information about the Ceph Cluster Manage Ceph Services Adjust Ceph Pool Quotas Add Ceph OSDs Ceph Health States Ceph Daemon Memory Profiling Ceph Service Check Script Usage Ceph Orchestrator Usage Ceph Storage Types Dump Ceph Crash Data Identify Ceph Latency Issues Cephadm Reference Material Restore Nexus Data After Data Corruption Troubleshoot Failure to Get Ceph Health Troubleshoot a Down OSD Troubleshoot Ceph OSDs Reporting Full Troubleshoot System Clock Skew Troubleshoot an Unresponsive S3 Endpoint Troubleshoot Ceph-Mon Processes Stopping and Exceeding Max Restarts Troubleshoot Pods Multi-Attach Error Troubleshoot Large Object Map Objects in Ceph Health Troubleshoot Failure of RGW Health Check Troubleshooting Ceph MDS Reporting Slow Requests and Failure on Client  System management health Enable system administrators to assess the health of their system. Operators need to quickly and efficiently troubleshoot system issues as they occur and be confident that a lack of issues indicates the system is operating normally.\n System Management Health System Management Health Checks and Alerts Access System Management Health Services Configure Prometheus Email Alert Notifications Grafana Dashboards by Component  Troubleshoot Grafana Dashboard   Remove Kiali  System Layout Service (SLS) The System Layout Service (SLS) holds information about the system design, such as the physical locations of network hardware, compute nodes, and cabinets. It also stores information about the network, such as which port on which switch should be connected to each compute node.\n System Layout Service (SLS) Dump SLS Information Load SLS Database with Dump File Add Liquid-Cooled Cabinets to SLS Add UAN CAN IP Addresses to SLS Update SLS with UAN Aliases Add an alias to a service Create a Backup of the SLS Postgres Database Restore SLS Postgres Database from Backup Restore SLS Postgres without an Existing Backup  System configuration service The System Configuration Service (SCSD) allows administrators to set various BMC and controller parameters. These parameters are typically set during discovery, but this tool enables parameters to be set before or after discovery. The operations to change these parameters are available in the Cray CLI under the scsd command.\n System Configuration Service Configure BMC and Controller Parameters with SCSD Manage Parameters with the SCSD Service Set BMC Credentials  Hardware State Manager (HSM) Use the Hardware State Manager (HSM) to monitor and interrogate hardware components in the HPE Cray EX system, tracking hardware state and inventory information, and making it available via REST queries and message bus events when changes occur.\n Hardware State Manager (HSM) Hardware Management Services (HMS) Locking API  Lock and Unlock Management Nodes Manage HMS Locks   Component Groups and Partitions  Manage Component Groups Component Group Members Manage Component Partitions Component Partition Members Component Memberships   Hardware State Manager (HSM) State and Flag Fields HSM Roles and Subroles Add an NCN to the HSM Database Add a Switch to the HSM Database Create a Backup of the HSM Postgres Database Restore HSM Postgres from a Backup Restore HSM Postgres without a Backup Set BMC Management Role  Hardware Management (HM) collector The Hardware Management (HM) Collector is used to collect telemetry and Redfish events from hardware in the system.\n Adjust HM Collector resource limits and requests  HPE Power Distribution Unit (PDU) Procedures for managing and setting up HPE PDUs.\n HPE PDU Admin Procedure  Node management Monitor and manage compute nodes (CNs) and non-compute nodes (NCNs) used in the HPE Cray EX system.\n Node Management Node Management Workflows Rebuild NCNs  Identify Nodes and Update Metadata Prepare Storage Nodes Wipe Drives Power Cycle and Rebuild Nodes Adding a Ceph Node to the Ceph Cluster Customize PCIe Hardware Customize Disk Hardware Validate Boot Raid Validate Storage Node Final Validation Steps   Reboot NCNs  Check and Set the metalno-wipe Setting on NCNs   Enable Nodes Disable Nodes Find Node Type and Manufacturer Add additional Liquid-Cooled Cabinets to a System Updating Cabinet Routes on Management NCNs Move a liquid-cooled blade within a System  Removing a Liquid-cooled blade from a System Adding a Liquid-cooled blade to a System   Add a Standard Rack Node  Move a Standard Rack Node Move a Standard Rack Node (Same Rack/Same HSN Ports) Verify Node Removal   Clear Space in Root File System on Worker Nodes Troubleshoot Issues with Redfish Endpoint DiscoveryCheck for Redfish Events from Nodes Reset Credentials on Redfish Devices Access and Update Settings for Replacement NCNs Change Settings for HMS Collector Polling of Air Cooled Nodes Use the Physical KVM Launch a Virtual KVM on Gigabyte Nodes Launch a Virtual KVM on Intel Nodes Change Java Security Settings Configuration of NCN Bonding  Change Settings in the Bond Troubleshoot Interfaces with IP Address Issues   Troubleshoot Loss of Console Connections and Logs on Gigabyte Nodes Check the BMC Failover Mode Update Compute Node Mellanox HSN NIC Firmware TLS Certificates for Redfish BMCs  Add TLS Certificates to BMCs   Dump a Non-Compute Node Enable Passwordless Connections to Liquid Cooled Node BMCs  View BIOS Logs for Liquid Cooled Nodes   Configure NTP on NCNs Swap a Compute Blade with a Different System Update the Gigabyte Node BIOS Time S3FS Usage Guidelines  Network Overview of the several different networks supported by the HPE Cray EX system.\n Network Access to System Management Services Default IP Address Ranges Connect to the HPE Cray EX Environment  Management network HPE Cray EX systems can have network switches in many roles: spine switches, leaf switches, LeafBMC switches, and CDU switches. Newer systems have HPE Aruba switches, while older systems have Dell and Mellanox switches. Switch IP addresses are generated by Cray Site Init (CSI).\n HPE Cray EX Management Network Installation and Configuration Guide  Aruba Installation and Configuration Dell Installation and Configuration Mellanox Installation and Configuration   Update Management Network Firmware  Customer accessible networks (CMN/CAN/CHN) The customer accessible networks (CMN/CAN/CHN) provide access from outside the customer network to services, NCNs, and User Access Nodes (UANs) in the system.\n Customer Accessible Networks Externally Exposed Services Connect to the CMN and CAN CAN/CMN with Dual-Spine Configuration Troubleshoot CMN Issues  Dynamic Host Configuration Protocol (DHCP) The DHCP service on the HPE Cray EX system uses the Internet Systems Consortium (ISC) Kea tool. Kea provides more robust management capabilities for DHCP servers.\n DHCP Troubleshoot DHCP Issues  Domain Name Service (DNS) The central DNS infrastructure provides the structural networking hierarchy and datastore for the system.\n DNS Manage the DNS Unbound Resolver Enable ncsd on UANs Troubleshoot Common DNS Issues Troubleshoot PowerDNS  External DNS External DNS, along with the Customer Management Network (CMN), Border Gateway Protocol (BGP), and MetalLB, makes it simpler to access the HPE Cray EX API and system management services. Services are accessible directly from a laptop without needing to tunnel into a non-compute node (NCN) or override /etc/hosts settings.\n External DNS External DNS csi config init Input Values Update the cmn-external-dns Value Post-Installation Ingress Routing External DNS Failing to Discover Services Workaround Troubleshoot Connectivity to Services with External IP addresses Troubleshoot DNS Configuration Issues  MetalLB in BGP-mode MetalLB is a component in Kubernetes that manages access to LoadBalancer services from outside the Kubernetes cluster. There are LoadBalancer services on the Node Management Network (NMN), Hardware Management Network (HMN), and Customer Access Network (CAN).\nMetalLB can run in either Layer2-mode or BGP-mode for each address pool it manages. BGP-mode is used for the NMN, HMN, and CAN. This enables true load balancing (Layer2-mode does failover, not load balancing) and allows for a more robust layer 3 configuration for these networks.\n MetalLB in BGP-Mode MetalLB Configuration Check BGP Status and Reset Sessions Troubleshoot Services without an Allocated IP Address Troubleshoot BGP not Accepting Routes from MetalLB  Spire Spire provides the ability to authenticate nodes and workloads, and to securely distribute and manage their identities along with the credentials associated with them.\n Restore Spire Postgres without a Backup Troubleshoot Spire Failing to Start on NCNs Update Spire Intermediate CA Certificate  Update firmware with FAS The Firmware Action Service (FAS) provides an interface for managing firmware versions of Redfish-enabled hardware in the system. FAS interacts with the Hardware State Managers (HSM), device data, and image data in order to update firmware.\nSee Update Firmware with FAS for a list components that are upgradable with FAS. Refer to the HPC Firmware Pack (HFP) product stream to update firmware on other components.\n Update Firmware with FAS FAS CLI FAS Filters FAS Recipes FAS Admin Procedures FAS Use Cases Upload Olympus BMC Recovery Firmware into TFTP Server  User Access Service (UAS) The User Access Service (UAS) is a containerized service managed by Kubernetes that enables application developers to create and run user applications. Users launch a User Access Instance (UAI) using the cray command. Users can also transfer data between the Cray system and external systems using the UAI.\n User Access Service (UAS) End-User UAIs Special Purpose UAIs Elements of a UAI UAI Host Nodes UAI macvlans Network Attachments UAI Host Node Selection UAI Network Attachments Configure UAIs in UAS  UAI Images  Listing Registered UAI Images Register a UAI Image Retrieve UAI Image Registration Information Update a UAI Image Registration Delete a UAI Image Registration   Volumes  List Volumes Registered in UAS Add a Volume to UAS Obtain Configuration of a UAS Volume Update a UAS Volume Delete a Volume Configuration   Resource Specifications  List UAI Resource Specifications Create a UAI Resource Specification Retrieve Resource Specification Details Update a Resource Specification Delete a UAI Resource Specification   UAI Classes  List Available UAI Classes Create a UAI Class View a UAI Class Modify a UAI Class Delete a UAI Class     UAI Management  List UAIs Creating a UAI Examining a UAI Using a Direct Administrative Command Deleting a UAI   Legacy Mode User-Driven UAI Management  Configure A Default UAI Class for Legacy Mode Create and Use Default UAIs in Legacy Mode List Available UAI Images in Legacy Mode Create UAIs From Specific UAI Images in Legacy Mode   Broker Mode UAI Management  Configure End-User UAI Classes for Broker Mode Configure a Broker UAI class Start a Broker UAI Log in to a Broker UAI   UAI Images  Customize the Broker UAI Image Customize End-User UAI Images   Troubleshoot UAS Issues  Troubleshoot UAS by Viewing Log Output Troubleshoot UAIs by Viewing Log Output Troubleshoot Stale Brokered UAIs Troubleshoot UAI Stuck in ContainerCreating Troubleshoot Duplicate Mount Paths in a UAI Troubleshoot Missing or Incorrect UAI Images Troubleshoot UAIs with Administrative Access Troubleshoot Common Mistakes when Creating a Custom End-User UAI Image    "
},
{
	"uri": "/docs-csm/en-12/operations/image_management/customize_an_image_root_using_ims/",
	"title": "Customize An Image Root Using IMS",
	"tags": [],
	"description": "",
	"content": "Customize an Image Root Using IMS The Image Management Service (IMS) customization workflow sets up a temporary image customization environment within a Kubernetes pod and mounts the image to be customized in that environment. A system administrator then makes the desired changes to the image root within the customization environment.\nAfterwards, the IMS customization workflow automatically copies the NCN CA public key to /etc/cray/ca/certificate_authority.crt within the image root being customized, in order to enable secure communications between NCNs and client nodes. IMS then compresses the customized image root and uploads it and its associated initrd image and kernel image (needed to boot a node) to the artifact repository.\nPrerequisites  System management services (SMS) are running in a Kubernetes cluster on non-compute nodes (NCN) and include the following deployments:  cray-ims, the Image Management Service (IMS) cray-nexus, the Nexus repository manager service   kubectl is installed locally and configured to point at the SMS Kubernetes cluster. An IMS registered image root archive or a pre-built image root SquashFS archive is available to customize. The NCN Certificate Authority (CA) public key has been properly installed into the CA cache for this system. A token providing Simple Storage Service (S3) credentials has been generated. When customizing an image using IMS Image Customization, once inside the image root using chroot (if using a `jailed` environment), the image will only have access to whatever configuration the image already contains. In order to talk to services, including Nexus RPM repositories, the image root must first be configured with DNS and other settings. A base level of customization is provided by the default Ansible plays used by the Configuration Framework Service (CFS) to enable DNS resolution.  Limitations  The commands in this procedure must be run as the root user. Currently, the initrd image and kernel image are not regenerated automatically when the image root is changed. The admin must manually regenerate them while in the customization environment, if needed. Images in the .txz compressed format need to be converted to SquashFS in order to use IMS image customization.  Procedure   Check for an existing IMS public key.\n If it is known that a public key associated with the user account being used was not previously uploaded to the IMS service, then skip this step and proceed to upload the SSH public key to the IMS service.\n The following query may return multiple public key records. The correct one will have a name value including the current username in use.\nncn# cray ims public-keys list Example output excerpt:\n[[results]] public_key = \u0026#34;ssh-rsa AAAAB3NzaC1yc2EA ... AsVruw1Zeiec2IWt\u0026#34; id = \u0026#34;a252ff6f-c087-4093-a305-122b41824a3e\u0026#34; name = \u0026#34;username public key\u0026#34; created = \u0026#34;2018-11-21T17:19:07.830000+00:00\u0026#34;  If a public key associated with the username in use is not returned, then proceed to upload the SSH public key to the IMS service. Otherwise, if a public key associated with the username does exist, then note the value of its id field and proceed to record the IMS public key ID.    Upload the SSH public key to the IMS service.\n If an IMS public key record has already been created for the account being used, then note the value of its id field and proceed to record the IMS public key ID.\n The IMS debug/configuration shell relies on passwordless SSH. This SSH public key needs to be uploaded to IMS to enable interaction with the image customization environment later in this procedure.\nReplace the username value with the actual username being used on the system when setting the public key name.\nncn# cray ims public-keys create --name \u0026#34;username public key\u0026#34; --public-key ~/.ssh/id_rsa.pub Example output:\npublic_key = \u0026#34;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCl50gK4l9uupxC2KHxMpTNxPTJbnwEdWy1jst5W5LqJx9fdTrc9uNJ33HAq+WIOhPVGbLm2N4GX1WTUQ4+wVOSmmBBJnlu/l5rmO9lEGT6U8lKG8dA9c7qhguGHy7M7WBgdW/gWA16gwE/u8Qc2fycFERRKmFucL/Er9wA0/Qvz7/U59yO+HOtk5hvEz/AUkvaaoY0IVBfdNBCl59CIdZHxDzgXlXzd9PAlrXZNO8jDD3jyFAOvMMRG7py78zj2NUngvsWYoBcV3FcREZJU529uJ0Au8Vn9DRADyB4QQS2o+fa6hG9i2SzfY8L6vAVvSE7A2ILAsVruw1Zeiec2IWt\u0026#34; id = \u0026#34;a252ff6f-c087-4093-a305-122b41824a3e\u0026#34; name = \u0026#34;username public key\u0026#34; created = \u0026#34;2018-11-21T17:19:07.830000+00:00\u0026#34; Note the value of the id field and proceed to record the IMS public key ID.\n  Record the IMS public key ID.\nCreate a variable for the IMS public key id value noted previously.\nncn# IMS_PUBLIC_KEY_ID=a252ff6f-c087-4093-a305-122b41824a3e   Determine if the image root being used is in IMS and ready to be customized.\n If the image to be customized is already known to IMS, then proceed to Locate an IMS Image to Customize. If the image to be customized was created outside of IMS and is not yet known to IMS, then proceed to Import External Image to IMS. To build an image from an existing IMS recipe, proceed to Build an Image Using IMS REST Service.    Locate the IMS image record for the image that is being customized.\nncn# cray ims images list Example output excerpt:\n[[results]] created = \u0026#34;2018-12-04T17:25:52.482514+00:00\u0026#34; id = \u0026#34;4e78488d-4d92-4675-9d83-97adfc17cb19\u0026#34; name = \u0026#34;sles_15_image.squashfs\u0026#34; [results.link] type = \u0026#34;s3\u0026#34; path = \u0026#34;/4e78488d-4d92-4675-9d83-97adfc17cb19/sles_15_image.squashfs\u0026#34; etag = \u0026#34;\u0026#34;   Record the IMS image ID.\nCreate a variable for the id field value for the image that is being customized.\nncn# IMS_IMAGE_ID=4e78488d-4d92-4675-9d83-97adfc17cb19   Create an IMS job record in order to start the image customization job.\nAfter customizing the image, IMS will automatically upload any build artifacts (root file system, kernel, and initrd) to S3, and associate the S3 artifacts with IMS. Unfortunately, IMS is not able to dynamically determine the names of the Linux kernel and initrd to look for, because the file name for these vary depending upon Linux distribution, Linux version, dracut configuration, and more. Therefore the user must pass into IMS the name of the kernel and initrd in the resultant image root\u0026rsquo;s /boot directory.\nUse the following table to help determine the default kernel and initrd file names to specify when submitting the job to customize an image. These are just default names. Consult with the site administrator to determine if these names have been changed for a given image or recipe.\n   Recipe Recipe Name Kernel File Name initrd File Name     SLES 15 SP3 Barebones cray-sles15sp3-barebones vmlinuz initrd   COS cray-shasta-compute-sles15sp3.x86_64-1.4.66 vmlinuz initrd     Under normal circumstances, IMS customization jobs will download and mount the rootfs for the specified IMS image under the /mnt/image/image-root directory within the SSH shell. After SSHing into the job container, cd or chroot into the /mnt/image/image-root directory in order to interact with the image root being customized.\nOptionally, IMS can be told to create a jailed SSH environment by specifying the --ssh-containers-jail True parameter.\nA jailed environment lets users SSH into the SSH container and be immediately within the image root for the image being customized. Users do not need to cd or chroot into the image root. Using a jailed environment has some advantages, such as making the IMS SSH job shell look more like a compute node. This allows applications like the CFS to perform actions on both IMS job pods (pre-boot) and compute nodes (post-boot).\nBefore running the following command, replace the MY_CUSTOMIZED_IMAGE value with the name of the image root being used.\n ncn# cray ims jobs create \\  --job-type customize \\  --kernel-file-name vmlinuz \\  --initrd-file-name initrd \\  --artifact-id $IMS_IMAGE_ID \\  --public-key-id $IMS_PUBLIC_KEY_ID \\  --enable-debug False \\  --image-root-archive-name MY_CUSTOMIZED_IMAGE Example output:\nstatus = \u0026#34;creating\u0026#34; enable_debug = false kernel_file_name = \u0026#34;vmlinuz\u0026#34; artifact_id = \u0026#34;4e78488d-4d92-4675-9d83-97adfc17cb19\u0026#34; build_env_size = 10 job_type = \u0026#34;customize\u0026#34; kubernetes_service = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-service\u0026#34; kubernetes_job = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-customize\u0026#34; id = \u0026#34;ad5163d2-398d-4e93-94f0-2f439f114fe7\u0026#34; image_root_archive_name = \u0026#34;MY_CUSTOMIZED_IMAGE\u0026#34; initrd_file_name = \u0026#34;initrd\u0026#34; created = \u0026#34;2018-11-21T18:22:53.409405+00:00\u0026#34; kubernetes_namespace = \u0026#34;ims\u0026#34; public_key_id = \u0026#34;a252ff6f-c087-4093-a305-122b41824a3e\u0026#34; kubernetes_configmap = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-configmap\u0026#34; [[ssh_containers]] status = \u0026#34;pending\u0026#34; jail = false name = \u0026#34;customize\u0026#34; [ssh_containers.connection_info.\u0026#34;cluster.local\u0026#34;] host = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-service.ims.svc.cluster.local\u0026#34; port = 22 [ssh_containers.connection_info.customer_access] host = \u0026#34;ad5163d2-398d-4e93-94f0-2f439f114fe7.ims.cmn.shasta.cray.com\u0026#34; port = 22   Create variables for the IMS job ID and Kubernetes job ID.\nThe values for these variables are taken from the output of the command in the previous step. Set IMS_JOB_ID to the value of the id field. Set the IMS_KUBERNETES_JOB to the value of the kubernetes_job field.\nncn# IMS_JOB_ID=ad5163d2-398d-4e93-94f0-2f439f114fe7 ncn# IMS_KUBERNETES_JOB=cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-customize   Create variables for the SSH connection values in the returned data.\nThe IMS customization job enables customization of the image root via an SSH shell accessible by one or more dynamic host names. The user needs to know if they will SSH from inside or outside the Kubernetes cluster to determine which host name to use. Typically, customers access the system from outside the Kubernetes cluster using the Customer Access Network (CAN).\nBefore setting the SSH values, determine the appropriate method to SSH into the customization pod:\n [ssh_containers.connection_info.customer_access] values (preferred): The customer_access address is a dynamic hostname that is made available for use by the customer to access the IMS job from outside the Kubernetes cluster. [ssh_containers.connection_info.\u0026quot;cluster.local\u0026quot;] values: The cluster.local address is used when trying to access an IMS job from a pod that is running within the HPE Cray EX Kubernetes cluster. For example, this is the address that CFS uses to talk to the IMS job during a pre-boot customization session.  The external IP address should only be used if the dynamic customer_access hostname does not resolve properly. In the following example, the administrator could then SSH to the 10.103.2.160 IP address.\nncn# kubectl get services -n ims | grep $IMS_JOB_ID Example output:\ncray-ims-06c3dd57-f347-4229-85b3-1d024a947b3f-service LoadBalancer 10.29.129.204 10.103.2.160 22:31627/TCP 21h To create the variables:\nncn# IMS_SSH_HOST=ad5163d2-398d-4e93-94f0-2f439f114fe7.ims.cmn.shasta.cray.com ncn# IMS_SSH_PORT=22   Describe the image create job.\nncn# kubectl -n ims describe job $IMS_KUBERNETES_JOB Example output:\nName: cray-ims-cfa864b3-4e08-49b1-9c57-04573228fd3f-customize Namespace: default [...] Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal SuccessfulCreate 4m job-controller Created pod: cray-ims-cfa864b3-4e08-49b1-9c57-04573228fd3f-customize-xh2jf   Record the name of the Kubernetes pod from the previous command.\nThe name is located in the Events section of the output.\nncn# POD=cray-ims-cfa864b3-4e08-49b1-9c57-04573228fd3f-customize-xh2jf   Verify that the status of the IMS job is waiting_on_user.\nncn# cray ims jobs describe $IMS_JOB_ID Example output:\nstatus = \u0026#34;waiting_on_user\u0026#34; enable_debug = false kernel_file_name = \u0026#34;vmlinuz\u0026#34; artifact_id = \u0026#34;4e78488d-4d92-4675-9d83-97adfc17cb19\u0026#34; build_env_size = 10 job_type = \u0026#34;customize\u0026#34; kubernetes_service = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-service\u0026#34; kubernetes_job = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-customize\u0026#34; id = \u0026#34;ad5163d2-398d-4e93-94f0-2f439f114fe7\u0026#34; image_root_archive_name = \u0026#34;my_customized_image\u0026#34; initrd_file_name = \u0026#34;initrd\u0026#34; created = \u0026#34;2018-11-21T18:22:53.409405+00:00\u0026#34; kubernetes_namespace = \u0026#34;ims\u0026#34; public_key_id = \u0026#34;a252ff6f-c087-4093-a305-122b41824a3e\u0026#34; kubernetes_configmap = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-configmap\u0026#34; [[ssh_containers]] status = \u0026#34;pending\u0026#34; jail = false name = \u0026#34;customize\u0026#34; [ssh_containers.connection_info.\u0026#34;cluster.local\u0026#34;] host = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-service.ims.svc.cluster.local\u0026#34; port = 22 [ssh_containers.connection_info.customer_access] host = \u0026#34;ad5163d2-398d-4e93-94f0-2f439f114fe7.ims.cmn.shasta.cray.com\u0026#34; port = 22   Customize the image in the image customization environment.\n Once in the image root using chroot (or if using a `jailed` environment) during image customization, the image will only have access to whatever configuration the image already contains. In order to talk to services, including Nexus RPM repositories, the image root must first be configured with DNS and other settings. A base level of customization is provided by the default Ansible plays used by the CFS to enable DNS resolution.\n   Option 1: SSH to the image customization environment.\nIn order for passwordless SSH to work, ensure that the correct public/private key pair is used. The private key will need to match the public key that was uploaded to the IMS service and specified in the IMS job.\n IMPORTANT: The following command will work when run on any of the master nodes and worker nodes, except for ncn-w001.\n ncn# ssh -p $IMS_SSH_PORT root@$IMS_SSH_HOST Last login: Tue Sep 4 18:06:27 2018 from gateway [root@POD ~]# Once connected to the IMS image customization shell, perform any customizations required. If the SSH shell was created without using the --ssh-containers-jail True parameter, cd or chroot into the image root. The image root is available under /mnt/image/image-root.\nAfter changes have been made, run the touch command on the complete file. The location of the complete file depends on whether or not the SSH job shell was created using the --ssh-containers-jail True parameter. See the table below for more information.\n   --ssh-containers-jail Command used to create the complete file     False (default) touch /mnt/image/complete   True touch /tmp/complete    [root@POD image]# cd /mnt/image/ [root@POD image]# chroot image-root/ :/ # (do touch complete flag) :/ # exit [root@POD image]# When the complete file has been created, the following actions will occur:\n The job SSH container will close any active SSH connections. The buildenv-sidecar container will compresses the image root. The customized artifacts will be uploaded to S3 and associated with a new IMS image record.    Option 2: Use Ansible to run playbooks against the image root.\nncn# ansible all -i $IMS_SSH_HOST, -m ping --ssh-extra-args \\  \u0026#34; -p $IMS_SSH_PORT-i ./pod_rsa_key -o StrictHostKeyChecking=no\u0026#34; -u root Example output:\nad5163d2-398d-4e93-94f0-2f439f114fe7.ims.cmn.shasta.cray.com | SUCCESS =\u0026gt; { \u0026#34;changed\u0026#34;: false, \u0026#34;ping\u0026#34;: \u0026#34;pong\u0026#34; } The Ansible inventory file below can also be used. The private key (./pod_rsa_key) corresponds to the public key file the container has in its authorized_keys file.\nmyimage-customize ansible_user=root ansible_host=ad5163d2-398d-4e93-94f0-2f439f114fe7.ims.cmn.shasta.cray.com ansible_port=22 \\ ansible_ssh_private_key_file=./pod_rsa_key ansible_ssh_common_args=\u0026#39;-o \\ StrictHostKeyChecking=no\u0026#39; A sample playbook can be run on the image root:\n--- # The playbook creates a new database test and populates data in the database to test the sharding. - hosts: all remote_user: root tasks: - name: Look at the image root command: \u0026#34;ls -l /mnt/image/image-root\u0026#34; - name: chroot and run dracut command: \u0026#34;chroot /mnt/image/image-root dracut --force --kver 4.4.143-94.47-default\u0026#34; - name: example copying file with owner and permissions copy: src: sample_playbook.yml dest: /mnt/image/image-root/tmp - name: Exit the build container copy: src: nothing_file dest: /mnt/image/complete The sample playbook can be run with the following command:\nncn# ansible-playbook -i ./inventory.ini sample_playbook.yml     Follow the buildenv-sidecar to ensure that any artifacts are properly uploaded to S3 and associated with IMS.\nncn# kubectl -n ims logs -f $POD -c buildenv-sidecar Example output:\n+ python -m ims_python_helper image upload_artifacts sles15_barebones_image 7de80ccc-1e7d-43a9-a6e4-02cad10bb60b -v -r /mnt/image/sles15_barebones_image.sqsh -k /mnt/image/image-root/boot/vmlinuz -i /mnt/image/image-root/boot/initrd ... { \u0026#34;ims_image_artifacts\u0026#34;: [ { \u0026#34;link\u0026#34;: { \u0026#34;etag\u0026#34;: \u0026#34;4add976679c7e955c4b16d7e2cfa114e-32\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/d88521c3-b339-43bc-afda-afdfda126388/rootfs\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34; }, \u0026#34;md5\u0026#34;: \u0026#34;94165af4373e5ace3e817eb4baba2284\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;application/vnd.cray.image.rootfs.squashfs\u0026#34; }, { \u0026#34;link\u0026#34;: { \u0026#34;etag\u0026#34;: \u0026#34;f836412241aae79d160556ed6a4eb4d4\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/d88521c3-b339-43bc-afda-afdfda126388/kernel\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34; }, \u0026#34;md5\u0026#34;: \u0026#34;f836412241aae79d160556ed6a4eb4d4\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;application/vnd.cray.image.kernel\u0026#34; }, { \u0026#34;link\u0026#34;: { \u0026#34;etag\u0026#34;: \u0026#34;ec8793c07f94e59a2a30abdb1bd3d35a-4\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/d88521c3-b339-43bc-afda-afdfda126388/initrd\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34; }, \u0026#34;md5\u0026#34;: \u0026#34;86832ee3977ca0515592e5d00271d2fe\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;application/vnd.cray.image.initrd\u0026#34; }, { \u0026#34;link\u0026#34;: { \u0026#34;etag\u0026#34;: \u0026#34;13af343f3e76b0f8c7fbef7ee3588ac1\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/d88521c3-b339-43bc-afda-afdfda126388/manifest.json\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34; }, \u0026#34;md5\u0026#34;: \u0026#34;13af343f3e76b0f8c7fbef7ee3588ac1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;application/json\u0026#34; } ], \u0026#34;ims_image_record\u0026#34;: { \u0026#34;created\u0026#34;: \u0026#34;2018-12-17T22:59:43.264129+00:00\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;d88521c3-b339-43bc-afda-afdfda126388\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;sles15_barebones_image\u0026#34; \u0026#34;link\u0026#34;: { \u0026#34;etag\u0026#34;: \u0026#34;13af343f3e76b0f8c7fbef7ee3588ac1\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/d88521c3-b339-43bc-afda-afdfda126388/manifest.json\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34; }, }, \u0026#34;ims_job_record\u0026#34;: { \u0026#34;artifact_id\u0026#34;: \u0026#34;2233c82a-5081-4f67-bec4-4b59a60017a6\u0026#34;, \u0026#34;build_env_size\u0026#34;: 10, \u0026#34;created\u0026#34;: \u0026#34;2018-11-21T18:22:53.409405+00:00\u0026#34;, \u0026#34;enable_debug\u0026#34;: false, \u0026#34;id\u0026#34;: \u0026#34;ad5163d2-398d-4e93-94f0-2f439f114fe7\u0026#34;, \u0026#34;image_root_archive_name\u0026#34;: \u0026#34;sles15_barebones_image\u0026#34;, \u0026#34;initrd_file_name\u0026#34;: \u0026#34;initrd\u0026#34;, \u0026#34;job_type\u0026#34;: \u0026#34;create\u0026#34;, \u0026#34;kernel_file_name\u0026#34;: \u0026#34;vmlinuz\u0026#34;, \u0026#34;kubernetes_configmap\u0026#34;: \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-configmap\u0026#34;, \u0026#34;kubernetes_job\u0026#34;: \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-create\u0026#34;, \u0026#34;kubernetes_service\u0026#34;: \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-service\u0026#34;, \u0026#34;public_key_id\u0026#34;: \u0026#34;a252ff6f-c087-4093-a305-122b41824a3e\u0026#34;, \u0026#34;resultant_image_id\u0026#34;: \u0026#34;d88521c3-b339-43bc-afda-afdfda126388\u0026#34;, \u0026#34;ssh_port\u0026#34;: 0, \u0026#34;status\u0026#34;: \u0026#34;packaging_artifacts\u0026#34; }, \u0026#34;result\u0026#34;: \u0026#34;success\u0026#34; } The IMS customization workflow automatically copies the NCN Certificate Authority\u0026rsquo;s public certificate to /etc/cray/ca/certificate_authority.crt within the image root being customized. This can be used to enable secure communications between the NCN and the client node.\n  Look up the ID of the newly created image.\nncn# cray ims jobs describe $IMS_JOB_ID Example output:\nstatus = \u0026#34;success\u0026#34; enable_debug = false kernel_file_name = \u0026#34;vmlinuz\u0026#34; artifact_id = \u0026#34;4e78488d-4d92-4675-9d83-97adfc17cb19\u0026#34; build_env_size = 10 job_type = \u0026#34;customize\u0026#34; kubernetes_service = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-service\u0026#34; kubernetes_job = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-customize\u0026#34; id = \u0026#34;ad5163d2-398d-4e93-94f0-2f439f114fe7\u0026#34; image_root_archive_name = \u0026#34;my_customized_image\u0026#34; initrd_file_name = \u0026#34;initrd\u0026#34; resultant_image_id = \u0026#34;d88521c3-b339-43bc-afda-afdfda126388\u0026#34; created = \u0026#34;2018-11-21T18:22:53.409405+00:00\u0026#34; kubernetes_namespace = \u0026#34;ims\u0026#34; public_key_id = \u0026#34;a252ff6f-c087-4093-a305-122b41824a3e\u0026#34; kubernetes_configmap = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-configmap\u0026#34;   Record the IMS image ID of the created image.\nSet IMS_RESULTANT_IMAGE_ID to the value of the resultant_image_id field in the output of the previous command.\nncn# IMS_RESULTANT_IMAGE_ID=d88521c3-b339-43bc-afda-afdfda126388   Verify that the new IMS image record exists.\nncn# cray ims images describe $IMS_RESULTANT_IMAGE_ID Example output:\ncreated = \u0026#34;2018-12-04T17:25:52.482514+00:00\u0026#34; id = \u0026#34;d88521c3-b339-43bc-afda-afdfda126388\u0026#34; name = \u0026#34;my_customized_image.squashfs\u0026#34; [link] type = \u0026#34;s3\u0026#34; path = \u0026#34;/d88521c3-b339-43bc-afda-afdfda126388/my_customized_image.squashfs\u0026#34; etag = \u0026#34;28f3d78c8cceca2083d7d3090d96bbb7\u0026#34;   Clean up the image customization environment.\nDelete the IMS job record.\nncn# cray ims jobs delete $IMS_JOB_ID Deleting the job record also deletes the underlying Kubernetes job, service, and ConfigMap that were created when the job record was submitted.\n  The image root has been modified, compressed, and uploaded to S3, along with its associated initrd and kernel files. The image customization environment has also been cleaned up.\n"
},
{
	"uri": "/docs-csm/en-12/operations/image_management/delete_or_recover_deleted_ims_content/",
	"title": "Delete Or Recover Deleted IMS Content",
	"tags": [],
	"description": "",
	"content": "Delete or Recover Deleted IMS Content The Image Management System (IMS) manages user supplied SSH public Keys, customizable image recipes, images, and IMS jobs that are used to build or customize images. In previous versions of IMS, deleting an IMS public key, recipe, or image resulted in that item being permanently deleted. Additionally, IMS recipes and images store linked artifacts in the Simple Storage Service (S3) datastore. These artifacts are referenced by the IMS recipe and image records. The default option when deleting an IMS recipe and image record was to also delete these linked S3 artifacts.\nncn# cray ims recipes list Example output:\n[...] [[results]] id = \u0026quot;76ef564d-47d5-415a-bcef-d6022a416c3c\u0026quot; name = \u0026quot;cray-sles15-barebones\u0026quot; created = \u0026quot;2020-02-05T19:24:22.621448+00:00\u0026quot; [results.link] path = \u0026quot;s3://ims/recipes/76ef564d-47d5-415a-bcef-d6022a416c3c/cray-sles15-barebones.tgz\u0026quot; etag = \u0026quot;28f3d78c8cceca2083d7d3090d96bbb7\u0026quot; type = \u0026quot;s3\u0026quot; [...] ncn# cray ims images list Example output:\n[...] [[results]] created = \u0026quot;2018-12-04T17:25:52.482514+00:00\u0026quot; id = \u0026quot;4e78488d-4d92-4675-9d83-97adfc17cb19\u0026quot; name = \u0026quot;sles_15_image.squashfs\u0026quot; [results.link] type = \u0026quot;s3\u0026quot; path = \u0026quot;/4e78488d-4d92-4675-9d83-97adfc17cb19/sles_15_image.squashfs\u0026quot; etag = \u0026quot;\u0026quot; [...] Deleting an IMS image can create a situation where boot artifacts referenced by a Boot Orchestration Service (BOS) session template no longer exist, making that template unable to boot. Previously, to recover from this situation, an admin would have had to rebuild the boot image using IMS and/or reinstall the prebuilt image from the installer, reapply any Cray and site customizations, and recreate a new BOS template for the IMS image.\nNew functionality has been added to IMS to enable administrators to soft delete, recover (undelete), or hard delete public-keys, recipes, and images. The added functionality provides a way to recover IMS items that were mistakenly deleted. There is no undelete operation for IMS Jobs.\nSoft deleting an IMS record effectively removes the record being deleted from the default collection, and moves it to a new deleted collection. Recovering a deleted IMS record (undelete operation) moves the IMS record from the deleted collection back to the collection of available items. Hard deleting an IMS record permanently deletes it from the deleted collection.\nDelete an IMS Artifact Use the cray CLI utility to delete either soft delete or hard delete an IMS public-key, recipe, or image.\nSoft deleting an IMS public key, recipe, or image removes the record(s) from the collection of available items. Hard deleting permanently removes the item from the deleted collection. Additionally, any linked artifacts are also permanently removed.\nDeleting an IMS public-key, recipe, or image record performs the following actions:\n The IMS record(s) being deleted are moved from the collection of available items to a new deleted collection. Any newly created records within the deleted collection will have the same IMS ID value as it did before being moved there. Any Simple Storage Service (S3) artifacts that are associated with the record or records being deleted are renamed within their S3 buckets so as to make them unavailable under their original key name.  Prerequisites  The Cray command line interface (CLI) tool is initialized and configured on the system. System management services (SMS) are running in a Kubernetes cluster on non-compute nodes (NCN) and include the following deployments:  cray-ims, the Image Management Service (IMS) cray-nexus, the Nexus repository manager service   kubectl is installed locally and configured to point at the SMS Kubernetes cluster.  Procedure   Soft delete the desired IMS artifact.\nThe following substeps assume that an image is being deleted. The same process can be followed if deleting a public-key or recipe.\n  List the existing images in IMS.\nncn# cray ims images list Example output:\n[...] [[results]] created = \u0026quot;2018-12-04T17:25:52.482514+00:00\u0026quot; id = \u0026quot;4e78488d-4d92-4675-9d83-97adfc17cb19\u0026quot; \u0026lt;\u0026lt;-- Note this ID name = \u0026quot;sles_15_image.squashfs\u0026quot; [results.link] type = \u0026quot;s3\u0026quot; path = \u0026quot;/4e78488d-4d92-4675-9d83-97adfc17cb19/sles_15_image.squashfs\u0026quot; etag = \u0026quot;\u0026quot; [...]   Delete the image.\nncn# cray ims images delete IMS_IMAGE_ID   Verify the image was successfully deleted.\nncn# cray ims images list   View the recently deleted item in the deleted images list.\nncn# cray ims deleted images list Example output:\n[...] [[results]] created = \u0026quot;2018-12-04T17:25:52.482514+00:00\u0026quot; \u0026lt;\u0026lt;-- Date the record was originally created deleted = \u0026quot;2020-11-03T09:57:31.746521+00:00\u0026quot; \u0026lt;\u0026lt;-- Date the record was deleted id = \u0026quot;4e78488d-4d92-4675-9d83-97adfc17cb19\u0026quot; name = \u0026quot;sles_15_image.squashfs\u0026quot; [results.link] type = \u0026quot;s3\u0026quot; path = \u0026quot;/deleted/4e78488d-4d92-4675-9d83-97adfc17cb19/sles_15_image.squashfs\u0026quot; \u0026lt;\u0026lt;-- S3 path to linked artifact was renamed etag = \u0026quot;\u0026quot; [...] If the administrator desires the public-key, recipe, or image to be permanently deleted, proceed to the next step. If the deleted image might need to be recovered in the future, no more work is needed.\n    Hard delete the desired IMS artifact.\nDo not proceed with this step if the IMS artifact might be needed in the future. The following substeps assume that an image is being deleted. The same process can be followed if deleting a public-key or recipe.\n  List the deleted images.\nncn# cray ims deleted images list Example output:\n[...] [[results]] created = \u0026quot;2018-12-04T17:25:52.482514+00:00\u0026quot; deleted = \u0026quot;2020-11-03T09:57:31.746521+00:00\u0026quot; id = \u0026quot;4e78488d-4d92-4675-9d83-97adfc17cb19\u0026quot; \u0026lt;\u0026lt;-- Note this ID name = \u0026quot;sles_15_image.squashfs\u0026quot; [results.link] type = \u0026quot;s3\u0026quot; path = \u0026quot;/deleted/4e78488d-4d92-4675-9d83-97adfc17cb19/sles_15_image.squashfs\u0026quot; etag = \u0026quot;\u0026quot; [...]   Permanently delete the desired image from the deleted images list.\nncn# cray ims deleted images delete IMS_IMAGE_ID     Recover Deleted IMS Artifacts Use the IMS undelete command to update the record(s) within the deleted collection for an IMS public-key, recipe, or image.\nRecovering a deleted IMS public-key, recipe, or image record uses the following workflow:\n The record(s) being undeleted are moved to from the deleted collection to the collection of available items. Any restored records will have the same IMS ID value as it did before being undeleted. Any Simple Storage Service (S3) artifacts that are associated with the record(s) being undeleted are renamed within their S3 buckets so as to make them available under their original key name.  Prerequisites  The Cray command line interface (CLI) tool is initialized and configured on the system. System management services (SMS) are running in a Kubernetes cluster on non-compute nodes (NCN) and include the following deployments:  cray-ims, the Image Management Service (IMS) cray-nexus, the Nexus repository manager service   kubectl is installed locally and configured to point at the SMS Kubernetes cluster.  Procedure The steps in this procedure assume that a deleted image is being recovered. The same process can be followed if recovering a deleted public-key or recipe.\n  List the deleted image.\nncn# cray ims deleted images list Example output:\n[...] [[results]] created = \u0026quot;2018-12-04T17:25:52.482514+00:00\u0026quot; deleted = \u0026quot;2020-11-03T09:57:31.746521+00:00\u0026quot; id = \u0026quot;4e78488d-4d92-4675-9d83-97adfc17cb19\u0026quot; \u0026lt;\u0026lt;-- Note this ID name = \u0026quot;sles_15_image.squashfs\u0026quot; [results.link] type = \u0026quot;s3\u0026quot; path = \u0026quot;/deleted/4e78488d-4d92-4675-9d83-97adfc17cb19/sles_15_image.squashfs\u0026quot; etag = \u0026quot;\u0026quot; [...]   Use the undelete operation to recover the image.\nncn# cray ims deleted images update IMS_IMAGE_ID --operation undelete   List the deleted images to verify the recovered image is no longer in the collection of deleted items.\nncn# cray ims deleted images list   List the IMS images to verify the image was recovered.\nncn# cray ims images list Example output:\n[...] [[results]] created = \u0026quot;2018-12-04T17:25:52.482514+00:00\u0026quot; id = \u0026quot;4e78488d-4d92-4675-9d83-97adfc17cb19\u0026quot; name = \u0026quot;sles_15_image.squashfs\u0026quot; [results.link] type = \u0026quot;s3\u0026quot; path = \u0026quot;/4e78488d-4d92-4675-9d83-97adfc17cb19/sles_15_image.squashfs\u0026quot; \u0026lt;\u0026lt;-- The restored artifact path etag = \u0026quot;\u0026quot; [...]   "
},
{
	"uri": "/docs-csm/en-12/operations/image_management/image_management/",
	"title": "Image Management",
	"tags": [],
	"description": "",
	"content": "Image Management The Image Management Service (IMS) uses the open source Kiwi-NG tool to build image roots from compressed Kiwi image descriptions. These compressed Kiwi image descriptions are referred to as \u0026ldquo;recipes.\u0026rdquo; Kiwi-NG builds images based on a variety of different Linux distributions, specifically SUSE, RHEL, and their derivatives. Kiwi image descriptions must follow the Kiwi development schema. More information about the development schema and the Kiwi-NG tool can be found in the documentation: https://doc.opensuse.org/projects/kiwi/doc/.\nEven though Kiwi recipes can be developed from scratch or found on the Internet, it is recommended that recipes are based on existing HPE Cray image recipes. HPE Cray provides multiple types of recipes including, but not limited to the following:\n Barebones Image Recipes: The barebones recipes contain only the upstream Linux packages needed to successfully boot the image on an HPE Cray compute node using upstream packages. Bare-bones recipes are primarily meant to be used to validate the IMS tools, without requiring HPE Cray Operating System (COS) content. COS Recipes: COS recipes contain a Linux environment with an HPE Cray customized kernel and optimized HPE Cray services for our most demanding customers and workloads.  HPE Cray provided recipes are uploaded to the Simple Storage Service (S3) and registered with IMS as part of the install.\nImages built by IMS contain only the packages and settings that are referenced in the Kiwi-NG recipe used to build the image. The only exception is that IMS will dynamically install the system\u0026rsquo;s root CA certificate to allow zypper (via Kiwi-NG) to talk securely with the required Nexus RPM repositories. Images that are intended to be used to boot a CN or other node must be configured with DNS and other settings that enable the image to talk to vital services. A base level of customization is provided by the default Ansible plays used by the Configuration Framework Service (CFS) to enable DNS resolution, which are typically run against an image after it is built by IMS.\nWhen customizing an image via IMS image customization, once chrooted into the image root (or if using a `jailed` environment), the image will only have access to whatever configuration the image already contains. In order to talk to services, including Nexus RPM repositories, the image root must first be configured with DNS and other settings. A base level of customization is provided by the default Ansible plays used by the CFS to enable DNS resolution.\nThe Nexus Repository Manager service provides local RPM repositories for use when building or customizing an image. The Kiwi image descriptions should reference these repositories as needed. In order to include the custom-repo repository in an IMS Kiwi-NG recipe, the repository source path should be modified to the URI for a repository instance hosted by Nexus.\n\u0026lt;repository type=\u0026quot;rpm-md\u0026quot; alias=\u0026quot;custom-repo\u0026quot; imageinclude=\u0026quot;true\u0026quot;\u0026gt; \u0026lt;source path=\u0026quot;https://packages.local/repository/REPO_NAME\u0026quot; /\u0026gt; \u0026lt;/repository\u0026gt; "
},
{
	"uri": "/docs-csm/en-12/operations/image_management/image_management_workflows/",
	"title": "Image Management Workflows",
	"tags": [],
	"description": "",
	"content": "Image Management Workflows Overview of how to create an image and how to customize and image.\nThe following workflows are intended to be high-level overviews of image management tasks. These workflows depict how services interact with each other during image management and help to provide a quicker and deeper understanding of how the system functions.\nThe workflows in this section include:\n Create a New Image Customize an Image  Create a New Image Use Case: The system administrator creates an image root from a customized recipe. The new image can be used to boot compute nodes.\nComponents: This workflow is based on the interaction of the Image Management Service (IMS) with other services during the image build process. The process of image creation builds an image from a recipe. An administrator may choose to use the Cray-provided recipes or customize Kiwi recipes to define the image to be built.\nMentioned in this workflow:\n Image Management Service (IMS) allows administrators and users to build or customize (pre-boot) images from kiwi-ng recipes. This service is responsible for enabling the creation of bootable and non-bootable images, enabling image customization via an SSH-able environment, and packaging and association of new/customized image artifacts (kernel, rootfs, initrd, etc) with a new IMS image record. Nexus is needed for image creation and image customization. Nexus provides local RPM repositories for use when building or customizing an image. You can define zypper or Yum package repositories and provide the RPM content for installing and updating software for every compute and non-compute node in the system. The Simple Storage Service (Ceph S3) is an artifact repository that stores boot artifacts. Recipes are stored in the ims bucket and images are stored in the boot-images bucket.  Workflow Overview: The following sequence of steps occurs during this workflow.\n  Administrator downloads an existing recipe from S3\nTo create a custom recipe, the administrator can first download an existing recipe from S3. A Kiwi recipe consists of multiple files and directories, which together define the repositories, packages and post-install actions to take during the Kiwi build process.\n  Administrator modifies the recipe and uploads to S3\nModify the recipe by editing the files and subdirectories in the image-recipe directory. Edit the config.xml file to modify the name of the recipe, the set of RPM packages being installed or the RPM repositories being referenced. The recipe should be uploaded to S3 in a .tgz archive via CLI.\n  Administrator registers the recipe with IMS\nRegistering the recipe creates a recipe record for your custom recipe in IMS.\nncn# cray ims recipes list   Administrator uploads public key\nA public key is uploaded to allow them to access SSH shells that IMS provides.\nncn# cray ims public-keys create --name \u0026#34;username public key\u0026#34; --public-key ~/.ssh/id_rsa.pub   Administrator starts the creation job\nCreate a new IMS image by providing request body parameter, job_type=\u0026ldquo;create\u0026rdquo;. The following steps 6-10 happen automatically as a part of the image creation process.\nncn# cray ims jobs create \\ --job-type create \\ --image-root-archive-name cray-sles15-barebones \\ --artifact-id $IMS_RECIPE_ID \\ --public-key-id $IMS_PUBLIC_KEY_ID \\ --enable-debug False   IMS to Ceph S3\nIMS fetches the recipe from S3 and decompresses the recipe to a temporary directory.\n  IMS to Nexus\nIMS waits for repositories to be available from Nexus. The repositories are needed to build the image.\n  IMS creates a custom RPM\nIMS creates a custom RPM to install the CA root certificate from the system into the image. The build-ca-rpm container creates an RPM with the private root-CA certificate for the system and this RPM is installed automatically by Kiwi-NG. The CA root certificate is required to enable secure HTTPS access to the RPM repositories when building the image root.\n  IMS calls Kiwi-NG to build the image\nIMS calls Kiwi-NG to build the image root from the recipe and accesses packages in zypper/yum repositories. The building of the image using kiwi happens in the build-image container. After kiwi is done building the image (either success or fail), the buildenv-sidecar container packages the artifacts, or in the case of failure, enables the debug shell if enable-debug is True. In the buildenv-sidecar container, the image artifacts are packaged and new image artifact records are created for each.\nIf there is a failure and enable-debug is true, a debug SSH shell is established. Admin can inspect image build root. Use commands touch /mnt/image/complete in a non-jailed environment or touch /tmp/complete in a jailed (chroot) environment to exit.\n  Save the new image record in IMS\nThe metadata for the new image artifacts is stored in IMS.\n  Upload the new image artifacts to Ceph S3\nThe new image artifacts are uploaded to Ceph S3.\n  Customize an Image Use Case: The system administrator customizes an existing image and makes desired changes.\nComponents: This workflow is based on the interaction of the Image Management Service (IMS) with Ceph S3 during the image customization process. The customization workflow sets up a temporary image customization environment within a Kubernetes pod and mounts the image to be customized in that environment. A system administrator then makes the desired changes to the image root within the customization environment. IMS then compresses the customized image root and uploads it and its associated initrd image and kernel image (needed to boot a node) to Ceph S3.\nMentioned in this workflow:\n Image Management Service (IMS) allows administrators and users to build or customize (pre-boot) images from kiwi-ng recipes. This service is responsible for enabling the creation of bootable and non-bootable images, enabling image customization via an SSH-able environment, and packaging and association of new/customized image artifacts (kernel, rootfs, initrd, etc) with a new IMS image record. The Simple Storage Service (Ceph S3) is an artifact repository that stores artifacts. Recipes are stored in the ims bucket and images are stored in the boot-images bucket.  Workflow Overview: The following sequence of steps occurs during this workflow.\n  The administrator identifies an existing image to be customized.\nRetrieve a list of ImageRecords indicating images that have been registered with IMS. IMS uses the ImageRecord to read the image\u0026rsquo;s manifest.yaml to find the image\u0026rsquo;s root file system (rootfs) artifact. Note the id of the image that you want to customize.\nncn# cray ims images list   The administrator uploads a public key.\nA public key is uploaded to allow them to access SSH shells that IMS provides.\nncn# cray ims public-keys create --name \u0026#34;username public key\u0026#34; --public-key ~/.ssh/id_rsa.pub   The administrator starts the image customization job.\nCreate a new IMS image by providing the --job-type customize argument to the cray ims jobs create command. The following steps (4-8) happen automatically as a part of the image customization process.\nncn# cray ims jobs create \\  --job-type customize \\  --image-root-archive-name my_customized_image \\  --kernel-file-name vmlinuz \\  --initrd-file-name initrd \\  --artifact-id $IMS_IMAGE_ID \\  --public-key-id $IMS_PUBLIC_KEY_ID \\  --enable-debug False   IMS to Ceph S3.\nIMS downloads the image root (rootfs) from Ceph S3 and decompresses the image root to a temporary directory.\n  IMS creates an SSH environment for image customization.\nIMS spins up an sshd container so that the administrator can modify the image. The administrator accesses the sshd container and makes changes to the image. For example, it may be necessary to modify the timezone, or modify the programming environment, etc. Use touch /mnt/image/complete in a non-jailed environment or touch /tmp/complete in a jailed (chroot) environment to exit. The shell can be run in either a jailed or non-jailed mode.\nThe output is a new image. Note that the original image also exists. IMS customizes a copy of the original image.\n  buildenv-sidecar container packages new image artifacts.\nThe buildenv-sidecar container waits for the administrator to exit the SSH session. Upon completion, new records are created for each image artifact. It also adds the root CA certificate to the image and packages the new image artifacts (kernel, initrd, rootfs).\n  Save the new image record in IMS.\nThe metadata for the new image artifacts is stored in IMS.\n  Upload the new image artifacts to Ceph S3.\nThe new image artifacts are uploaded to Ceph S3.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/image_management/import_external_image_to_ims/",
	"title": "Import An External Image To IMS",
	"tags": [],
	"description": "",
	"content": "Import an External Image to IMS The Image Management Service (IMS) is typically used to build images from IMS recipes and customize Images that are already known to IMS. However, it is sometimes the case that an image is built using a mechanism other than by IMS and needs to be added to IMS. In these cases, the following procedure can be used to add this external image to IMS and upload the image\u0026rsquo;s artifact(s) to the Simple Storage Service (S3).\nPrerequisites  System management services (SMS) are running in a Kubernetes cluster on non-compute nodes (NCN) and include the following deployments:  cray-ims, the Image Management Service (IMS)   kubectl is installed locally and configured to point at the SMS Kubernetes cluster. An image root archive or a pre-built image root SquashFS archive is available. Optionally, additional image artifacts including a kernel, initrd, and kernel parameters file are available. The NCN Certificate Authority (CA) public key has been properly installed into the CA cache for this system. A token providing Simple Storage Service (S3) credentials has been generated.  Limitations  The commands in this procedure must be run as the root user. Images in the .txz compressed format need to be converted to SquashFS in order to use IMS image customization.  Procedure   Ensure that the image root is in a supported format.\nIMS requires that an image\u0026rsquo;s root filesystem is in SquashFS format. Select one of the following options based on the current state of the image root being used:\n If the image being added is in tgz format, refer to Convert TGZ Archives to SquashFS Images. If the image being added meets the above requirements, proceed to Create an IMS image record. If the image root is in a format other than tgz or SquashFS, convert the image root to tgz/SquashFS before continuing.    Choose a descriptive name for the new IMS image record.\nSet the IMS_ROOTFS_FILENAME variable to the chosen name.\nncn-mw# IMS_ROOTFS_FILENAME=sles_15_image.squashfs   Create a new IMS image record for the image.\nncn-mw# cray ims images create --name $IMS_ROOTFS_FILENAME --format toml Example output:\ncreated = \u0026#34;2018-12-04T17:25:52.482514+00:00\u0026#34; id = \u0026#34;4e78488d-4d92-4675-9d83-97adfc17cb19\u0026#34; name = \u0026#34;sles_15_image.squashfs\u0026#34;   Create an environment variable for the ID of the new IMS image record.\nSet the IMS_IMAGE_ID variable, using the id field value from the returned data in the previous step.\nncn-mw# IMS_IMAGE_ID=4e78488d-4d92-4675-9d83-97adfc17cb19   Upload the image root to S3.\n  Set an environment variable with the actual path and filename of the image root to be uploaded.\n This may be the same name as IMS_ROOTFS_FILENAME, but it is not required to be.\n ncn-mw# ROOTFS_FILENAME=/home/rootfs.squashfs   Record the md5sum of the image root to be uploaded.\nncn-mw# IMS_ROOTFS_MD5SUM=$(md5sum $ROOTFS_FILENAME | awk \u0026#39;{ print $1 }\u0026#39;)   Upload the image root to S3.\nncn-mw# cray artifacts create boot-images $IMS_IMAGE_ID/$IMS_ROOTFS_FILENAME $ROOTFS_FILENAME     Optionally, upload the kernel for the image to S3.\n In this example, the relative path to the kernel from the working directory is image-root/boot/vmlinuz.\n ncn-mw# IMS_KERNEL_FILENAME=vmlinuz ncn-mw# cray artifacts create boot-images $IMS_IMAGE_ID/$IMS_KERNEL_FILENAME image-root/boot/$IMS_KERNEL_FILENAME ncn-mw# IMS_KERNEL_MD5SUM=`md5sum image-root/boot/$IMS_KERNEL_FILENAME | awk \u0026#39;{ print $1 }\u0026#39;`   Optionally, upload the initrd for the image to S3.\n In this example, the relative path to the initrd file from working directory is image-root/boot/initrd.\n ncn-mw# IMS_INITRD_FILENAME=initrd ncn-mw# cray artifacts create boot-images $IMS_IMAGE_ID/$IMS_INITRD_FILENAME image-root/boot/$IMS_INITRD_FILENAME ncn-mw# IMS_INITRD_MD5SUM=`md5sum image-root/boot/$IMS_INITRD_FILENAME | awk \u0026#39;{ print $1 }\u0026#39;`   Create an image manifest and upload it to S3.\nHPE Cray uses a manifest file that associates multiple related boot artifacts (kernel, initrd, rootfs, etc.) into an image description that is used by IMS and other services to boot nodes. Artifacts listed within the manifest are identified by a type value:\n application/vnd.cray.image.rootfs.squashfs application/vnd.cray.image.initrd application/vnd.cray.image.kernel application/vnd.cray.image.parameters.boot    Generate an image manifest file.\nncn-mw# cat \u0026lt;\u0026lt;EOF\u0026gt; manifest.json { \u0026quot;created\u0026quot;: \u0026quot;`date '+%Y-%m-%d %H:%M:%S'`\u0026quot;, \u0026quot;version\u0026quot;: \u0026quot;1.0\u0026quot;, \u0026quot;artifacts\u0026quot;: [ { \u0026quot;link\u0026quot;: { \u0026quot;path\u0026quot;: \u0026quot;s3://boot-images/$IMS_IMAGE_ID/$IMS_ROOTFS_FILENAME\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;s3\u0026quot; }, \u0026quot;md5\u0026quot;: \u0026quot;$IMS_ROOTFS_MD5SUM\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;application/vnd.cray.image.rootfs.squashfs\u0026quot; }, { \u0026quot;link\u0026quot;: { \u0026quot;path\u0026quot;: \u0026quot;s3://boot-images/$IMS_IMAGE_ID/$IMS_KERNEL_FILENAME\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;s3\u0026quot; }, \u0026quot;md5\u0026quot;: \u0026quot;$IMS_KERNEL_MD5SUM\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;application/vnd.cray.image.kernel\u0026quot; }, { \u0026quot;link\u0026quot;: { \u0026quot;path\u0026quot;: \u0026quot;s3://boot-images/$IMS_IMAGE_ID/$IMS_INITRD_FILENAME\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;s3\u0026quot; }, \u0026quot;md5\u0026quot;: \u0026quot;$IMS_INITRD_MD5SUM\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;application/vnd.cray.image.initrd\u0026quot; } ] } EOF   Upload the manifest to S3.\nncn-mw# cray artifacts create boot-images $IMS_IMAGE_ID/manifest.json manifest.json     Register the image manifest with the IMS service.\nUpdate the IMS image record.\nncn-mw# cray ims images update $IMS_IMAGE_ID \\  --link-type s3 \\  --link-path s3://boot-images/$IMS_IMAGE_ID/manifest.json \\  --format toml Example output:\ncreated = \u0026#34;2018-12-04T17:25:52.482514+00:00\u0026#34; id = \u0026#34;4e78488d-4d92-4675-9d83-97adfc17cb19\u0026#34; name = \u0026#34;sles_15_image.squashfs\u0026#34; [link] type = \u0026#34;s3\u0026#34; path = \u0026#34;s3://boot-images/4e78488d-4d92-4675-9d83-97adfc17cb19/manifest.json\u0026#34; etag = \u0026#34;\u0026#34;   "
},
{
	"uri": "/docs-csm/en-12/operations/kubernetes/cert_renewal_for_kubernetes_and_bare_metal_etcd/",
	"title": "Kubernetes And Bare Metal Etcd Certificate Renewal",
	"tags": [],
	"description": "",
	"content": "Kubernetes and Bare Metal EtcD Certificate Renewal As part of the installation, Kubernetes generates certificates for the required subcomponents. This document will help walk through the process of renewing the certificates.\nIMPORTANT:\n Depending on the version of Kubernetes, the command may or may not reside under the alpha category. Use kubectl certs --help and kubectl alpha certs --help to determine this. The overall command syntax is the same; the only difference is whether or not the command structure includes alpha. The node referenced in this document as ncn-m is the master node selected to renew the certificates on. This document is based off a base hardware configuration of three master nodes and three worker nodes. Utility storage nodes are not mentioned because they are not running Kubernetes. Make sure to update any commands that run on multiple nodes accordingly.  File Locations IMPORTANT: Master nodes will have certificates for both Kubernetes services and the Kubernetes client. Workers will only have the certificates for the Kubernetes client.\nServices (master nodes):\n/etc/kubernetes/pki/apiserver.crt /etc/kubernetes/pki/apiserver-etcd-client.crt /etc/kubernetes/pki/apiserver-etcd-client.key /etc/kubernetes/pki/apiserver.key /etc/kubernetes/pki/apiserver-kubelet-client.crt /etc/kubernetes/pki/apiserver-kubelet-client.key /etc/kubernetes/pki/ca.crt /etc/kubernetes/pki/ca.key /etc/kubernetes/pki/front-proxy-ca.crt /etc/kubernetes/pki/front-proxy-ca.key /etc/kubernetes/pki/front-proxy-client.crt /etc/kubernetes/pki/front-proxy-client.key /etc/kubernetes/pki/sa.key /etc/kubernetes/pki/sa.pub /etc/kubernetes/pki/etcd/ca.crt /etc/kubernetes/pki/etcd/ca.key /etc/kubernetes/pki/etcd/healthcheck-client.crt /etc/kubernetes/pki/etcd/healthcheck-client.key /etc/kubernetes/pki/etcd/peer.crt /etc/kubernetes/pki/etcd/peer.key /etc/kubernetes/pki/etcd/server.crt /etc/kubernetes/pki/etcd/server.key Client (master and worker nodes):\n/var/lib/kubelet/pki/kubelet-client-2021-09-07-17-06-36.pem /var/lib/kubelet/pki/kubelet-client-current.pem /var/lib/kubelet/pki/kubelet.crt /var/lib/kubelet/pki/kubelet.key Procedure   Log into a master node.\n  Check the expiration of the certificates.\nncn-m# kubeadm alpha certs check-expiration --config /etc/kubernetes/kubeadmcfg.yaml Example output:\nWARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io] CERTIFICATE EXPIRES RESIDUAL TIME CERTIFICATE AUTHORITY EXTERNALLY MANAGED admin.conf Sep 24, 2021 15:21 UTC 14d no apiserver Sep 24, 2021 15:21 UTC 14d ca no apiserver-etcd-client Sep 24, 2021 15:20 UTC 14d ca no apiserver-kubelet-client Sep 24, 2021 15:21 UTC 14d ca no controller-manager.conf Sep 24, 2021 15:21 UTC 14d no etcd-healthcheck-client Sep 24, 2021 15:19 UTC 14d etcd-ca no etcd-peer Sep 24, 2021 15:19 UTC 14d etcd-ca no etcd-server Sep 24, 2021 15:19 UTC 14d etcd-ca no front-proxy-client Sep 24, 2021 15:21 UTC 14d front-proxy-ca no scheduler.conf Sep 24, 2021 15:21 UTC 14d no CERTIFICATE AUTHORITY EXPIRES RESIDUAL TIME EXTERNALLY MANAGED ca Sep 02, 2030 15:21 UTC 8y no etcd-ca Sep 02, 2030 15:19 UTC 8y no front-proxy-ca Sep 02, 2030 15:21 UTC 8y no   Backup Existing Certificates   Backup existing certificates on master nodes:\nncn-m# pdsh -w ncn-m00[1-3] tar cvf /root/cert_backup.tar /etc/kubernetes/pki/ /var/lib/kubelet/pki/ Example output:\nncn-m001: tar: Removing leading / from member names ncn-m001: /etc/kubernetes/pki/ ncn-m001: /etc/kubernetes/pki/front-proxy-client.key ncn-m001: tar: Removing leading / from hard link targets ncn-m001: /etc/kubernetes/pki/apiserver-etcd-client.key ncn-m001: /etc/kubernetes/pki/sa.key [...]   Backup existing certificates on worker nodes:\nIMPORTANT: The range of nodes below should reflect the size of the environment. This should run on every worker node.\nncn-m# pdsh -w ncn-w00[1-3] tar cvf /root/cert_backup.tar /var/lib/kubelet/pki/ Example output:\nncn-w003: tar: Removing leading / from member names ncn-w003: /var/lib/kubelet/pki/ ncn-w003: /var/lib/kubelet/pki/kubelet.key ncn-w003: /var/lib/kubelet/pki/kubelet-client-2021-09-07-17-06-36.pem ncn-w003: /var/lib/kubelet/pki/kubelet.crt [...]   Renew Certificates Run the following steps on each master node.\n  Renew the certificates.\nncn-m# kubeadm alpha certs renew all --config /etc/kubernetes/kubeadmcfg.yaml Example output:\nWARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io] certificate embedded in the kubeconfig file for the admin to use and for kubeadm itself renewed certificate for serving the Kubernetes API renewed certificate the apiserver uses to access etcd renewed certificate for the API server to connect to kubelet renewed certificate embedded in the kubeconfig file for the controller manager to use renewed certificate for liveness probes to healthcheck etcd renewed certificate for etcd nodes to communicate with each other renewed certificate for serving etcd renewed certificate for the front proxy client renewed certificate embedded in the kubeconfig file for the scheduler manager to use renewed   Check the new expiration.\nncn-m# kubeadm alpha certs check-expiration --config /etc/kubernetes/kubeadmcfg.yaml Example output:\nWARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io] CERTIFICATE EXPIRES RESIDUAL TIME CERTIFICATE AUTHORITY EXTERNALLY MANAGED admin.conf Sep 22, 2022 17:13 UTC 364d no apiserver Sep 22, 2022 17:13 UTC 364d ca no apiserver-etcd-client Sep 22, 2022 17:13 UTC 364d etcd-ca no apiserver-kubelet-client Sep 22, 2022 17:13 UTC 364d ca no controller-manager.conf Sep 22, 2022 17:13 UTC 364d no etcd-healthcheck-client Sep 22, 2022 17:13 UTC 364d etcd-ca no etcd-peer Sep 22, 2022 17:13 UTC 364d etcd-ca no etcd-server Sep 22, 2022 17:13 UTC 364d etcd-ca no front-proxy-client Sep 22, 2022 17:13 UTC 364d front-proxy-ca no scheduler.conf Sep 22, 2022 17:13 UTC 364d no CERTIFICATE AUTHORITY EXPIRES RESIDUAL TIME EXTERNALLY MANAGED ca Sep 02, 2030 15:21 UTC 8y no etcd-ca Sep 02, 2030 15:19 UTC 8y no front-proxy-ca Sep 02, 2030 15:21 UTC 8y no   Check to see if only some of the certificates were updated.\nncn-m# ncn-m001# ls -l /etc/kubernetes/pki Example output:\n-rw-r--r-- 1 root root 1249 Sep 22 17:13 apiserver.crt -rw-r--r-- 1 root root 1090 Sep 22 17:13 apiserver-etcd-client.crt -rw------- 1 root root 1675 Sep 22 17:13 apiserver-etcd-client.key -rw------- 1 root root 1679 Sep 22 17:13 apiserver.key -rw-r--r-- 1 root root 1099 Sep 22 17:13 apiserver-kubelet-client.crt -rw------- 1 root root 1679 Sep 22 17:13 apiserver-kubelet-client.key -rw------- 1 root root 1025 Sep 21 20:50 ca.crt -rw------- 1 root root 1679 Sep 21 20:50 ca.key drwxr-xr-x 2 root root 162 Sep 21 20:50 etcd -rw------- 1 root root 1038 Sep 21 20:50 front-proxy-ca.crt -rw------- 1 root root 1679 Sep 21 20:50 front-proxy-ca.key -rw-r--r-- 1 root root 1058 Sep 22 17:13 front-proxy-client.crt -rw------- 1 root root 1675 Sep 22 17:13 front-proxy-client.key -rw------- 1 root root 1675 Sep 21 20:50 sa.key -rw------- 1 root root 451 Sep 21 20:50 sa.pub ncn-m# ls -l /etc/kubernetes/pki/etcd Example output:\n-rw-r--r-- 1 root root 1017 Sep 21 20:50 ca.crt -rw-r--r-- 1 root root 1675 Sep 21 20:50 ca.key -rw-r--r-- 1 root root 1094 Sep 22 17:13 healthcheck-client.crt -rw------- 1 root root 1679 Sep 22 17:13 healthcheck-client.key -rw-r--r-- 1 root root 1139 Sep 22 17:13 peer.crt -rw------- 1 root root 1679 Sep 22 17:13 peer.key -rw-r--r-- 1 root root 1139 Sep 22 17:13 server.crt -rw------- 1 root root 1675 Sep 22 17:13 server.key Not all the certificate files were updated in this example.\nIMPORTANT: Some certificates were not updated because they have a distant expiration time and did not need to be updated. This is expected.\nCertificates most likely to not be updated due to a distant expiration:\nCERTIFICATE AUTHORITY EXPIRES RESIDUAL TIME EXTERNALLY MANAGED ca Sep 02, 2030 15:21 UTC 8y no etcd-ca Sep 02, 2030 15:19 UTC 8y no front-proxy-ca Sep 02, 2030 15:21 UTC 8y no This means we can ignore the fact that our ca.crt/key, front-proxy-ca.crt/key, and etcd ca.crt/key were not updated.\n  Check the expiration of the certificates files that do not have a current date and are of the .crt or .pem format. See File Locations for the list of files.\nThis task is for each master node and below example checks each certificate in File Locations.\nfor i in $(ls /etc/kubernetes/pki/*.crt;ls /etc/kubernetes/pki/etcd/*.crt;ls /var/lib/kubelet/pki/*.crt;ls /var/lib/kubelet/pki/*.pem);do echo ${i}; openssl x509 -enddate -noout -in ${i};done Example output:\n/etc/kubernetes/pki/apiserver.crt notAfter=Sep 22 17:13:28 2022 GMT /etc/kubernetes/pki/apiserver-etcd-client.crt notAfter=Sep 22 17:13:28 2022 GMT /etc/kubernetes/pki/apiserver-kubelet-client.crt notAfter=Sep 22 17:13:28 2022 GMT /etc/kubernetes/pki/ca.crt notAfter=Sep 4 09:31:10 2031 GMT /etc/kubernetes/pki/front-proxy-ca.crt notAfter=Sep 4 09:31:11 2031 GMT /etc/kubernetes/pki/front-proxy-client.crt notAfter=Sep 22 17:13:29 2022 GMT /etc/kubernetes/pki/etcd/ca.crt notAfter=Sep 4 09:30:28 2031 GMT /etc/kubernetes/pki/etcd/healthcheck-client.crt notAfter=Sep 22 17:13:29 2022 GMT /etc/kubernetes/pki/etcd/peer.crt notAfter=Sep 22 17:13:29 2022 GMT /etc/kubernetes/pki/etcd/server.crt notAfter=Sep 22 17:13:29 2022 GMT /var/lib/kubelet/pki/kubelet.crt notAfter=Sep 21 19:50:16 2022 GMT /var/lib/kubelet/pki/kubelet-client-2021-09-07-17-06-36.pem notAfter=Sep 4 17:01:38 2022 GMT /var/lib/kubelet/pki/kubelet-client-current.pem notAfter=Sep 4 17:01:38 2022 GMT IMPORTANT: Do NOT forget to verify certificates in /etc/kubernetes/pki/etcd.\n As noted in the above output, all certificates including those for Etcd were updated. Note that apiserver-etcd-client.crt is a Kubernetes API certificate, not an Etcd only certificate. Also, the /var/lib/kubelet/pki/ certificates will be updated in the Kubernetes client section that follows.    Restart etcd.\nOnce the steps to renew the needed certificates have been completed on all the master nodes, log into each master node one at a time and run the following:\nncn-m# systemctl restart etcd.service   Run the remaining steps on both master and worker nodes.\n  Restart kubelet.\nRun the following command on each Kubernetes node.\nIMPORTANT: The following example will need to be adjusted to reflect the correct amount of master and worker nodes in the environment being used.\nncn-m# pdsh -w ncn-m00[1-3] -w ncn-w00[1-3] systemctl restart kubelet.service   Fix kubectl command access.\nNOTE: The following command will only respond with Unauthorized if certificates have expired. In any case, the new client certificates will need to be distributed in the following steps.\n  View the status of the nodes.\nncn-m# kubectl get nodes The following is returned if certificates have expired:\nerror: You must be logged in to the server (Unauthorized)   Copy /etc/kubernetes/admin.conf to /root/.kube/config.\nncn-m# cp /etc/kubernetes/admin.conf /root/.kube/config   Check the status of the nodes again.\nncn-m# kubectl get nodes Example output:\nNAME STATUS ROLES AGE VERSION ncn-m001 Ready master 370d v1.18.6 ncn-m002 Ready master 370d v1.18.6 ncn-m003 Ready master 370d v1.18.6 ncn-w001 Ready \u0026lt;none\u0026gt; 370d v1.18.6 ncn-w002 Ready \u0026lt;none\u0026gt; 370d v1.18.6 ncn-w003 Ready \u0026lt;none\u0026gt; 370d v1.18.6     Distribute the client certificate to the rest of the cluster.\nNOTE: There may be errors when copying files. The target may or may not exist depending on the version of CSM.\n DO NOT copy this to the master node where this work is being performed. Copy /etc/kubernetes/admin.conf to all master and worker nodes.  Client access:\nNOTE: Update the following command with the appropriate range of worker nodes.\nncn-m# pdcp -w ncn-m00[2-3] -w ncn-w00[1-3] /etc/kubernetes/admin.conf /etc/kubernetes/   Regenerate kubelet .pem Certificates   Backup certificates for kubelet on each master and worker node:\nIMPORTANT: The following example will need to be adjusted to reflect the correct number of master and worker nodes in the environment being used.\nncn-m# pdsh -w ncn-m00[1-3] -w ncn-w00[1-3] tar cvf \\  /root/kubelet_certs.tar /etc/kubernetes/kubelet.conf /var/lib/kubelet/pki/   Log into the master node where the other certificates were updated.\n  Get the current apiserver-advertise-address.\nncn# kubectl config view|grep server Example output:\nserver: https://10.252.120.2:6442   Generate a new kubelet.conf file in the /root/ directory with the IP address from the previous command.\nNOTE: The apiserver-advertise-address may vary, so do not copy and paste without verifying.\nncn-m# for node in $(kubectl get nodes -o json|jq -r \u0026#39;.items[].metadata.name\u0026#39;); do kubeadm alpha kubeconfig user --org system:nodes \\  --client-name system:node:$node --apiserver-advertise-address 10.252.120.2 --apiserver-bind-port 6442 \u0026gt; /root/$node.kubelet.conf; done There should be a new kubelet.conf file per node running Kubernetes.\n    Copy each file to the corresponding node shown in the filename.\nNOTE: Update the below command with the appropriate number of master and worker nodes.\nncn-m# for node in ncn-m00{1..3} ncn-w00{1..3}; do scp /root/$node.kubelet.conf $node:/etc/kubernetes/; done   Log into each node one at a time and run the following commands:\nncn# systemctl stop kubelet.service \u0026amp;\u0026amp; rm -v /etc/kubernetes/kubelet.conf /var/lib/kubelet/pki/* \u0026amp;\u0026amp; cp -v /etc/kubernetes/$(hostname -s).kubelet.conf /etc/kubernetes/kubelet.conf \u0026amp;\u0026amp; systemctl start kubelet.service \u0026amp;\u0026amp; kubeadm init phase kubelet-finalize all --cert-dir /var/lib/kubelet/pki/ \u0026amp;\u0026amp; echo OK   Check the expiration of the kubectl certificate files. See File Locations for the list of files.\nThis task is for each master and worker node. The example checks each kubelet certificate in File Locations.\nncn# for i in $(ls /var/lib/kubelet/pki/*.crt;ls /var/lib/kubelet/pki/*.pem);do echo ${i}; openssl x509 -enddate -noout -in ${i};done Example output:\n/var/lib/kubelet/pki/kubelet.crt notAfter=Sep 22 17:37:30 2022 GMT /var/lib/kubelet/pki/kubelet-client-2021-09-22-18-37-30.pem notAfter=Sep 22 18:32:30 2022 GMT /var/lib/kubelet/pki/kubelet-client-current.pem notAfter=Sep 22 18:32:30 2022 GMT   Perform a rolling reboot of master nodes.\nFollow the Reboot NCNs process.\nIMPORTANT: Verify pods are running on the master node that was rebooted before proceeding to the next node.\n  Perform a rolling reboot of worker nodes.\nFollow the Reboot NCNs process.\n  Update client secrets Run the following steps from a master node.\n  Update the client certificate for kube-etcdbackup.\n  Update the kube-etcdbackup-etcd secret.\nncn-m# kubectl --namespace=kube-system create secret generic kube-etcdbackup-etcd \\  --from-file=/etc/kubernetes/pki/etcd/ca.crt \\  --from-file=tls.crt=/etc/kubernetes/pki/etcd/server.crt \\  --from-file=tls.key=/etc/kubernetes/pki/etcd/server.key \\  --save-config --dry-run=client -o yaml | kubectl apply -f -   Check the certificate\u0026rsquo;s expiration date to verify that the certificate is not expired.\nncn-m# kubectl get secret -n kube-system kube-etcdbackup-etcd -o json | jq -r \u0026#39;.data.\u0026#34;tls.crt\u0026#34; | @base64d\u0026#39; | openssl x509 -noout -enddate Example output:\nnotAfter=May 4 22:37:16 2023 GMT   Check that the next kube-etcdbackup cronjob Completed. This cronjob runs every 10 minutes.\nncn-m# kubectl get pod -l app.kubernetes.io/instance=cray-baremetal-etcd-backup -n kube-system Example output:\nNAME READY STATUS RESTARTS AGE kube-etcdbackup-1652201400-czh5p 0/1 Completed 0 107s     Update the client certificate for etcd-client.\n  Update the etcd-client-cert secret.\nncn-m# kubectl --namespace=sysmgmt-health create secret generic etcd-client-cert \\  --from-file=etcd-client=/etc/kubernetes/pki/apiserver-etcd-client.crt \\  --from-file=etcd-client-key=/etc/kubernetes/pki/apiserver-etcd-client.key \\  --from-file=etcd-ca=/etc/kubernetes/pki/etcd/ca.crt \\  --save-config --dry-run=client -o yaml | kubectl apply -f -   Check the certificates' expiration dates to verify that none of the certificate are expired.\n  Check the etcd-ca expiration date.\nncn-m# kubectl get secret -n sysmgmt-health etcd-client-cert -o json | jq -r \u0026#39;.data.\u0026#34;etcd-ca\u0026#34; | @base64d\u0026#39; | openssl x509 -noout -enddate Example output:\nnotAfter=May 1 18:20:23 2032 GMT   Check the etcd-client expiration date.\nncn-m# kubectl get secret -n sysmgmt-health etcd-client-cert -o json | jq -r \u0026#39;.data.\u0026#34;etcd-client\u0026#34; | @base64d\u0026#39; | openssl x509 -noout -enddate Example output:\nnotAfter=May 4 18:20:24 2023 GMT     Restart Prometheus.\nncn-m# kubectl rollout restart -n sysmgmt-health statefulSet/prometheus-cray-sysmgmt-health-promet-prometheus ncn-m# kubectl rollout status -n sysmgmt-health statefulSet/prometheus-cray-sysmgmt-health-promet-prometheus Example output:\nWaiting for 1 pods to be ready... statefulset rolling update complete ...   Check for any tls errors from the active Prometheus targets. No errors are expected.\nncn-m# PROM_IP=$(kubectl get services -n sysmgmt-health cray-sysmgmt-health-promet-prometheus -o json | jq -r \u0026#39;.spec.clusterIP\u0026#39;) ncn-m# curl -s http://${PROM_IP}:9090/api/v1/targets | jq -r \u0026#39;.data.activeTargets[] | select(.\u0026#34;scrapePool\u0026#34; == \u0026#34;sysmgmt-health/cray-sysmgmt-health-promet-kube-etcd/0\u0026#34;)\u0026#39; | grep lastError | sort -u Example output:\n\u0026#34;lastError\u0026#34;: \u0026#34;\u0026#34;,     "
},
{
	"uri": "/docs-csm/en-12/operations/image_management/upload_and_register_an_image_recipe/",
	"title": "Upload And Register An Image Recipe",
	"tags": [],
	"description": "",
	"content": "Upload and Register an Image Recipe Download and expand recipe archives from S3 and IMS. Modify and upload a recipe archive, and then register that recipe archive with IMS.\nPrerequisites  The Cray command line interface (CLI) tool is initialized and configured on the system. System management services (SMS) are running in a Kubernetes cluster on non-compute nodes (NCNs) and include the following deployment:  cray-ims, the Image Management Service (IMS)   The NCN Certificate Authority (CA) public key has been properly installed into the CA cache for this system. A token providing Simple Storage Service (S3) credentials has been generated.  Limitations  The commands in this procedure must be run as the root user. The IMS tool currently only supports Kiwi-NG recipe types.  Procedure   Locate the desired recipe to download from S3.\nThere may be multiple records returned. Ensure that the correct record is selected in the returned data.\nncn# cray ims recipes list Excerpt from example output:\n[[results]] id = \u0026#34;76ef564d-47d5-415a-bcef-d6022a416c3c\u0026#34; name = \u0026#34;cray-sles15-barebones\u0026#34; created = \u0026#34;2020-02-05T19:24:22.621448+00:00\u0026#34; [results.link] path = \u0026#34;s3://ims/recipes/76ef564d-47d5-415a-bcef-d6022a416c3c/cray-sles15-barebones.tgz\u0026#34; etag = \u0026#34;28f3d78c8cceca2083d7d3090d96bbb7\u0026#34; type = \u0026#34;s3\u0026#34;   Create variables for the S3 bucket and key values from the S3 path in the returned data of the previous step.\nncn# S3_ARTIFACT_BUCKET=ims ncn# S3_ARTIFACT_KEY=recipes/76ef564d-47d5-415a-bcef-d6022a416c3c/cray-sles15-barebones.tgz ncn# ARTIFACT_FILENAME=cray-sles15-barebones.tgz   Download the recipe archive.\nUse the variables created in the previous step when running the following command.\nncn# cray artifacts get $S3_ARTIFACT_BUCKET $S3_ARTIFACT_KEY $ARTIFACT_FILENAME   Expand the recipe with tar.\nncn# mkdir image-recipe ncn# tar xvf $ARTIFACT_FILENAME -C image-recipe   Modify the recipe by editing the files and subdirectories in the image-recipe directory.\nA Kiwi recipe consists of multiple files and directories, which together define the repositories, packages, and post-install actions to take during the Kiwi build process.\n Edit the config.xml file to modify the name of the recipe, the set of RPM packages being installed, or the RPM repositories being referenced. Kiwi-NG supports multiple ways to modify the post-install configuration of the image root, including some shell scripts (config.sh, images.sh) and the root/overlay directory. To learn how these can be used to add specific configuration to the image root, see the Kiwi-NG documentation. Recipes built by IMS are required to reference repositories that are hosted on the NCN by the Nexus service.    Locate the directory containing the Kiwi-NG image description files.\nThis step should be done after the recipe has been changed.\nncn# cd image-recipe   Set an environment variable for the name of the file that will contain the archive of the image recipe.\nncn# ARTIFACT_FILE=my_recipe.tgz   Create a tgz archive of the image recipe.\nncn# tar cvfz ../$ARTIFACT_FILE . ncn# cd ..   Create a new IMS recipe record.\nncn# cray ims recipes create --name \u0026#34;My Recipe\u0026#34; \\  --recipe-type kiwi-ng --linux-distribution sles15 Example output:\ncreated = \u0026#34;2018-12-04T17:25:52.482514+00:00\u0026#34; id = \u0026#34;2233c82a-5081-4f67-bec4-4b59a60017a6\u0026#34; linux_distribution = \u0026#34;sles15\u0026#34; name = \u0026#34;my_recipe.tgz\u0026#34; recipe_type = \u0026#34;kiwi-ng\u0026#34;   Create a variable for the id value in the returned data.\nncn# IMS_RECIPE_ID=2233c82a-5081-4f67-bec4-4b59a60017a6   Upload the customized recipe to S3.\nIt is suggested as a best practice that the S3 object name start with recipes/ and contain the IMS recipe ID, in order to remove ambiguity.\nncn# cray artifacts create ims recipes/$IMS_RECIPE_ID/$ARTIFACT_FILE $ARTIFACT_FILE   Update the IMS recipe record with the S3 path to the recipe archive.\nncn# cray ims recipes update $IMS_RECIPE_ID --link-type s3 \\  --link-path s3://ims/recipes/$IMS_RECIPE_ID/$ARTIFACT_FILE Example output:\nid = \u0026#34;2233c82a-5081-4f67-bec4-4b59a60017a6\u0026#34; recipe_type = \u0026#34;kiwi-ng\u0026#34; linux_distribution = \u0026#34;sles15\u0026#34; name = \u0026#34;my_recipe.tgz\u0026#34; created = \u0026#34;2020-02-05T19:24:22.621448+00:00\u0026#34; [link] path = \u0026#34;s3://ims/recipes/2233c82a-5081-4f67-bec4-4b59a60017a6/my_recipe.tgz\u0026#34; etag = \u0026#34;\u0026#34; type = \u0026#34;s3\u0026#34;   "
},
{
	"uri": "/docs-csm/en-12/operations/hmcollector/adjust_hmcollector_resource_limits_requests/",
	"title": "Adjust Hm Collector Resource Limits And Requests",
	"tags": [],
	"description": "",
	"content": "Adjust HM Collector resource limits and requests  Resource Limit Tuning Guidance Customize cray-hms-hmcollector resource limits and requests in customizations.yaml Redeploy cray-hms-hmcollector with new resource limits and requests  Resource Limit Tuning Guidance Inspect current resource usage in the cray-hms-hmcollector pod View resource usage of the containers in the cray-hms-hmcollector pod:\nncn-m001# kubectl -n services top pod -l app.kubernetes.io/name=cray-hms-hmcollector --containers POD NAME CPU(cores) MEMORY(bytes) cray-hms-hmcollector-7c5b797c5c-zxt67 istio-proxy 187m 275Mi cray-hms-hmcollector-7c5b797c5c-zxt67 cray-hms-hmcollector 4398m 296Mi The default resource limits for the cray-hms-hmcollector container are:\n CPU: 4 or 4000m Memory: 5Gi  The default resource limits for the istio-proxy container are:\n CPU: 2 or 2000m Memory: 1Gi  Inspect the cray-hms-hmcollector pod for OOMKilled events Describe the collector-hms-hmcollector pod to determine if it has been OOMKilled in the recent past:\nncn-m001# kubectl -n services describe pod -l app.kubernetes.io/name=cray-hms-hmcollector Look for the cray-hms-hmcollector container and check its Last State (if present) to see if the container has been previously terminated due to it running out of memory:\n[...] Containers: cray-hms-hmcollector: Container ID: containerd://a35853bacdcea350e70c57fe1667b5b9d3c82d41e1e7c1f901832bae97b722fb Image: dtr.dev.cray.com/cray/hms-hmcollector:2.10.6 Image ID: dtr.dev.cray.com/cray/hms-hmcollector@sha256:b043617f83b9ff7e542e56af5bbf47f4ca35876f83b5eb07314054726c895b08 Ports: 80/TCP, 443/TCP Host Ports: 0/TCP, 0/TCP State: Running Started: Tue, 21 Sep 2021 20:52:13 +0000 Last State: Terminated Reason: OOMKilled Exit Code: 137 Started: Tue, 21 Sep 2021 20:51:08 +0000 Finished: Tue, 21 Sep 2021 20:52:12 +0000 [...]  In the above example output the cray-hms-hmcollector container was previously OOMKilled, but the container is currently running.\n Look for the isitio-proxy container and check its Last State (if present) to see if the container has been previously terminated due to it running out of memory:\n[...] istio-proxy: Container ID: containerd://f439317c16f7db43e87fbcec59b7d36a0254dabd57ab71865d9d7953d154bb1a Image: dtr.dev.cray.com/cray/proxyv2:1.7.8-cray1 Image ID: dtr.dev.cray.com/cray/proxyv2@sha256:8f2bccd346381e0399564142f9534c6c76d8d0b8bd637e9440d53bf96a9d86c7 Port: 15090/TCP Host Port: 0/TCP Args: proxy sidecar --domain $(POD_NAMESPACE).svc.cluster.local --serviceCluster cray-hms-hmcollector.services --proxyLogLevel=warning --proxyComponentLogLevel=misc:error --trust-domain=cluster.local --concurrency 2 State: Running Started: Tue, 21 Sep 2021 20:51:09 +0000 Last State: Terminated Reason: OOMKilled Exit Code: 137 Started: Tue, 21 Sep 2021 20:51:08 +0000 Finished: Tue, 21 Sep 2021 20:52:12 +0000 [...]  In the above example output the istio-proxy container was previously OOMKilled, but the container is currently running.\n How to adjust CPU and Memory limits If the cray-hms-hmcollector container is hitting its CPU limit and memory usage is steadily increasing till it gets OOMKilled, then the CPU limit for the cray-hms-hmcollector should be increased. It can be increased in increments of 8 or 8000m This is a situation were the collector is unable to process events fast enough and they start to collect build up inside of it.\nIf the cray-hms-hmcollector container is consistency hitting its CPU limit, then its CPU limit should be increased. It can be increased in increments of 8 or 8000m.\nIf the cray-hms-hmcollector container is consistency hitting its memory limit, then its memory limit should be increased. It can be increased in increments of 5Gi.\nIf the istio-proxy container is getting OOMKilled, then its memory limit should be increased in increments of 5 Gigabytes (5Gi) at a time.\nOtherwise, if the cray-hms-hmcollector and istio-proxy containers are not hitting their CPU or memory limits\nFor reference, on a system with 4 fully populated liquid cooled cabinets the cray-hms-hmcollector was consuming ~5 or ~5000m of CPU and ~300Mi of memory.\nCustomize cray-hms-hmcollector resource limits and requests in customizations.yaml   If the site-init repository is available as a remote repository then clone it on the host orchestrating the upgrade:\nncn-m001# git clone \u0026#34;$SITE_INIT_REPO_URL\u0026#34; site-init Otherwise, create a new site-init working tree:\nncn-m001# git init site-init   Download customizations.yaml:\nncn-m001# kubectl get secrets -n loftsman site-init -o jsonpath=\u0026#39;{.data.customizations\\.yaml}\u0026#39; | base64 -d \u0026gt; site-init/customizations.yaml   Review, add, and commit customizations.yaml to the local site-init repository as appropriate.\n NOTE: If site-init was cloned from a remote repository in step 1, there may not be any differences and hence nothing to commit. This is okay. If there are differences between what is in the repository and what was stored in the site-init, then it suggests settings were improperly changed at some point. If that is the case then be cautious, there may be dragons ahead.\n ncn-m001# cd site-init ncn-m001# git diff ncn-m001# git add customizations.yaml ncn-m001# git commit -m \u0026#39;Add customizations.yaml from site-init secret\u0026#39;   Update customizations.yaml with the existing cray-hms-hmcollector resource limits and requests settings:\nPersist resource requests and limits from the cray-hms-hmcollector deployment:\nncn-m001# kubectl -n services get deployments cray-hms-hmcollector \\  -o jsonpath=\u0026#39;{.spec.template.spec.containers[].resources}\u0026#39; | yq r -P - | \\  yq w -f - -i ./customizations.yaml spec.kubernetes.services.cray-hms-hmcollector.resources Persist annotations manually added to cray-hms-hmcollector deployment:\nncn-m001# kubectl -n services get deployments cray-hms-hmcollector \\  -o jsonpath=\u0026#39;{.spec.template.metadata.annotations}\u0026#39; | \\  yq d -P - \u0026#39;\u0026#34;traffic.sidecar.istio.io/excludeOutboundPorts\u0026#34;\u0026#39; | \\  yq w -f - -i ./customizations.yaml spec.kubernetes.services.cray-hms-hmcollector.podAnnotations View the updated overrides added to customizations.yaml. If the value overrides look different to the sample output below then the resource limits and requests have been manually modified in the past.\nncn-m001# yq r ./customizations.yaml spec.kubernetes.services.cray-hms-hmcollector Example output:\nhmcollector_external_ip: '{{ network.netstaticips.hmn_api_gw }}' resources: limits: cpu: \u0026quot;4\u0026quot; memory: 5Gi requests: cpu: 500m memory: 256Mi podAnnotations: {}   If desired adjust the resource limits and requests for the cray-hms-hmcollector. Otherwise this step can be skipped. Refer to Resource Limit Tuning Guidance for information on how the resource limits could be adjusted.\nEdit customizations.yaml and the value overrides for the cray-hms-hmcollector Helm chart are defined at spec.kubernetes.services.cray-hms-hmcollector\nAdjust the resource limits and requests for the cray-hms-hmcollector deployment in customizations.yaml:\ncray-hms-hmcollector: hmcollector_external_ip: \u0026#39;{{ network.netstaticips.hmn_api_gw }}\u0026#39; resources: limits: cpu: \u0026#34;4\u0026#34; memory: 5Gi requests: cpu: 500m memory: 256Mi To specify a non-default memory limit for the Istio proxy used by the cray-hms-hmcollector to pod annotation sidecar.istio.io/proxyMemoryLimit can added under podAnnotations. By default the Istio proxy memory limit is 1Gi.\ncray-hms-hmcollector: podAnnotations: sidecar.istio.io/proxyMemoryLimit: 5Gi   Review the changes to customizations.yaml and verify baseline system customizations and any customer-specific settings are correct.\nncn-m001# git diff   Add and commit customizations.yaml if there are any changes:\nncn-m001# git add customizations.yaml ncn-m001# git commit -m \u0026quot;Update customizations.yaml consistent with CSM $CSM_RELEASE_VERSION\u0026quot;   Update site-init sealed secret in loftsman namespace:\nncn-m001# kubectl delete secret -n loftsman site-init ncn-m001# kubectl create secret -n loftsman generic site-init --from-file=customizations.yaml   Push to the remote repository as appropriate:\nncn-m001# git push   If this document was referenced during an upgrade procure, then skip Otherwise, continue on to Redeploy cray-hms-hmcollector with new resource limits and requests for the the new resource limits and requests to take effect.\n  Redeploy cray-hms-hmcollector with new resource limits and requests   Determine the version of HM Collector:\nncn-m001# HMCOLLECTOR_VERSION=$(kubectl -n loftsman get cm loftsman-sysmgmt -o jsonpath=\u0026#39;{.data.manifest\\.yaml}\u0026#39; | yq r - \u0026#39;spec.charts.(name==cray-hms-hmcollector).version\u0026#39;) ncn-m001# echo $HMCOLLECTOR_VERSION   Create hmcollector-manifest.yaml:\nncn-m001# cat \u0026gt; hmcollector-manifest.yaml \u0026lt;\u0026lt; EOF apiVersion: manifests/v1beta1 metadata: name: hmcollector spec: charts: - name: cray-hms-hmcollector version: $HMCOLLECTOR_VERSION namespace: services EOF   Acquire customizations.yaml:\nncn-m001# kubectl get secrets -n loftsman site-init -o jsonpath=\u0026#39;{.data.customizations\\.yaml}\u0026#39; | base64 -d \u0026gt; customizations.yaml   Merge customizations.yaml with hmcollector-manifest.yaml:\nncn-m001# manifestgen -c customizations.yaml -i ./hmcollector-manifest.yaml \u0026gt; ./hmcollector-manifest.out.yaml   Redeploy the HM Collector helm chart:\nncn-m001# loftsman ship \\  --charts-repo https://packages.local/repository/charts \\  --manifest-path hmcollector-manifest.out.yaml   "
},
{
	"uri": "/docs-csm/en-12/operations/image_management/build_a_new_uan_image_using_the_default_recipe/",
	"title": "Build A New UAN Image Using The Default Recipe",
	"tags": [],
	"description": "",
	"content": "Build a New UAN Image Using the Default Recipe Build or rebuild the User Access Node (UAN) image using either the default UAN image or image recipe. Both of these are supplied by the UAN product stream installer.\n Prerequisites Overview Remove Slingshot Diagnostics RPM From Default UAN Recipe Build the UAN Image Automatically Using IMS Build the UAN Image By Customizing It Manually  Prerequisites  Both the Cray Operation System (COS) and UAN product streams must be installed. The Cray administrative CLI must be initialized.  Overview The Cray EX User Access Node (UAN) recipe currently requires the Slingshot Diagnostics package, which is not installed with the UAN product itself. Therefore, the UAN recipe can only be built after either the Slingshot product is installed, or the Slingshot Diagnostics package is removed from the recipe.\nFirst, determine if the Slingshot product stream is installed on the HPE Cray EX system. The Slingshot Diagnostics RPM must be removed from the default recipe if the Slingshot product is not installed.\nRemove Slingshot Diagnostics RPM From Default UAN Recipe This procedure does not need to be followed if the Slingshot package is installed.\n  Perform Upload and Register an Image Recipe procedure to download and extract the UAN image recipe, cray-sles15sp1-uan-cos, but stop before the step that modifies the recipe.\n  Edit the file config-template.xml.j2 within the recipe by removing these lines:\n\u0026lt;!-- SECTION: Slingshot Diagnostic package --\u0026gt; \u0026lt;package name=\u0026quot;cray-diags-fabric\u0026quot;/\u0026gt;   Resume the Upload and Register an Image Recipe procedure, starting with the step that locates the directory that contains the Kiwi-NG image description files.\nThe next step requires the id of the new image recipe record.\n  Perform the Build an Image Using IMS REST Service procedure in order to build the UAN image from the modified recipe. Use the id of the new image recipe.\n  Build the UAN Image Automatically Using IMS This procedure does not need to be followed if choosing to build the UAN image manually.\n  Identify the UAN image recipe.\nncn# cray ims recipes list --format json | jq \u0026#39;.[] | select(.name | contains(\u0026#34;uan\u0026#34;))\u0026#39; Example output:\n{ \u0026#34;created\u0026#34;: \u0026#34;2021-02-17T15:19:48.549383+00:00\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;4a5d1178-80ad-4151-af1b-bbe1480958d1\u0026#34;, \u0026#34;link\u0026#34;: { \u0026#34;etag\u0026#34;: \u0026#34;3c3b292364f7739da966c9cdae096964\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;s3://ims/recipes/4a5d1178-80ad-4151-af1b-bbe1480958d1/recipe.tar.gz\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34; }, \u0026#34;linux_distribution\u0026#34;: \u0026#34;sles15\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;cray-shasta-uan-cos-sles15sp1.x86_64-@product_version@\u0026#34;, \u0026#34;recipe_type\u0026#34;: \u0026#34;kiwi-ng\u0026#34; }   Save the ID of the IMS recipe in an environment variable.\nncn# IMS_RECIPE_ID=4a5d1178-80ad-4151-af1b-bbe1480958d1   Using the saved IMS recipe ID, follow the Build an Image Using IMS REST Service procedure to build the UAN image.\n  Build the UAN Image By Customizing It Manually This procedure does not need to be followed if the previous procedure was used to build the UAN image automatically.\n  Identify the base UAN image to customize.\nncn# cray ims images list --format json | jq \u0026#39;.[] | select(.name | contains(\u0026#34;uan\u0026#34;))\u0026#39; Example output:\n{ \u0026#34;created\u0026#34;: \u0026#34;2021-02-18T17:17:44.168655+00:00\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;6d46d601-c41f-444d-8b49-c9a2a55d3c21\u0026#34;, \u0026#34;link\u0026#34;: { \u0026#34;etag\u0026#34;: \u0026#34;371b62c9f0263e4c8c70c8602ccd5158\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/6d46d601-c41f-444d-8b49-c9a2a55d3c21/manifest.json\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;uan-PRODUCT_VERSION-image\u0026#34; }   Save the ID of the IMS image in an environment variable.\nncn# IMS_IMAGE_ID=4a5d1178-80ad-4151-af1b-bbe1480958d1   Using the saved IMS image ID, follow the Customize an Image Root Using IMS procedure to build the UAN image.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/image_management/build_an_image_using_ims_rest_service/",
	"title": "Build An Image Using IMS Rest Service",
	"tags": [],
	"description": "",
	"content": "Build an Image Using IMS REST Service Create an image root from an IMS recipe.\nPrerequisites  The Cray command line interface (CLI) tool is initialized and configured on the system. System management services (SMS) are running in a Kubernetes cluster on non-compute nodes (NCN) and include the following deployments:  cray-ims, the Image Management Service (IMS) cray-nexus, the Nexus repository manager service   The NCN Certificate Authority (CA) public key has been properly installed into the CA cache for this system. kubectl is installed locally and configured to point at the SMS Kubernetes cluster. A Kiwi image recipe uploaded as a gzipped tar file and registered with IMS. See Upload and Register an Image Recipe. A token providing Simple Storage Service (S3) credentials has been generated.  Limitations The commands in this procedure must be run as the root user.\nProcedure Prepare to create the image   Check for an existing IMS public key ID.\n Skip this step if it is known that a public key associated with the user account being used was not previously uploaded to the IMS service.\n The following query may return multiple public key records. The correct one will have a name value including the current username in use.\nncn# cray ims public-keys list Example output excerpt:\n[[results]] public_key = \u0026#34;ssh-rsa AAAAB3NzaC1yc2EA ... AsVruw1Zeiec2IWt\u0026#34; id = \u0026#34;a252ff6f-c087-4093-a305-122b41824a3e\u0026#34; name = \u0026#34;username public key\u0026#34; created = \u0026#34;2018-11-21T17:19:07.830000+00:00\u0026#34; If a public key associated with the username in use is not returned, proceed to the next step. If a public key associated with the username does exist, create a variable for the IMS public key id value in the returned data and then proceed to step 3.\nncn# IMS_PUBLIC_KEY_ID=a252ff6f-c087-4093-a305-122b41824a3e   Upload the SSH public key to the IMS service.\n Skip this step if an IMS public key record has already been created for the account being used.\n The IMS debug/configuration shell relies on passwordless SSH. This SSH public key needs to be uploaded to IMS to enable interaction with the image customization environment later in this procedure.\nReplace the username value with the actual username being used on the system when setting the public key name.\nncn# cray ims public-keys create --name \u0026#34;username public key\u0026#34; --public-key ~/.ssh/id_rsa.pub Example output:\npublic_key = \u0026#34;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCl50gK4l9uupxC2KHxMpTNxPTJbnwEdWy1jst5W5LqJx9fdTrc9uNJ33HAq+WIOhPVGbLm2N4GX1WTUQ4+wVOSmmBBJnlu/l5rmO9lEGT6U8lKG8dA9c7qhguGHy7M7WBgdW/gWA16gwE/u8Qc2fycFERRKmFucL/Er9wA0/Qvz7/U59yO+HOtk5hvEz/AUkvaaoY0IVBfdNBCl59CIdZHxDzgXlXzd9PAlrXZNO8jDD3jyFAOvMMRG7py78zj2NUngvsWYoBcV3FcREZJU529uJ0Au8Vn9DRADyB4QQS2o+fa6hG9i2SzfY8L6vAVvSE7A2ILAsVruw1Zeiec2IWt\u0026#34; id = \u0026#34;a252ff6f-c087-4093-a305-122b41824a3e\u0026#34; name = \u0026#34;username public key\u0026#34; created = \u0026#34;2018-11-21T17:19:07.830000+00:00\u0026#34; If successful, create a variable for the IMS public key id value in the returned data.\nncn# IMS_PUBLIC_KEY_ID=a252ff6f-c087-4093-a305-122b41824a3e   Get the IMS recipe to build   Locate the IMS recipe needed to build the image.\nncn# cray ims recipes list Example output excerpt:\n[[results]] id = \u0026#34;2233c82a-5081-4f67-bec4-4b59a60017a6\u0026#34; name = \u0026#34;my_recipe.tgz\u0026#34; created = \u0026#34;2020-02-05T19:24:22.621448+00:00\u0026#34; [results.link] path = \u0026#34;s3://ims/recipes/2233c82a-5081-4f67-bec4-4b59a60017a6/my_recipe.tgz\u0026#34; etag = \u0026#34;28f3d78c8cceca2083d7d3090d96bbb7\u0026#34; type = \u0026#34;s3\u0026#34; If successful, create a variable for the IMS recipe id in the returned data.\nncn# IMS_RECIPE_ID=2233c82a-5081-4f67-bec4-4b59a60017a6   Submit the Kubernetes image create job   Create an IMS job record and start the image creation job.\nAfter building an image, IMS will automatically upload any build artifacts (root file system, kernel and initrd) to the artifact repository, and associate them with IMS. IMS is not able to dynamically determine the Linux kernel and initrd to look for because the file name for these vary depending upon Linux distribution, Linux version, dracut configuration, and more. Thus, the user must pass the name of the kernel and initrd that IMS will look for in the resultant image root\u0026rsquo;s /boot directory.\nUse the following table to help determine the default kernel and initrd file names to specify when submitting the job to customize an image. These are just default names. Please consult with the site administrator to determine if these names have been changed for a given image or recipe.\n   Recipe Recipe Name Kernel File Name initrd File Name     SLES 15 SP3 Barebones cray-sles15sp3-barebones vmlinuz initrd   COS cray-shasta-compute-sles15sp3.x86_64-1.4.66 vmlinuz initrd    ncn# cray ims jobs create \\  --job-type create \\  --image-root-archive-name cray-sles15-barebones \\  --artifact-id $IMS_RECIPE_ID \\  --public-key-id $IMS_PUBLIC_KEY_ID \\  --enable-debug False Example output:\nstatus = \u0026#34;creating\u0026#34; enable_debug = false kernel_file_name = \u0026#34;vmlinuz\u0026#34; artifact_id = \u0026#34;2233c82a-5081-4f67-bec4-4b59a60017a6\u0026#34; build_env_size = 10 job_type = \u0026#34;create\u0026#34; kubernetes_service = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-service\u0026#34; kubernetes_job = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-create\u0026#34; id = \u0026#34;ad5163d2-398d-4e93-94f0-2f439f114fe7\u0026#34; image_root_archive_name = \u0026#34;cray-sles15-barebones\u0026#34; initrd_file_name = \u0026#34;initrd\u0026#34; created = \u0026#34;2018-11-21T18:22:53.409405+00:00\u0026#34; public_key_id = \u0026#34;a252ff6f-c087-4093-a305-122b41824a3e\u0026#34; kubernetes_configmap = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-configmap\u0026#34; If successful, create variables for the IMS job id and kubernetes_job values in the returned data.\nncn# IMS_JOB_ID=ad5163d2-398d-4e93-94f0-2f439f114fe7 ncn# IMS_KUBERNETES_JOB=cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-create   Describe the image create job.\nncn# kubectl -n ims describe job $IMS_KUBERNETES_JOB Example output:\nName: ims-myimage-create Namespace: default [...] Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal SuccessfulCreate 4m job-controller Created pod: cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-create-lt69t If successful, create a variable for the pod name that was created above, displayed in the Events section.\nncn# POD=cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-create-lt69t   Watch the logs from the fetch-recipe, wait-for-repos, build-ca-rpm, build-image, and buildenv-sidecar containers to monitor the image creation process.\nUse kubectl and the returned pod name from the previous step to retrieve this information.\nThe fetch-recipe container is responsible for fetching the recipe archive from S3 and uncompressing the recipe.\nncn# kubectl -n ims logs -f $POD -c fetch-recipe Example output:\nINFO:/scripts/fetch.py:IMS_JOB_ID=ad5163d2-398d-4e93-94f0-2f439f114fe7 INFO:/scripts/fetch.py:Setting job status to \u0026#39;fetching_recipe\u0026#39;. INFO:ims_python_helper:image_set_job_status: {{ims_job_id: ad5163d2-398d-4e93-94f0-2f439f114fe7, job_status: fetching_recipe}} INFO:ims_python_helper:PATCH https://api-gw-service-nmn.local/apis/ims/jobs/ad5163d2-398d-4e93-94f0-2f439f114fe7 status=fetching_recipe INFO:/scripts/fetch.py:Fetching recipe http://rgw.local:8080/ims/recipes/2233c82a-5081-4f67-bec4-4b59a60017a6/my_recipe.tgz?AWSAccessKeyId=GQZKV1HAM80ZFDZJFFS7\u0026amp;Expires=1586891507\u0026amp;Signature=GzRzuTWo3p5CoKHzT2mIuPQXLGM%3D INFO:/scripts/fetch.py:Saving file as \u0026#39;/mnt/recipe/recipe.tgz\u0026#39; INFO:/scripts/fetch.py:Verifying md5sum of the downloaded file. INFO:/scripts/fetch.py:Successfully verified the md5sum of the downloaded file. INFO:/scripts/fetch.py:Uncompressing recipe into /mnt/recipe INFO:/scripts/fetch.py:Deleting compressed recipe /mnt/recipe/recipe.tgz INFO:/scripts/fetch.py:Done The wait-for-repos container will ensure that any HTTP/HTTPS repositories referenced by the Kiwi-NG recipe can be accessed and are available. This helps ensure that the image will be built successfully. If 301 responses are returned instead of 200 responses, that does not indicate an error.\nncn# kubectl -n ims logs -f $POD -c wait-for-repos Example output:\n2019-05-17 09:53:47,381 - INFO - __main__ - Recipe contains the following repos: [\u0026#39;http://api-gw-service-nmn.local/repositories/sle15-Module-Basesystem/\u0026#39;, \u0026#39;http://api-gw-service-nmn.local/repositories/sle15-Product-SLES/\u0026#39;, \u0026#39;http://api-gw-service-nmn.local/repositories/cray-sle15\u0026#39;] 2019-05-17 09:53:47,381 - INFO - __main__ - Attempting to get http://api-gw-service-nmn.local/repositories/sle15-Module-Basesystem/repodata/repomd.xml 2019-05-17 09:53:47,404 - INFO - __main__ - 200 response getting http://api-gw-service-nmn.local/repositories/sle15-Module-Basesystem/repodata/repomd.xml 2019-05-17 09:53:47,404 - INFO - __main__ - Attempting to get http://api-gw-service-nmn.local/repositories/sle15-Product-SLES/repodata/repomd.xml 2019-05-17 09:53:47,431 - INFO - __main__ - 200 response getting http://api-gw-service-nmn.local/repositories/sle15-Product-SLES/repodata/repomd.xml 2019-05-17 09:53:47,431 - INFO - __main__ - Attempting to get http://api-gw-service-nmn.local/repositories/cray-sle15/repodata/repomd.xml 2019-05-17 09:53:47,458 - INFO - __main__ - 200 response getting http://api-gw-service-nmn.local/repositories/cray-sle15/repodata/repomd.xml The build-ca-rpm container creates an RPM with the private root CA certificate for the system. This RPM is installed automatically by Kiwi-NG to ensure that Kiwi can securely talk to the Nexus repositories when building the image root.\nncn# kubectl -n ims logs -f $POD -c build-ca-rpm Example output:\ncray_ca_cert-1.0.0/ cray_ca_cert-1.0.0/etc/ cray_ca_cert-1.0.0/etc/cray/ cray_ca_cert-1.0.0/etc/cray/ca/ cray_ca_cert-1.0.0/etc/cray/ca/certificate_authority.crt Executing(%prep): /bin/sh -e /var/tmp/rpm-tmp.pgDBLk + umask 022 + cd /root/rpmbuild/BUILD + cd /root/rpmbuild/BUILD + rm -rf cray_ca_cert-1.0.0 + /bin/gzip -dc /root/rpmbuild/SOURCES/cray_ca_cert-1.0.0.tar.gz + /bin/tar -xof - + STATUS=0 + \u0026#39;[\u0026#39; 0 -ne 0 ] + cd cray_ca_cert-1.0.0 + /bin/chmod -Rf a+rX,u+w,g-w,o-w . + exit 0 Executing(%build): /bin/sh -e /var/tmp/rpm-tmp.gILKaJ + umask 022 + cd /root/rpmbuild/BUILD + cd cray_ca_cert-1.0.0 + exit 0 Executing(%install): /bin/sh -e /var/tmp/rpm-tmp.PGhobB + umask 022 + cd /root/rpmbuild/BUILD + cd cray_ca_cert-1.0.0 + install -d /root/rpmbuild/BUILDROOT/cray_ca_cert-1.0.0-1.x86_64/usr/share/pki/trust/anchors + install -m 644 /etc/cray/ca/certificate_authority.crt /root/rpmbuild/BUILDROOT/cray_ca_cert-1.0.0-1.x86_64/usr/share/pki/trust/anchors/cray_certificate_authority.crt + /usr/lib/rpm/brp-compress + /usr/lib/rpm/brp-strip /usr/bin/strip + /usr/lib/rpm/brp-strip-static-archive /usr/bin/strip find: file: No such file or directory + /usr/lib/rpm/brp-strip-comment-note /usr/bin/strip /usr/bin/objdump Processing files: cray_ca_cert-1.0.0-1.x86_64 Provides: cray_ca_cert = 1.0.0-1 cray_ca_cert(x86-64) = 1.0.0-1 Requires(interp): /bin/sh Requires(rpmlib): rpmlib(CompressedFileNames) \u0026lt;= 3.0.4-1 rpmlib(PayloadFilesHavePrefix) \u0026lt;= 4.0-1 Requires(post): /bin/sh Checking for unpackaged file(s): /usr/lib/rpm/check-files /root/rpmbuild/BUILDROOT/cray_ca_cert-1.0.0-1.x86_64 Wrote: /root/rpmbuild/RPMS/x86_64/cray_ca_cert-1.0.0-1.x86_64.rpm Executing(%clean): /bin/sh -e /var/tmp/rpm-tmp.jHaFMC + umask 022 + cd /root/rpmbuild/BUILD + cd cray_ca_cert-1.0.0 + exit 0 The build-image container builds the recipe using the Kiwi-NG tool.\nncn# kubectl -n ims logs -f $POD -c build-image Example output:\n+ RECIPE_ROOT_PARENT=/mnt/recipe + IMAGE_ROOT_PARENT=/mnt/image + PARAMETER_FILE_BUILD_FAILED=/mnt/image/build_failed + PARAMETER_FILE_KIWI_LOGFILE=/mnt/image/kiwi.log [...] + kiwi-ng --logfile=/mnt/image/kiwi.log --type tbz system build --description /mnt/recipe --target /mnt/image [ INFO ]: 16:14:31 | Loading XML description [ INFO ]: 16:14:31 | --\u0026gt; loaded /mnt/recipe/config.xml [ INFO ]: 16:14:31 | --\u0026gt; Selected build type: tbz [ INFO ]: 16:14:31 | Preparing new root system [ INFO ]: 16:14:31 | Setup root directory: /mnt/image/build/image-root [ INFO ]: 16:14:31 | Setting up repository http://api-gw-service-nmn.local/repositories/sle15-Module-Basesystem/ [ INFO ]: 16:14:31 | --\u0026gt; Type: rpm-md [ INFO ]: 16:14:31 | --\u0026gt; Translated: http://api-gw-service-nmn.local/repositories/sle15-Module-Basesystem/ [ INFO ]: 16:14:31 | --\u0026gt; Alias: SLES15_Module_Basesystem [ INFO ]: 16:14:32 | Setting up repository http://api-gw-service-nmn.local/repositories/sle15-Product-SLES/ [ INFO ]: 16:14:32 | --\u0026gt; Type: rpm-md [ INFO ]: 16:14:32 | --\u0026gt; Translated: http://api-gw-service-nmn.local/repositories/sle15-Product-SLES/ [ INFO ]: 16:14:32 | --\u0026gt; Alias: SLES15_Product_SLES [ INFO ]: 16:14:32 | Setting up repository http://api-gw-service-nmn.local/repositories/cray-sle15 [ INFO ]: 16:14:32 | --\u0026gt; Type: rpm-md [ INFO ]: 16:14:32 | --\u0026gt; Translated: http://api-gw-service-nmn.local/repositories/cray-sle15 [ INFO ]: 16:14:32 | --\u0026gt; Alias: DST_built_rpms [...] [ INFO ]: 16:19:19 | Calling images.sh script [ INFO ]: 16:19:55 | Creating system image [ INFO ]: 16:19:55 | Creating XZ compressed tar archive [ INFO ]: 16:21:31 | --\u0026gt; Creating archive checksum [ INFO ]: 16:21:51 | Export rpm packages metadata [ INFO ]: 16:21:51 | Export rpm verification metadata [ INFO ]: 16:22:09 | Result files: [ INFO ]: 16:22:09 | --\u0026gt; image_packages: /mnt/image/cray-sles15-barebones.x86_64-1.0.1.packages [ INFO ]: 16:22:09 | --\u0026gt; image_verified: /mnt/image/cray-sles15-barebones.x86_64-1.0.1.verified [ INFO ]: 16:22:09 | --\u0026gt; root_archive: /mnt/image/cray-sles15-barebones.x86_64-1.0.1.tar.xz [ INFO ]: 16:22:09 | --\u0026gt; root_archive_md5: /mnt/image/cray-sles15-barebones.x86_64-1.0.1.md5 + rc=0 + \u0026#39;[\u0026#39; 0 -ne 0 \u0026#39;]\u0026#39; + exit 0 The buildenv-sidecar container determines if the Kiwi-NG build was successful or not.\n If the Kiwi-NG build completed successfully, the image root, kernel, and initrd artifacts are uploaded to the artifact repository. If the Kiwi-NG build failed to complete successfully, an optional SSH debug shell is enabled so the image build can be debugged.  ncn# kubectl -n ims logs -f $POD -c buildenv-sidecar Example output:\nNot running user shell for successful create action Copying SMS CA Public Certificate to target image root + IMAGE_ROOT_PARENT=/mnt/image + IMAGE_ROOT_DIR=/mnt/image/build/image-root + KERNEL_FILENAME=vmlinuz + INITRD_FILENAME=initrd + IMAGE_ROOT_ARCHIVE_NAME=sles15_barebones_image + echo Copying SMS CA Public Certificate to target image root + mkdir -p /mnt/image/build/image-root/etc/cray + cp -r /etc/cray/ca /mnt/image/build/image-root/etc/cray/ + mksquashfs /mnt/image/build/image-root /mnt/image/sles15_barebones_image.sqsh Parallel mksquashfs: Using 4 processors Creating 4.0 filesystem on /mnt/image/sles15_barebones_image.sqsh, block size 131072. [===========================================================\\] 26886/26886 100% Exportable Squashfs 4.0 filesystem, gzip compressed, data block size 131072 compressed data, compressed metadata, compressed fragments, compressed xattrs [...] + python -m ims_python_helper image upload_artifacts sles15_barebones_image 7de80ccc-1e7d-43a9-a6e4-02cad10bb60b \\ -v -r /mnt/image/sles15_barebones_image.sqsh -k /mnt/image/image-root/boot/vmlinuz -i /mnt/image/image-root/boot/initrd { \u0026#34;ims_image_artifacts\u0026#34;: [ { \u0026#34;link\u0026#34;: { \u0026#34;etag\u0026#34;: \u0026#34;4add976679c7e955c4b16d7e2cfa114e-32\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/d88521c3-b339-43bc-afda-afdfda126388/rootfs\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34; }, \u0026#34;md5\u0026#34;: \u0026#34;94165af4373e5ace3e817eb4baba2284\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;application/vnd.cray.image.rootfs.squashfs\u0026#34; }, { \u0026#34;link\u0026#34;: { \u0026#34;etag\u0026#34;: \u0026#34;f836412241aae79d160556ed6a4eb4d4\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/d88521c3-b339-43bc-afda-afdfda126388/kernel\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34; }, \u0026#34;md5\u0026#34;: \u0026#34;f836412241aae79d160556ed6a4eb4d4\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;application/vnd.cray.image.kernel\u0026#34; }, { \u0026#34;link\u0026#34;: { \u0026#34;etag\u0026#34;: \u0026#34;ec8793c07f94e59a2a30abdb1bd3d35a-4\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/d88521c3-b339-43bc-afda-afdfda126388/initrd\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34; }, \u0026#34;md5\u0026#34;: \u0026#34;86832ee3977ca0515592e5d00271d2fe\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;application/vnd.cray.image.initrd\u0026#34; }, { \u0026#34;link\u0026#34;: { \u0026#34;etag\u0026#34;: \u0026#34;13af343f3e76b0f8c7fbef7ee3588ac1\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/d88521c3-b339-43bc-afda-afdfda126388/manifest.json\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34; }, \u0026#34;md5\u0026#34;: \u0026#34;13af343f3e76b0f8c7fbef7ee3588ac1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;application/json\u0026#34; } ], \u0026#34;ims_image_record\u0026#34;: { \u0026#34;created\u0026#34;: \u0026#34;2018-12-17T22:59:43.264129+00:00\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;d88521c3-b339-43bc-afda-afdfda126388\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;sles15_barebones_image\u0026#34; \u0026#34;link\u0026#34;: { \u0026#34;etag\u0026#34;: \u0026#34;13af343f3e76b0f8c7fbef7ee3588ac1\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/d88521c3-b339-43bc-afda-afdfda126388/manifest.json\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34; }, }, \u0026#34;ims_job_record\u0026#34;: { \u0026#34;artifact_id\u0026#34;: \u0026#34;2233c82a-5081-4f67-bec4-4b59a60017a6\u0026#34;, \u0026#34;build_env_size\u0026#34;: 10, \u0026#34;created\u0026#34;: \u0026#34;2018-11-21T18:22:53.409405+00:00\u0026#34;, \u0026#34;enable_debug\u0026#34;: false, \u0026#34;id\u0026#34;: \u0026#34;ad5163d2-398d-4e93-94f0-2f439f114fe7\u0026#34;, \u0026#34;image_root_archive_name\u0026#34;: \u0026#34;sles15_barebones_image\u0026#34;, \u0026#34;initrd_file_name\u0026#34;: \u0026#34;initrd\u0026#34;, \u0026#34;job_type\u0026#34;: \u0026#34;create\u0026#34;, \u0026#34;kernel_file_name\u0026#34;: \u0026#34;vmlinuz\u0026#34;, \u0026#34;kubernetes_configmap\u0026#34;: \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-configmap\u0026#34;, \u0026#34;kubernetes_job\u0026#34;: \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-create\u0026#34;, \u0026#34;kubernetes_service\u0026#34;: \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-service\u0026#34;, \u0026#34;public_key_id\u0026#34;: \u0026#34;a252ff6f-c087-4093-a305-122b41824a3e\u0026#34;, \u0026#34;resultant_image_id\u0026#34;: \u0026#34;d88521c3-b339-43bc-afda-afdfda126388\u0026#34;, \u0026#34;ssh_port\u0026#34;: 0, \u0026#34;status\u0026#34;: \u0026#34;creating\u0026#34; }, \u0026#34;result\u0026#34;: \u0026#34;success\u0026#34; } [...]  IMPORTANT: The IMS image creation workflow automatically copies the NCN Certificate Authority\u0026rsquo;s public certificate to /etc/cray/ca/certificate_authority.crt within the image root being built. This can be used to enable secure communications between the NCN and the client node.\n If the image creation operation fails, the build artifacts will not be uploaded to S3. If enable_debug is set to true, then the IMS creation job will enable a debug SSH shell that is accessible by one or more dynamic host names. The user needs to know if they will SSH from inside or outside the Kubernetes cluster to determine which host name to use. Typically, customers access the system from outside the Kubernetes cluster using the Customer Access Network (CAN).\n  If no errors are observed, skip to the 1. Verify that the new image was created correctly step.\nOtherwise, proceed to the following step to debug the failure.\n  Use the IMS_JOB_ID to look up the ID of the newly created image.\nThere may be multiple records returned. Ensure that the correct record is selected in the returned data.\nncn# cray ims jobs describe $IMS_JOB_ID Example output:\nstatus = \u0026#34;waiting_on_user\u0026#34; enable_debug = false kernel_file_name = \u0026#34;vmlinuz\u0026#34; artifact_id = \u0026#34;4e78488d-4d92-4675-9d83-97adfc17cb19\u0026#34; build_env_size = 10 job_type = \u0026#34;create\u0026#34; kubernetes_service = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-service\u0026#34; kubernetes_job = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-create\u0026#34; id = \u0026#34;ad5163d2-398d-4e93-94f0-2f439f114fe7\u0026#34; image_root_archive_name = \u0026#34;my_customized_image\u0026#34; initrd_file_name = \u0026#34;initrd\u0026#34; created = \u0026#34;2018-11-21T18:22:53.409405+00:00\u0026#34; kubernetes_namespace = \u0026#34;ims\u0026#34; public_key_id = \u0026#34;a252ff6f-c087-4093-a305-122b41824a3e\u0026#34; kubernetes_configmap = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-configmap\u0026#34; [[ssh_containers]] status = \u0026#34;pending\u0026#34; jail = false name = \u0026#34;debug\u0026#34; [ssh_containers.connection_info.\u0026#34;cluster.local\u0026#34;] host = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-service.ims.svc.cluster.local\u0026#34; port = 22 [ssh_containers.connection_info.customer_access] host = \u0026#34;ad5163d2-398d-4e93-94f0-2f439f114fe7.ims.cmn.shasta.cray.com\u0026#34; \u0026lt;\u0026lt;-- Note this host port = 22 \u0026lt;\u0026lt;-- Note this port If successful, create variables for the SSH connection information.\nncn# IMS_SSH_HOST=ad5163d2-398d-4e93-94f0-2f439f114fe7.ims.cmn.shasta.cray.com ncn# IMS_SSH_PORT=22   Connect to the IMS debug shell.\nTo access the debug shell, SSH to the container using the private key that matches the public key used to create the IMS job.\n IMPORTANT: The following command will not work when run on a node within the Kubernetes cluster.\n ncn# ssh -p IMS_SSH_PORT root@IMS_SSH_HOST Example output:\nLast login: Tue Sep 4 18:06:27 2018 from gateway [root@POD ~]#   Investigate using the IMS debug shell.\n  Change to the /mnt/image/ directory.\n[root@POD image]# cd /mnt/image/   Access the image root.\n[root@POD image]# chroot image-root/   Investigate inside the image debug shell.\n  Exit the image root.\n:/ # exit [root@POD image]#   Touch the complete file once investigations are complete.\n[root@POD image]# touch /mount/image/complete     Verify that the new image was created correctly.\nncn# cray ims jobs describe $IMS_JOB_ID Example output:\nstatus = \u0026#34;success\u0026#34; enable_debug = false kernel_file_name = \u0026#34;vmlinuz\u0026#34; artifact_id = \u0026#34;2233c82a-5081-4f67-bec4-4b59a60017a6\u0026#34; build_env_size = 10 job_type = \u0026#34;create\u0026#34; kubernetes_service = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-service\u0026#34; kubernetes_job = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-customize\u0026#34; id = \u0026#34;ad5163d2-398d-4e93-94f0-2f439f114fe7\u0026#34; image_root_archive_name = \u0026#34;sles15_barebones_image\u0026#34; resultant_image_id = d88521c3-b339-43bc-afda-afdfda126388 initrd_file_name = \u0026#34;initrd\u0026#34; created = \u0026#34;2018-11-21T18:22:53.409405+00:00\u0026#34; kubernetes_namespace = \u0026#34;ims\u0026#34; public_key_id = \u0026#34;a252ff6f-c087-4093-a305-122b41824a3e\u0026#34; kubernetes_configmap = \u0026#34;cray-ims-ad5163d2-398d-4e93-94f0-2f439f114fe7-configmap\u0026#34; If successful, create a variable for the IMS resultant_image_id.\nncn# IMS_RESULTANT_IMAGE_ID=d88521c3-b339-43bc-afda-afdfda126388   Verify that the new IMS image record exists.\nncn# cray ims images describe $IMS_RESULTANT_IMAGE_ID Example output:\ncreated = \u0026#34;2018-12-17T22:59:43.264129+00:00\u0026#34; id = \u0026#34;d88521c3-b339-43bc-afda-afdfda126388\u0026#34; name = \u0026#34;sles15_barebones_image\u0026#34; [link] path = \u0026#34;s3://boot-images/d88521c3-b339-43bc-afda-afdfda126388/manifest.json\u0026#34; etag = \u0026#34;180883770442235de747e9d69855f269\u0026#34; type = \u0026#34;s3\u0026#34;   Clean up the creation environment   Delete the IMS job record.\nncn# cray ims jobs delete $IMS_JOB_ID Deleting the job record will delete the underlying Kubernetes job, service, and ConfigMap that were created when the job record was submitted.\n  Images built by IMS contain only the packages and settings that are referenced in the Kiwi-NG recipe used to build the image. The only exception is that IMS will dynamically install the system\u0026rsquo;s root CA certificate to allow Zypper (via Kiwi-NG) to talk securely with the required Nexus RPM repositories. Images that are intended to be used to boot a CN or other node must be configured with DNS and other settings that enable the image to talk to vital services. A base level of customization is provided by the default Ansible plays used by the Configuration Framework Service (CFS) to enable DNS resolution; these plays are typically run against an image after it is built by IMS.\nWhen customizing an image via Customize an Image Root Using IMS, once in the image root using chroot (or if using a `jailed` environment), the image will only have access to whatever configuration the image already contains. In order to talk to services, including Nexus RPM repositories, the image root must first be configured with DNS and other settings. That base level of customization is provided by the default Ansible plays used by CFS to enable DNS resolution.\n"
},
{
	"uri": "/docs-csm/en-12/operations/image_management/configure_ims_to_validate_rpms/",
	"title": "Configure IMS To Validate Rpms",
	"tags": [],
	"description": "",
	"content": "Configure IMS to Validate RPMs Configuring the Image Management Service (IMS) to validate the GPG signatures of RPMs during IMS Build operations involves the following two steps:\n  Create and update IMS to use a new Kiwi-NG Image with the Signing Keys embedded.\n NOTE: The default IMS Kiwi-NG Image is already configured with the signing keys needed to validate HPE and SuSE RPMs and repositories.\n   Update IMS Recipes to require GPG verification of RPMs, repositories, or both.\n  Create and Update IMS to Use a New Kiwi-NG Image with an Embedded Signing Key   Create a temporary directory to perform the actions necessary to configure IMS to validate RPM signatures.\nncn# mkdir ims-validate ncn# cd ims-validate/   Determine the container version for the IMS Kiwi-NG container.\nncn# kubectl -n services get cm cray-configmap-ims-v2-image-create-kiwi-ng -o yaml | grep cray-ims-kiwi-ng-opensuse-x86_64-builder Example output:\n - image: cray/cray-ims-kiwi-ng-opensuse-x86_64-builder:0.4.7 If successful, make note of the version of the listed container. In this case, the version is 0.4.7.\n  Create a file containing the public portion of the Signing Key to be added to the IMS Kiwi-NG image.\nncn# cat my-signing-key.asc -----BEGIN PGP PUBLIC KEY BLOCK----- ... -----END PGP PUBLIC KEY BLOCK-----   Obtain a copy of the entrypoint.sh script from cray-ims-kiwi-ng-opensuse-x86_64-builder.\nncn# podman run -it --entrypoint \u0026#34;\u0026#34; --rm cray/cray-ims-kiwi-ng-opensuse-x86_64-builder:0.4.7 cat /scripts/entrypoint.sh | tee entrypoint.sh   Modify the entrypoint.sh script to pass the signing key to the kiwi-ng command.\nncn# cat entrypoint.sh Example output:\n[...] # Call kiwi to build the image recipe. Note that the command line --add-bootstrap-package # causes kiwi to install the cray-ca-cert RPM into the image root. kiwi-ng $DEBUG_FLAGS --logfile=$PARAMETER_FILE_KIWI_LOGFILE --type tbz system build --description $RECIPE_ROOT_PARENT \\ --target $IMAGE_ROOT_PARENT --add-bootstrap-package file:///mnt/ca-rpm/cray_ca_cert-1.0.1-1.x86_64.rpm \\ --signing-key /signing-keys/my-signing-key.asc # \u0026lt;--- ADD SIGNING-KEY FILE [...]   Create a Dockerfile to create a new cray-ims-kiwi-ng-opensuse-x86_64-builder image.\nncn# cat Dockerfile FROM registry.local/cray/cray-ims-kiwi-ng-opensuse-x86_64-builder:0.4.7 RUN mkdir /signing-keys COPY my-signing-key.asc /signing-keys COPY entrypoint.sh /scripts/entrypoint.sh ENTRYPOINT [\u0026#34;/scripts/entrypoint.sh\u0026#34;]  NOTE: Make sure that the version of the cray-ims-kiwi-ng-opensuse-x86_64-builder image in the FROM line matches the version of the image above.\n   Verify that the following files are in the temporary directory.\nncn# ls Dockerfile entrypoint.sh my-signing-key.asc   Using the podman command, build and tag a new cray-ims-kiwi-ng-opensuse-x86_64-builder image.\nncn# podman build -t registry.local/cray/cray-ims-kiwi-ng-opensuse-x86_64-builder:0.4.7-validate . STEP 1: FROM registry.local/cray/cray-ims-kiwi-ng-opensuse-x86_64-builder:0.4.7 STEP 2: RUN mkdir /signing-keys --\u0026gt; Using cache 5d64aadcffd3f9f8f112cca75b886cecfccbfe903d4b0d4176882f0e78ccd4d0 --\u0026gt; 5d64aadcffd STEP 3: COPY my-signing-key.asc /signing-keys --\u0026gt; Using cache c10ffb877529bdbe855522af93827503f76d415e2e129d171a7fc927f896095a --\u0026gt; c10ffb87752 STEP 4: COPY entrypoint.sh /scripts/entrypoint.sh --\u0026gt; Using cache 6e388b60f42b6cd26df65ec1798ad771bdb835267126f16aa86e90aec78b0f32 --\u0026gt; 6e388b60f42 STEP 5: ENTRYPOINT [\u0026#34;/scripts/entrypoint.sh\u0026#34;] --\u0026gt; Using cache 46c78827eb62c66c9f42aeba12333281b073dcc80212c4547c8cc806fe5519b3 STEP 6: COMMIT registry.local/cray/cray-ims-kiwi-ng-opensuse-x86_64-builder:0.4.7-validate --\u0026gt; 46c78827eb6 46c78827eb62c66c9f42aeba12333281b073dcc80212c4547c8cc806fe5519b3   Obtain Nexus credentials.\nncn# NEXUS_USERNAME=\u0026#34;$(kubectl -n nexus get secret nexus-admin-credential --template {{.data.username}} | base64 -d)\u0026#34; ncn# NEXUS_PASSWORD=\u0026#34;$(kubectl -n nexus get secret nexus-admin-credential --template {{.data.password}} | base64 -d)\u0026#34;   Push the new image to the Nexus image registry.\nncn# podman push registry.local/cray/cray-ims-kiwi-ng-opensuse-x86_64-builder:0.4.7-validate --creds=\u0026#34;$NEXUS_USERNAME:$NEXUS_PASSWORD\u0026#34;   Update the IMS cray-configmap-ims-v2-image-create-kiwi-ng ConfigMap to use this new image.\nncn# kubectl -n services edit cm cray-configmap-ims-v2-image-create-kiwi-ng Example output:\n[...] - image: cray/cray-ims-kiwi-ng-opensuse-x86_64-builder:0.4.7-validate [...]  NOTE: It may take several minutes for this change to take effect. Restarting IMS is not necessary.\n   Cleanup and remove the temporary directory\nncn# cd .. ncn# rm -rfv ims-validate/   Update IMS Recipes to Require GPG Verification of RPMs/Repos   List the IMS recipes and determine which recipes need to be updated.\nncn# cray ims recipes list --format json Example output:\n[ [...] { \u0026quot;created\u0026quot;: \u0026quot;2021-06-29T21:50:38.319526+00:00\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;1aab3dbb-a654-4c84-b820-a293bd4ab2b4\u0026quot;, \u0026quot;link\u0026quot;: { \u0026quot;etag\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;s3://ims/recipes/1aab3dbb-a654-4c84-b820-a293bd4ab2b4/my_recipe.tgz\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;s3\u0026quot; }, \u0026quot;linux_distribution\u0026quot;: \u0026quot;sles15\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;cos-2.1.51-slingshot-1.2.1\u0026quot;, \u0026quot;recipe_type\u0026quot;: \u0026quot;kiwi-ng\u0026quot; }, [...] ]   Download the recipe archive for any recipe that will be updated.\nncn# cray artifacts get ims recipes/1aab3dbb-a654-4c84-b820-a293bd4ab2b4/recipe.tar.gz recipe.tar.gz   Uncompress the recipe archive into a temporary directory.\nncn# mkdir -v recipe ncn# tar xvfz recipe.tar.gz -C recipe/ ncn# cd recipe/   Modify the recipe\u0026rsquo;s config.xml file and enable GPG validation on any repos that should be validated. To validate each package\u0026rsquo;s GPG signature, add package_gpgcheck=\u0026quot;true\u0026quot;. To validate the repository signature, add repository_gpgcheck=\u0026quot;true\u0026quot;.\n\u0026lt;repository type=\u0026quot;rpm-md\u0026quot; alias=\u0026quot;...\u0026quot; priority=\u0026quot;2\u0026quot; imageinclude=\u0026quot;true\u0026quot; package_gpgcheck=\u0026quot;true\u0026quot;\u0026gt; ... \u0026lt;/repository\u0026gt; \u0026lt;repository type=\u0026quot;rpm-md\u0026quot; alias=\u0026quot;...\u0026quot; priority=\u0026quot;2\u0026quot; imageinclude=\u0026quot;true\u0026quot; repository_gpgcheck=\u0026quot;true\u0026quot;\u0026gt; ... \u0026lt;/repository\u0026gt;   Create a new recipe tar file.\nncn# tar cvfz ../recipe-new.tgz .   Move to the parent directory.\nncn# cd ..   Create a new IMS recipe record.\nncn# cray ims recipes create --name \u0026#34;My Recipe\u0026#34; \\  --recipe-type kiwi-ng --linux-distribution sles15 Example output:\ncreated = \u0026quot;2018-12-04T17:25:52.482514+00:00\u0026quot; id = \u0026quot;2233c82a-5081-4f67-bec4-4b59a60017a6\u0026quot; linux_distribution = \u0026quot;sles15\u0026quot; name = \u0026quot;my_recipe.tgz\u0026quot; recipe_type = \u0026quot;kiwi-ng\u0026quot; If successful, create a variable for the id value in the returned data.\nncn# IMS_RECIPE_ID=2233c82a-5081-4f67-bec4-4b59a60017a6   Upload the customized recipe to S3.\nIt is suggested as a best practice that the S3 object name start with recipes/ and contain the IMS recipe ID to remove ambiguity.\nncn# cray artifacts create ims recipes/$IMS_RECIPE_ID/recipe.tgz recipe-new.tgz   Update the IMS recipe record with the S3 path to the recipe archive.\nncn-m001# cray ims recipes update $IMS_RECIPE_ID \\  --link-type s3 \\  --link-path s3://ims/recipes/$IMS_RECIPE_ID/recipe.tgz Example output:\nid = \u0026quot;2233c82a-5081-4f67-bec4-4b59a60017a6\u0026quot; recipe_type = \u0026quot;kiwi-ng\u0026quot; linux_distribution = \u0026quot;sles15\u0026quot; name = \u0026quot;my_recipe.tgz\u0026quot; created = \u0026quot;2020-02-05T19:24:22.621448+00:00\u0026quot; [link] path = \u0026quot;s3://ims/recipes/2233c82a-5081-4f67-bec4-4b59a60017a6/my_recipe.tgz\u0026quot; etag = \u0026quot;\u0026quot; type = \u0026quot;s3\u0026quot;   Cleanup and remove the temporary directory.\nncn# cd .. ncn# rm -rf recipe/   "
},
{
	"uri": "/docs-csm/en-12/operations/image_management/convert_tgz_archives_to_squashfs_images/",
	"title": "Convert Tgz Archives To SqUAShfs Images",
	"tags": [],
	"description": "",
	"content": "Convert TGZ Archives to SquashFS Images If customizing a pre-built image root archive compressed as a .txz or other non-SquashFS format, convert the image root to SquashFS and upload the SquashFS archive to S3.\nThe steps in this section only apply if the image root is not in SquashFS format.\nPrerequisites There is a pre-built image that is not currently in SquashFS format.\nProcedure   Locate the image root to be converted to SquashFS.\nImages and recipes are uploaded to IMS and S3 via containers.\n  Uncompress the desired file to a temporary directory.\nReplace the TXZ_COMPRESSED_IMAGE value with the name of the image root being used that was located in the previous step.\nncn-mw# mkdir -p ~/tmp/image-root ncn-mw# cd ~/tmp/ ncn-mw# tar xvf TXZ_COMPRESSED_IMAGE -C image-root   Recompress the image root with SquashFS.\nncn-mw# mksquashfs image-root IMAGE_NAME.squashfs   "
},
{
	"uri": "/docs-csm/en-12/operations/image_management/create_uan_boot_images/",
	"title": "Create UAN Boot Images",
	"tags": [],
	"description": "",
	"content": "Create UAN Boot Images Update configuration management Git repository to match the installed version of the UAN product. Then use that updated configuration to create UAN boot images and a BOS session template.\nThis is the overall workflow for preparing UAN images for booting UANs:\n Clone the UAN configuration Git repository and create a branch based on the branch imported by the UAN installation. Update the configuration content and push the changes to the newly created branch. Create a Configuration Framework Service (CFS) configuration for the UANs, specifying the Git configuration and the UAN image to apply the configuration to. More Cray products can also be added to the CFS configuration so that the UANs can install multiple Cray products into the UAN image at the same time. Configure the UAN image using CFS and generate a newly configured version of the UAN image. Create a Boot Orchestration Service (BOS) boot session template for the UANs. This template maps the configured image, the CFS configuration to be applied post-boot, and the nodes which will receive the image and configuration.  Once the UAN BOS session template is created, then the UANs will be ready to be booted by a BOS session.\nReplace PRODUCT_VERSION and CRAY_EX_HOSTNAME in the example commands in this procedure with the current UAN product version installed (see Obtain UAN artifact IDs and other information) and the hostname of the HPE Cray EX system, respectively.\nPrerequisites The UAN product stream must be installed.\nLimitations This guide only details how to apply UAN-specific configuration to the UAN image and nodes. Consult the manuals for the individual HPE products (for example, workload managers and the HPE Cray Programming Environment) that must be configured on the UANs.\nProcedure UAN image pre-boot configuration   Obtain UAN artifact IDs and other information.\nUpon successful installation of the UAN product, the UAN configuration, image recipes, and prebuilt boot images are cataloged in the cray-product-catalog Kubernetes ConfigMap. This information is required for this procedure.\nncn# kubectl get cm -n services cray-product-catalog -o json | jq -r .data.uan Example output:\nPRODUCT_VERSION: configuration: clone_url: https://vcs.CRAY_EX_HOSTNAME/vcs/cray/uan-config-management.git # \u0026lt;--- Gitea clone url commit: 6658ea9e75f5f0f73f78941202664e9631a63726  # \u0026lt;--- Git commit id import_branch: cray/uan/PRODUCT_VERSION  # \u0026lt;--- Git branch with configuration import_date: 2021-02-02 19:14:18.399670 ssh_url: git@vcs.CRAY_EX_HOSTNAME:cray/uan-config-management.git images: cray-shasta-uan-cos-sles15sp1.x86_64-0.1.17: # \u0026lt;--- IMS image name id: c880251d-b275-463f-8279-e6033f61578b  # \u0026lt;--- IMS image id recipes: cray-shasta-uan-cos-sles15sp1.x86_64-0.1.17: # \u0026lt;--- IMS recipe name id: cbd5cdf6-eac3-47e6-ace4-aa1aecb1359a  # \u0026lt;--- IMS recipe id   Generate the password hash for the root user. Replace PASSWORD with the desired root password.\nncn# openssl passwd -6 -salt $(\u0026lt; /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c4) PASSWORD   Obtain the HashiCorp Vault root token.\nncn# kubectl get secrets -n vault cray-vault-unseal-keys -o jsonpath=\u0026#39;{.data.vault-root}\u0026#39; | base64 -d; echo   Write the password hash obtained from the openssl command to the HashiCorp Vault.\n The vault login command will request a token. That token value is the output of the previous step. The vault read secret/uan command verifies that the hash was stored correctly. This password hash will be written to the UAN for the root user by CFS.  ncn# kubectl exec -itn vault cray-vault-0 -- sh cray-vault-0# export VAULT_ADDR=http://cray-vault:8200 cray-vault-0# vault login cray-vault-0# vault write secret/uan root_password=\u0026#39;HASH\u0026#39; cray-vault-0# vault read secret/uan   Obtain the password for the crayvcs user from the Kubernetes secret for use in the next command.\nncn# kubectl get secret -n services vcs-user-credentials --template={{.data.vcs_password}} | base64 --decode   Clone the UAN configuration management repository.\nThe repository is in the VCS/Gitea service and the location is reported in the cray-product-catalog Kubernetes ConfigMap in the configuration.clone_url key. The CRAY_EX_HOSTNAME from the clone_url is replaced with api-gw-service-nmn.local in the command that clones the repository.\nncn# git clone https://api-gw-service-nmn.local/vcs/cray/uan-config-management.git ncn# cd uan-config-management \u0026amp;\u0026amp; git checkout cray/uan/PRODUCT_VERSION \u0026amp;\u0026amp; git pull   Create a branch using the imported branch from the installation to customize the UAN image.\nThis imported branch will be reported in the cray-product-catalog Kubernetes ConfigMap in the configuration.import_branch key under the UAN section. The format is cray/uan/PRODUCT_VERSION. In this guide, an integration branch is used for examples, but the name can be any valid Git branch name.\nModifying the cray/uan/PRODUCT_VERSION branch that was created by the UAN product installation is not allowed by default.\nncn# git checkout -b integration \u0026amp;\u0026amp; git merge cray/uan/PRODUCT_VERSION   Configure a root user in the UAN image.\nAdd the encrypted password of the root user from /etc/shadow on an NCN worker to the file group_vars/Application/passwd.yml.\n Skip this step if the root user is already configured in the image.\n Hewlett Packard Enterprise recommends configuring a root user in the UAN image for troubleshooting purposes. The entry for root user password will resemble the following example:\nroot_passwd: $6$LmQ/PlWlKixK$VL4ueaZ8YoKOV6yYMA9iH0gCl8F4C/3yC.jMIGfOK6F61h6d.iZ6/QB0NLyex1J7AtOsYvqeycmLj2fQcLjfE1   Apply any site-specific customizations and modifications to the Ansible configuration for the UAN nodes and commit the changes.\nThe default Ansible play to configure UAN nodes is site.yml in the base of the uan-config-management repository. The roles that are executed in this play allow for nondefault configuration as required for the system.\nConsult the individual Ansible role README.md files in the uan-config-management repository roles directory to configure individual role variables. Roles prefixed with uan_ are specific to UAN configuration and include network interfaces, disk, LDAP, software packages, and message of the day roles.\nVariables should be defined and overridden in the Ansible inventory locations of the repository as shown in the following example and not in the Ansible plays and roles defaults. See Ansible Directory Layout.\n WARNING: Never place sensitive information such as passwords in the Git repository.\n The following example shows how to add a vars.yml file containing site-specific configuration values to the Application group variable location.\nThese and other Ansible files do not necessarily need to be modified for UAN image creation.\nncn# vim group_vars/Application/vars.yml ncn# git add group_vars/Application/vars.yml ncn# git commit -m \u0026#34;Add vars.yml customizations\u0026#34;   Verify that the System Layout Service (SLS) and the uan_interfaces configuration role refer to the Mountain Node Management Network by the same name.\n Skip this step if there are no Mountain cabinets in the HPE Cray EX system.\n   Edit the roles/uan_interfaces/tasks/main.yml file.\nChange the line that reads url: http://cray-sls/v1/search/networks?name=MNMN to read url: http://cray-sls/v1/search/networks?name=NMN_MTN.\nThe following excerpt of the relevant section of the file shows the result of the change.\n- name: Get Mountain NMN Services Network info from SLS local_action: module: uri url: http://cray-sls/v1/search/networks?name=NMN_MTN method: GET register: sls_mnmn_svcs ignore_errors: yes   Stage and commit the network name change.\nncn# git add roles/uan_interfaces/tasks/main.yml ncn# git commit -m \u0026#34;Add Mountain cabinet support\u0026#34;     Push the changes to the repository using the proper credentials, including the password obtained previously.\nncn# git push --set-upstream origin integration Enter the appropriate credentials when prompted:\nUsername for \u0026#39;https://api-gw-service-nmn.local\u0026#39;: crayvcs Password for \u0026#39;https://crayvcs@api-gw-service-nmn.local\u0026#39;:   Capture the most recent commit for reference in setting up a CFS configuration and navigate to the parent directory.\nncn# git rev-parse --verify HEAD ecece54b1eb65d484444c4a5ca0b244b329f4667 is an example commit that could be returned.\nNavigate back to the parent directory:\nncn# cd .. The configuration parameters have been stored in a branch in the UAN Git repository. The next phase of the process is initiating the Configuration Framework Service (CFS) to customize the image.\n  Configure UAN images   Create a JSON input file for generating a CFS configuration for the UAN.\nGather the Git repository clone URL, commit, and top-level play for each configuration layer (that is, Cray product). Add them to the CFS configuration for the UAN, if wanted.\nFor the commit value for the UAN layer, use the Git commit value obtained in the previous step.\nSee the product manuals for further information on configuring other Cray products, as this procedure documents only the configuration of the UAN. More layers can be added to be configured in a single CFS session.\nThe following configuration example can be used for preboot image customization as well as post-boot node configuration.\n{ \u0026#34;layers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;uan-integration-PRODUCT\\_VERSION\u0026#34;, \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/uan-config-management.git\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;site.yml\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;ecece54b1eb65d484444c4a5ca0b244b329f4667\u0026#34; } # **{ ... add configuration layers for other products here, if desired ... }** ] }   Add the configuration to CFS using the JSON input file.\nIn the following example, the JSON file created in the previous step is named uan-config-PRODUCT_VERSION.json. Only the details for the UAN layer are shown.\nncn# cray cfs configurations update uan-config-PRODUCT_VERSION \\  --file ./uan-config-PRODUCT_VERSION.json \\  --format json Example output:\n{ \u0026#34;lastUpdated\u0026#34;: \u0026#34;2021-07-28T03:26:00:37Z\u0026#34;, \u0026#34;layers\u0026#34;: [ { \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/uan-config-management.git\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;ecece54b1eb65d484444c4a5ca0b244b329f4667\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;uan-integration-PRODUCT_VERSION\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;site.yml\u0026#34; } # \u0026lt;-- Additional layers not shown, but would be inserted here ], \u0026#34;name\u0026#34;: \u0026#34;uan-config-PRODUCT_VERSION\u0026#34; }   Modify the UAN image to include the 1.4.0 Day Zero RPMs.\n  Expand the 1.4.0 Day Zero Patch tarball if it has not been done already.\nncn# tar -xvf shasta-1.4.0-p2.tar Example output:\n1.4.0-p2/ 1.4.0-p2/csm/ 1.4.0-p2/csm/csm-0.8.22-0.9.0.patch.gz 1.4.0-p2/csm/csm-0.8.22-0.9.0.patch.gz.md5sum 1.4.0-p2/uan/ 1.4.0-p2/uan/uan-2.0.0-uan-2.0.0.patch.gz 1.4.0-p2/uan/uan-2.0.0-uan-2.0.0.patch.gz.md5sum 1.4.0-p2/rpms/ 1.4.0-p2/rpms/cray-dvs-compute-2.12_4.0.102-7.0.1.0_8.1__g30d29e7a.x86_64.rpm 1.4.0-p2/rpms/cray-dvs-devel-2.12_4.0.102-7.0.1.0_8.1__g30d29e7a.x86_64.rpm 1.4.0-p2/rpms/cray-dvs-kmp-cray_shasta_c-2.12_4.0.102_k4.12.14_197.78_9.1.58-7.0.1.0_8.1__g30d29e7a.x86_64.rpm 1.4.0-p2/rpms/cray-network-config-1.1.7-20210318094806_b409053-sles15sp1.x86_64.rpm 1.4.0-p2/rpms/slingshot-network-config-1.1.7-20210318093253_83fab52-sles15sp1.x86_64.rpm 1.4.0-p2/rpms/slingshot-network-config-full-1.1.7-20210318093253_83fab52-sles15sp1.x86_64.rpm 1.4.0-p2/rpms/cray-dvs-compute-2.12_4.0.102-7.0.1.0_8.1__g30d29e7a.x86_64.rpm.md5sum 1.4.0-p2/rpms/cray-dvs-devel-2.12_4.0.102-7.0.1.0_8.1__g30d29e7a.x86_64.rpm.md5sum 1.4.0-p2/rpms/cray-dvs-kmp-cray_shasta_c-2.12_4.0.102_k4.12.14_197.78_9.1.58-7.0.1.0_8.1__g30d29e7a.x86_64.rpm.md5sum 1.4.0-p2/rpms/cray-network-config-1.1.7-20210318094806_b409053-sles15sp1.x86_64.rpm.md5sum 1.4.0-p2/rpms/slingshot-network-config-1.1.7-20210318093253_83fab52-sles15sp1.x86_64.rpm.md5sum 1.4.0-p2/rpms/slingshot-network-config-full-1.1.7-20210318093253_83fab52-sles15sp1.x86_64.rpm.md5sum   Download the rootfs image specified in the UAN product catalog.\nReplace IMAGE_ID in the following export command with the IMS image ID recorded in Obtain UAN artifact IDs and other information.\nncn# UAN_IMAGE_ID=IMAGE_ID ncn# cray artifacts get boot-images ${UAN_IMAGE_ID}/rootfs ${UAN_IMAGE_ID}.squashfs ncn# la ${UAN_IMAGE_ID}.squashfs Example output:\n-rw-r--r-- 1 root root 1.5G Mar 17 19:35 f3ba09d7-e3c2-4b80-9d86-0ee2c48c2214.squashfs   Mount the SquashFS file and copy its contents to a different directory.\nncn# mkdir mnt ncn# mkdir UAN-1.4.0-day-zero ncn# mount -t squashfs ${UAN_IMAGE_ID}.squashfs mnt -o ro,loop ncn# cp -a mnt UAN-1.4.0-day-zero ncn# umount mnt ncn# rmdir mnt   Copy the new RPMs into the new image directory.\nncn# cp 1.4.0-p2/rpms/* UAN-1.4.0-day-zero/ ncn# cd UAN-1.4.0-day-zero/   chroot into the new image directory.\nncn# chroot . bash   Update, erase, and install RPMs in the new image directory.\nchroot-ncn# rpm -Uv cray-dvs-*.rpm chroot-ncn# rpm -e cray-network-config chroot-ncn# rpm -e slingshot-network-config-full chroot-ncn# rpm -e slingshot-network-config chroot-ncn# rpm -iv slingshot-network-config-full-1.1.7-20210318093253_83fab52-sles15sp1.x86_64.rpm \\  slingshot-network-config-1.1.7-20210318093253_83fab52-sles15sp1.x86_64.rpm \\  cray-network-config-1.1.7-20210318094806_b409053-sles15sp1.x86_64.rpm   Generate a new initrd to match the updated image.\nRun the /tmp/images.sh script. Then wait for this script to complete before continuing.\nchroot-ncn# /tmp/images.sh The output of this script will contain error messages. These error messages can be ignored as long as the following message appears at the end: dracut: *** Creating initramfs image file\n  Copy the /boot/initrd and /boot/vmlinuz files out of the chroot environment and into a temporary location on the file system of the node.\n  Exit the chroot environment and delete the packages.\nchroot-ncn# exit ncn# rm *.rpm ncn# cd ..   Verify that there is only one subdirectory in the lib/modules directory of the image.\nThe existence of more than one subdirectory indicates a mismatch between the kernel of the image and the DVS RPMs that were installed in the previous step.\nncn# la UAN-1.4.0-day-zero/lib/modules/ Example output:\ntotal 8.0K drwxr-xr-x 3 root root 49 Feb 25 17:50 ./ drwxr-xr-x 8 root root 4.0K Feb 25 17:52 ../ drwxr-xr-x 6 root root 4.0K Mar 17 19:49 4.12.14-197.78_9.1.58-cray_shasta_c/   Squash the new image directory.\nncn# mksquashfs UAN-1.4.0-day-zero UAN-1.4.0-day-zero.squashfs Example output:\nParallel mksquashfs: Using 64 processors Creating 4.0 filesystem on UAN-1.4.0-day-zero.squashfs, block size 131072. [...]   Create a new IMS image registration and save the id field in an environment variable.\nncn# cray ims images create --name UAN-1.4.0-day-zero Example output:\nname = \u0026#34;UAN-1.4.0-day-zero\u0026#34; created = \u0026#34;2021-03-17T20:23:05.576754+00:00\u0026#34; id = \u0026#34;ac31e971-f990-4b5f-821d-c0c18daefb6e\u0026#34; ncn# export NEW_IMAGE_ID=ac31e971-f990-4b5f-821d-c0c18daefb6e   Upload the new image, initrd, and kernel to S3 using the ID from the previous step.\n  Upload the image.\nncn# cray artifacts create boot-images ${NEW_IMAGE_ID}/rootfs UAN-1.4.0-day-zero.squashfs Example output:\nartifact = \u0026#34;ac31e971-f990-4b5f-821d-c0c18daefb6e/UAN-1.4.0-day-zero.rootfs\u0026#34; Key = \u0026#34;ac31e971-f990-4b5f-821d-c0c18daefb6e/UAN-1.4.0-day-zero.rootfs\u0026#34;   Upload the initrd.\nncn# cray artifacts create boot-images ${NEW_IMAGE_ID}/initrd initrd Example output:\nartifact = \u0026#34;ac31e971-f990-4b5f-821d-c0c18daefb6e/UAN-1.4.0-day-zero.initrd\u0026#34; Key = \u0026#34;ac31e971-f990-4b5f-821d-c0c18daefb6e/UAN-1.4.0-day-zero.initrd\u0026#34;   Upload the kernel.\nncn# cray artifacts create boot-images ${NEW_IMAGE_ID}/kernel vmlinuz Example output:\nartifact = \u0026#34;ac31e971-f990-4b5f-821d-c0c18daefb6e/UAN-1.4.0-day-zero.kernel\u0026#34; Key = \u0026#34;ac31e971-f990-4b5f-821d-c0c18daefb6e/UAN-1.4.0-day-zero.kernel\u0026#34;     Get the S3 generated etag value for each uploaded artifact.\n  Display S3 values for uploaded image.\nncn# cray artifacts describe boot-images ${NEW_IMAGE_ID}/rootfs Example output:\n[artifact] AcceptRanges = \u0026#34;bytes\u0026#34; LastModified = \u0026#34;2021-05-05T00:25:21+00:00\u0026#34; ContentLength = 1647050752 ETag = \u0026#34;\\\u0026#34;db5582fd817c8a8dc084e1b8b4f0ea3b-197\\\u0026#34;\u0026#34; \u0026lt;--- ContentType = \u0026#34;binary/octet-stream\u0026#34; [artifact.Metadata] md5sum = \u0026#34;cb6a8934ad3c483e740c648238800e93\u0026#34; Note that when adding the etag to the IMS manifest below, remove the quotation marks from the etag value. So, for the above artifact, the etag would be db5582fd817c8a8dc084e1b8b4f0ea3b-197.\n  Display S3 values for uploaded initrd.\nncn# cray artifacts describe boot-images ${NEW_IMAGE_ID}/initrd   Display S3 values for uploaded kernel.\nncn# cray artifacts describe boot-images ${NEW_IMAGE_ID}/kernel     Obtain the md5sum of the SquashFS image, initrd, and kernel.\nncn# md5sum UAN-1.4.0-day-zero.squashfs initrd vmlinuz Example output:\ncb6a8934ad3c483e740c648238800e93 UAN-1.4.0-day-zero.squashfs 3fd8a72a49a409f70140fabe11bdac25 initrd 5edcf3fd42ab1eccfbf1e52008dac5b9 vmlinuz   Print out all the IMS details about the current UAN image.\nUse the IMS image ID from Obtain UAN artifact IDs and other information.\nncn# cray ims images describe c880251d-b275-463f-8279-e6033f61578b Example output:\ncreated = \u0026#34;2021-03-24T18:00:24.464755+00:00\u0026#34; id = \u0026#34;c880251d-b275-463f-8279-e6033f61578b\u0026#34; name = \u0026#34;cray-shasta-uan-cos-sles15sp1.x86_64-0.1.32\u0026#34; [link] etag = \u0026#34;d4e09fb028d5d99e4a0d4d9b9d930e13\u0026#34; path = \u0026#34;s3://boot-images/c880251d-b275-463f-8279-e6033f61578b/manifest.json\u0026#34; type = \u0026#34;s3\u0026#34;   Use the path of the manifest.json file to download that JSON to a local file.\nncn# cray artifacts get boot-images c880251d-b275-463f-8279-e6033f61578b/manifest.json uan-manifest.json ncn# cat uan-manifest.json Example output:\n{ \u0026#34;artifacts\u0026#34;: [ { \u0026#34;link\u0026#34;: { \u0026#34;etag\u0026#34;: \u0026#34;6d04c3a4546888ee740d7149eaecea68\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/c880251d-b275-463f-8279-e6033f61578b/rootfs\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34; }, \u0026#34;md5\u0026#34;: \u0026#34;a159b94238fc5bfe80045889226b33a3\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;application/vnd.cray.image.rootfs.squashfs\u0026#34; }, { \u0026#34;link\u0026#34;: { \u0026#34;etag\u0026#34;: \u0026#34;6d04c3a4546888ee740d7149eaecea68\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/c880251d-b275-463f-8279-e6033f61578b/kernel\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34; }, \u0026#34;md5\u0026#34;: \u0026#34;175f0c1363c9e3a4840b08570a923bc5\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;application/vnd.cray.image.kernel\u0026#34; }, { \u0026#34;link\u0026#34;: { \u0026#34;etag\u0026#34;: \u0026#34;6d04c3a4546888ee740d7149eaecea68\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/c880251d-b275-463f-8279-e6033f61578b/initrd\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34; }, \u0026#34;md5\u0026#34;: \u0026#34;0094629e4da25226c75b113760eeabf7\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;application/vnd.cray.image.initrd\u0026#34; } ], \u0026#34;created\u0026#34; : \u0026#34;20210317153136\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0\u0026#34; } Alternatively, a manifest.json can be created from scratch.\n  Replace the path, md5, and etag values of the initrd, kernel, and rootfs with the values obtained in substeps above.\n  Update the value for the created field in the manifest with the output of the following command:\nncn# date \u0026#39;+%Y%m%d%H%M%S\u0026#39;   Verify that the modified JSON file is still valid.\nncn# cat manifest.json | jq   Upload the updated manifest.json file.\nncn# cray artifacts create boot-images ${NEW_IMAGE_ID}/manifest.json uan-manifest.json   Update the IMS image to use the new uan-manifest.json file.\nncn# cray ims images update ${NEW_IMAGE_ID} \\  --link-type s3 --link-path s3://boot-images/${NEW_IMAGE_ID}/manifest.json \\  --link-etag 6d04c3a4546888ee740d7149eaecea68 Example output:\ncreated = \u0026#34;2021-03-17T20:23:05.576754+00:00\u0026#34; id = \u0026#34;ac31e971-f990-4b5f-821d-c0c18daefb6e\u0026#34; name = \u0026#34;UAN-1.4.0-day-zero\u0026#34; [link] etag = \u0026#34;6d04c3a4546888ee740d7149eaecea68\u0026#34; path = \u0026#34;s3://boot-images/ac31e971-f990-4b5f-821d-c0c18daefb6e/manifest.json\u0026#34; type = \u0026#34;s3\u0026#34;     Create a CFS session to perform preboot image customization of the UAN image.\nncn# cray cfs sessions create --name uan-config-PRODUCT_VERSION \\  --configuration-name uan-config-PRODUCT_VERSION \\  --target-definition image \\  --target-group Application $NEW_IMAGE_ID \\  --format json   Wait for the CFS configuration session for the image customization to complete.\nThen record the ID of the IMS image created by CFS.\nThe following command will produce output while the process is running. If the CFS session completes successfully, an IMS image ID will appear in the output.\nncn# cray cfs sessions describe uan-config-PRODUCT_VERSION --format json | jq   Prepare UAN boot session templates   Retrieve the component names (xnames) of the UAN nodes from the Hardware State Manager (HSM).\nncn# cray hsm state components list --role Application --subrole UAN --format json | jq -r .Components[].ID Example output:\nx3000c0s19b0n0 x3000c0s24b0n0 x3000c0s20b0n0 x3000c0s22b0n0   Determine the correct value for the ifmap option in the kernel_parameters string for the type of UAN.\n Use ifmap=net0:nmn0,lan0:hsn0,lan1:hsn1 if the UANs are:  Either HPE DL325 or DL385 nodes that have a single OCP PCIe card installed. Gigabyte nodes that do not have additional PCIe network cards installed other than the built-in LOM ports.   Use ifmap=net2:nmn0,lan0:hsn0,lan1:hsn1 if the UANs are:  Either HPE DL325 or DL385 nodes which have a second OCP PCIe card installed, regardless of if it is being used or not. Gigabyte nodes that have a PCIe network card installed in addition to the built-in LOM ports, regardless of if it is being used or not.      Construct a JSON BOS boot session template for the UAN.\n  Populate the template with the following information:\n The value of the ifmap option for the kernel_parameters string that was determined in the previous step. The component names (xnames) of application nodes from Retrieve the UAN xnames. The customized image ID from Wait for the CFS configuration session. The CFS configuration session name from Wait for the CFS configuration session.    Verify that the session template matches the format and structure in the following example:\n{ \u0026#34;boot_sets\u0026#34;: { \u0026#34;uan\u0026#34;: { \u0026#34;boot_ordinal\u0026#34;: 2, \u0026#34;kernel_parameters\u0026#34;: \u0026#34;console=ttyS0,115200 bad_page=panic crashkernel=360M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=nmn0:dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y quiet rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 ifmap=net2:nmn0,lan0:hsn0,lan1:hsn1 spire_join_token=${SPIRE_JOIN_TOKEN}\u0026#34;, \u0026#34;network\u0026#34;: \u0026#34;nmn\u0026#34;, \u0026#34;node_list\u0026#34;: [ # \\[ ... List of Application Nodes from cray hsm state command ...\\] ], \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/IMS\\_IMAGE\\_ID/manifest.json\u0026#34;, # \u0026lt;-- result\\_id from CFS image customization session \u0026#34;rootfs_provider\u0026#34;: \u0026#34;cpss3\u0026#34;, \u0026#34;rootfs_provider_passthrough\u0026#34;: \u0026#34;dvs:api-gw-service-nmn.local:300:nmn0\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34; } }, \u0026#34;cfs\u0026#34;: { \u0026#34;configuration\u0026#34;: \u0026#34;uan-config-PRODUCT\\_VERSION\u0026#34; }, \u0026#34;enable_cfs\u0026#34;: true, \u0026#34;name\u0026#34;: \u0026#34;uan-sessiontemplate-PRODUCT\\_VERSION\u0026#34; }   Save the template with a descriptive name, such as uan-sessiontemplate-PRODUCT_VERSION.json.\n    Register the session template with BOS.\nThe following command uses the JSON session template file to save a session template in BOS. This step allows administrators to boot UANs by referring to the session template name.\nncn# cray bos sessiontemplate create \\  --name uan-sessiontemplate-PRODUCT_VERSION \\  --file uan-sessiontemplate-PRODUCT_VERSION.json Example output:\n/sessionTemplate/uan-sessiontemplate-PRODUCT_VERSION   Perform Boot UANs to boot the UANs with the new image and BOS session template.\n"
},
{
	"uri": "/docs-csm/en-12/operations/hpe_pdu/hpe_pdu_admin_procedures/",
	"title": "HPE Pdu Admin Procedures",
	"tags": [],
	"description": "",
	"content": "HPE PDU Admin Procedures The following procedures are used to manage the HPE Power Distribution Unit (PDU):\n Verify PDU vendor Connect to HPE PDU web interface HPE PDU initial set-up Update HPE PDU firmware Change HPE PDU user passwords Update Vault credentials Discover HPE PDU after upgrading CSM   IMPORTANT: Because of the polling method used to process sensor data from the HPE PDU, telemetry data may take up to six minutes to refresh; this includes the outlet status reported by the Hardware State Manager (HSM).\n Verify PDU vendor If the PDU is accessible over the network, the following can be used to determine the vendor of the PDU.\nncn-mw# PDU=x3000m0 ncn-mw# curl -k -s --compressed https://$PDU -i | grep Server:   Example ServerTech output:\nServer: ServerTech-AWS/v8.0v   Example HPE output:\nServer: HPE/1.4.0   This document covers HPE PDU procedures.\nConnect to HPE PDU web interface Connect and log in to the HPE PDU web interface. Access to the HPE PDU web interface is required for the other administrative procedures in this section.\nPrerequisites The following is needed before running this procedure:\n IP address or domain name of ncn-m001 Component name (xname) of the HPE PDU root password for ncn-m001 admin password for HPE PDU (default: 12345678)    Create an SSH tunnel from a local PC/MAC/Linux machine:\nexternal# ssh -L 8443:{PDU_xname}:443 -N root@{ncn-m001_ip} In this example, {PDU_xname} is the component name (xname) of the PDU and {ncn-m001_ip} is the IP address of ncn-m001.\nEnter the root password for ncn-m001 when prompted.\nThis command will not complete. It should be left running until the SSH tunnel is no longer needed. At that point, it can be exited with control-C.\n  Connect to https://localhost:8443 using a web browser.\nThis must be done on the system where the SSH tunnel was created in the previous step.\n  Log in with the admin username.\nEnter the admin password. If the admin password has never been changed, then there will be a prompt to change it.\n  HPE PDU initial set-up Set up an HPE PDU for administrative use by completing the following tasks:\n Ensure that Redfish is enabled Add the default user Enable outlet control    Connect to the HPE PDU Web Interface and log in as admin.\nSee Connect to HPE PDU web interface.\n  Ensure that Redfish is enabled   Use the Settings icon (gear in computer monitor in top right corner) to navigate to Network Settings.\n  Verify that there is a check next to RESTapi Access.\nIf there is not, then click the Edit icon (pencil) and enable.\n  Add the default user  Use the admin menu (top right corner) to navigate to User Accounts. Click on the Add User button. Use the form to add the username and password for the default River user. Assign the role Administrator to that user.  Enable outlet control  Using the Home icon (house in top right corner) navigate to Control \u0026amp; Manage. Verify that the Outlet Control Enable switch on the top of the page is selected (green).  Update HPE PDU firmware Verify that the firmware version for the HPE PDU is 2.0.0.L. If it is not, then a firmware update is required.\nCheck firmware version   Connect to the HPE PDU Web Interface and log in as admin.\nSee Connect to HPE PDU web interface.\n  Select the Home icon (house in the top right corner) and navigate to Identification.\nThe version will be displayed. If the version is not 2.0.0.L, then Update firmware.\n  Update firmware   Download version 2.0.0.L firmware from HPE Support.\nThis will download an .exe file, which is a self-extracting zip archive.\n  Extract the firmware files.\nIf using a Windows system, run the .exe file to extract the files. Otherwise use an unzip program on the file.\nOne of the files extracted will be named HPE.FW. That is the firmware file needed for uploading.\n  Connect to the HPE PDU Web Interface and log in as admin.\nSee Connect to HPE PDU web interface.\n  Use the Settings icon (gear in computer monitor in top right corner) to navigate to System Management.\n  Click the Update Firmware button.\n  Click Choose File and select the HPE.FW file that was downloaded.\n  Click Upload button.\nThe firmware will be updated and the PDU management processor will restart.\n  Change HPE PDU user passwords Change the password of any existing user account using the HPE PDU web interface.\n  Connect to the HPE PDU Web Interface and log in as admin.\nSee Connect to HPE PDU web interface.\n  Use the admin menu (top right corner) to navigate to User Accounts.\n  Click on the Edit icon (pencil) next to the user.\n  Enter the new password and make any other desired changes for that user account.\n  Click the Save button.\n  Discover HPE PDU after upgrading CSM Use the following procedure to ensure that the hms-discovery job and Redfish Translation Service (RTS) correctly discover HPE PDUs when upgrading to CSM 1.2 from an earlier release.\n IMPORTANT: This procedure is only needed when upgrading CSM, not performing a fresh install. Run this procedure after CSM has been fully upgraded, including the discovery job.\n   In CSM 1.0 and earlier releases, the hms-discovery job and RTS treated all PDUs as if were made by ServerTech.\nAfter the upgrade to CSM 1.2, RTS will still think that the HPE PDUs in the system are ServerTech PDUs. Remove these erroneous HPE PDU entries for RTS from Vault.\n  Get Vault password and create Vault alias.\nncn-mw# VAULT_PASSWD=$(kubectl -n vault get secrets cray-vault-unseal-keys -o json | jq -r \u0026#39;.data[\u0026#34;vault-root\u0026#34;]\u0026#39; | base64 -d) ncn-mw# alias vault=\u0026#39;kubectl -n vault exec -i cray-vault-0 -c vault -- env VAULT_TOKEN=$VAULT_PASSWD VAULT_ADDR=http://127.0.0.1:8200 VAULT_FORMAT=json vault\u0026#39;   Identify HPE PDUs known by RTS.\nncn-mw# vault kv list secret/pdu-creds Example output:\n[ \u0026#34;global/\u0026#34;, \u0026#34;x3000m0\u0026#34;, \u0026#34;x3000m1\u0026#34; ]   Remove each identified HPE PDU from Vault.\nRepeat the following command for each HPE PDU identified in the output of the previous sub-step.\nncn-mw# PDU=x3000m0 ncn-mw# vault kv delete secret/pdu-creds/$PDU   (ncn-mw#) Restart the Redfish Translation Service (RTS).\nncn-mw# kubectl -n services rollout restart deployment cray-hms-rts ncn-mw# kubectl -n services rollout status deployment cray-hms-rts     Find the list of PDU MAC addresses.\nThe ID field in each element is the normalized MAC address of each PDU:\nncn-mw# cray hsm inventory ethernetInterfaces list --type CabinetPDUController   Use the returned ID from the previous step to delete each HPE PDU MAC address from HSM.\nncn-mw# cray hsm inventory ethernetInterfaces delete {ID} On the next hms-discovery job run, it should relocate the deleted PDUs and discover them correctly as HPE PDUs.\n  After waiting five minutes, verify that the Ethernet interfaces that were previously deleted are now present:\nncn-mw# sleep 300 ncn-mw# cray hsm inventory ethernetInterfaces list --type CabinetPDUController   Verify that the Redfish endpoints for the PDUs exist and are DiscoverOK.\nncn-mw# cray hsm inventory redfishEndpoints list --type CabinetPDUController   "
},
{
	"uri": "/docs-csm/en-12/operations/hardware_state_manager/lock_and_unlock_management_nodes/",
	"title": "Lock And Unlock Management Nodes",
	"tags": [],
	"description": "",
	"content": "Lock and Unlock Management Nodes The ability to ignore non-compute nodes (NCNs) is turned off by default. Management nodes, NCNs, and their BMCs are also not locked by default. The administrator must lock the NCNs and their BMCs to prevent unwanted actions from affecting these nodes.\nThis section only covers using locks with the Hardware State Manager (HSM). For more information on ignoring nodes, refer to the following sections:\n Firmware Action Service (FAS): See Ignore Node within FAS. Cray Advanced Platform Monitoring and Control (CAPMC): See Ignore Nodes with CAPMC  The following actions can be prevented when a node and its BMC is locked.\n Firmware upgrades with FAS Power off operations with CAPMC Reset operations with CAPMC  Doing any of these actions by accident will shut down a management node. If the node is a Kubernetes master or worker node, this can have serious negative effects on system operations. If a single node is taken down by mistake, it is possible that services will recover. If all management nodes are taken down, or all Kubernetes worker nodes are taken down by mistake, the system must be restarted.\nAfter critical nodes are locked, power/reset (CAPMC) or firmware (FAS) operations cannot affect the nodes unless they are unlocked. For example, any locked node that is included in a list of nodes to be reset will result in a failure.\nTopics  When To Lock Management Nodes When To Unlock Management Nodes How To Lock Management Nodes  Script Manual Steps   How To Unlock Management Nodes  When To Lock Management Nodes To best protect system health, NCNs and their BMCs should be locked as early as possible in the install/upgrade cycle. The later in the process, the more risk there is of accidentally taking down a critical node. NCN locking must be done after Kubernetes is running and the HSM service is operational.\nCheck whether HSM is running with the following command:\nncn# kubectl -n services get pods | grep smd Example output:\ncray-smd-848bcc875c-6wqsh 2/2 Running 0 9d cray-smd-848bcc875c-hznqj 2/2 Running 0 9d cray-smd-848bcc875c-tp6gf 2/2 Running 0 6d22h cray-smd-init-2tnnq 0/2 Completed 0 9d cray-smd-postgres-0 2/2 Running 0 19d cray-smd-postgres-1 2/2 Running 0 6d21h cray-smd-postgres-2 2/2 Running 0 19d cray-smd-wait-for-postgres-4-7c78j 0/3 Completed 0 9d The cray-smd pods need to be in the Running state, except for cray-smd-init and cray-smd-wait-for-postgres which should be in Completed state.\nWhen To Unlock Management Nodes Any time a management NCN has to be power cycled, reset, or have its firmware updated, it and its BMC will first need to be unlocked. After the operation is complete, the targeted nodes and BMCs should once again be locked.\nHow To Lock Management Nodes Script Run the lock_management_nodes.py script to lock all management nodes and BMCs that are not already locked:\nncn# /opt/cray/csm/scripts/admin_access/lock_management_nodes.py The return value of the script is 0 if locking was successful. A non-zero return code means that manual intervention may be needed to lock the nodes. Continue below for manual steps.\nManual Steps Use the cray hsm locks lock command to perform locking.\nNOTE: When locking NCNs, you must lock their node BMCs as well.\nNOTE: The following steps assume both the management nodes and their BMCs are marked with the Management role in HSM. If they are not, see Set BMC Management Role.\nTo lock all nodes (and their BMCs) with the Management role The processing-model rigid parameter means that the operation must succeed on all target nodes or the entire operation will fail.\n  Lock the management nodes and BMCs.\nncn# cray hsm locks lock create --role Management --processing-model rigid Example output:\nFailure = [] [Counts] Total = 16 Success = 16 Failure = 0 [Success] ComponentIDs = [ \u0026#34;x3000c0s5b0n0\u0026#34;, \u0026#34;x3000c0s4b0n0\u0026#34;, \u0026#34;x3000c0s7b0n0\u0026#34;, \u0026#34;x3000c0s6b0n0\u0026#34;, \u0026#34;x3000c0s3b0n0\u0026#34;, \u0026#34;x3000c0s2b0n0\u0026#34;, \u0026#34;x3000c0s9b0n0\u0026#34;, \u0026#34;x3000c0s8b0n0\u0026#34;, \u0026#34;x3000c0s5b0\u0026#34;, \u0026#34;x3000c0s4b0\u0026#34;, \u0026#34;x3000c0s7b0\u0026#34;, \u0026#34;x3000c0s6b0\u0026#34;, \u0026#34;x3000c0s3b0\u0026#34;, \u0026#34;x3000c0s2b0\u0026#34;, \u0026#34;x3000c0s9b0\u0026#34;, \u0026#34;x3000c0s8b0\u0026#34;,]   To lock single nodes or lists of specific nodes (and their BMCs)  Note: The BMC of ncn-m001 typically does not exist in HSM under HSM State Components, and therefore cannot be locked.\n   Lock the management nodes and BMCs.\nncn# cray hsm locks lock create --role Management --component-ids x3000c0s6b0n0,x3000c0s6b0 --processing-model rigid Example output:\nFailure = [] [Counts] Total = 2 Success = 2 Failure = 0 [Success] ComponentIDs = [ \u0026#34;x3000c0s6b0n0\u0026#34;, \u0026#34;x3000c0s6b0\u0026#34;,]   How To Unlock Management Nodes Use the cray hsm locks unlock command to perform unlocking.\nNOTE: When unlocking NCNs, you must unlock their node BMCs as well.\nNOTE: The following steps assume both the management nodes and their BMCs are marked with the Management role in HSM. If they are not, see Set BMC Management Role.\nTo unlock all nodes (and their BMCs) with the Management role   Unlock the management nodes and BMCs.\nncn# cray hsm locks unlock create --role Management --processing-model rigid Example output:\nFailure = [] [Counts] Total = 16 Success = 16 Failure = 0 [Success] ComponentIDs = [ \u0026#34;x3000c0s7b0n0\u0026#34;, \u0026#34;x3000c0s6b0n0\u0026#34;, \u0026#34;x3000c0s3b0n0\u0026#34;, \u0026#34;x3000c0s2b0n0\u0026#34;, \u0026#34;x3000c0s9b0n0\u0026#34;, \u0026#34;x3000c0s8b0n0\u0026#34;, \u0026#34;x3000c0s5b0n0\u0026#34;, \u0026#34;x3000c0s4b0n0\u0026#34;, \u0026#34;x3000c0s5b0\u0026#34;, \u0026#34;x3000c0s4b0\u0026#34;, \u0026#34;x3000c0s7b0\u0026#34;, \u0026#34;x3000c0s6b0\u0026#34;, \u0026#34;x3000c0s3b0\u0026#34;, \u0026#34;x3000c0s2b0\u0026#34;, \u0026#34;x3000c0s9b0\u0026#34;, \u0026#34;x3000c0s8b0\u0026#34;,]   To unlock single or lists of specific nodes (and their BMCs)   Unlock the management nodes.\nncn# cray hsm locks unlock create --role Management --component-ids x3000c0s6b0n0,x3000c0s6b0 --processing-model rigid Example output:\nFailure = [] [Counts] Total = 2 Success = 2 Failure = 0 [Success] ComponentIDs = [ \u0026#34;x3000c0s6b0n0\u0026#34;, \u0026#34;x3000c0s6b0\u0026#34;,]   "
},
{
	"uri": "/docs-csm/en-12/operations/hardware_state_manager/manage_component_groups/",
	"title": "Manage Component Groups",
	"tags": [],
	"description": "",
	"content": "Manage Component Groups The creation, deletion, and modification of groups is enabled by the Hardware State Manager (HSM) APIs.\nThe following is an example group that contains the optional fields tags and exclusiveGroup:\n{ \u0026#34;label\u0026#34; : \u0026#34;blue\u0026#34;, \u0026#34;description\u0026#34; : \u0026#34;blue node group\u0026#34;, \u0026#34;tags\u0026#34; : [ \u0026#34;tag1\u0026#34;, \u0026#34;tag2\u0026#34; ], \u0026#34;members\u0026#34; : { \u0026#34;ids\u0026#34; : [ \u0026#34;x0c0s0b0n0\u0026#34;, \u0026#34;x0c0s0b0n1\u0026#34;, \u0026#34;x0c0s0b1n0\u0026#34;, \u0026#34;x0c0s0b1n1\u0026#34; ] }, \u0026#34;exclusiveGroup\u0026#34; : \u0026#34;colors\u0026#34; } Troubleshooting: If the Cray CLI has not been initialized, the CLI commands will not work.\nCreate a New Group A group is defined by its members list and identifying label. It is also possible to add a description and a free form set of tags to help organize groups.\nThe members list may be set initially with the full list of member IDs, or can begin empty and have components added individually. The following examples show two different ways to create a new group.\nCreate a new non-exclusive group with an empty members list and two optional tags:\nncn-m# cray hsm groups create --label GROUP_LABEL \\ --tags TAG1,TAG2 \\ --description DESCRIPTION_OF_GROUP_LABEL Create a new group with a pre-set members list, which is part of an exclusive group:\nncn-m# cray hsm groups create --label GROUP_LABEL \\ --description DESCRIPTION_OF_GROUP_LABEL \\ --exclusive-group EXCLUSIVE_GROUP_LABEL \\ --members-ids MEMBER_ID,MEMBER_ID,MEMBER_ID Create a new group:\nncn-m# cray hsm groups create -v --label GROUP_LABEL Add a description of the group:\nncn-m# cray hsm groups update test_group --description \u0026#34;Description of group\u0026#34; Add a new component to a group:\nncn-m# cray hsm groups members create --id XNAME GROUP_LABEL Retrieve a Group Retrieve the complete group object to learn more about a group. This is also submitted when the group is created, except it is up-to-date with any additions or deletions from the members set.\nRetrieve all fields for a group, including the members list:\nncn-m# cray hsm groups describe GROUP_LABEL Delete a Group Entire groups can be removed. The group label is deleted and removed from all members who were formerly a part of the group.\nDelete a group with the following command:\nncn-m# cray hsm groups delete GROUP_LABEL "
},
{
	"uri": "/docs-csm/en-12/operations/hardware_state_manager/manage_component_partitions/",
	"title": "Manage Component Partitions",
	"tags": [],
	"description": "",
	"content": "Manage Component Partitions The creation, deletion, and modification of partitions is enabled by the Hardware State Manager (HSM) APIs.\nThe following is an example partition that contains the optional tags field:\n{ \u0026quot;name\u0026quot; : \u0026quot;partition 1\u0026quot;, \u0026quot;description\u0026quot; : \u0026quot;partition 1\u0026quot;, \u0026quot;tags\u0026quot; : [ \u0026quot;tag2\u0026quot; ], \u0026quot;members\u0026quot; : { \u0026quot;ids\u0026quot; : [ \u0026quot;x0c0s0b0n0\u0026quot;, \u0026quot;x0c0s0b0n1\u0026quot;, \u0026quot;x0c0s0b1n0\u0026quot; ] }, } Troubleshooting: If the Cray CLI has not been initialized, the CLI commands will not work.\nCreate a New Partition Creating a partition is very similar to creating a group. Members can either be provided in an initial list, or the list can be initially empty and added to later. There is no exclusiveGroups field because partition memberships are always exclusive. The following are two different ways to create a partition.\nCreate a new partition with an empty members list and two optional tags:\nncn-m# cray hsm partitions create --name PARTITION_NAME \\ --tags TAG1,TAG2 \\ --description DESCRIPTION_OF_PARTITION_NAME Create a new partition with a pre-set members list:\nncn-m# cray hsm partitions create --name PARTITION_NAME \\ --description DESCRIPTION OF PARTITION_NAME \\ --members-ids MEMBER_ID,MEMBER_ID,MEMBER_ID,MEMBER_ID Create a new partition:\nncn-m# cray hsm partitions create -v --label PARTITION_LABEL Add a description of the partition:\nncn-m# cray hsm partitions update test_group --description \u0026quot;Description of partition\u0026quot; Add a new component to the partition:\nncn-m# cray hsm partitions members create --id XNAME PARTITION_LABEL Retrieve Partition Information Information about a partition is retrieved with the partition name.\nRetrieve all fields for a partition, including the members list:\nncn-m# cray hsm partitions describe PARTITION_NAME Delete a Partition Once a partition is deleted, the former members will not have a partition assigned to them and are ready to be assigned to a new partition.\nDelete a partition so all members are no longer in it:\nncn-m# cray hsm partitions delete PARTITION_NAME "
},
{
	"uri": "/docs-csm/en-12/operations/hardware_state_manager/manage_hms_locks/",
	"title": "Manage Hms Locks",
	"tags": [],
	"description": "",
	"content": "Manage HMS Locks This section describes how to check the status of a lock, disable reservations, and repair reservations. The disable and repair operations only affect the ability to make reservations on hardware devices.\nSome of the common scenarios an admin might encounter when working with the Hardware State Manager (HSM) Locking API are also described.\nCheck Lock Status Use the following command to verify if a component name (xname) is locked or not. The command will show if it is locked (admin), reserved (service command), or reservation disabled (either an EPO or an admin command).\nThe following shows how to interpret the output:\n Locked: Shows if the component name (xname) has been locked with the cray hsm locks lock create command. Reserved: Shows if the component name (xname) has been locked for a time-boxed event. Only service can reserve component names (xnames); administrators are not able to reserve component names (xnames). ReservationDisable: Shows if the ability to reserve a component name (xname) has been changed by an EPO or admin command.  ncn-m001# cray hsm locks status create --component-ids x1003c5s2b1n1 Example output:\nNotFound = [] [[Components]] ID = \u0026quot;x1003c5s2b1n1\u0026quot; Locked = false Reserved = false ReservationDisabled = false Disable Reservations Disabling a lock prevents a service from being able to make a reservation on it, and it releases/ends any current reservations. Even though SMD removes the reservation when disabling a lock, it does not mean that the Firmware Action Service (FAS) is aware that it has lost the reservation. Additionally, if CAPMC has a reservation that is cancelled, disabled, or broken, it will do nothing to the existing CAPMC operation. There are no checks by CAPMC to make sure things are still reserved at any time during a power operation.\nThis is a way to stop new operations from happening, not a way to prevent currently executing operations.\nncn-m001# cray hsm locks disable create --component-ids x1003c5s2b1n1 Example output:\nFailure = [] [Counts] Total = 1 Success = 1 Failure = 0 [Success] ComponentIDs = [ \u0026quot;x1003c5s2b1n1\u0026quot;,] The following is an example of a when a lock is disabled:\nncn-m001# cray hsm locks status create --component-ids x1003c5s2b1n1 Example output:\nNotFound = [] [[Components]] ID = \u0026quot;x1003c5s2b1n1\u0026quot; Locked = false Reserved = false ReservationDisabled = true Repair Reservations Locks must be manually repaired after disabling a component or performing a manual EPO. This prevents the system from automatically re-issuing reservations or giving out lock requests.\nncn-m001# cray hsm locks repair create --component-ids x1003c5s2b1n1 Example output:\nFailure = [] [Counts] Total = 1 Success = 1 Failure = 0 [Success] ComponentIDs = [ \u0026quot;x1003c5s2b1n1\u0026quot;,] To verify if the lock was successfully repaired:\nncn-m001# cray hsm locks status create --component-ids x1003c5s2b1n1 Example output:\nNotFound = [] [[Components]] ID = \u0026quot;x1003c5s2b1n1\u0026quot; Locked = false Reserved = false ReservationDisabled = false Scenario: What Happens to a Lock if a disable is Issued? Before issuing a disable command, verify that a lock is already in effect:\nncn-m001# cray hsm locks lock create --component-ids x1003c5s2b1n1 Example output:\nFailure = [] [Counts] Total = 1 Success = 1 Failure = 0 [Success] ComponentIDs = [ \u0026quot;x1003c5s2b1n1\u0026quot;,] ncn-m001# cray hsm locks status create --component-ids x1003c5s2b1n1 Example output:\nNotFound = [] [[Components]] ID = \u0026quot;x1003c5s2b1n1\u0026quot; Locked = true Reserved = false ReservationDisabled = false When attempting to disable, the lock will stay in effect, but the reservation ability will be disabled. For example:\nncn-m001# cray hsm locks disable create --component-ids x1003c5s2b1n1 Example output:\nFailure = [] [Counts] Total = 1 Success = 1 Failure = 0 [Success] ComponentIDs = [ \u0026quot;x1003c5s2b1n1\u0026quot;,] ncn-m001# cray hsm locks status create --component-ids x1003c5s2b1n1 Example output:\nNotFound = [] [[Components]] ID = \u0026quot;x1003c5s2b1n1\u0026quot; Locked = true Reserved = false ReservationDisabled = true Scenario: Can a lock be Issued to a Currently Locked Component? A lock cannot be issued to a component that is already locked. The following example shows a component that is already locked, and the returned error message when trying to lock the component again.\nncn-m001# cray hsm locks status create --component-ids x1003c5s2b1n1 Example output:\nNotFound = [] [[Components]] ID = \u0026quot;x1003c5s2b1n1\u0026quot; Locked = true \u0026lt;\u0026lt;-- component name (xname) is locked Reserved = false ReservationDisabled = true ncn-m001# cray hsm locks lock create --component-ids x1003c5s2b1n1 Example output:\nUsage: cray hsm locks lock create [OPTIONS] Try 'cray hsm locks lock create --help' for help. Error: Bad Request: Component is Locked "
},
{
	"uri": "/docs-csm/en-12/operations/hardware_state_manager/restore_hsm_postgres_from_backup/",
	"title": "Restore Hardware State Manager (HSM) Postgres Database From Backup",
	"tags": [],
	"description": "",
	"content": "Restore Hardware State Manager (HSM) Postgres Database from Backup This procedure can be used to restore the HSM Postgres database from a previously taken backup. This can be a manual backup created by the Create a Backup of the HSM Postgres Database procedure, or an automatic backup created by the cray-smd-postgresql-db-backup Kubernetes cronjob.\nPrerequisites   Healthy System Layout Service (SLS). Recovered first if also affected.\n  Healthy HSM Postgres Cluster.\nUse patronictl list on the HSM Postgres cluster to determine the current state of the cluster, and a healthy cluster will look similar to the following:\nncn# kubectl exec cray-smd-postgres-0 -n services -c postgres -it -- patronictl list Example output:\n+ Cluster: cray-smd-postgres (6975238790569058381) ---+----+-----------+ | Member | Host | Role | State | TL | Lag in MB | +---------------------+------------+--------+---------+----+-----------+ | cray-smd-postgres-0 | 10.44.0.40 | Leader | running | 1 | | | cray-smd-postgres-1 | 10.36.0.37 | | running | 1 | 0 | | cray-smd-postgres-2 | 10.42.0.42 | | running | 1 | 0 | +---------------------+------------+--------+---------+----+-----------+   Previously taken backup of the HSM Postgres cluster either a manual or automatic backup.\nCheck for any available automatic HSM Postgres backups:\nncn# cray artifacts list postgres-backup --format json | jq -r \u0026#39;.artifacts[].Key | select(contains(\u0026#34;smd\u0026#34;))\u0026#39; Example output:\ncray-smd-postgres-2021-07-11T23:10:08.manifest cray-smd-postgres-2021-07-11T23:10:08.psql   Procedure   Retrieve a previously taken HSM Postgres backup. This can be either a previously taken manual HSM backup or an automatic Postgres backup in the postgres-backup S3 bucket.\n  From a previous manual backup:\n  Copy over the folder or tarball containing the Postgres backup to be restored. If it is a tarball, extract it.\n  Set the environment variable POSTGRES_SQL_FILE to point toward the .psql file in the backup folder:\nncn# export POSTGRES_SQL_FILE=/root/cray-smd-postgres-backup_2021-07-07_16-39-44/cray-smd-postgres-backup_2021-07-07_16-39-44.psql   Set the environment variable POSTGRES_SECRET_MANIFEST to point toward the .manifest file in the backup folder:\nncn# export POSTGRES_SECRET_MANIFEST=/root/cray-smd-postgres-backup_2021-07-07_16-39-44/cray-smd-postgres-backup_2021-07-07_16-39-44.manifest     From a previous automatic Postgres backup:\n  Check for available backups.\nncn# cray artifacts list postgres-backup --format json | jq -r \u0026#39;.artifacts[].Key | select(contains(\u0026#34;smd\u0026#34;))\u0026#39; Example output:\ncray-smd-postgres-2021-07-11T23:10:08.manifest cray-smd-postgres-2021-07-11T23:10:08.psql Set the following environment variables for the name of the files in the backup:\nncn# export POSTGRES_SECRET_MANIFEST_NAME=cray-smd-postgres-2021-07-11T23:10:08.manifest ncn# export POSTGRES_SQL_FILE_NAME=cray-smd-postgres-2021-07-11T23:10:08.psql   Download the .psql file for the Postgres backup.\nncn# cray artifacts get postgres-backup \u0026#34;$POSTGRES_SQL_FILE_NAME\u0026#34; \u0026#34;$POSTGRES_SQL_FILE_NAME\u0026#34;   Download the .manifest file for the HSM backup.\nncn# cray artifacts get postgres-backup \u0026#34;$POSTGRES_SECRET_MANIFEST_NAME\u0026#34; \u0026#34;$POSTGRES_SECRET_MANIFEST_NAME\u0026#34;   Setup environment variables pointing to the full path of the .psql and .manifest files.\nncn# export POSTGRES_SQL_FILE=$(realpath \u0026#34;$POSTGRES_SQL_FILE_NAME\u0026#34;) ncn# export POSTGRES_SECRET_MANIFEST=$(realpath \u0026#34;$POSTGRES_SECRET_MANIFEST_NAME\u0026#34;)       Verify the POSTGRES_SQL_FILE and POSTGRES_SECRET_MANIFEST environment variables are set correctly.\nncn# echo \u0026#34;$POSTGRES_SQL_FILE\u0026#34; /root/cray-smd-postgres-backup_2021-07-07_16-39-44/cray-smd-postgres-backup_2021-07-07_16-39-44.psql ncn# echo \u0026#34;$POSTGRES_SECRET_MANIFEST\u0026#34; /root/cray-smd-postgres-backup_2021-07-07_16-39-44/cray-smd-postgres-backup_2021-07-07_16-39-44.manifest   Scale HSM to 0.\nncn-w001# CLIENT=cray-smd ncn-w001# POSTGRESQL=cray-smd-postgres ncn-w001# NAMESPACE=services ncn-w001# kubectl scale deployment ${CLIENT} -n ${NAMESPACE} --replicas=0 deployment.apps/cray-smd scaled ncn-w001# while [ $(kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=\u0026#34;${CLIENT}\u0026#34; | grep -v NAME | wc -l) != 0 ] ; do echo \u0026#34; waiting for pods to terminate\u0026#34;; sleep 2; done   Re-run the HSM loader job.\nncn# kubectl -n services get job cray-smd-init -o json | jq \u0026#39;del(.spec.selector)\u0026#39; | jq \u0026#39;del(.spec.template.metadata.labels.\u0026#34;controller-uid\u0026#34;)\u0026#39; | kubectl replace --force -f - Wait for the job to complete:\nncn# kubectl wait -n services job cray-smd-init --for=condition=complete --timeout=5m   Determine which Postgres member is the leader.\nncn-w001# kubectl exec \u0026#34;${POSTGRESQL}-0\u0026#34; -n ${NAMESPACE} -c postgres -it -- patronictl list Example output:\n+-------------------+---------------------+------------+--------+---------+----+-----------+ | Cluster | Member | Host | Role | State | TL | Lag in MB | +-------------------+---------------------+------------+--------+---------+----+-----------+ | cray-smd-postgres | cray-smd-postgres-0 | 10.42.0.25 | Leader | running | 1 | | | cray-smd-postgres | cray-smd-postgres-1 | 10.44.0.34 | | running | | 0 | | cray-smd-postgres | cray-smd-postgres-2 | 10.36.0.44 | | running | | 0 | +-------------------+---------------------+------------+--------+---------+----+-----------+ Create a variable for the identified leader:\nncn-w001# POSTGRES_LEADER=cray-smd-postgres-0   Determine the database schema version of the currently running HSM database, and then verify that it matches the database schema version from the Postgres backup:\nDatabase schema of the currently running HSM Postgres instance.\nncn# kubectl exec $POSTGRES_LEADER -n services -c postgres -it -- bash -c \u0026#34;psql -U hmsdsuser -d hmsds -c \u0026#39;SELECT * FROM system\u0026#39;\u0026#34; Example output:\n id | schema_version | system_info ----+----------------+------------- 0 | 17 | {} (1 row)  The output above shows the database schema is at version 17.\n Database schema version from the Postgres backup:\nncn# cat \u0026#34;$POSTGRES_SQL_FILE\u0026#34; | grep \u0026#34;COPY public.system\u0026#34; -A 2 COPY public.system (id, schema_version, dirty) FROM stdin; 0 17 f \\.  The output above shows the database schema is at version 17.\n If the database schema versions match, proceed to the next step. Otherwise, the Postgres backup taken is not applicable to the currently running instance of HSM.\nWARNING: If the database schema versions do not match the version of HSM deployed, they will need to be either upgraded/downgraded to a version with a compatible database schema version. Ideally, it will be to the same version of HSM that was used to create the Postgres backup.\n  Delete and re-create the postgresql resource (which includes the PVCs).\nncn-w001# CLIENT=cray-smd ncn-w001# POSTGRESQL=cray-smd-postgres ncn-w001# NAMESPACE=services ncn-w001# kubectl get postgresql ${POSTGRESQL} -n ${NAMESPACE} -o json | jq \u0026#39;del(.spec.selector)\u0026#39; | jq \u0026#39;del(.spec.template.metadata.labels.\u0026#34;controller-uid\u0026#34;)\u0026#39; | jq \u0026#39;del(.status)\u0026#39; \u0026gt; postgres-cr.yaml ncn-w001# kubectl delete -f postgres-cr.yaml postgresql.acid.zalan.do \u0026#34;cray-smd-postgres\u0026#34; deleted ncn-w001# while [ $(kubectl get pods -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; -n ${NAMESPACE} | grep -v NAME | wc -l) != 0 ] ; do echo \u0026#34; waiting for pods to terminate\u0026#34;; sleep 2; done ncn-w001# kubectl create -f postgres-cr.yaml postgresql.acid.zalan.do/cray-smd-postgres created ncn-w001# while [ $(kubectl get pods -l \u0026#34;application=spilo,cluster-name=${POSTGRESQL}\u0026#34; -n ${NAMESPACE} | grep -v NAME | wc -l) != 3 ] ; do echo \u0026#34; waiting for pods to start running\u0026#34;; sleep 2; done   Determine which Postgres member is the new leader.\nncn-w001# kubectl exec \u0026#34;${POSTGRESQL}-0\u0026#34; -n ${NAMESPACE} -c postgres -it -- patronictl list Example output:\n+-------------------+---------------------+------------+--------+---------+----+-----------+ | Cluster | Member | Host | Role | State | TL | Lag in MB | +-------------------+---------------------+------------+--------+---------+----+-----------+ | cray-smd-postgres | cray-smd-postgres-0 | 10.42.0.25 | Leader | running | 1 | | | cray-smd-postgres | cray-smd-postgres-1 | 10.44.0.34 | | running | | 0 | | cray-smd-postgres | cray-smd-postgres-2 | 10.36.0.44 | | running | | 0 | +-------------------+---------------------+------------+--------+---------+----+-----------+ Set a variable for the new leader:\nncn-w001# POSTGRES_LEADER=cray-smd-postgres-0   Copy the dump taken above to the Postgres leader pod and restore the data.\nIf the dump exists in a different location, adjust this example as needed.\nncn-w001# kubectl cp ${POSTGRES_SQL_FILE} ${POSTGRES_LEADER}:/home/postgres/cray-smd-postgres-dumpall.sql -c postgres -n ${NAMESPACE} ncn-w001# kubectl exec ${POSTGRES_LEADER} -c postgres -n ${NAMESPACE} -it -- psql -U postgres \u0026lt; cray-smd-postgres-dumpall.sql   Clear out of sync data from tables in postgres.\nThe backup will have restored tables that may contain out of date information. To refresh this data, it must first be deleted.\nDelete the entries in the EthernetInterfaces table. These will automatically get repopulated during rediscovery.\nncn# kubectl exec $POSTGRES_LEADER -n services -c postgres -it -- bash -c \u0026#34;psql -U hmsdsuser -d hmsds -c \u0026#39;DELETE FROM comp_eth_interfaces\u0026#39;\u0026#34;   Restore the secrets.\nOnce the dump has been restored onto the newly built postgresql cluster, the Kubernetes secrets need to match with the postgresql cluster, otherwise the service will experience readiness and liveness probe failures because it will be unable to authenticate to the database.\n  With secrets manifest from an existing backup If the Postgres secrets were auto-backed up, then re-create the secrets in Kubernetes.\nDelete and re-create the four cray-smd-postgres secrets using the manifest set to POSTGRES_SECRET_MANIFEST in step 1 above.\nncn-w001# kubectl delete secret postgres.cray-smd-postgres.credentials service-account.cray-smd-postgres.credentials hmsdsuser.cray-smd-postgres.credentials standby.cray-smd-postgres.credentials -n ${NAMESPACE} ncn-w001# kubectl apply -f ${POSTGRES_SECRET_MANIFEST}   Without the previous secrets from a backup If the Postgres secrets were not backed up, then update the secrets in Postgres.\nDetermine which Postgres member is the leader.\nncn-w001# kubectl exec \u0026#34;${POSTGRESQL}-0\u0026#34; -n ${NAMESPACE} -c postgres -it -- patronictl list Example output:\n+-------------------+---------------------+------------+--------+---------+----+-----------+ | Cluster | Member | Host | Role | State | TL | Lag in MB | +-------------------+---------------------+------------+--------+---------+----+-----------+ | cray-smd-postgres | cray-smd-postgres-0 | 10.42.0.25 | Leader | running | 1 | | | cray-smd-postgres | cray-smd-postgres-1 | 10.44.0.34 | | running | | 0 | | cray-smd-postgres | cray-smd-postgres-2 | 10.36.0.44 | | running | | 0 | +-------------------+---------------------+------------+--------+---------+----+-----------+ Set a variable for the leader:\nncn-w001# POSTGRES_LEADER=cray-smd-postgres-0 Determine what secrets are associated with the postgresql credentials.\nncn-w001# kubectl get secrets -n ${NAMESPACE} | grep \u0026#34;${POSTGRESQL}.credentials\u0026#34; Example output:\nservices hmsdsuser.cray-smd-postgres.credentials Opaque 2 31m services postgres.cray-smd-postgres.credentials Opaque 2 31m services service-account.cray-smd-postgres.credentials Opaque 2 31m services standby.cray-smd-postgres.credentials Opaque 2 31m For each secret above, get the username and password from Kubernetes and update the Postgres database with this information.\nFor example (hmsdsuser.cray-smd-postgres.credentials):\nncn-w001# kubectl get secret hmsdsuser.cray-smd-postgres.credentials -n ${NAMESPACE} -ojsonpath=\u0026#39;{.data.username}\u0026#39; | base64 -d ncn-w001# kubectl get secret hmsdsuser.cray-smd-postgres.credentials -n ${NAMESPACE} -ojsonpath=\u0026#39;{.data.password}\u0026#39;| base64 -d Exec into the leader pod to reset the user\u0026rsquo;s password:\nncn-w001# kubectl exec ${POSTGRES_LEADER} -n ${NAMESPACE} -c postgres -it -- bash root@cray-smd-postgres-0:/home/postgres# /usr/bin/psql postgres postgres postgres=# ALTER USER hmsdsuser WITH PASSWORD \u0026#39;ABCXYZ\u0026#39;; ALTER ROLE postgres=# Continue the above process until all ${POSTGRESQL}.credentials secrets have been updated in the database.\n    Restart the postgresql cluster.\nncn-w001# kubectl delete pod \u0026#34;${POSTGRESQL}-0\u0026#34; \u0026#34;${POSTGRESQL}-1\u0026#34; \u0026#34;${POSTGRESQL}-2\u0026#34; -n ${NAMESPACE} ncn-w001# while [ $(kubectl get postgresql ${POSTGRESQL} -n ${NAMESPACE} -o json | jq -r \u0026#39;.status.PostgresClusterStatus\u0026#39;) != \u0026#34;Running\u0026#34; ]; do echo \u0026#34;waiting for ${POSTGRESQL}to start running\u0026#34;; sleep 2; done   Scale the client service back to 3.\nncn-w001# kubectl scale deployment ${CLIENT} -n ${NAMESPACE} --replicas=3 ncn-w001# while [ $(kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=\u0026#34;${CLIENT}\u0026#34; | grep -v NAME | wc -l) != 3 ] ; do echo \u0026#34; waiting for pods to start running\u0026#34;; sleep 2; done   Verify that the service is functional.\nncn# cray hsm service ready Example output:\ncode = 0 message = \u0026quot;HSM is healthy\u0026quot; Get the number of node objects stored in HSM:\nncn# cray hsm state components list --type node --format json | jq .[].ID | wc -l   Resync the component state and inventory.\nAfter restoring HSM\u0026rsquo;s postgres from a back up, some of the transient data like component state and hardware inventory may be out of sync with reality. This involves kicking off an HSM rediscovery.\nncn# endpoints=$(cray hsm inventory redfishEndpoints list --format json | jq -r \u0026#39;.[]|.[]|.ID\u0026#39;) ncn# for e in $endpoints; do cray hsm inventory discover create --xnames ${e}; done Wait for discovery to complete. Discovery is complete after there are no redfishEndpoints left in the \u0026lsquo;DiscoveryStarted\u0026rsquo; state. A value of 0 will be returned.\nncn# cray hsm inventory redfishEndpoints list --format json | grep -c \u0026#34;DiscoveryStarted\u0026#34;   Check for discovery errors.\nncn# cray hsm inventory redfishEndpoints list --format json | grep LastDiscoveryStatus | grep -v -c \u0026#34;DiscoverOK\u0026#34; If any of the RedfishEndpoint entries have a LastDiscoveryStatus other than DiscoverOK after discovery has completed, refer to the Troubleshoot Issues with Redfish Endpoint Discovery procedure for guidance.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/hardware_state_manager/restore_hsm_postgres_without_a_backup/",
	"title": "Restore Hardware State Manager (HSM) Postgres Without An Existing Backup",
	"tags": [],
	"description": "",
	"content": "Restore Hardware State Manager (HSM) Postgres without an Existing Backup This procedure is intended to repopulate HSM in the event when no Postgres backup exists.\nPrerequisite   Healthy System Layout Service (SLS). Recovered first if also affected.\n  Healthy HSM service.\nVerify all 3 HSM postgres replicas are up and running:\nncn# kubectl -n services get pods -l cluster-name=cray-smd-postgres Example output:\nNAME READY STATUS RESTARTS AGE cray-smd-postgres-0 3/3 Running 0 18d cray-smd-postgres-1 3/3 Running 0 18d cray-smd-postgres-2 3/3 Running 0 18d   Procedure   Re-run the HSM loader job.\nncn# kubectl -n services get job cray-smd-init -o json | jq \u0026#39;del(.spec.selector)\u0026#39; | jq \u0026#39;del(.spec.template.metadata.labels.\u0026#34;controller-uid\u0026#34;)\u0026#39; | kubectl replace --force -f - Wait for the job to complete:\nncn# kubectl wait -n services job cray-smd-init --for=condition=complete --timeout=5m   Verify that the service is functional.\nncn# cray hsm service ready Example output:\ncode = 0 message = \u0026quot;HSM is healthy\u0026quot;   Get the number of node objects stored in HSM.\nncn# cray hsm state components list --type node --format json | jq .[].ID | wc -l   Restart MEDS and REDS.\nTo repopulate HSM with components, restart MEDS and REDS so that they will add known RedfishEndpoints back in to HSM. This will also kick off HSM rediscovery to repopulate components and hardware inventory.\nncn# kubectl scale deployment cray-meds -n services --replicas=0 ncn# kubectl scale deployment cray-meds -n services --replicas=1 ncn# kubectl scale deployment cray-reds -n services --replicas=0 ncn# kubectl scale deployment cray-reds -n services --replicas=1 Wait for the RedfishEndpoints table to get repopulated and discovery to complete.\nncn# cray hsm inventory RedfishEndpoints list --format json | jq .[].ID | wc -l 100 ncn# cray hsm inventory redfishEndpoints list --format json | grep -c \u0026#34;DiscoveryStarted\u0026#34; 0   Check for Discovery Errors.\nncn# cray hsm inventory redfishEndpoints list --format json | grep LastDiscoveryStatus | grep -v -c \u0026#34;DiscoverOK\u0026#34; If any of the RedfishEndpoint entries have a LastDiscoveryStatus other than DiscoverOK after discovery has completed, refer to the Troubleshoot Issues with Redfish Endpoint Discovery procedure for guidance.\n  Re-apply any component group or partition customizations.\nAny component groups or partitions created before HSM\u0026rsquo;s Postgres information was lost will need to be manually re-entered.\n Manage Component Groups Manage Component Partitions    "
},
{
	"uri": "/docs-csm/en-12/operations/hardware_state_manager/set_bmc_management_role/",
	"title": "Set BMC Management Roles",
	"tags": [],
	"description": "",
	"content": "Set BMC Management Roles The ability to ignore non-compute nodes (NCNs) is turned off by default. Management nodes and NCNs are also not locked by default. The administrator must lock the NCNs and their BMCs to prevent unwanted actions from affecting these nodes. To more easily identify the BMCs that are associated with the management nodes, they need to be marked with the Management role in the Hardware State Manager (HSM), just like their associated nodes.\nThis section only covers marking BMCs of management nodes with the Management role using HSM. For more information on locking or ignoring nodes, refer to the following sections:\n Hardware State Manager (HSM): See Lock and Unlock Nodes Firmware Action Service (FAS): See Ignore Node within FAS Cray Advanced Platform Monitoring and Control (CAPMC): See Ignore Nodes with CAPMC  Topics  When To Set BMC Management Role How To Set BMC Management Role  When To Set BMC Management Role The BMCs of NCNs should be marked with the Management role as early as possible in the install/upgrade cycle to prevent unintentionally taking down a critical node. The Management role on the BMCs cannot be set until after Kubernetes is running and the HSM service is operational.\nCheck whether HSM is running with the following command:\nncn# kubectl -n services get pods | grep smd Example output:\ncray-smd-848bcc875c-6wqsh 2/2 Running 0 9d cray-smd-848bcc875c-hznqj 2/2 Running 0 9d cray-smd-848bcc875c-tp6gf 2/2 Running 0 6d22h cray-smd-init-2tnnq 0/2 Completed 0 9d cray-smd-postgres-0 2/2 Running 0 19d cray-smd-postgres-1 2/2 Running 0 6d21h cray-smd-postgres-2 2/2 Running 0 19d cray-smd-wait-for-postgres-4-7c78j 0/3 Completed 0 9d The cray-smd pods need to be in the Running state, except for cray-smd-init and cray-smd-wait-for-postgres which should be in Completed state.\nHow To Set BMC Management Role Use the cray hsm state components bulkRole update command to perform setting roles on the BMC.\nHow To Set BMC Management Roles on all BMCs of Management Nodes   Get the list of BMCs of management nodes.\nncn# BMCList=$(cray hsm state components list --role management --type node --format json | jq -r .Components[].ID | \\  sed \u0026#39;s/n[0-9]*//\u0026#39; | tr \u0026#39;\\n\u0026#39; \u0026#39;,\u0026#39; | sed \u0026#39;s/.$//\u0026#39;) ncn# echo ${BMCList} Example output:\nx3000c0s5b0,x3000c0s4b0,x3000c0s7b0,x3000c0s6b0,x3000c0s3b0,x3000c0s2b0,x3000c0s9b0,x3000c0s8b0   Set the Management role for those BMCs.\nncn# cray hsm state components bulkRole update --role Management --component-ids ${BMCList}   How To Set BMC Management Roles on specific BMCs of Management Nodes   Set the Management role for specific BMCs.\nncn# cray hsm state components bulkRole update --role Management --component-ids x3000c0s8b0   "
},
{
	"uri": "/docs-csm/en-12/operations/hardware_state_manager/add_a_switch_to_the_hsm_database/",
	"title": "Add A Switch To The HSM Database",
	"tags": [],
	"description": "",
	"content": "Add a Switch to the HSM Database Manually add a switch to the Hardware State Manager (HSM) database. Switches need to be in the HSM database in order to update their firmware with the Firmware Action Service (FAS).\nPrerequisites  The Cray command line interface (CLI) tool is initialized and configured on the system.  Procedure   Add the switch to the HSM database.\nThe --rediscover-on-update true flag forces HSM to discover the switch.\nncn-m001# cray hsm inventory redfishEndpoints create --id XNAME --fqdn IP_ADDRESS --user USERNAME \\ --password PASSWORD --rediscover-on-update true For example:\nncn-m001# cray hsm inventory redfishEndpoints create --id x3000c0r41b0 --fqdn 10.254.2.17 --user root \\ --password YourPassword --rediscover-on-update true [[results]] URI = \u0026#34;/hsm/v2/Inventory/RedfishEndpoints/x3000c0r41b0\u0026#34;   Verify that HSM successfully discovered the switch.\nncn-m001# cray hsm inventory redfishEndpoints list --id XNAME Example output:\n[[RedfishEndpoints]] Domain = \u0026quot;\u0026quot; RediscoverOnUpdate = true Hostname = \u0026quot;10.254.2.17\u0026quot; Enabled = true FQDN = \u0026quot;10.254.2.17\u0026quot; User = \u0026quot;root\u0026quot; Password = \u0026quot;\u0026quot; Type = \u0026quot;RouterBMC\u0026quot; ID = \u0026quot;x3000c0r41b0\u0026quot; [RedfishEndpoints.DiscoveryInfo] LastDiscoveryAttempt = \u0026quot;2020-02-05T18:41:08.823059Z\u0026quot; RedfishVersion = \u0026quot;1.2.0\u0026quot; LastDiscoveryStatus = \u0026quot;DiscoverOK\u0026quot;   The switch is now discovered by the HSM.\n"
},
{
	"uri": "/docs-csm/en-12/operations/hardware_state_manager/add_an_ncn_to_the_hsm_database/",
	"title": "Add An NCN To The HSM Database",
	"tags": [],
	"description": "",
	"content": "Add an NCN to the HSM Database This procedure details how to customize the bare-metal non-compute node (NCN) on a system and add the NCN to the Hardware State Manager (HSM) database.\nThe examples in this procedure use ncn-w0003-nmn as the Customer Access Node (CAN). Use the correct CAN for the system.\nPrerequisites  The Cray command line interface (CLI) tool is initialized and configured on the system. The initial software installation is complete. Keycloak authentication is complete.  Procedure   Locate the component name (xname) of the system.\nThe component name (xname) is located in the /etc/hosts file.\nncn# grep ncn-w003-nmn /etc/hosts Example output:\n0.252.1.15 ncn-w003.local ncn-w003 ncn-w003-nmn ncn-w003-nmn.local sms03-nmn x3000c0s24b0n0 #-label-10.252.1.15   Create an entry with the following keypairs.\nget_token needs to be created or exist in the script with the following curl command. The get_token function is defined below:\nncn# function get_token () { curl -s -S -d grant_type=client_credentials \\  -d client_id=admin-client \\  -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath=\u0026#39;{.data.client-secret}\u0026#39; | base64 -d` \\  https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r \u0026#39;.access_token\u0026#39; } The get_token function adds the authorization required by the HTTPS security token. -H options tell the REST API to accept the data as JSON and that the information is for a JSON-enabled application.\nncn# curl -X POST -k https://api-gw-service-nmn.local/apis/smd/hsm/v2/State/Components \\ -H \u0026#34;Authorization: Bearer $(get_token)\u0026#34; -H \u0026#34;accept: application/json\u0026#34; -H \\ \u0026#34;Content-Type: application/json\u0026#34; -d \\ \u0026#39;{\u0026#34;Components\u0026#34;:[{\u0026#34;ID\u0026#34;:\u0026#34;x3000c0s24b0\u0026#34;,\u0026#34;State\u0026#34;:\u0026#34;On\u0026#34;,\u0026#34;NetType\u0026#34;:\u0026#34;Sling\u0026#34;,\u0026#34;Arch\u0026#34;:\u0026#34;X86\u0026#34;,\u0026#34;Role\u0026#34;:\u0026#34;Management\u0026#34;}]}\u0026#39;   List HSM state components and verify information is correct.\nncn# cray hsm state components list --id x3000c0s24b0 Example output:\n[[Components]] Arch = \u0026quot;X86\u0026quot; Enabled = true Flag = \u0026quot;OK\u0026quot; State = \u0026quot;On\u0026quot; Role = \u0026quot;Management\u0026quot; NetType = \u0026quot;Sling\u0026quot; Type = \u0026quot;NodeBMC\u0026quot; ID = \u0026quot;x3000c0s24b0\u0026quot;   Find the daemonset pod that is running on the NCN being added to the HSM database.\nncn# kubectl get pods -l app.kubernetes.io/instance=ncn-customization -n services -o wide Example output:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES ncn-customization-cray-service-4tqcg 2/2 Running 2 4d2h 10.47.0.3 ncn-m001 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; ncn-customization-cray-service-dh8gb 2/2 Running 1 4d2h 10.42.0.4 ncn-w003 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; ncn-customization-cray-service-gwxc2 2/2 Running 2 4d2h 10.40.0.8 ncn-w002 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; ncn-customization-cray-service-rjms5 2/2 Running 2 4d2h 10.35.0.3 ncn-w004 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; ncn-customization-cray-service-wgl44 2/2 Running 2 4d2h 10.39.0.3 ncn-w005 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt;   Delete the daemonset pod.\nDeleting the pod will restart it and enable the changes to be picked up.\nncn# kubectl -n services delete pod ncn-customization-cray-service-dh8gb   Verify the daemonset restarts on the NCN with the CAN configuration.\n  Retrieve the new pod name.\nncn# kubectl get pods -l app.kubernetes.io/instance=ncn-customization \\ -n services -o wide | grep ncn-w003 Example output:\nncn-customization-cray-service-dh8gb 2/2 Running 2 22d 10.36.0.119 ncn-w003 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt;   Wait for the daemonset pod to cycle through the unload session.\nThis may take up to 5 minutes.\nncn# cray cfs sessions list | grep \u0026#34;name =\u0026#34; Example output:\nname = \u0026quot;ncn-customization-ncn-w003-unload\u0026quot;   Wait for the daemonset pod to cycle through the load session.\nThis may take up to 5 minutes.\nncn# cray cfs sessions list | grep \u0026#34;name =\u0026#34; Example output:\nname = \u0026quot;ncn-customization-ncn-w003-load\u0026quot; Once the load job completes, if there are no errors returned, the session is removed.\nRunning cray cfs sessions list | grep \u0026quot;name =\u0026quot; again should return with no sessions active. If Ansible errors were encountered during the unload or load sessions, the dormant CFS session artifacts remain for CFS Ansible failure troubleshooting.\n    "
},
{
	"uri": "/docs-csm/en-12/operations/hardware_state_manager/component_group_members/",
	"title": "Component Group Members",
	"tags": [],
	"description": "",
	"content": "Component Group Members The members object in the group definition has additional actions available for managing the members after the group has been created.\nThe following is an example of group members:\n{ \u0026#34;ids\u0026#34; : [ \u0026#34;x0c0s0b0n0\u0026#34;,\u0026#34;x0c0s0b0n1\u0026#34;,\u0026#34;x0c0s0b1n0\u0026#34; ] } Retrieve Group Members Retrieve just the members array for a group:\nncn-m# cray hsm groups members list GROUP_LABEL Retrieve only the members of a group that are also in a specific partition:\nncn-m# cray hsm groups members list --partition PARTITION_NAME GROUP_LABEL Retrieve only the members of a group that are not in any partition currently:\nncn-m# cray hsm groups members list --partition NULL GROUP_LABEL Add Group Members Add a single component to a group. The only time this is not permitted is if the component already exists, or the group has an exclusiveGroup label and the component is already a member of a group with that exclusive label.\nAdd a component to a group:\nncn-m# cray hsm groups members create --id MEMBER_ID GROUP_LABEL For example:\nncn-m# cray hsm groups members create --id x1c0s0b0n0 blue Remove Group Members Single members with the specified component name (xname) are removed from the given group.\nRemove a member from a group:\nncn-m# cray hsm groups members delete MEMBER_ID GROUP_LABEL For example:\nncn-m# cray hsm groups members delete x1c0s0b0n0 blue "
},
{
	"uri": "/docs-csm/en-12/operations/hardware_state_manager/component_groups_and_partitions/",
	"title": "Component Groups And Partitions",
	"tags": [],
	"description": "",
	"content": "Component Groups and Partitions The Hardware State Manager (HSM) provides the group and partition services. Both are means of grouping (also known as labeling) system components that are tracked by HSM. Components include the nodes, blades, controllers, and more on a system.\nThere is no limit to the number of members a group or partition contains. The only limitation is that all members must be actual members of the system. The HSM needs to know that the components exist.\nGroups Groups are collections of components (primarily nodes) in /hsm/v2/State/Components. Components can be members of any number of groups. Groups can be created freely, and HSM does not assign them any predetermined meaning.\nIf a group has exclusiveGroup=EXCLUSIVE_LABEL_NAME set, then a component may only be a member of one group that matches that exclusive label. For example, if the exclusive group label colors is associated with groups blue, red, and green, then a node that is part of the green group could not also be placed in the red group.\nPartitions Partitions are isolated, non-overlapping groups. Each component can be a member of only one partition at a time, and partitions are used as an access control mechanism. Partitions have a specific predefined meaning, intended to provide logical divisions of a single physical system.\n"
},
{
	"uri": "/docs-csm/en-12/operations/hardware_state_manager/component_memberships/",
	"title": "Component Memberships",
	"tags": [],
	"description": "",
	"content": "Component Memberships Memberships are a read-only resource that is generated automatically by changes to groups and partitions. Each component in /hsm/v2/State/Components is represented. Filter options are available to prune the list, or a specific component name (xname) can be given. All groups and the partition (if any) of each component are listed.\nAt this point in time, only information about node components is needed. The --type node filter option is used in the commands below to retrieve information about node memberships only.\nThe following is an example membership:\n{ \u0026#34;id\u0026#34; : \u0026#34;x2c3s0b0n0\u0026#34;, \u0026#34;groupLabels\u0026#34; : [ \u0026#34;grp1\u0026#34;, \u0026#34;red\u0026#34;, \u0026#34;my_nodes\u0026#34; ], \u0026#34;partitionName\u0026#34; : \u0026#34;partition2\u0026#34; } Troubleshooting: If the Cray CLI has not been initialized, the CLI commands will not work.\nRetrieve Group and Partition Memberships By default, the memberships collection contains all components, regardless of if they are in a group. However, a filtered subset is desired more frequently. Querying the memberships collection supports the same query options as /hsm/v2/State/Components.\nRetrieve all node memberships:\nncn-m# cray hsm memberships list --type node Retrieve only nodes not in a partition:\nncn-m# cray hsm memberships list --type node --partition NULL Retrieve Membership Data for a Given Component Any components in /hsm/v2/State/Components can have its group and memberships looked up with its individual component component name (xname).\nncn-m# cray hsm memberships describe MEMBER_ID "
},
{
	"uri": "/docs-csm/en-12/operations/hardware_state_manager/component_partition_members/",
	"title": "Component Partition Members",
	"tags": [],
	"description": "",
	"content": "Component Partition Members The members object in the partition definition has additional actions available for managing the members after the partition has been created.\nThe following is an example of partition members:\n{ \u0026quot;ids\u0026quot; : [ \u0026quot;x0c0s0b0n0\u0026quot;,\u0026quot;x0c0s0b0n1\u0026quot;,\u0026quot;x0c0s0b1n0\u0026quot;,\u0026quot;x0c0s0b1n1\u0026quot; ] } Retrieve Partition Members Retrieving members of a partition is very similar to how group members are retrieved and modified. No filtering options are available in partitions. However, there are partition and group filtering parameters for the /hsm/v2/State/Components and /hsm/v2/memberships collections, with both essentially working the same way.\nRetrieve only the members array for a single partition:\nncn-m# cray hsm partitions members list PARTITION_NAME Add a Component to Partition Components can be added to a partition\u0026rsquo;s member list, assuming it is not already a member or in another partition. This can be verified by looking at the membership information.\nAdd a component to a partition:\nncn-m# cray hsm partitions members create --id COMPONENT_ID PARTITION_NAME For example:\nncn-m# cray hsm partitions members create --id x1c0s0b0n0 partition1 Remove a Partition Member Remove a single component from a partition, assuming it is a current member. It will no longer be in any partition and is free to be assigned to a new one.\nncn-m# cray hsm partitions members delete MEMBER_ID PARTITION_NAME For example:\nncn-m# cray hsm partitions members delete x1c0s0b0n0 partition1 "
},
{
	"uri": "/docs-csm/en-12/operations/hardware_state_manager/create_a_backup_of_the_hsm_postgres_database/",
	"title": "Create A Backup Of The HSM Postgres Database",
	"tags": [],
	"description": "",
	"content": "Create a Backup of the HSM Postgres Database Perform a manual backup of the contents of the Hardware State Manager (HSM) Postgres database. This backup can be used to restore the contents of the HSM Postgres database at a later point in time using the Restore HSM Postgres from Backup procedure.\nPrerequisites   Healthy HSM Postgres Cluster.\nUse patronictl list on the HSM Postgres cluster to determine the current state of the cluster, and a healthy cluster will look similar to the following:\nncn# kubectl exec cray-smd-postgres-0 -n services -c postgres -it -- patronictl list Example output:\n+ Cluster: cray-smd-postgres (6975238790569058381) ---+----+-----------+ | Member | Host | Role | State | TL | Lag in MB | +---------------------+------------+--------+---------+----+-----------+ | cray-smd-postgres-0 | 10.44.0.40 | Leader | running | 1 | | | cray-smd-postgres-1 | 10.36.0.37 | | running | 1 | 0 | | cray-smd-postgres-2 | 10.42.0.42 | | running | 1 | 0 | +---------------------+------------+--------+---------+----+-----------+   Healthy HSM Service.\nVerify all 3 HSM replicas are up and running:\nncn# kubectl -n services get pods -l cluster-name=cray-smd-postgres Example output:\nNAME READY STATUS RESTARTS AGE cray-smd-postgres-0 3/3 Running 0 18d cray-smd-postgres-1 3/3 Running 0 18d cray-smd-postgres-2 3/3 Running 0 18d   Procedure   Create a directory to store the HSM backup files.\nncn# BACKUP_LOCATION=\u0026#34;/root\u0026#34; ncn# export BACKUP_NAME=\u0026#34;cray-smd-postgres-backup_`date \u0026#39;+%Y-%m-%d_%H-%M-%S\u0026#39;`\u0026#34; ncn# export BACKUP_FOLDER=\u0026#34;${BACKUP_LOCATION}/${BACKUP_NAME}\u0026#34; ncn# mkdir -p \u0026#34;$BACKUP_FOLDER\u0026#34; The HSM backup will be located in the following directory:\nncn# echo $BACKUP_FOLDER /root/cray-smd-postgres-backup_2021-07-07_16-39-44   Run the backup_smd_postgres.sh script to take a backup of the HSM Postgres.\nncn# /usr/share/doc/csm/operations/hardware_state_manager/scripts/backup_smd_postgres.sh Example output:\n~/cray-smd-postgres-backup_2021-07-07_16-39-44 ~ HSM postgres backup file will land in /root/cray-smd-postgres-backup_2021-07-07_16-39-44 Determining the postgres leader... The HSM postgres leader is cray-smd-postgres-0 Using pg_dumpall to dump the contents of the HSM database... PSQL dump is available at /root/cray-smd-postgres-backup_2021-07-07_16-39-44/cray-smd-postgres-backup_2021-07-07_16-39-44.psql Saving Kubernetes secret service-account.cray-smd-postgres.credentials Saving Kubernetes secret hmsdsuser.cray-smd-postgres.credentials Saving Kubernetes secret postgres.cray-smd-postgres.credentials Saving Kubernetes secret standby.cray-smd-postgres.credentials Removing extra fields from service-account.cray-smd-postgres.credentials.yaml Removing extra fields from hmsdsuser.cray-smd-postgres.credentials.yaml Removing extra fields from postgres.cray-smd-postgres.credentials.yaml Removing extra fields from standby.cray-smd-postgres.credentials.yaml Adding Kubernetes secret service-account.cray-smd-postgres.credentials to secret manifest Adding Kubernetes secret hmsdsuser.cray-smd-postgres.credentials to secret manifest Adding Kubernetes secret postgres.cray-smd-postgres.credentials to secret manifest Adding Kubernetes secret standby.cray-smd-postgres.credentials to secret manifest Secret manifest is located at /root/cray-smd-postgres-backup_2021-07-07_16-39-44/cray-smd-postgres-backup_2021-07-07_16-39-44.manifest HSM Postgres backup is available at: /root/cray-smd-postgres-backup_2021-07-07_16-39-44   Copy the backup folder off of the cluster, and store it in a secure location.\nThe BACKUP_FOLDER environment variable is the name of the folder to backup.\nncn# echo $BACKUP_FOLDER /root/cray-smd-postgres-backup_2021-07-07_16-39-44 Optionally, create a tarball of the Postgres backup files:\nncn# cd $BACKUP_FOLDER \u0026amp;\u0026amp; cd .. ncn# tar -czvf $BACKUP_NAME.tar.gz $BACKUP_NAME   "
},
{
	"uri": "/docs-csm/en-12/operations/hardware_state_manager/hardware_management_services_hms_locking_api/",
	"title": "Hardware Management Services (hms) Locking Api",
	"tags": [],
	"description": "",
	"content": "Hardware Management Services (HMS) Locking API The locking feature is a part of the Hardware State Manager (HSM) API. The locking API enables administrators to lock components on the system. Locking components ensures other system actors, such as administrators or running services, cannot perform a firmware update with the Firmware Action Service (FAS) or a power state change with the Cray Advanced Platform Monitoring and Control (CAPMC). Locks only constrain FAS and CAPMC from each other and help ensure that a firmware update action will not be interfered with by a request to power off the device through CAPMC. Locks only work with HMS services and will not impact other system services.\nLocks can only be used to prevent actions firmware updates with FAS or power state changes with CAPMC. Administrators can still use HMS APIs to view the state of various hardware components on the system, even if a lock is in place. There is no automatic locking for hardware devices. Locks need to be manually set or unset by an admin. A scenario that might be encountered is when a larger hardware state change job is run, and one of the components in the job has a lock on it. If FAS is the service running the job, FAS will attempt to update the firmware on each component, and will update all devices that do not have a lock on it. The job will not complete until the node lock ends, or if a timeout is set for the job.\nThe locking API also includes actions to repair or disable a node\u0026rsquo;s locking ability with respect to HMS services. The disable function will make it so a device cannot be firmware updated or power controlled (via an HMS service) until a repair is done. Future requests to perform a firmware update via FAS or power state change via CAPMC cannot be made on that component until the repair action is used.\nWARNING: System administrators should LOCK NCNs after the system has been brought up to prevent an admin from unintentionally firmware updating or powering off an NCN. If this lock is not engaged, an authorized request to FAS or CAPMC could power off the NCNs, which will negatively impact system stability and the health of services running on those NCNs.\n"
},
{
	"uri": "/docs-csm/en-12/operations/hardware_state_manager/hardware_state_manager/",
	"title": "Hardware State Manager (HSM)",
	"tags": [],
	"description": "",
	"content": "Hardware State Manager (HSM) The Hardware State Manager (HSM) monitors and interrogates hardware components in the HPE Cray EX system, tracking hardware state and inventory information, and making it available via REST queries and message bus events when changes occur.\nIn the CSM 0.9.3 release, v1 of the HSM API has begun its deprecation process in favor of the new HSM v2 API. Refer to the HSM API documentation for more information on the changes.\n"
},
{
	"uri": "/docs-csm/en-12/operations/hardware_state_manager/hardware_state_manager_hsm_state_and_flag_fields/",
	"title": "Hardware State Manager (HSM) State And Flag Fields",
	"tags": [],
	"description": "",
	"content": "Hardware State Manager (HSM) State and Flag Fields HSM manages important information for hardware components in the system. Administrators can use the data returned by HSM to learn about the state of the system. To do so, it is critical that the State and Flag fields are understood, and the next steps to take are known when viewing output returned by HSM commands. It is also beneficial to understand what services can cause State or Flag changes in HSM.\nThe following describes what causes State and Flag changes for all HSM components:\n Initial State/Flag is set upon discovery. This is generally Off/OK or On/OK. BMCs go to Ready/OK instead of On/OK. A component in the Populated state after discovery has an unknown power state. If one is expected for nodes, BMCs, or another component, this is likely due to a firmware issue. Flags can be set to Warning or Alert if the component\u0026rsquo;s Status.Health reads as Warning or Critical via Redfish during discovery. State for all components associated with a BMC is set to Empty if that BMC is removed from the network. State change events from components are consumed by HSM via subscriptions to Redfish events. These are subscribed to and placed on the Kafka bus by hmcollector for HSM\u0026rsquo;s consumption. HSM will update component state based on the information in the Redfish events.  The following describes what causes State and Flag changes for nodes only:\n Heartbeat Tracking Daemon (HBTD) updates the state of nodes based on heartbeats it receives from nodes. HBTD sets the node to Ready/OK when it starts heartbeats. HBTD sets the node to Ready/Warning after a few missed heartbeats. HBTD sets the node to Standby after many missed heartbeats and the node is presumed dead.  State descriptions:\n  Empty\nThe location is not populated with a component.\n  Populated\nPresent (not empty), but no further track can or is being done.\n  Off\nPresent but powered off.\n  On\nPowered on. If no heartbeat mechanism is available, its software state may be unknown.\n  Standby\nNo longer Ready and presumed dead. It typically means the heartbeat has been lost (w/ alert).\n  Ready\nBoth On and Ready to provide its expected services. For example, used for jobs.\n  Flag descriptions:\n  OK\nComponent is OK.\n  Warning\nThere is a non-critical error. Generally coupled with a Ready state.\n  Alert\nThere is a critical error. Generally coupled with a Standby state. Otherwise, reported via Redfish.\n  Hardware State Transitions The following table describes how to interpret when the state of hardware changes:\n   Prior State New State Reason     Ready Standby HBTD if node has many missed heartbeats   Ready Ready/Warning HBTD if node has a few missed heartbeats   Standby Ready HBTD node re-starts heartbeating   On Ready HBTD node started heartbeating   Off Ready HBTD sees heartbeats before Redfish Event (On)   Standby On Redfish Event (On) or if re-discovered while in the standby state   Off On Redfish Event (On)   Standby Off Redfish Event (Off)   Ready Off Redfish Event (Off)   On Off Redfish Event (Off)   Any State Empty Redfish Endpoint is disabled meaning component removal    Generally, nodes transition from Off to On to Ready when going from Off to booted, and from Ready to Ready/Warning to Standby to Off when shut down.\n"
},
{
	"uri": "/docs-csm/en-12/operations/hardware_state_manager/hsm_roles_and_subroles/",
	"title": "HSM Roles And Subroles",
	"tags": [],
	"description": "",
	"content": "HSM Roles and Subroles The Hardware State Manager (HSM) contains several pre-defined roles and subroles that can be assigned to components and used to target specific hardware devices.\nRoles and subroles assignments come from the System Layout Service (SLS) and are applied by HSM when a node is discovered.\nHSM Roles The following is a list of all pre-defined roles:\n Management Compute Application Service System Storage  The Management role refers to NCNs and will generally have the Master, Worker, or Storage subrole assigned.\nThe Compute role generally refers to compute nodes.\nThe Application role is used for more specific node uses and will generally have the UAN, LNETRouter, Visualization, Gateway, or UserDefined subrole assigned.\nHSM Subroles The following is a list of all pre-defined subroles:\n Worker Master Storage UAN Gateway LNETRouter Visualization UserDefined  The Master, Worker, and Storage subroles are generally used with the Master role to indicate NCN types.\nThe UAN, LNETRouter, Visualization, Gateway, and UserDefined subroles are generally used with the Application role to indicate specific use nodes.\nAdd Custom Roles and Subroles Custom roles and subroles can also be created and added to the HSM. New roles or subroles can be added anytime after SMD has been deployed.\nTo add new roles/subroles, add them to the cray-hms-base-config configmap under data-\u0026gt;hms_config.json.HMSExtendedDefinitions.(Sub)Role:\nncn# kubectl edit configmap -n services cray-hms-base-config data: hms_config.json: |- { \u0026#34;HMSExtendedDefinitions\u0026#34;:{ \u0026#34;Role\u0026#34;:[ \u0026#34;Compute\u0026#34;, \u0026#34;Service\u0026#34;, \u0026#34;System\u0026#34;, \u0026#34;Application\u0026#34;, \u0026#34;Storage\u0026#34;, \u0026#34;Management\u0026#34; ], \u0026#34;SubRole\u0026#34;:[ \u0026#34;Worker\u0026#34;, \u0026#34;Master\u0026#34;, \u0026#34;Storage\u0026#34;, \u0026#34;UAN\u0026#34;, \u0026#34;Gateway\u0026#34;, \u0026#34;LNETRouter\u0026#34;, \u0026#34;Visualization\u0026#34;, \u0026#34;UserDefined\u0026#34; ] } } Deleting roles/subroles from this list will also remove them from HSM. However, deleting any of the pre-defined roles or subroles will have no affect.\n"
},
{
	"uri": "/docs-csm/en-12/operations/firmware/upload_olympus_bmc_recovery_firmware_into_tftp_server/",
	"title": "Upload BMC Recovery Firmware Into Tftp Server",
	"tags": [],
	"description": "",
	"content": "Upload BMC Recovery Firmware into TFTP Server cray-upload-recovery-images is a utility for uploading the BMC recovery files for ChassisBMCs, NodeBMCs, and RouterBMCs to be served by the cray-tftp service. The tool uses the cray CLI (fas, artifacts) and cray-tftp to download the S3 recovery images (as remembered by FAS), then upload them into the PVC that is used by cray-tftp. cray-upload-recovery-images should be run on every system.\nPrerequisites  Cray System Management (CSM) software is installed. The Cray Command Line Interface (CLI) tool is initialized and configured on the system. Firmware is loaded into FAS as part of the HPC Firmware Pack (HFP) install; refer to the HPE Cray EX System HPC Firmware Pack Install Guide on the HPE Customer Support Center for more information.  Procedure  Execute the cray-upload-recovery-images script.  ncn# cray-upload-recovery-images Attempting to retrieve ChassisBMC .itb file s3:/fw-update/d7bb5be9eecc11eab18c26c5771395a4/cc-1.3.10.itb d7bb5be9eecc11eab18c26c5771395a4/cc-1.3.10.itb Uploading file: /tmp/cc.itb Defaulting container name to cray-ipxe. Successfully uploaded /tmp/cc.itb! removed /tmp/cc.itb ChassisBMC recovery image upload complete ======================================== Attempting to retrieve NodeBMC .itb file s3:/fw-update/d81157f7eecc11ea943d26c5771395a4/nc-1.3.10.itb d81157f7eecc11ea943d26c5771395a4/nc-1.3.10.itb Uploading file: /tmp/nc.itb Defaulting container name to cray-ipxe. Successfully uploaded /tmp/nc.itb! removed /tmp/nc.itb NodeBMC recovery image upload complete ======================================== Attempting to retrieve RouterBMC .itb file s3:/fw-update/d85398f2eecc11ea94ff26c5771395a4/rec-1.3.10.itb d85398f2eecc11ea94ff26c5771395a4/rec-1.3.10.itb Uploading file: /tmp/rec.itb Defaulting container name to cray-ipxe. Successfully uploaded /tmp/rec.itb! removed /tmp/rec.itb RouterBMC recovery image upload complete "
},
{
	"uri": "/docs-csm/en-12/operations/firmware/fas_admin_procedures/",
	"title": "FAS Admin Procedures",
	"tags": [],
	"description": "",
	"content": "FAS Admin Procedures \nProcedures for leveraging the Firmware Action Service (FAS) CLI to manage firmware.\nTopics  Warning for Non-Compute Nodes (NCNs) Ignore Nodes within FAS Override an Image for an Update Check for New Firmware Versions with a Dry-Run Load Firmware from Nexus Load Firmware from RPM or ZIP file   Warning for Non-Compute Nodes (NCNs) NCNs and their BMCs should be locked with the HSM locking API to ensure they are not unintentionally updated by FAS. Research Lock and Unlock Management Nodes for more information. Failure to lock the NCNs could result in unintentional update of the NCNs if FAS is not used correctly; this will lead to system instability problems.\n Ignore Nodes within FAS The default configuration of FAS no longer ignores management nodes, which prevents FAS from firmware updating the NCNs. To reconfigure the FAS deployment to exclude non-compute nodes (NCNs) and ensure they cannot have their firmware upgraded, the NODE_BLACKLIST value must be manually enabled\nPreferred Method: Nodes can also be locked with the Hardware State Manager (HSM) API. Refer to Lock and Unlock Management Nodes for more information.\nProcedure to Ignore Nodes   Check that there are no FAS actions running.\nncn# cray fas actions list   Edit the cray-fas deployment.\nncn# kubectl -n services edit deployment cray-fas   Change the NODE_BLACKLIST value from ignore_ignore_ignore to management.\n  Save and quit the deployment. This will restart FAS.\n   Override an Image for an Update If an update fails because of \u0026quot;No Image available\u0026quot;, it may be caused by FAS unable to match the data on the node to find an image in the image list.\n\nProcedure to Override an Image   Find the available image in FAS.\nChange TARGETNAME to the actual target being searched.\nncn# cray fas images list --format json | jq \u0026#39;.[] | .[] | select(.target==\u0026#34;TARGETNAME\u0026#34;)\u0026#39; To narrow down the selection, update the select field to match multiple items. For example:\nncn# cray fas images list --format json | jq \u0026#39;.[] | .[] | select(.target==\u0026#34;BMC\u0026#34; and .manufacturer==\u0026#34;cray\u0026#34; and .deviceType==\u0026#34;NodeBMC\u0026#34;)\u0026#39; The example command displays one or more images available for updates.\n{ \u0026#34;imageID\u0026#34;: \u0026#34;ff268e8a-8f73-414f-a9c7-737a34bb02fc\u0026#34;, \u0026#34;createTime\u0026#34;: \u0026#34;2021-02-24T02:25:03Z\u0026#34;, \u0026#34;deviceType\u0026#34;: \u0026#34;nodeBMC\u0026#34;, \u0026#34;manufacturer\u0026#34;: \u0026#34;cray\u0026#34;, \u0026#34;models\u0026#34;: [ \u0026#34;HPE Cray EX235n\u0026#34;, \u0026#34;GrizzlyPkNodeCard_REV_B\u0026#34; ], \u0026#34;softwareIds\u0026#34;: [ \u0026#34;fgpa:NVIDIA.HGX.A100.4.GPU:*:*\u0026#34; ], \u0026#34;target\u0026#34;: \u0026#34;Node0.AccFPGA0\u0026#34;, \u0026#34;tags\u0026#34;: [ \u0026#34;default\u0026#34; ], \u0026#34;firmwareVersion\u0026#34;: \u0026#34;2.7\u0026#34;, \u0026#34;semanticFirmwareVersion\u0026#34;: \u0026#34;2.7.0\u0026#34;, \u0026#34;pollingSpeedSeconds\u0026#34;: 30, \u0026#34;s3URL\u0026#34;: \u0026#34;s3:/fw-update/80a62641764711ebabe28e2b78a05899/accfpga_nvidia_2.7.tar.gz\u0026#34; } If the firmwareVersion from the FAS image matches the fromFirmwareVersion from the FAS action, the firmware is at the latest version and no update is needed.\n  Use the imageID from the cray images list in the previous step and add the following line to the action JSON file, replacing IMAGEID with the imageID.\nIn this example, the value would be: ff268e8a-8f73-414f-a9c7-737a34bb02fc.\n\u0026#34;imageFilter\u0026#34;: { \u0026#34;imageID\u0026#34;:\u0026#34;IMAGEID\u0026#34;, \u0026#34;overrideImage\u0026#34;:true } Example actions JSON file with imageFilter added:\n{ \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;:[\u0026#34;nodeBMC\u0026#34;] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;:\u0026#34;cray\u0026#34; }, \u0026#34;imageFilter\u0026#34;: { \u0026#34;imageID\u0026#34;:\u0026#34;ff268e8a-8f73-414f-a9c7-737a34bb02fc\u0026#34;, \u0026#34;overrideImage\u0026#34;:true }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;:[\u0026#34;Node0.AccFPGA0\u0026#34;,\u0026#34;Node1.AccFPGA0\u0026#34;] }, \u0026#34;command\u0026#34;: { \u0026#34;overrideDryrun\u0026#34;:false, \u0026#34;restoreNotPossibleOverride\u0026#34;:true, \u0026#34;overwriteSameImage\u0026#34;:false } }   Verify the correct image ID was found.\nncn# cray fas images describe {imageID}  WARNING: FAS will force a flash of the device \u0026ndash; using incorrect firmware may make it inoperable.\n   Re-run the FAS actions command using the updated JSON file. It is strongly recommended to run a dry-run (overrideDryrun=false) first and check the actions output.\n Check for New Firmware Versions with a Dry-Run Use the Firmware Action Service (FAS) dry-run feature to determine what firmware can be updated on the system. Dry-runs are enabled by default, and can be configured with the overrideDryrun parameter. A dry-run will create a query according to the filters requested by the administrator. It will initiate an update sequence to determine what firmware is available, but will not actually change the state of the firmware.\n WARNING: It is crucial that an administrator is familiar with the release notes of any firmware. The release notes will indicate what new features the firmware provides and if there are any incompatibilities. FAS does not know about incompatibilities or dependencies between versions. The administrator assumes full responsibility for this knowledge.\n It is likely that when performing a firmware update, that the current version of firmware will not be available. This means that after successfully upgrading, the firmware cannot be downgraded.\nThis procedure includes information on how check the firmware versions for the entire system, as well as how to target specific manufacturers, component names (xnames), and targets.\nProcedure to Check for New Firmware Versions   Run a dry-run firmware update.\nThe following command parameters should be included in dry-run JSON files:\n overrideDryrun: The overrideDryrun parameter is set to false by default. FAS will only update the system if this is parameter is set to true. restoreNotPossibleOverride: FAS will not perform an update if the currently running firmware is not available in the images repository. Set this parameter to true in order to allow FAS to update firmware even if the current firmware is unavailable on the system. description: A brief description that helps administrators distinguish between actions. version: Determines if the firmware should be set to the latest, the earliest semantic version, or set to a specific firmware version.  Use one of the options below to run on a dry-run on every system device or on targeted devices:\nOption 1: Determine the available firmware for every device on the system:\n  Create a JSON file for the command parameters.\n{ \u0026#34;command\u0026#34;: { \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;description\u0026#34;: \u0026#34;full system dryrun 2020623_0\u0026#34; } }   Run the dry-run for the full system.\nncn# cray fas actions create COMMAND.json Proceed to the next step to determine if any firmware needs to be updated.\n  Option 2: Determine the available firmware for specific devices:\n  Create a JSON file with the specific device information to target when doing a dry-run.\n{ \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;xnames\u0026#34;: [ \u0026#34;x9000c1s3b1\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;cray\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;Node1.BIOS\u0026#34;, \u0026#34;Node0.BIOS\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;description\u0026#34;: \u0026#34;dryrun upgrade of x9000c1s3b1 Nodex.BIOS to WNC 1.1.2\u0026#34; } }   Run a dry-run on the targeted devices.\nncn# cray fas actions create CUSTOM_DEVICE_PARAMETERS.json Proceed to the next step to determine if any firmware needs to be updated.\n    View the status of the dry-run to determine if any firmware updates can be made.\nThe following returned messages will help determine if a firmware update is needed.\n noOperation: Nothing to do; already at the requested version. noSolution: No image is available or data is missing. succeeded: A firmware version that FAS can update the firmware to is available and it should work when actually updating the firmware. failed: There is something that FAS could do, but it likely would fail (most likely because the file is missing).    Get a high-level summary of the FAS job to determine if there are any upgradable firmware images available.\nUse the returned actionID from the cray fas actions create command.\nIn the example below, there are two operations in the succeeded state, indicating there is an available firmware version that FAS can use to update firmware.\nncn# cray fas actions status list {actionID} actionID = \u0026#34;e6dc14cd-5e12-4d36-a97b-0dd372b0930f\u0026#34; snapshotID = \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34; startTime = \u0026#34;2021-09-07 16:43:04.294233199 +0000 UTC\u0026#34; endTime = \u0026#34;2021-09-07 16:53:09.363233482 +0000 UTC\u0026#34; state = \u0026#34;completed\u0026#34; blockedBy = [] [command] overrideDryrun = false restoreNotPossibleOverride = true overwriteSameImage = false timeLimit = 2000 version = \u0026#34;latest\u0026#34; tag = \u0026#34;default\u0026#34; description = \u0026#34;Dryrun upgrade of Gigabyte node BMCs\u0026#34; [operationCounts] total = 14 initial = 0 configured = 0 blocked = 0 needsVerified = 0 verifying = 0 inProgress = 0 failed = 0 succeeded = 8 noOperation = 6 noSolution = 0 aborted = 0 unknown = 0 The action is still in progress if the state field is not completed or aborted.\n  View the details of an action to get more information on each operation in the FAS action.\nIn the example below, there is an operation for a component name (xname) in the failed state, indicating there is something that FAS could do, but it likely would fail. A common cause for an operation failing is due to a missing firmware image file.\nncn# cray fas actions describe {actionID} --format json { \u0026#34;parameters\u0026#34;: { \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;nodeBMC\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;dryrun\u0026#34;: false, \u0026#34;description\u0026#34;: \u0026#34;upgrade of nodeBMCs for cray\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34; }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;cray\u0026#34; }, \u0026#34;imageFilter\u0026#34;: { \u0026#34;imageID\u0026#34;: \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;BMC\u0026#34; ] } }, \u0026#34;blockedBy\u0026#34;: [], \u0026#34;state\u0026#34;: \u0026#34;completed\u0026#34;, \u0026#34;command\u0026#34;: { \u0026#34;dryrun\u0026#34;: false, \u0026#34;description\u0026#34;: \u0026#34;upgrade of nodeBMCs for cray\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34; }, \u0026#34;actionID\u0026#34;: \u0026#34;e0cdd7c2-32b1-4a25-9b2a-8e74217eafa7\u0026#34;, \u0026#34;startTime\u0026#34;: \u0026#34;2020-06-26 20:03:37.316932354 +0000 UTC\u0026#34;, \u0026#34;snapshotID\u0026#34;: \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34;, \u0026#34;endTime\u0026#34;: \u0026#34;2020-06-26 20:04:07.118243184 +0000 UTC\u0026#34;, \u0026#34;operationSummary\u0026#34;: { \u0026#34;succeeded\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;verifying\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;unknown\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;configured\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;initial\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;failed\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [ { \u0026#34;stateHelper\u0026#34;: \u0026#34;unexpected change detected in firmware version. Expected sc.1.4.35-prod- master.arm64.2020-06-26T08:36:42+00:00.0c2bb02 got: sc.1.3.307-prod-master.arm64.2020-06-13T00:28:26+00:00.f91edff\u0026#34;, \u0026#34;fromFirmwareVersion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;xname\u0026#34;: \u0026#34;x5000c1r7b0\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;BMC\u0026#34;, \u0026#34;operationID\u0026#34;: \u0026#34;0796eed0-e95d-45ea-bc71-8903d52cffde\u0026#34; }, ] }, \u0026#34;noSolution\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;aborted\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;needsVerified\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;noOperation\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;inProgress\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;blocked\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] } } }     View the details for a specific operation.\nIn this example, there is a device that is available for a firmware upgrade because the operation being viewed is a succeeded operation.\nncn# cray fas operations describe {operationID} --format json { \u0026#34;fromFirmwareVersion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;fromTag\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;fromImageURL\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;endTime\u0026#34;: \u0026#34;2020-06-24 14:23:37.544814197 +0000 UTC\u0026#34;, \u0026#34;actionID\u0026#34;: \u0026#34;f48aabf1-1616-49ae-9761-a11edb38684d\u0026#34;, \u0026#34;startTime\u0026#34;: \u0026#34;2020-06-24 14:19:15.10128214 +0000 UTC\u0026#34;, \u0026#34;fromSemanticFirmwareVersion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;toImageURL\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;model\u0026#34;: \u0026#34;WindomNodeCard_REV_D\u0026#34;, \u0026#34;operationID\u0026#34;: \u0026#34;24a5e5fb-5c4f-4848-bf4e-b071719c1850\u0026#34;, \u0026#34;fromImageID\u0026#34;: \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;BMC\u0026#34;, \u0026#34;toImageID\u0026#34;: \u0026#34;71c41a74-ab84-45b2-95bd-677f763af168\u0026#34;, \u0026#34;toSemanticFirmwareVersion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;refreshTime\u0026#34;: \u0026#34;2020-06-24 14:23:37.544824938 +0000 UTC\u0026#34;, \u0026#34;blockedBy\u0026#34;: [], \u0026#34;toTag\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;succeeded\u0026#34;, \u0026#34;stateHelper\u0026#34;: \u0026#34;unexpected change detected in firmware version. Expected nc.1.3.8-shasta-release.arm.2020-06-15T22:57:31+00:00.b7f0725 got: nc.1.2.25-shasta-release.arm.2020-05-15T17:27:16+00:00.0cf7f51\u0026#34;, \u0026#34;deviceType\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;expirationTime\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;manufacturer\u0026#34;: \u0026#34;cray\u0026#34;, \u0026#34;xname\u0026#34;: \u0026#34;x9000c1s3b1\u0026#34;, \u0026#34;toFirmwareVersion\u0026#34;: \u0026#34;\u0026#34; }   Update the firmware on any devices indicating a new version is needed.\n Load Firmware from Nexus This procedure will read all RPMs in the Nexus repository and upload firmware images to S3 and create image records for firmware not already in FAS.\n  Check the loader status.\nncn# cray fas loader list | grep loaderStatus This will return a ready or busy status.\nloaderStatus = \u0026#34;ready\u0026#34; The loader can only run one job at a time, if the loader is busy, it will return an error on any attempt to create an additional job.\n  Run the loader Nexus command.\nncn# cray fas loader nexus create This will return an ID which will be used to check the status of the run.\nloaderRunID = \u0026#34;7b0ce40f-cd6d-4ff0-9b71-0f3c9686f5ce\u0026#34;  NOTE: Depending on how many files are in Nexus and how large those files are, the loader may take several minutes to complete.\n   Check the results of the loader run.\nncn# cray fas loader describe {loaderRunID} --format json  NOTE: {loadRunID} is the ID from step #2 above \u0026ndash; in that case 7b0ce40f-cd6d-4ff0-9b71-0f3c9686f5ce. Use the --format json to make it easier to read.\n { \u0026#34;loaderRunOutput\u0026#34;: [ \u0026#34;2021-07-20T18:17:58Z-FWLoader-INFO-Starting FW Loader, LOG_LEVEL: INFO; value: 20\u0026#34;, \u0026#34;2021-07-20T18:17:58Z-FWLoader-INFO-urls: {\u0026#39;fas\u0026#39;: \u0026#39;http://cray-fas\u0026#39;, \u0026#39;fwloc\u0026#39;: \u0026#39;file://download/\u0026#39;}\u0026#34;, \u0026#34;2021-07-20T18:17:58Z-INFO: LOG_LEVEL: DEBUG; value: 10\u0026#34;, \u0026#34;2021-07-20T18:17:58Z-INFO: NEXUS_ENDPOINT: http://nexus.nexus.svc.cluster.local\u0026#34;, \u0026#34;2021-07-20T18:17:58Z-INFO: NEXUS_REPO: shasta-firmware\u0026#34;, \u0026#34;2021-07-20T18:17:58Z-INFO: Repomd URL: http://nexus.nexus.svc.cluster.local/repository/shasta-firmware/repodata/repomd.xml\u0026#34;, \u0026#34;2021-07-20T18:17:58Z-DEBUG: Starting new HTTP connection (1): nexus.nexus.svc.cluster.local:80\u0026#34;, \u0026#34;2021-07-20T18:17:58Z-DEBUG: http://nexus.nexus.svc.cluster.local:80 \\\u0026#34;GET /repository/shasta-firmware/repodata/repomd.xml HTTP/1.1\\\u0026#34; 200 3080\u0026#34;, \u0026#34;2021-07-20T18:17:58Z-INFO: Packages URL: http://nexus.nexus.svc.cluster.local/repository/shasta-firmware/repodata/7f727fc9c4a8d0df528798dc85f1c5178128f3e00a0820a4d07bf9842ddcb6e1-primary.xml.gz\u0026#34;, \u0026#34;2021-07-20T18:17:58Z-DEBUG: Starting new HTTP connection (1): nexus.nexus.svc.cluster.local:80\u0026#34;, \u0026#34;2021-07-20T18:17:58Z-DEBUG: http://nexus.nexus.svc.cluster.local:80 \\\u0026#34;GET /repository/shasta-firmware/repodata/7f727fc9c4a8d0df528798dc85f1c5178128f3e00a0820a4d07bf9842ddcb6e1-primary.xml.gz HTTP/1.1\\\u0026#34; 200 6137\u0026#34;, ... ... \u0026#34;2021-07-20T18:19:04Z-FWLoader-INFO-update ACL to public-read for e7b20c7ae98611eb880aa2c40cff7c62/nc-1.5.15.itb\u0026#34;, \u0026#34;2021-07-20T18:19:04Z-FWLoader-INFO-update ACL to public-read for ec324d05e98611ebbb9da2c40cff7c62/rom.ima_enc\u0026#34;, \u0026#34;2021-07-20T18:19:04Z-FWLoader-INFO-update ACL to public-read for e74c5977e98611eb8e9aa2c40cff7c62/cc-1.5.15.itb\u0026#34;, \u0026#34;2021-07-20T18:19:04Z-FWLoader-INFO-update ACL to public-read for e1feb6d6e98611eb877aa2c40cff7c62/accfpga_nvidia_2.7.tar.gz\u0026#34;, \u0026#34;2021-07-20T18:19:04Z-FWLoader-INFO-update ACL to public-read for dc830cb2e98611ebb4d2a2c40cff7c62/A48_2.40_02_24_2021.signed.flash\u0026#34;, \u0026#34;2021-07-20T18:19:04Z-FWLoader-INFO-update ACL to public-read for e28626d4e98611ebb0a7a2c40cff7c62/wnc.i210-p2sn01.tar.gz\u0026#34;, \u0026#34;2021-07-20T18:19:04Z-FWLoader-INFO-update ACL to public-read for eee87acde98611eba8f4a2c40cff7c62/image.RBU\u0026#34;, \u0026#34;2021-07-20T18:19:04Z-FWLoader-INFO-update ACL to public-read for de3d01bee98611eb9affa2c40cff7c62/A47_2.40_02_23_2021.signed.flash\u0026#34;, \u0026#34;2021-07-20T18:19:04Z-FWLoader-INFO-update ACL to public-read for e8ab6f61e98611eb913fa2c40cff7c62/ex235n.bios-1.1.1.tar.gz\u0026#34;, \u0026#34;2021-07-20T18:19:04Z-FWLoader-INFO-update ACL to public-read for e8ab6f61e98611eb913fa2c40cff7c62/ex235n.bios-1.1.1.tar.gz\u0026#34;, \u0026#34;2021-07-20T18:19:04Z-FWLoader-INFO-finished updating images ACL\u0026#34;, \u0026#34;2021-07-20T18:19:04Z-FWLoader-INFO-*** Number of Updates: 24 ***\u0026#34; ] } A successful run will end with *** Number of Updates: x ***.\n NOTE: The FAS loader will not overwrite image records already in FAS. Number of Updates will be the number of new images found in Nexus. If the number is 0, all images were already in FAS.\n    Load Firmware from RPM or ZIP file This procedure will read a single local RPM (or ZIP) file and upload firmware images to S3 and create image records for firmware not already in FAS.\n  Copy the file to ncn-m001 or one of the other NCNs.\n  Check the loader status:\nncn# cray fas loader list | grep loaderStatus This will return a ready or busy status.\nloaderStatus = \u0026#34;ready\u0026#34; The loader can only run one job at a time, if the loader is busy, it will return an error on any attempt to create an additional job.\n  Run the loader command.\nfirmware.rpm is the name of the RPM. If the file is not in the current directory, add the path to the filename.\nncn# cray fas loader create --file firmware.RPM This will return an ID which will be used to check the status of the run.\nloaderRunID = \u0026#34;7b0ce40f-cd6d-4ff0-9b71-0f3c9686f5ce\u0026#34;   Check the results of the loader run.\nncn# cray fas loader describe {loaderRunID} --format json  NOTE: {loadRunID} is the ID from step #2 above \u0026ndash; in that case 7b0ce40f-cd6d-4ff0-9b71-0f3c9686f5ce. Use the --format json to make it easier to read.\n { \u0026#34;loaderRunOutput\u0026#34;: [ \u0026#34;2021-04-28T14:40:45Z-FWLoader-INFO-Starting FW Loader, LOG_LEVEL: INFO; value: 20\u0026#34;, \u0026#34;2021-04-28T14:40:45Z-FWLoader-INFO-urls: {\u0026#39;fas\u0026#39;: \u0026#39;http://localhost:28800\u0026#39;, \u0026#39;fwloc\u0026#39;: \u0026#39;file://download/\u0026#39;}\u0026#34;, \u0026#34;2021-04-28T14:40:45Z-FWLoader-INFO-Using local file: /ilo5_241.zip\u0026#34;, \u0026#34;2021-04-28T14:40:45Z-FWLoader-INFO-unzip /ilo5_241.zip\u0026#34;, \u0026#34;Archive: /ilo5_241.zip\u0026#34;, \u0026#34; inflating: ilo5_241.bin\u0026#34;, \u0026#34; inflating: ilo5_241.json\u0026#34;, \u0026#34;2021-04-28T14:40:45Z-FWLoader-INFO-Processing files from file://download/\u0026#34;, \u0026#34;2021-04-28T14:40:45Z-FWLoader-INFO-get_file_list(file://download/)\u0026#34;, \u0026#34;2021-04-28T14:40:45Z-FWLoader-INFO-Processing File: file://download/ ilo5_241.json\u0026#34;, \u0026#34;2021-04-28T14:40:45Z-FWLoader-INFO-Uploading b73a48cea82f11eb8c8a0242c0a81003/ilo5_241.bin\u0026#34;, \u0026#34;2021-04-28T14:40:45Z-FWLoader-INFO-Metadata {\u0026#39;imageData\u0026#39;: \\\u0026#34;{\u0026#39;deviceType\u0026#39;: \u0026#39;nodeBMC\u0026#39;, \u0026#39;manufacturer\u0026#39;: \u0026#39;hpe\u0026#39;, \u0026#39;models\u0026#39;: [\u0026#39;ProLiant XL270d Gen10\u0026#39;, \u0026#39;ProLiant DL325 Gen10\u0026#39;, \u0026#39;ProLiant DL325 Gen10 Plus\u0026#39;, \u0026#39;ProLiant DL385 Gen10\u0026#39;, \u0026#39;ProLiant DL385 Gen10 Plus\u0026#39;, \u0026#39;ProLiant XL645d Gen10 Plus\u0026#39;, \u0026#39;ProLiant XL675d Gen10 Plus\u0026#39;], \u0026#39;targets\u0026#39;: [\u0026#39;iLO 5\u0026#39;], \u0026#39;tags\u0026#39;: [\u0026#39;default\u0026#39;], \u0026#39;firmwareVersion\u0026#39;: \u0026#39;2.41 Mar 08 2021\u0026#39;, \u0026#39;semanticFirmwareVersion\u0026#39;: \u0026#39;2.41.0\u0026#39;, \u0026#39;pollingSpeedSeconds\u0026#39;: 30, \u0026#39;fileName\u0026#39;: \u0026#39;ilo5_241.bin\u0026#39;}\\\u0026#34;}\u0026#34;, \u0026#34;2021-04-28T14:40:46Z-FWLoader-INFO-IMAGE: {\\\u0026#34;s3URL\\\u0026#34;: \\\u0026#34;s3:/fw-update/b73a48cea82f11eb8c8a0242c0a81003/ilo5_241.bin\\\u0026#34;, \\\u0026#34;target\\\u0026#34;: \\\u0026#34;iLO 5\\\u0026#34;, \\\u0026#34;deviceType\\\u0026#34;: \\\u0026#34;nodeBMC\\\u0026#34;, \\\u0026#34;manufacturer\\\u0026#34;: \\\u0026#34;hpe\\\u0026#34;, \\\u0026#34;models\\\u0026#34;: [\\\u0026#34;ProLiant XL270d Gen10\\\u0026#34;, \\\u0026#34;ProLiant DL325 Gen10\\\u0026#34;, \\\u0026#34;ProLiant DL325 Gen10 Plus\\\u0026#34;, \\\u0026#34;ProLiant DL385 Gen10\\\u0026#34;, \\\u0026#34;ProLiant DL385 Gen10 Plus\\\u0026#34;, \\\u0026#34;ProLiant XL645d Gen10 Plus\\\u0026#34;, \\\u0026#34;ProLiant XL675d Gen10 Plus\\\u0026#34;], \\\u0026#34;softwareIds\\\u0026#34;: [], \\\u0026#34;tags\\\u0026#34;: [\\\u0026#34;default\\\u0026#34;], \\\u0026#34;firmwareVersion\\\u0026#34;: \\\u0026#34;2.41 Mar 08 2021\\\u0026#34;, \\\u0026#34;semanticFirmwareVersion\\\u0026#34;: \\\u0026#34;2.41.0\\\u0026#34;, \\\u0026#34;allowableDeviceStates\\\u0026#34;: [], \\\u0026#34;needManualReboot\\\u0026#34;: false, \\\u0026#34;pollingSpeedSeconds\\\u0026#34;: 30}\u0026#34;, \u0026#34;2021-04-28T14:40:46Z-FWLoader-INFO-Number of Updates: 1\u0026#34;, \u0026#34;2021-04-28T14:40:46Z-FWLoader-INFO-Iterate images\u0026#34;, \u0026#34;2021-04-28T14:40:46Z-FWLoader-INFO-update ACL to public-read for 5ab9f804a82b11eb8a700242c0a81003/wnc.bios-1.1.2.tar.gz\u0026#34;, \u0026#34;2021-04-28T14:40:46Z-FWLoader-INFO-update ACL to public-read for 5ab9f804a82b11eb8a700242c0a81003/wnc.bios-1.1.2.tar.gz\u0026#34;, \u0026#34;2021-04-28T14:40:46Z-FWLoader-INFO-update ACL to public-read for 53c060baa82a11eba26c0242c0a81003/controllers-1.3.317.itb\u0026#34;, \u0026#34;2021-04-28T14:40:46Z-FWLoader-INFO-update ACL to public-read for b73a48cea82f11eb8c8a0242c0a81003/ilo5_241.bin\u0026#34;, \u0026#34;2021-04-28T14:40:46Z-FWLoader-INFO-finished updating images ACL\u0026#34;, \u0026#34;2021-04-28T14:40:46Z-FWLoader-INFO-removing local file: /ilo5_241.zip\u0026#34;, \u0026#34;2021-04-28T14:40:46Z-FWLoader-INFO-*** Number of Updates: 1 ***\u0026#34; ] } A successful run will end with *** Number of Updates: x ***.\n NOTE: The FAS loader will not overwrite image records already in FAS. Number of Updates will be the number of new images found in the RPM. If the number is 0, all images were already in FAS.\n   "
},
{
	"uri": "/docs-csm/en-12/operations/firmware/fas_cli/",
	"title": "FAS Cli",
	"tags": [],
	"description": "",
	"content": "FAS CLI This section describes the basic capabilities of the Firmware Action Service (FAS) CLI commands. These commands can be used to manage firmware for system hardware supported by FAS. Refer to the prerequisites section before proceeding to any of the sections for the supported operations.\nThe following CLI operations are described:\n Prerequisites Actions  Execute an action  Procedure   Abort an action  Procedure   Describe an action  Interpreting output Procedure  Get high level summary Get details of action Get details of operation       Snapshots  Create a snapshot  Procedure   List snapshots  Procedure   View snapshots  Procedure     Update a firmware image  Procedure   FAS loader commands  Loader status Load firmware from Nexus Load individual RPM or ZIP into FAS Display results of loader run Delete loader run data    Prerequisites The Cray command line interface (CLI) tool is initialized and configured on the system. See Configure the Cray CLI.\nActions Execute an action Use FAS to execute an action. An action produces a set of firmware operations. Each operation represents a component name (xname) + target on that component name (xname) that will be targeted for update. There are two of firmware action modes: : dryrun or liveupdate; the parameters used when creating either are completely identical except for the overrideDryrun setting. overrideDryrun will determine if feature to determine what firmware can be updated on the system. Dry-runs are enabled by default, and can be configured with the overrideDryrun parameter. A dry-run will create a query according to the filters requested by the admin. It will initiate an update sequence to determine what firmware is available, but will not actually change the state of the firmware.\n WARNING: It is crucial that an administrator is familiar with the release notes of any firmware. The release notes will indicate what new features the firmware provides and if there are any incompatibilities. FAS does not know about incompatibilities or dependencies between versions. The administrator assumes full responsibility for this knowledge. It is also likely that when performing a firmware update, the current version of firmware will not be available. This means that after successfully upgrading, the firmware cannot be reverted or downgraded to a previous version.\n Execute an action: Procedure This covers the generic process for executing an action. For more specific examples and detailed explanations of options, see FAS Recipes and FAS Filters.\n  Identify the selection of filters to apply.\nFilters narrow the scope of FAS to target specific component names (xnames), manufacturers, targets, and so on. For this example, FAS will run with no selection filters applied.\n  Create a JSON file.\nTo make this a live update set \u0026quot;overrideDryrun\u0026quot;: true.\n{ \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;description\u0026#34;: \u0026#34;dryrun of full system\u0026#34; } }   Execute the dry-run.\nModify the example command to specify the JSON file created in the previous step.\nncn-mw# cray fas actions create filename.json --format json Example output:\n{ \u0026#34;actionID\u0026#34;: \u0026#34;e0cdd7c2-32b1-4a25-9b2a-8e74217eafa7\u0026#34;, \u0026#34;overrideDryun\u0026#34;: false } Note the returned actionID.\n  See Describe an action: Interpreting output for more information.\nAbort an action Firmware updates can be stopped if required. This is useful because only one action can be run at a time. This is to protect hardware from multiple actions trying to modify it at the same time.\n IMPORTANT: If a Redfish update is already in progress, the abort will not stop that process on the device. It is likely the device will update. If the device needs to be manually power cycled (needManualReboot), then it is possible that the device will update, but not actually apply the update until its next reboot. Administrators must verify the state of the system after an abort. Only perform an abort if truly necessary. The best way to check the state of the system is to do a snapshot or do a dry-run of an update.\n Abort an action: Procedure Issue the abort command to the action.\nModify the example command to specify the actionID of the action being aborted.\nncn-mw# cray fas actions instance delete {actionID} The action could take up to a minute to fully abort.\nDescribe an action There are several ways to get more information about a firmware update. An actionID and operationIDs are generated when a live update or dry-run is created. These values can be used to learn more about what is happening on the system during an update.\nDescribe an action: Interpreting output For the steps below, the following returned messages will help determine if a firmware update is needed. The following are end states for operations. The Firmware action itself should be in completed once all operations have finished.\n NoOp: Nothing to do, already at version. NoSol: No image is available. succeeded:  If dryrun: The operation should succeed if performed as a live update. succeeded means that FAS identified that it COULD update a component name (xname) + target with the declared strategy. If live update: The operation succeeded, and has updated the component name (xname) + target to the identified version.   failed:  If dryrun: There is something that FAS could do, but it likely would fail; most likely because the file is missing. If live update: The operation failed; the identified version could not be put on the component name (xname) + target.    Data can be viewed at several levels of information:\nDescribe an action: Procedure Get high level summary To view counts of operations, what state they are in, the overall state of the action, and what parameters were used to create the action:\nModify the following command to specify the actual actionID of the action to be examined.\nncn-mw# cray fas actions status list {actionID} --format toml Example output:\nactionID = \u0026#34;e6dc14cd-5e12-4d36-a97b-0dd372b0930f\u0026#34; snapshotID = \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34; startTime = \u0026#34;2021-09-07 16:43:04.294233199 +0000 UTC\u0026#34; endTime = \u0026#34;2021-09-07 16:53:09.363233482 +0000 UTC\u0026#34; state = \u0026#34;completed\u0026#34; blockedBy = [] [command] overrideDryrun = false restoreNotPossibleOverride = true overwriteSameImage = false timeLimit = 2000 version = \u0026#34;latest\u0026#34; tag = \u0026#34;default\u0026#34; description = \u0026#34;Dryrun upgrade of Gigabyte node BMCs\u0026#34; [operationCounts] total = 14 initial = 0 configured = 0 blocked = 0 needsVerified = 0 verifying = 0 inProgress = 0 failed = 0 succeeded = 8 noOperation = 6 noSolution = 0 aborted = 0 unknown = 0  IMPORTANT: The action is still in progress unless the action\u0026rsquo;s state is completed or aborted.\n Get details of action Modify the following command to specify the actual actionID of the action to be examined.\nncn-mw# cray fas actions describe {actionID} --format json Example output:\n{ \u0026#34;parameters\u0026#34;: { \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;nodeBMC\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;dryrun\u0026#34;: false, \u0026#34;description\u0026#34;: \u0026#34;upgrade of nodeBMCs for cray\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34; }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;cray\u0026#34; }, \u0026#34;imageFilter\u0026#34;: { \u0026#34;imageID\u0026#34;: \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;BMC\u0026#34; ] } }, \u0026#34;blockedBy\u0026#34;: [], \u0026#34;state\u0026#34;: \u0026#34;completed\u0026#34;, \u0026#34;command\u0026#34;: { \u0026#34;dryrun\u0026#34;: false, \u0026#34;description\u0026#34;: \u0026#34;upgrade of nodeBMCs for cray\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34; }, \u0026#34;actionID\u0026#34;: \u0026#34;e0cdd7c2-32b1-4a25-9b2a-8e74217eafa7\u0026#34;, \u0026#34;startTime\u0026#34;: \u0026#34;2020-06-26 20:03:37.316932354 +0000 UTC\u0026#34;, \u0026#34;snapshotID\u0026#34;: \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34;, \u0026#34;endTime\u0026#34;: \u0026#34;2020-06-26 20:04:07.118243184 +0000 UTC\u0026#34;, \u0026#34;operationSummary\u0026#34;: { \u0026#34;succeeded\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;verifying\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;unknown\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;configured\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;initial\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;failed\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [ { \u0026#34;stateHelper\u0026#34;: \u0026#34;unexpected change detected in firmware version. Expected sc.1.4.35-prod- master.arm64.2020-06-26T08:36:42+00:00.0c2bb02 got: sc.1.3.307-prod-master.arm64.2020-06-13T00:28:26+00:00.f91edff\u0026#34;, \u0026#34;fromFirmwareVersion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;xname\u0026#34;: \u0026#34;x5000c1r7b0\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;BMC\u0026#34;, \u0026#34;operationID\u0026#34;: \u0026#34;0796eed0-e95d-45ea-bc71-8903d52cffde\u0026#34; }, ] }, \u0026#34;noSolution\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;aborted\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;needsVerified\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;noOperation\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;inProgress\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;blocked\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] } } } Get details of operation Using the operationID listed in the actions array, see the full detail of the operation.\nModify the following command to specify the actual operationID of the operation to be examined.\nncn-mw# cray fas operations describe {operationID} --format json Example output:\n{ \u0026#34;fromFirmwareVersion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;fromTag\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;fromImageURL\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;endTime\u0026#34;: \u0026#34;2020-06-24 14:23:37.544814197 +0000 UTC\u0026#34;, \u0026#34;actionID\u0026#34;: \u0026#34;f48aabf1-1616-49ae-9761-a11edb38684d\u0026#34;, \u0026#34;startTime\u0026#34;: \u0026#34;2020-06-24 14:19:15.10128214 +0000 UTC\u0026#34;, \u0026#34;fromSemanticFirmwareVersion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;toImageURL\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;model\u0026#34;: \u0026#34;WindomNodeCard_REV_D\u0026#34;, \u0026#34;operationID\u0026#34;: \u0026#34;24a5e5fb-5c4f-4848-bf4e-b071719c1850\u0026#34;, \u0026#34;fromImageID\u0026#34;: \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;BMC\u0026#34;, \u0026#34;toImageID\u0026#34;: \u0026#34;71c41a74-ab84-45b2-95bd-677f763af168\u0026#34;, \u0026#34;toSemanticFirmwareVersion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;refreshTime\u0026#34;: \u0026#34;2020-06-24 14:23:37.544824938 +0000 UTC\u0026#34;, \u0026#34;blockedBy\u0026#34;: [], \u0026#34;toTag\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;succeeded\u0026#34;, \u0026#34;stateHelper\u0026#34;: \u0026#34;unexpected change detected in firmware version. Expected nc.1.3.8-shasta-release.arm.2020-06-15T22:57:31+00:00.b7f0725 got: nc.1.2.25-shasta-release.arm.2020-05-15T17:27:16+00:00.0cf7f51\u0026#34;, \u0026#34;deviceType\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;expirationTime\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;manufacturer\u0026#34;: \u0026#34;cray\u0026#34;, \u0026#34;xname\u0026#34;: \u0026#34;x9000c1s3b1\u0026#34;, \u0026#34;toFirmwareVersion\u0026#34;: \u0026#34;\u0026#34; } Snapshots FAS includes a snapshot feature to record the firmware value for each device (type and target) on the system into the FAS database.\nCreate a snapshot Similar to the FAS actions described above, FAS provides a lot of flexibility for taking snapshots.\nA snapshot of the system captures the firmware version for every device that is in the Hardware State Manager (HSM) Redfish Inventory.\nCreate a snapshot: Procedure   Determine the desired snapshot level.\nCreate a JSON file based on the desired level.\n  Full system\n{ \u0026#34;name\u0026#34;:\u0026#34;fullSystem_20200701\u0026#34; }   Partial system\n{ \u0026#34;name\u0026#34;: \u0026#34;20200402_all_xnames\u0026#34;, \u0026#34;expirationTime\u0026#34;: \u0026#34;2020-06-26T16:32:53.275Z\u0026#34;, \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;partitions\u0026#34;: [ \u0026#34;p1\u0026#34; ], \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;nodeBMC\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;gigabyte\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;BMC\u0026#34; ] } }     Create the snapshot.\nModify the example command to specify the JSON file created in the previous step.\nncn-mw# cray fas snapshots create {file.json}   Use the snapshot name to query the snapshot. This is a long-running operation, so monitor the state field to determine if the snapshot is complete.\n  List snapshots A list of all snapshots can be viewed on the system. Any of the snapshots listed can be used to restore the firmware on the system.\nList snapshots: Procedure   List the snapshots.\nncn-mw# cray fas snapshots list --format json Example output:\n{ \u0026#34;snapshots\u0026#34;: [ { \u0026#34;ready\u0026#34;: true, \u0026#34;captureTime\u0026#34;: \u0026#34;2020-06-25 22:47:11.072268274 +0000 UTC\u0026#34;, \u0026#34;relatedActions\u0026#34;: [], \u0026#34;name\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;uniqueDeviceCount\u0026#34;: 9 }, { \u0026#34;ready\u0026#34;: true, \u0026#34;captureTime\u0026#34;: \u0026#34;2020-06-25 22:49:13.314876084 +0000 UTC\u0026#34;, \u0026#34;relatedActions\u0026#34;: [], \u0026#34;name\u0026#34;: \u0026#34;3\u0026#34;, \u0026#34;uniqueDeviceCount\u0026#34;: 9 }, { \u0026#34;ready\u0026#34;: true, \u0026#34;captureTime\u0026#34;: \u0026#34;2020-06-26 22:38:12.309979483 +0000 UTC\u0026#34;, \u0026#34;relatedActions\u0026#34;: [], \u0026#34;name\u0026#34;: \u0026#34;adn0\u0026#34;, \u0026#34;uniqueDeviceCount\u0026#34;: 6 } ] }   View snapshots View a snapshot to see which versions of firmware are set for each target.\nView snapshots: Procedure   View a snapshot.\nModify the following command to specify the actual name of the snapshot to be examined.\nncn-mw# cray fas snapshots describe {snapshot_name} --format json Example output:\n{ \u0026#34;relatedActions\u0026#34;: [], \u0026#34;name\u0026#34;: \u0026#34;all\u0026#34;, \u0026#34;parameters\u0026#34;: { \u0026#34;stateComponentFilter\u0026#34;: {}, \u0026#34;targetFilter\u0026#34;: {}, \u0026#34;name\u0026#34;: \u0026#34;all\u0026#34;, \u0026#34;inventoryHardwareFilter\u0026#34;: {} }, \u0026#34;ready\u0026#34;: true, \u0026#34;captureTime\u0026#34;: \u0026#34;2020-06-26 19:13:53.755350771 +0000 UTC\u0026#34;, \u0026#34;devices\u0026#34;: [ { \u0026#34;xname\u0026#34;: \u0026#34;x3000c0s19b4\u0026#34;, \u0026#34;targets\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;BIOS\u0026#34;, \u0026#34;firmwareVersion\u0026#34;: \u0026#34;C12\u0026#34;, \u0026#34;imageID\u0026#34;: \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;BMC\u0026#34;, \u0026#34;firmwareVersion\u0026#34;: \u0026#34;12.03.3\u0026#34;, \u0026#34;imageID\u0026#34;: \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34; } ] }, { \u0026#34;xname\u0026#34;: \u0026#34;x3000c0s1b0\u0026#34;, \u0026#34;targets\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;BPB_CPLD1\u0026#34;, \u0026#34;firmwareVersion\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;imageID\u0026#34;: \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;BMC\u0026#34;, \u0026#34;firmwareVersion\u0026#34;: \u0026#34;12.03.3\u0026#34;, \u0026#34;imageID\u0026#34;: \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;BIOS\u0026#34;, \u0026#34;firmwareVersion\u0026#34;: \u0026#34;C12\u0026#34;, \u0026#34;imageID\u0026#34;: \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;BPB_CPLD2\u0026#34;, \u0026#34;firmwareVersion\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;imageID\u0026#34;: \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34; } ] } ] }   Update a firmware image If FAS indicates that hardware is in a nosolution state as a result of a dry-run or update, it is an indication that there is no matching image available to update firmware. A missing image is highly possible, but the issue could also be that the hardware has inconsistent model names in the image file.\nGiven the nature of the model field and its likelihood to not be standardized, it may be necessary to update the image to include an image that is not currently present.\nUpdate a firmware image: Procedure   List the existing firmware images to find the imageID of the desired firmware image.\nncn-mw# cray fas images list   Describe the image using the imageID.\nModify the following command to specify the actual imageID of the image to be examined.\nncn-mw# cray fas images describe {imageID} --format json Example output:\n{ \u0026#34;semanticFirmwareVersion\u0026#34;: \u0026#34;0.2.6\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;Node0.BIOS\u0026#34;, \u0026#34;waitTimeBeforeManualRebootSeconds\u0026#34;: 0, \u0026#34;tags\u0026#34;: [ \u0026#34;default\u0026#34; ], \u0026#34;models\u0026#34;: [ \u0026#34;GrizzlyPeak-Rome\u0026#34; ], \u0026#34;updateURI\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;waitTimeAfterRebootSeconds\u0026#34;: 0, \u0026#34;imageID\u0026#34;: \u0026#34;efa4c2bc-06b9-4e88-8098-8d6778c1db52\u0026#34;, \u0026#34;s3URL\u0026#34;: \u0026#34;s3:/fw-update/794c47d1b7e011ea8d20569839947aa5/gprnc.bios-0.2.6.tar.gz\u0026#34;, \u0026#34;forceResetType\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;deviceType\u0026#34;: \u0026#34;nodeBMC\u0026#34;, \u0026#34;pollingSpeedSeconds\u0026#34;: 30, \u0026#34;createTime\u0026#34;: \u0026#34;2020-06-26T19:08:52Z\u0026#34;, \u0026#34;firmwareVersion\u0026#34;: \u0026#34;gprnc.bios-0.2.6\u0026#34;, \u0026#34;manufacturer\u0026#34;: \u0026#34;cray\u0026#34; }   Describe the FAS action and compare it to the image from the previous step.\nLook at the hardware models to see if some of the population is in a noSolution state, while others are in a succeeded state. If that is the case, then view the operation data and examine the models.\nModify the following command to specify the actual actionID of the action to be examined.\nncn-mw# cray fas actions describe {actionID} --format json Example output:\n\u0026#34;parameters\u0026#34;: { \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;nodeBMC\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;dryrun\u0026#34;: false, \u0026#34;description\u0026#34;: \u0026#34;upgrade of nodeBMCs for cray\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34; }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;cray\u0026#34; }, \u0026#34;imageFilter\u0026#34;: { \u0026#34;imageID\u0026#34;: \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;BMC\u0026#34; ] } }, \u0026#34;blockedBy\u0026#34;: [], \u0026#34;state\u0026#34;: \u0026#34;completed\u0026#34;, \u0026#34;command\u0026#34;: { \u0026#34;dryrun\u0026#34;: false, \u0026#34;description\u0026#34;: \u0026#34;upgrade of nodeBMCs for cray\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34; }, \u0026#34;actionID\u0026#34;: \u0026#34;e0cdd7c2-32b1-4a25-9b2a-8e74217eafa7\u0026#34;, \u0026#34;startTime\u0026#34;: \u0026#34;2020-06-26 20:03:37.316932354 +0000 UTC\u0026#34;, \u0026#34;snapshotID\u0026#34;: \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34;, \u0026#34;endTime\u0026#34;: \u0026#34;2020-06-26 20:04:07.118243184 +0000 UTC\u0026#34;, \u0026#34;operationSummary\u0026#34;: { \u0026#34;succeeded\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;verifying\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;unknown\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;configured\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;initial\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;failed\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [ { \u0026#34;stateHelper\u0026#34;: \u0026#34;unexpected change detected in firmware version. Expected sc.1.4.35-prod- master.arm64.2020-06-26T08:36:42+00:00.0c2bb02 got: sc.1.3.307-prod-master.arm64.2020-06-13T00:28:26+00:00.f91edff\u0026#34;, \u0026#34;fromFirmwareVersion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;xname\u0026#34;: \u0026#34;x5000c1r7b0\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;BMC\u0026#34;, \u0026#34;operationID\u0026#34;: \u0026#34;0796eed0-e95d-45ea-bc71-8903d52cffde\u0026#34; }, { \u0026#34;stateHelper\u0026#34;: \u0026#34;unexpected change detected in firmware version. Expected sc.1.4.35-prod- master.arm64.2020-06-26T08:36:42+00:00.0c2bb02 got: sc.1.3.307-prod-master.arm64.2020-06-13T00:28:26+00:00.f91edff\u0026#34;, \u0026#34;fromFirmwareVersion\u0026#34;: \u0026#34;sc.1.3.307-prod-master.arm64.2020-06-13T00:28:26+00:00.f91edff\u0026#34;, \u0026#34;xname\u0026#34;: \u0026#34;x5000c3r7b0\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;BMC\u0026#34;, \u0026#34;operationID\u0026#34;: \u0026#34;11421f0b-1fde-4917-ba56-c42b321fc833\u0026#34; }, { \u0026#34;stateHelper\u0026#34;: \u0026#34;unexpected change detected in firmware version. Expected sc.1.4.35-prod- master.arm64.2020-06-26T08:36:42+00:00.0c2bb02 got: sc.1.3.307-prod-master.arm64.2020-06-13T00:28:26+00:00.f91edff\u0026#34;, \u0026#34;fromFirmwareVersion\u0026#34;: \u0026#34;sc.1.3.307-prod-master.arm64.2020-06-13T00:28:26+00:00.f91edff\u0026#34;, \u0026#34;xname\u0026#34;: \u0026#34;x5000c3r3b0\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;BMC\u0026#34;, \u0026#34;operationID\u0026#34;: \u0026#34;21e04403-f89f-4a9f-9fd6-5affc9204689\u0026#34; }, { \u0026#34;stateHelper\u0026#34;: \u0026#34;unexpected change detected in firmware version. Expected sc.1.4.35-prod- master.arm64.2020-06-26T08:36:42+00:00.0c2bb02 got: sc.1.3.307-prod-master.arm64.2020-06-13T00:28:26+00:00.f91edff\u0026#34;, \u0026#34;fromFirmwareVersion\u0026#34;: \u0026#34;sc.1.3.307-prod-master.arm64.2020-06-13T00:28:26+00:00.f91edff\u0026#34;, \u0026#34;xname\u0026#34;: \u0026#34;x5000c1r5b0\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;BMC\u0026#34;, \u0026#34;operationID\u0026#34;: \u0026#34;3a13a459-2102-4ee5-b516-62880baa132d\u0026#34; }, { \u0026#34;stateHelper\u0026#34;: \u0026#34;unexpected change detected in firmware version. Expected sc.1.4.35-prod- master.arm64.2020-06-26T08:36:42+00:00.0c2bb02 got: sc.1.3.307-prod-master.arm64.2020-06-13T00:28:26+00:00.f91edff\u0026#34;, \u0026#34;fromFirmwareVersion\u0026#34;: \u0026#34;sc.1.3.307-prod-master.arm64.2020-06-13T00:28:26+00:00.f91edff\u0026#34;, \u0026#34;xname\u0026#34;: \u0026#34;x5000c1r1b0\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;BMC\u0026#34;, \u0026#34;operationID\u0026#34;: \u0026#34;80fafbdd-9bac-407d-b28a-ad47c197bbc1\u0026#34; }, { \u0026#34;stateHelper\u0026#34;: \u0026#34;unexpected change detected in firmware version. Expected sc.1.4.35-prod- master.arm64.2020-06-26T08:36:42+00:00.0c2bb02 got: sc.1.3.307-prod-master.arm64.2020-06-13T00:28:26+00:00.f91edff\u0026#34;, \u0026#34;fromFirmwareVersion\u0026#34;: \u0026#34;sc.1.3.307-prod-master.arm64.2020-06-13T00:28:26+00:00.f91edff\u0026#34;, \u0026#34;xname\u0026#34;: \u0026#34;x5000c3r5b0\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;BMC\u0026#34;, \u0026#34;operationID\u0026#34;: \u0026#34;a86e8e04-81cc-40ad-ac62-438ae73e033a\u0026#34; }, { \u0026#34;stateHelper\u0026#34;: \u0026#34;unexpected change detected in firmware version. Expected sc.1.4.35-prod- master.arm64.2020-06-26T08:36:42+00:00.0c2bb02 got: sc.1.3.307-prod-master.arm64.2020-06-13T00:28:26+00:00.f91edff\u0026#34;, \u0026#34;fromFirmwareVersion\u0026#34;: \u0026#34;sc.1.3.307-prod-master.arm64.2020-06-13T00:28:26+00:00.f91edff\u0026#34;, \u0026#34;xname\u0026#34;: \u0026#34;x5000c1r3b0\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;BMC\u0026#34;, \u0026#34;operationID\u0026#34;: \u0026#34;dd0e8b62-8894-4751-bd22-a45506a2a50a\u0026#34; }, { \u0026#34;stateHelper\u0026#34;: \u0026#34;unexpected change detected in firmware version. Expected sc.1.4.35-prod- master.arm64.2020-06-26T08:36:42+00:00.0c2bb02 got: sc.1.3.307-prod-master.arm64.2020-06-13T00:28:26+00:00.f91edff\u0026#34;, \u0026#34;fromFirmwareVersion\u0026#34;: \u0026#34;sc.1.3.307-prod-master.arm64.2020-06-13T00:28:26+00:00.f91edff\u0026#34;, \u0026#34;xname\u0026#34;: \u0026#34;x5000c3r1b0\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;BMC\u0026#34;, \u0026#34;operationID\u0026#34;: \u0026#34;f87bff63-d231-403e-b6b6-fc09e4dc7d11\u0026#34; } ] }, \u0026#34;noSolution\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;aborted\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;needsVerified\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;noOperation\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;inProgress\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] }, \u0026#34;blocked\u0026#34;: { \u0026#34;OperationsKeys\u0026#34;: [] } } }   View the operation data.\nIf the model name is different between identical hardware, it may be appropriate to update the image model with the model of the noSolution hardware.\nModify the following command to specify the actual operationID of the operation to be examined.\nncn-mw# cray fas operations describe {operationID} --format json Example output:\n{ \u0026#34;fromFirmwareVersion\u0026#34;: \u0026#34;sc.1.3.307-prod-master.arm64.2020-06-13T00:28:26+00:00.f91edff\u0026#34;, \u0026#34;fromTag\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;fromImageURL\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;endTime\u0026#34;: \u0026#34;2020-06-26 20:15:38.535719717 +0000 UTC\u0026#34;, \u0026#34;actionID\u0026#34;: \u0026#34;e0cdd7c2-32b1-4a25-9b2a-8e74217eafa7\u0026#34;, \u0026#34;startTime\u0026#34;: \u0026#34;2020-06-26 20:03:39.44911099 +0000 UTC\u0026#34;, \u0026#34;fromSemanticFirmwareVersion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;toImageURL\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;model\u0026#34;: \u0026#34;ColoradoSwitchBoard_REV_A\u0026#34;, \u0026#34;operationID\u0026#34;: \u0026#34;f87bff63-d231-403e-b6b6-fc09e4dc7d11\u0026#34;, \u0026#34;fromImageID\u0026#34;: \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;BMC\u0026#34;, \u0026#34;toImageID\u0026#34;: \u0026#34;1540ce48-91db-4bbf-a0cf-5cf936c30fbc\u0026#34;, \u0026#34;toSemanticFirmwareVersion\u0026#34;: \u0026#34;1.4.35\u0026#34;, \u0026#34;refreshTime\u0026#34;: \u0026#34;2020-06-26 20:15:38.535722248 +0000 UTC\u0026#34;, \u0026#34;blockedBy\u0026#34;: [], \u0026#34;toTag\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;failed\u0026#34;, \u0026#34;stateHelper\u0026#34;: \u0026#34;unexpected change detected in firmware version. Expected sc.1.4.35-prod- master.arm64.2020-06-26T08:36:42+00:00.0c2bb02 got: sc.1.3.307-prod-master.arm64.2020-06-13T00:28:26+00:00.f91edff\u0026#34;, \u0026#34;deviceType\u0026#34;: \u0026#34;RouterBMC\u0026#34;, \u0026#34;expirationTime\u0026#34;: \u0026#34;2020-06-26 20:20:19.44911275 +0000 UTC\u0026#34;, \u0026#34;manufacturer\u0026#34;: \u0026#34;cray\u0026#34;, \u0026#34;xname\u0026#34;: \u0026#34;x5000c3r1b0\u0026#34;, \u0026#34;toFirmwareVersion\u0026#34;: \u0026#34;sc.1.4.35-prod-master.arm64.2020-06-26T08:36:42+00:00.0c2bb02\u0026#34; }   Update the firmware image file.\nThis step should be skipped if there is no clear evidence of a missing image or incorrect model name.\n WARNING: The administrator needs to be certain the firmware is compatible before proceeding.\n   Dump the content of the firmware image to a JSON file.\nModify the following command to specify the actual imageID of the image to be updated.\nncn-mw# cray fas images describe {imageID} --format json \u0026gt; imagedata.json   Edit the new imagedata.json file.\nUpdate any incorrect firmware information, such as the model name.\n  Update the firmware image.\nModify the following command to specify the actual imageID of the image to be updated, and be sure that the filename matches the edited file from the previous step.\nncn-mw# cray fas images update imagedata.json {imageID}     FAS loader commands Loader status To check if the loader is currently busy and receive a list of loader run IDs:\nncn-mw# cray fas loader list --format toml Example output:\nloaderStatus = \u0026#34;ready\u0026#34; [[loaderRunList]] loaderRunID = \u0026#34;770af5a4-15bf-4e9f-9983-03069479dc23\u0026#34; [[loaderRunList]] loaderRunID = \u0026#34;8efb19c4-77a2-41da-9a8f-fccbfe06f674\u0026#34; The loader can only run one job at a time. If the loader is busy, then it will return an error on any attempt to create an additional job.\nLoad firmware from Nexus Firmware may be released and placed into the Nexus repository.\nTo load the firmware from Nexus into FAS, use the following command:\nncn-mw# cray fas loader nexus create --format toml Example output:\nloaderRunID = \u0026#34;c2b7e9bb-f428-4e4c-aa83-d8fd8bcfd820\u0026#34; Use the loaderRunID to check the results of the loader run.\nSee Load Firmware from Nexus.\nLoad individual RPM or ZIP into FAS   Copy the RPM or ZIP file to one of the master or worker NCNs.\n  Load the firmware into FAS.\nBe sure to update the example command with the actual path and filename of the RPM or ZIP file to be loaded.\nncn-mw# cray fas loader create --file firmware.rpm --format toml Example output:\nloaderRunID = \u0026#34;dd37dd45-84ec-4bd6-b3c9-7af480048966\u0026#34;   Use the loaderRunID to check the results of the loader run.\nSee Load Firmware from RPM or ZIP file.\nDisplay results of loader run Using the loaderRunID returned from the loader upload command, run the following command to get the output from the upload.\nBe sure to update the example command with the actual loaderRunID whose output is to be checked.\nncn-mw# cray fas loader describe dd37dd45-84ec-4bd6-b3c9-7af480048966 --format json Example output:\n{ \u0026#34;loaderRunOutput\u0026#34;: [ \u0026#34;2021-04-28T14:40:45Z-FWLoader-INFO-Starting FW Loader, LOG_LEVEL: INFO; value: 20\u0026#34;, \u0026#34;2021-04-28T14:40:45Z-FWLoader-INFO-urls: {\u0026#39;fas\u0026#39;: \u0026#39;http://localhost:28800\u0026#39;, \u0026#39;fwloc\u0026#39;: \u0026#39;file://download/\u0026#39;}\u0026#34;, \u0026#34;2021-04-28T14:40:45Z-FWLoader-INFO-Using local file: /ilo5_241.zip\u0026#34;, \u0026#34;2021-04-28T14:40:45Z-FWLoader-INFO-unzip /ilo5_241.zip\u0026#34;, \u0026#34;Archive: /ilo5_241.zip\u0026#34;, \u0026#34; inflating: ilo5_241.bin\u0026#34;, \u0026#34; inflating: ilo5_241.json\u0026#34;, \u0026#34;2021-04-28T14:40:45Z-FWLoader-INFO-Processing files from file://download/\u0026#34;, \u0026#34;2021-04-28T14:40:45Z-FWLoader-INFO-get_file_list(file://download/)\u0026#34;, \u0026#34;2021-04-28T14:40:45Z-FWLoader-INFO-Processing File: file://download/ ilo5_241.json\u0026#34;, \u0026#34;2021-04-28T14:40:45Z-FWLoader-INFO-Uploading b73a48cea82f11eb8c8a0242c0a81003/ilo5_241.bin\u0026#34;, \u0026#34;2021-04-28T14:40:45Z-FWLoader-INFO-Metadata {\u0026#39;imageData\u0026#39;: \\\u0026#34;{\u0026#39;deviceType\u0026#39;: \u0026#39;nodeBMC\u0026#39;, \u0026#39;manufacturer\u0026#39;: \u0026#39;hpe\u0026#39;, \u0026#39;models\u0026#39;: [\u0026#39;ProLiant XL270d Gen10\u0026#39;, \u0026#39;ProLiant DL325 Gen10\u0026#39;, \u0026#39;ProLiant DL325 Gen10 Plus\u0026#39;, \u0026#39;ProLiant DL385 Gen10\u0026#39;, \u0026#39;ProLiant DL385 Gen10 Plus\u0026#39;, \u0026#39;ProLiant XL645d Gen10 Plus\u0026#39;, \u0026#39;ProLiant XL675d Gen10 Plus\u0026#39;], \u0026#39;targets\u0026#39;: [\u0026#39;iLO 5\u0026#39;], \u0026#39;tags\u0026#39;: [\u0026#39;default\u0026#39;], \u0026#39;firmwareVersion\u0026#39;: \u0026#39;2.41 Mar 08 2021\u0026#39;, \u0026#39;semanticFirmwareVersion\u0026#39;: \u0026#39;2.41.0\u0026#39;, \u0026#39;pollingSpeedSeconds\u0026#39;: 30, \u0026#39;fileName\u0026#39;: \u0026#39;ilo5_241.bin\u0026#39;}\\\u0026#34;}\u0026#34;, \u0026#34;2021-04-28T14:40:46Z-FWLoader-INFO-IMAGE: {\\\u0026#34;s3URL\\\u0026#34;: \\\u0026#34;s3:/fw-update/b73a48cea82f11eb8c8a0242c0a81003/ilo5_241.bin\\\u0026#34;, \\\u0026#34;target\\\u0026#34;: \\\u0026#34;iLO 5\\\u0026#34;, \\\u0026#34;deviceType\\\u0026#34;: \\\u0026#34;nodeBMC\\\u0026#34;, \\\u0026#34;manufacturer\\\u0026#34;: \\\u0026#34;hpe\\\u0026#34;, \\\u0026#34;models\\\u0026#34;: [\\\u0026#34;ProLiant XL270d Gen10\\\u0026#34;, \\\u0026#34;ProLiant DL325 Gen10\\\u0026#34;, \\\u0026#34;ProLiant DL325 Gen10 Plus\\\u0026#34;, \\\u0026#34;ProLiant DL385 Gen10\\\u0026#34;, \\\u0026#34;ProLiant DL385 Gen10 Plus\\\u0026#34;, \\\u0026#34;ProLiant XL645d Gen10 Plus\\\u0026#34;, \\\u0026#34;ProLiant XL675d Gen10 Plus\\\u0026#34;], \\\u0026#34;softwareIds\\\u0026#34;: [], \\\u0026#34;tags\\\u0026#34;: [\\\u0026#34;default\\\u0026#34;], \\\u0026#34;firmwareVersion\\\u0026#34;: \\\u0026#34;2.41 Mar 08 2021\\\u0026#34;, \\\u0026#34;semanticFirmwareVersion\\\u0026#34;: \\\u0026#34;2.41.0\\\u0026#34;, \\\u0026#34;allowableDeviceStates\\\u0026#34;: [], \\\u0026#34;needManualReboot\\\u0026#34;: false, \\\u0026#34;pollingSpeedSeconds\\\u0026#34;: 30}\u0026#34;, \u0026#34;2021-04-28T14:40:46Z-FWLoader-INFO-Number of Updates: 1\u0026#34;, \u0026#34;2021-04-28T14:40:46Z-FWLoader-INFO-Iterate images\u0026#34;, \u0026#34;2021-04-28T14:40:46Z-FWLoader-INFO-update ACL to public-read for 5ab9f804a82b11eb8a700242c0a81003/wnc.bios-1.1.2.tar.gz\u0026#34;, \u0026#34;2021-04-28T14:40:46Z-FWLoader-INFO-update ACL to public-read for 5ab9f804a82b11eb8a700242c0a81003/wnc.bios-1.1.2.tar.gz\u0026#34;, \u0026#34;2021-04-28T14:40:46Z-FWLoader-INFO-update ACL to public-read for 53c060baa82a11eba26c0242c0a81003/controllers-1.3.317.itb\u0026#34;, \u0026#34;2021-04-28T14:40:46Z-FWLoader-INFO-update ACL to public-read for b73a48cea82f11eb8c8a0242c0a81003/ilo5_241.bin\u0026#34;, \u0026#34;2021-04-28T14:40:46Z-FWLoader-INFO-finished updating images ACL\u0026#34;, \u0026#34;2021-04-28T14:40:46Z-FWLoader-INFO-removing local file: /ilo5_241.zip\u0026#34;, \u0026#34;2021-04-28T14:40:46Z-FWLoader-INFO-*** Number of Updates: 1 ***\u0026#34; ] } A successful run will end with *** Number of Updates: x ***.\n NOTE The FAS loader will not overwrite image records already in FAS. Number of Updates will be the number of new images found in the RPM. If the number is 0, all images were already in FAS.\n Delete loader run data To delete the output from a loader run and remove it from the loader run list:\nBe sure to update the example command with the actual loaderRunID whose output should be deleted.\nncn-mw# cray fas loader delete dd37dd45-84ec-4bd6-b3c9-7af480048966 The delete command does not return anything if successful.\n NOTE The loader delete command does not delete any images from FAS; it only deletes the loader run saved status and removes the ID from the loader run list.\n "
},
{
	"uri": "/docs-csm/en-12/operations/firmware/fas_filters/",
	"title": "FAS Filters",
	"tags": [],
	"description": "",
	"content": "FAS Filters FAS uses five primary filters for actions and snapshots to determine what operations to create. The filters are listed below:\n Selection Filters - Determine what operations will be created. The following selection filters are available:  stateComponentFilter targetFilter inventoryHardwareFilter imageFilter   Command Filters - Determine how the operations will be executed. The following command filters are available:  command    All filters are logically connected with AND logic. Only the stateComponentFilter, targetFilter, and inventoryHardwareFilter are used for snapshots.\n Selection Filters stateComponentFilter The state component filter allows users to select hardware to update. Hardware can be selected individually with component names (xnames), or in groups by leveraging the Hardware State Manager (HSM) groups and partitions features.\nParameters  xnames - A list of component names (xnames) to target. partitions - A partition to target. groups- A group to target. deviceTypes Set to NodeBMC, RouterBMC, or ChassisBMC. These are the ONLY three allowed types and come from the Hardware State Manager (HSM).   inventoryHardwareFilter The inventory hardware filter takes place after the state component filter has been applied. It will remove any devices that do not conform to the identified manufacturer or models determined by querying the Redfish endpoint.\n IMPORTANT: There can be a mismatch of hardware models. The model field is human-readable and is human-programmable. In some cases, there can be typos where the wrong model is programmed, which causes issues filtering. If this occurs, query the hardware, find the model name, and add it to the images repository on the desired image.\n Parameters  manufacturer - Set to Cray, HPE, or Gigabyte. model - The Redfish reported model, which can be specified.   imageFilter FAS applies images to component name (xname)/targets. The image filter is a way to specify an explicit image that should be used. When included with other filters, the image filter reduces the devices considered to only those devices where the image can be applied.\nFor example, consider if a user specifies an image that only applies to Gigabyte nodeBMC BIOS targets. If all hardware in the system is targeted with an empty stateComponentFilter, FAS would find all devices in the system that can be updated via Redfish, and then the image filter would remove all component name (xname)/ targets that this image could not be applied to. In this example, FAS would remove any device that is not a Gigabyte nodeBMC, as well as any target that is not BIOS.\nParameters  imageID - The ID of the image to force onto the system. overrideImage - If this is combined with imageID, then it will FORCE the selected image onto all hardware identified, even if it is not applicable.  WARNING: This may cause undesirable outcomes, but most hardware will prevent a bad image from being loaded.\n    targetFilter The target filter selects targets that match against the list. For example, if the user specifies only the BIOS target, FAS will include only operations that explicitly have BIOS as a target. A Redfish device has potentially many targets (members). Targets for FAS are case sensitive and must match Redfish.\nParameters  targets - The actual \u0026lsquo;members\u0026rsquo; that will be upgraded. Examples include, but are not limited to the following:  BIOS BMC NIC Node0.BIOS Node1.BIOS Recovery     Command Filters command The command group is the most important part of an action command and controls if the action is executed as dry-run or a live update.\nIt also determines whether or not to override an operation that would normally not be executed if there is no way to return the component name (xname)/target to the previous firmware version. This happens if an image does not exist in the image repository.\nThese filters are then applied; and then command parameter applies settings for the overall action. The swagger file is a great reference.\nParameters  version - Usually latest because that is the most common use case. tag - Usually default because the default image is the most useful one to use. This parameter can usually be ignored. overrideDryrun - This determines if this is a LIVE UPDATE or a DRY-RUN. If doing an override; then it will provide a live update. restoreNotPossibleOverride - This determines if an update (live or dry-run) will be attempted if a restore cannot be performed. Typically there is not enough firmware to be able to do a rollback, which means if the system is an UPDATE away from a particular version, it cannot go back to a previous version. It is most likely that this value will ALWAYS need to be set true. overwriteSameImage - This will cause a firmware update to be performed EVEN if the device is already at the identified, selected version. timeLimit - This is the amount of time in seconds that any operation should be allowed to execute. Most cray hardware can be completed in approximately 1000 seconds or less; but the gigabyte hardware will commonly take 1500 seconds or greater. Setting the value to 4000 is recommended as a stop gap to prevent the operation from never ending, should something get stuck. description- A human-friendly description that should be set to give useful information about the firmware operation.  "
},
{
	"uri": "/docs-csm/en-12/operations/firmware/fas_recipes/",
	"title": "FAS Recipes",
	"tags": [],
	"description": "",
	"content": "FAS Recipes  NOTE: This is a collection of various FAS recipes for performing updates. For step by step directions and commands, see FAS Use Cases.\n The following example JSON files are useful to reference when updating specific hardware components. In all of these examples, the overrideDryrun field will be set to false; set them to true to perform a live update.\nWhen updating an entire system, walk down the device hierarchy component type by component type, starting first with routers (switches), proceeding to chassis, and then finally to nodes. While this is not strictly necessary, it does help eliminate confusion.\nRefer to FAS Filters for more information on the content used in the example JSON files.\nManufacturer : Cray (Cray) Device Type: ChassisBMC | Target: BMC  IMPORTANT: Before updating a CMM:\n Make sure all slot and rectifier power is off. The hms-discovery job must also be stopped before updates and restarted after updates are complete.  Stop hms-discovery job: ncn-mw# kubectl -n services patch cronjobs hms-discovery -p '{\u0026quot;spec\u0026quot;:{\u0026quot;suspend\u0026quot;:true}}' Start hms-discovery job: ncn-mw# kubectl -n services patch cronjobs hms-discovery -p '{\u0026quot;spec\u0026quot;:{\u0026quot;suspend\u0026quot;:false}}'     { \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;cray\u0026#34; }, \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;chassisBMC\u0026#34; ] }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;BMC\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;description\u0026#34;: \u0026#34;Dryrun upgrade of Cray Chassis Controllers\u0026#34; } } (Cray) Device Type: NodeBMC | Target: BMC { \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;nodeBMC\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;cray\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;BMC\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;description\u0026#34;: \u0026#34;Dryrun upgrade of Olympus node BMCs\u0026#34; } } (Cray) Device Type: NodeBMC | Target: NodeBIOS  IMPORTANT:\n The nodes themselves must be powered off in order to update their BIOS. The BMC will still have power and will perform the update. When the BMC is updated or rebooted after updating the Node0.BIOS and/or Node1.BIOS on liquid-cooled nodes, the node BIOS version will not report the new version string until the nodes are powered back on. It is recommended that the Node0.BIOS / Node1.BIOS be updated in a separate action, either before or after a BMC update, and that the nodes are powered back on after a BIOS update. The liquid-cooled nodes must be powered off for the BIOS to be updated.   { \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;nodeBMC\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;cray\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;Node0.BIOS\u0026#34;, \u0026#34;Node1.BIOS\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;description\u0026#34;: \u0026#34;Dryrun upgrade of Node BIOS\u0026#34; } }  NOTE: If this update does not work as expected, follow the Compute Node BIOS Workaround for HPE CRAY EX425 procedure.\n (Cray) Device Type: NodeBMC | Target: Redstone FPGA  IMPORTANT:\n The nodes themselves must be powered on in order to update the firmware of the Redstone FPGA on the nodes. If updating FPGAs fails because of No Image available, update using the \u0026ldquo;Override an Image for an Update\u0026rdquo; procedure in FAS Admin Procedures:  (ncn-mw#) Find the imageID using the following command: cray fas images list --format json | jq '.[] | .[] | select(.target==\u0026quot;Node0.AccFPGA0\u0026quot;)'     { \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;nodeBMC\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;cray\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;Node0.AccFPGA0\u0026#34;, \u0026#34;Node1.AccFPGA0\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;description\u0026#34;: \u0026#34;Dryrun upgrade of Node Redstone FPGA\u0026#34; } } Manufacturer: HPE (HPE) Device Type: NodeBMC | Target: iLO 5 (BMC) { \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;nodeBMC\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;hpe\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;iLO 5\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;description\u0026#34;: \u0026#34;Dryrun upgrade of HPE node iLO 5\u0026#34; } } (HPE) Device Type: NodeBMC | Target: System ROM (BIOS)  IMPORTANT:\n If updating the System ROM of an NCN, the NTP and DNS server values will be lost and must be restored. For NCNs other than ncn-m001, this can be done using the /opt/cray/csm/scripts/node_management/set-bmc-ntp-dns.sh script. Use the -h option to get a list of command line options required to restore the NTP and DNS values. See Configure DNS and NTP on Each BMC. Node should be powered on for System ROM update and will need to be rebooted to use the updated BIOS.   { \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;NodeBMC\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;hpe\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;System ROM\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;description\u0026#34;: \u0026#34;Dryrun upgrade of HPE node system rom\u0026#34; } }  NOTE: Update of System ROM may report as an error when it actually succeeded because of an incorrect string in the image metadata in FAS. Manually check the update version to get around this error.\n Manufacturer: Gigabyte (Gigabyte) Device Type: NodeBMC | Target: BMC { \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;nodeBMC\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;gigabyte\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;BMC\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 4000, \u0026#34;description\u0026#34;: \u0026#34;Dryrun upgrade of Gigabyte node BMCs\u0026#34; } }  NOTE: The timeLimit is 4000 because the Gigabytes can take a lot longer to update.\n Troubleshooting A node may fail to update with the output:\nstateHelper = \u0026#34;Firmware Update Information Returned Downloading – See /redfish/v1/UpdateService\u0026#34; FAS has incorrectly marked this node as failed. It most likely will complete the update successfully.\nTo resolve this issue, do either of the following actions:\n Check the update status by looking at the Redfish FirmwareInventory (/redfish/v1/UpdateService/FirmwareInventory/BMC). Rerun FAS to verify that the BMC firmware was updated.  Make sure to wait for the current firmware to be updated before starting a new FAS action on the same node.\n(Gigabyte) Device Type: NodeBMC | Target: BIOS { \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;nodeBMC\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;gigabyte\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;BIOS\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 4000, \u0026#34;description\u0026#34;: \u0026#34;Dryrun upgrade of Gigabyte node BIOS\u0026#34; } } Update Non-Compute Nodes (NCNs) See Uploading BIOS and BMC Firmware for NCNs in FAS Use Cases.\n"
},
{
	"uri": "/docs-csm/en-12/operations/firmware/fas_use_cases/",
	"title": "FAS Use Cases",
	"tags": [],
	"description": "",
	"content": "FAS Use Cases Use the Firmware Action Service (FAS) to update the firmware on supported hardware devices. Each procedure includes the prerequisites and example recipes required to update the firmware.\nWhen updating an entire system, walk down the device hierarchy component type by component type, starting first with Routers (switches), proceeding to Chassis, and then finally to Nodes. While this is not strictly necessary, it does help eliminate confusion.\nRefer to FAS Filters for more information on the content used in the example JSON files.\nThe following procedures are included in this section:\n Update Liquid-Cooled Compute Node BMC, FPGA, and BIOS Update Air-Cooled Compute Node BMC, BIOS, iLO 5, and System ROM Update Chassis Management Module (CMM) Firmware Update NCN BIOS and BMC Firmware with FAS Compute Node BIOS Workaround for HPE CRAY EX425   NOTE: To update Switch Controllers (sC) or RouterBMC, refer to the Rosetta Documentation.\n Update Liquid-Cooled Nodes BMC, FPGA, and Node BIOS Update firmware for a liquid-cooled node controller (nC) using FAS. This section includes templates for JSON files that can be used and the procedure for running the update.\nAll of the example JSON files below are set to run a dry-run. Update the overrideDryrun value to true to update the firmware.\nThis procedure updates node controller (nC) firmware.\nPrerequisites  The Cray command line interface (CLI) tool is initialized and configured on the system.  Liquid-Cooled Nodes Update Procedures Manufacturer: Cray | Device Type: NodeBMC | Target: BMC\nBMC firmware with FPGA updates require the nodes to be off. If the nodes are not off when the update command is issued, the update will get deferred until the next power cycle of the BMC, which may be a long period of time.\n{ \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;nodeBMC\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;cray\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;BMC\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;description\u0026#34;: \u0026#34;Dryrun upgrade of Olympus node BMCs\u0026#34; } } Manufacturer: Cray | Device Type: NodeBMC | Target: Redstone FPGA\n IMPORTANT: The Nodes themselves must be powered on in order to update the firmware of the Redstone FPGA on the nodes.\n { \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;nodeBMC\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;cray\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;Node0.AccFPGA0\u0026#34;, \u0026#34;Node1.AccFPGA0\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;description\u0026#34;: \u0026#34;Dryrun upgrade of Node Redstone FPGA\u0026#34; } } Manufacturer: Cray | Device Type : NodeBMC | Target : NodeBIOS\nThere are two nodes that must be updated on each BMC; these have the targets Node0.BIOS and Node1.BIOS. The targets can be run in the same action (as shown in the example) or run separately by only including one target in the action. On larger systems, it is recommended to run as two actions one after each other as the output will be shorter.\nPrerequisites  The Cray nodeBMC device needs to be updated before the nodeBIOS because the nodeBMC adds a new Redfish field (softwareId) that the NodeX.BIOS update will require. See Update Liquid-Cooled Node Firmware for more information. Compute node BIOS updates require the nodes to be off. If nodes are not off when the update command is issued, it will report as a failed update.   IMPORTANT: The nodes themselves must be powered off in order to update the BIOS on the nodes. The BMC will still have power and will perform the update.\n  IMPORTANT: When the BMC is updated or rebooted after updating the Node0.BIOS and/or Node1.BIOS liquid-cooled nodes, the node BIOS version will not report the new version string until the nodes are powered back on. It is recommended that the Node0/1 BIOS be updated in a separate action, either before or after a BMC update. It is also recommended that the nodes be powered back on after the updates are completed.\n { \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;nodeBMC\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;cray\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;Node0.BIOS\u0026#34;, \u0026#34;Node1.BIOS\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;description\u0026#34;: \u0026#34;Dryrun upgrade of Node BIOS\u0026#34; } } Procedure   Create a JSON file using one of the example recipes with the command parameters required for updating the firmware or node BIOS.\n  Initiate a dry-run to verify that the firmware can be updated.\n  Create the dry-run session.\nThe overrideDryrun = false value indicates that the command will do a dry run.\nncn# cray fas actions create nodeBMC.json overrideDryrun = false actionID = \u0026#34;fddd0025-f5ff-4f59-9e73-1ca2ef2a432d\u0026#34;   Describe the actionID for firmware update dry-run job.\nReplace the actionID value with the string returned in the previous step. In this example, \u0026quot;fddd0025-f5ff-4f59-9e73-1ca2ef2a432d\u0026quot; is used.\nncn# cray fas actions describe {actionID} blockedBy = [] state = \u0026#34;completed\u0026#34; actionID = \u0026#34;fddd0025-f5ff-4f59-9e73-1ca2ef2a432d\u0026#34; startTime = \u0026#34;2020-08-31 15:49:44.568271843 +0000 UTC\u0026#34; snapshotID = \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34; endTime = \u0026#34;2020-08-31 15:51:35.426714612 +0000 UTC\u0026#34; [command] description = \u0026#34;Update Cray Node BMCs Dryrun\u0026#34; tag = \u0026#34;default\u0026#34; restoreNotPossibleOverride = true timeLimit = 10000 version = \u0026#34;latest\u0026#34; overrideDryrun = false If state = \u0026quot;completed\u0026quot;, the dry-run has found and checked all the nodes. Check the following sections for more information:\n  Lists the nodes that have a valid image for updating:\n[operationSummary.succeeded]   Lists the nodes that will not be updated because they are already at the correct version:\n[operationSummary.noOperation]   Lists the nodes that had an error when attempting to update:\n[operationSummary.failed]   Lists the nodes that do not have a valid image for updating:\n[operationSummary.noSolution]       Update the firmware after verifying that the dry-run worked as expected.\n  Edit the JSON file and update the values so an actual firmware update can be run.\nThe following example is for the nodeBMC.json file. Update the following values:\n\u0026#34;overrideDryrun\u0026#34;:true, \u0026#34;description\u0026#34;:\u0026#34;Update Cray Node BMCs\u0026#34;   Run the firmware update.\nThe output overrideDryrun = true indicates that an actual firmware update job was created. A new actionID will also be displayed.\nncn# cray fas actions create nodeBMC.json overrideDryrun = true actionID = \u0026#34;bc40f10a-e50c-4178-9288-8234b336077b\u0026#34; The time it takes for a firmware action to finish varies. It can be a few minutes or over 20 minutes depending on response time.\nThe liquid-cooled node BMC automatically reboots after the BMC firmware has been loaded.\n    Retrieve the operationID and verify that the update is complete.\nncn# cray fas actions describe {actionID} [operationSummary.failed] [[operationSummary.failed.operationKeys]] stateHelper = \u0026#34;unexpected change detected in firmware version. Expected nc.1.3.10-shasta-release.arm.2020-07-21T23:58:22+00:00.d479f59 got: nc.cronomatic-dev.arm.2019-09-24T13:20:24+00:00.9d0f8280\u0026#34; fromFirmwareVersion = \u0026#34;nc.cronomatic-dev.arm.2019-09-24T13:20:24+00:00.9d0f8280\u0026#34; xname = \u0026#34;x1005c6s4b0\u0026#34; target = \u0026#34;BMC\u0026#34; operationID = \u0026#34;e910c6ad-db98-44fc-bdc5-90477b23386f\u0026#34;   View more details for an operation using the operationID from the previous step.\nCheck the list of nodes for the failed or completed state.\nncn# cray fas operations describe {operationID} For example:\nncn# cray fas operations describe \u0026#34;e910c6ad-db98-44fc-bdc5-90477b23386f\u0026#34; fromFirmwareVersion = \u0026#34;nc.cronomatic-dev.arm.2019-09-24T13:20:24+00:00.9d0f8280\u0026#34; fromTag = \u0026#34;\u0026#34; fromImageURL = \u0026#34;\u0026#34; endTime = \u0026#34;2020-08-31 16:40:13.464321212 +0000 UTC\u0026#34; actionID = \u0026#34;bc40f10a-e50c-4178-9288-8234b336077b\u0026#34; startTime = \u0026#34;2020-08-31 16:28:01.228524446 +0000 UTC\u0026#34; fromSemanticFirmwareVersion = \u0026#34;\u0026#34; toImageURL = \u0026#34;\u0026#34; model = \u0026#34;WNC_REV_B\u0026#34; operationID = \u0026#34;e910c6ad-db98-44fc-bdc5-90477b23386f\u0026#34; fromImageID = \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34; target = \u0026#34;BMC\u0026#34; toImageID = \u0026#34;39c0e553-281d-4776-b68e-c46a2993485e\u0026#34; toSemanticFirmwareVersion = \u0026#34;1.3.10\u0026#34; refreshTime = \u0026#34;2020-08-31 16:40:13.464325422 +0000 UTC\u0026#34; blockedBy = [] toTag = \u0026#34;\u0026#34; state = \u0026#34;failed\u0026#34; stateHelper = \u0026#34;unexpected change detected in firmware version. Expected nc.1.3.10-shasta-release.arm.2020-07-21T23:58:22+00:00.d479f59 got: nc.cronomatic-dev.arm.2019-09-24T13:20:24+00:00.9d0f8280\u0026#34; deviceType = \u0026#34;NodeBMC\u0026#34; Once firmware and BIOS are updated, the compute nodes can be turned back on.\n  Update Chassis Management Module Firmware Update the Chassis Management Module (CMM) controller (cC) firmware using FAS. This procedure uses the dry-run feature to verify that the update will be successful.\nThe CMM firmware update process also checks and updates the Cabinet Environmental Controller (CEC) firmware.\nPrerequisites  The Cray command line interface (CLI) tool is initialized and configured on the system.  Example Recipes Manufacturer: Cray | Device Type: ChassisBMC | Target: BMC\n IMPORTANT: Before updating a CMM, make sure all slot and rectifier power is off and the discovery job is stopped (see procedure below).\n { \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;cray\u0026#34; }, \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;chassisBMC\u0026#34; ] }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;BMC\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;description\u0026#34;: \u0026#34;Dryrun upgrade of Cray Chassis Controllers\u0026#34; } } Procedure   Power off the liquid-cooled chassis slots and chassis rectifiers.\n  Disable the hms-discovery Kubernetes cronjob:\nncn# kubectl -n services patch cronjobs hms-discovery -p \u0026#39;{\u0026#34;spec\u0026#34; : {\u0026#34;suspend\u0026#34; : true }}\u0026#39;   Power off all the components. For example, in chassis 0-7, cabinets 1000-1003:\nncn# cray capmc xname_off create --xnames x[1000-1003]c[0-7] --recursive true --continue true This command powers off all the node cards, then all the compute blades, then all the Slingshot switch ASICS, then all the Slingshot switch enclosures, and finally all the chassis enclosures in cabinets 1000-1003.\nWhen power is removed from a chassis, the high-voltage DC rectifiers that support the chassis are powered off. If a component is not populated, the --continue option enables the command to continue instead of returning error messages.\n    Create a JSON file using the example recipe above with the command parameters required for updating the CMM firmware.\n  Initiate a dry-run to verify that the firmware can be updated.\n  Create the dry-run session.\nThe overrideDryrun = false value indicates that the command will do a dry-run.\nncn# cray fas actions create chassisBMC.json overrideDryrun = false actionID = \u0026#34;fddd0025-f5ff-4f59-9e73-1ca2ef2a432d\u0026#34;   Describe the actionID to see the firmware update dry-run job status.\nReplace the actionID value with the string returned in the previous step. In this example, \u0026quot;fddd0025-f5ff-4f59-9e73-1ca2ef2a432d\u0026quot; is used.\nncn# cray fas actions describe {actionID} blockedBy = [] state = \u0026#34;completed\u0026#34; actionID = \u0026#34;fddd0025-f5ff-4f59-9e73-1ca2ef2a432d\u0026#34; startTime = \u0026#34;2020-08-31 15:49:44.568271843 +0000 UTC\u0026#34; snapshotID = \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34; endTime = \u0026#34;2020-08-31 15:51:35.426714612 +0000 UTC\u0026#34; [command] description = \u0026#34;Update Cray Chassis Management Module controllers Dryrun\u0026#34; tag = \u0026#34;default\u0026#34; restoreNotPossibleOverride = true timeLimit = 10000 version = \u0026#34;latest\u0026#34; overrideDryrun = false If state = \u0026quot;completed\u0026quot;, the dry-run has found and checked all the nodes. Check the following sections for more information:\n  Lists the nodes that have a valid image for updating:\n[operationSummary.succeeded]   Lists the nodes that will not be updated because they are already at the correct version:\n[operationSummary.noOperation]   Lists the nodes that had an error when attempting to update:\n[operationSummary.failed]   Lists the nodes that do not have a valid image for updating:\n[operationSummary.noSolution]       Update the firmware after verifying that the dry-run worked as expected.\n  Edit the JSON file and update the values so an actual firmware update can be run.\nThe following example is for the chassisBMC.json file. Update the following values:\n\u0026quot;overrideDryrun\u0026quot;:true, \u0026quot;description\u0026quot;:\u0026quot;Update Cray Chassis Management Module controllers\u0026quot;   Run the firmware update.\nThe output overrideDryrun = true indicates that an actual firmware update job was created. A new actionID will also be displayed.\nncn# cray fas actions create chassisBMC.json overrideDryrun = true actionID = \u0026#34;bc40f10a-e50c-4178-9288-8234b336077b\u0026#34; The time it takes for a firmware update varies. It can be a few minutes or over 20 minutes depending on response time.\n    Restart the hms-discovery cronjob.\nncn# kubectl -n services patch cronjobs hms-discovery -p \u0026#39;{\u0026#34;spec\u0026#34; : {\u0026#34;suspend\u0026#34; : false }}\u0026#39; The hms-discovery cronjob will run within 5 minutes of being unsuspended and start powering on the chassis enclosures, switches, and compute blades. If components are not being powered back on, then power them on manually:\nncn# cray capmc xname_on create --xnames x[1000-1003]c[0-7]r[0-7],x[1000-1003]c[0-7]s[0-7] --prereq true --continue true The --prereq option ensures all required components are powered on first. The --continue option allows the command to complete in systems without fully populated hardware.\n  Bring up the Slingshot Fabric.\nRefer to the following documentation on the HPE Customer Support Center for more information on how to bring up the Slingshot Fabric:\n The HPE Slingshot Operations Guide PDF for HPE Cray EX systems. The HPE Slingshot Troubleshooting Guide PDF.    After the components have powered on, boot the nodes using the Boot Orchestration Services (BOS).\n  Update Air-Cooled Compute Node BMC, BIOS, iLO 5, and System ROM Firmware and BIOS for Gigabyte and HPE compute nodes can be updated with FAS. This section includes templates for JSON files that can be used for updates, and the procedure for running the updates.\nAll of the example JSON files below are set to run a dry-run. Update the overrideDryrun value to true to update the firmware.\nAfter updating the BIOS or System ROM, the compute node will need to be rebooted before the new version will be displayed in the Redfish output.\nThis procedure updates node controller (nC) firmware.\nPrerequisites  The Cray command line interface (CLI) tool is initialized and configured on the system.  Gigabyte Device Type: NodeBMC | Target: BMC\n{ \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;nodeBMC\u0026#34; ], \u0026#34;xnames\u0026#34;: [ \u0026#34;x3000c0s1b0\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;gigabyte\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;BMC\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 4000, \u0026#34;description\u0026#34;: \u0026#34;Dryrun upgrade of Gigabyte node BMCs\u0026#34; } }  IMPORTANT: The timeLimit is 4000 because the Gigabytes can take a lot longer to update.\n Troubleshooting:\nA node may fail to update with the output:\nstateHelper = \u0026quot;Firmware Update Information Returned Downloading – See /redfish/v1/UpdateService\u0026quot; FAS has incorrectly marked this node as failed. It most likely will complete the update successfully.\nTo resolve this issue, do either of the following actions:\n Check the update status by looking at the Redfish FirmwareInventory (/redfish/v1/UpdateService/FirmwareInventory/BMC). Rerun FAS to verify that the BMC firmware was updated.  Make sure to wait for the current firmware to be updated before starting a new FAS action on the same node.\nDevice Type: NodeBMC | Target: BIOS\n{ \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;nodeBMC\u0026#34; ], \u0026#34;xnames\u0026#34;: [ \u0026#34;x3000c0s1b0\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;gigabyte\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;BIOS\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 4000, \u0026#34;description\u0026#34;: \u0026#34;Dryrun upgrade of Gigabyte node BIOS\u0026#34; } }  IMPORTANT: The timeLimit is 4000 because the Gigabytes can take a lot longer to update.\n HPE Device Type: NodeBMC | Target: iLO 5 aka BMC\n{ \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;nodeBMC\u0026#34; ], \u0026#34;xnames\u0026#34;: [ \u0026#34;x3000c0s1b0\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;hpe\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;iLO 5\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;description\u0026#34;: \u0026#34;Dryrun upgrade of HPE node iLO 5\u0026#34; } } Device Type: NodeBMC | Target: System ROM aka BIOS\n IMPORTANT: If updating the System ROM of an NCN, the NTP and DNS server values will be lost and must be restored. For NCNs other than ncn-m001 this can be done using the /opt/cray/csm/scripts/node_management/set-bmc-ntp-dns.sh script. Use the -h option to get a list of command line options required to restore the NTP and DNS values. See Configure DNS and NTP on Each BMC.\n { \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;NodeBMC\u0026#34; ], \u0026#34;xnames\u0026#34;: [ \u0026#34;x3000c0s1b0\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;hpe\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;System ROM\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;description\u0026#34;: \u0026#34;Dryrun upgrade of HPE node system rom\u0026#34; } } Procedure   Create a JSON file using one of the example recipes with the command parameters required for updating the firmware or node BIOS.\n  Initiate a dry-run to verify that the firmware can be updated.\n  Create the dry-run session.\nThe overrideDryrun = false value indicates that the command will do a dry run.\nncn# cray fas actions create nodeBMC.json overrideDryrun = false actionID = \u0026#34;fddd0025-f5ff-4f59-9e73-1ca2ef2a432d\u0026#34;   Describe the actionID for firmware update dry-run job.\nReplace the actionID value with the string returned in the previous step. In this example, \u0026quot;fddd0025-f5ff-4f59-9e73-1ca2ef2a432d\u0026quot; is used.\nncn# cray fas actions describe {actionID} blockedBy = [] state = \u0026#34;completed\u0026#34; actionID = \u0026#34;fddd0025-f5ff-4f59-9e73-1ca2ef2a432d\u0026#34; startTime = \u0026#34;2020-08-31 15:49:44.568271843 +0000 UTC\u0026#34; snapshotID = \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34; endTime = \u0026#34;2020-08-31 15:51:35.426714612 +0000 UTC\u0026#34; [command] description = \u0026#34;Update of HPE Node iLO5\u0026#34; tag = \u0026#34;default\u0026#34; restoreNotPossibleOverride = true timeLimit = 10000 version = \u0026#34;latest\u0026#34; overrideDryrun = false If state = \u0026quot;completed\u0026quot;, the dry-run has found and checked all the nodes. Check the following sections for more information:\n  Lists the nodes that have a valid image for updating:\n[operationSummary.succeeded]   Lists the nodes that will not be updated because they are already at the correct version:\n[operationSummary.noOperation]   Lists the nodes that had an error when attempting to update:\n[operationSummary.failed]   Lists the nodes that do not have a valid image for updating:\n[operationSummary.noSolution]       Update the firmware after verifying that the dry-run worked as expected.\n  Edit the JSON file and update the values so an actual firmware update can be run.\nThe following example is for the nodeBMC.json file. Update the following values:\n\u0026quot;overrideDryrun\u0026quot;:true, \u0026quot;description\u0026quot;:\u0026quot;Update of HPE node iLO 5\u0026quot;   Run the firmware update.\nThe returned overrideDryrun = true indicates that an actual firmware update job was created. A new actionID will also be returned.\nncn# cray fas actions create nodeBMC.json overrideDryrun = true actionID = \u0026#34;bc40f10a-e50c-4178-9288-8234b336077b\u0026#34; The time it takes for a firmware action to finish varies. It can be a few minutes or over 20 minutes depending on response time.\nThe air-cooled node BMC automatically reboots after the BMC or iLO 5 firmware has been loaded.\n    Retrieve the operationID and verify that the update is complete.\nncn# cray fas actions describe {actionID} [operationSummary.failed] [[operationSummary.failed.operationKeys]] stateHelper = \u0026#34;unexpected change detected in firmware version. Expected 2.46 May 11 2021 got: 2.32 Apr 27 2020\u0026#34; fromFirmwareVersion = \u0026#34;2.32 Apr 27 2020\u0026#34; xname = \u0026#34;x1005c6s4b0\u0026#34; target = \u0026#34;iLO 5\u0026#34; operationID = \u0026#34;e910c6ad-db98-44fc-bdc5-90477b23386f\u0026#34;   View more details for an operation using the operationID from the previous step.\nCheck the list of nodes for the failed or completed state.\nncn# cray fas operations describe {operationID} For example:\nncn# cray fas operations describe \u0026#34;e910c6ad-db98-44fc-bdc5-90477b23386f\u0026#34; fromFirmwareVersion = \u0026#34;2.32 Apr 27 2020\u0026#34; fromTag = \u0026#34;\u0026#34; fromImageURL = \u0026#34;\u0026#34; endTime = \u0026#34;2020-08-31 16:40:13.464321212 +0000 UTC\u0026#34; actionID = \u0026#34;bc40f10a-e50c-4178-9288-8234b336077b\u0026#34; startTime = \u0026#34;2020-08-31 16:28:01.228524446 +0000 UTC\u0026#34; fromSemanticFirmwareVersion = \u0026#34;\u0026#34; toImageURL = \u0026#34;\u0026#34; model = \u0026#34;ProLiant DL325 Gen10 Plus\u0026#34; operationID = \u0026#34;e910c6ad-db98-44fc-bdc5-90477b23386f\u0026#34; fromImageID = \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34; target = \u0026#34;iLO 5\u0026#34; toImageID = \u0026#34;39c0e553-281d-4776-b68e-c46a2993485e\u0026#34; toSemanticFirmwareVersion = \u0026#34;2.46.0\u0026#34; refreshTime = \u0026#34;2020-08-31 16:40:13.464325422 +0000 UTC\u0026#34; blockedBy = [] toTag = \u0026#34;\u0026#34; state = \u0026#34;failed\u0026#34; stateHelper = \u0026#34;unexpected change detected in firmware version. Expected 2.46 May 11 2021 got: 2.32 Apr 27 2020\u0026#34; deviceType = \u0026#34;NodeBMC\u0026#34;   Update Non-Compute Node (NCN) BIOS and BMC Firmware Gigabyte and HPE non-compute nodes (NCNs) firmware can be updated with FAS. This section includes templates for JSON files that can be used to update firmware with the cray fas actions create command.\nAfter creating the JSON file for the device being upgraded, use the following command to run the FAS job:\nncn# cray fas actions create CUSTOM_DEVICE_PARAMETERS.json All of the example JSON files below are set to run a dry-run. Update the overrideDryrun value to True to update the firmware.\n WARNING: Rebooting more than one NCN at a time MAY cause system instability. Be sure to follow the correct process for updating NCNs. Firmware updates have the capacity to harm the system.\n After updating the BIOS, the NCN will need to be rebooted. Follow the Reboot NCNs procedure.\nDue to networking, FAS cannot update ncn-m001. See Updating Firmware on ncn-m001\nGigabyte Device Type: NodeBMC | Target: BMC\n{ \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;nodeBMC\u0026#34; ], \u0026#34;xnames\u0026#34;: [ \u0026#34;x3000c0s1b0\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;gigabyte\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;BMC\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 4000, \u0026#34;description\u0026#34;: \u0026#34;Dryrun upgrade of Gigabyte node BMCs\u0026#34; } }  IMPORTANT: The timeLimit is 4000 because the Gigabytes can take a lot longer to update.\n Troubleshooting: It may report that a node failed to update with the output: stateHelper = \u0026quot;Firmware Update Information Returned Downloading – See /redfish/v1/UpdateService\u0026quot; FAS has incorrectly marked this node as failed. It most likely will complete the update successfully. To resolve this issue, do either of the following actions:\n Check the update status by looking at the Redfish FirmwareInventory (/redfish/v1/UpdateService/FirmwareInventory/BMC) Rerun FAS to verify that the BMC firmware was updated. Make sure you have waited for the current firmware to be updated before starting a new FAS action on the same node.  Device Type: NodeBMC | Target: BIOS\n{ \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;nodeBMC\u0026#34; ], \u0026#34;xnames\u0026#34;: [ \u0026#34;x3000c0s1b0\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;gigabyte\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;BIOS\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 4000, \u0026#34;description\u0026#34;: \u0026#34;Dryrun upgrade of Gigabyte node BIOS\u0026#34; } }  IMPORTANT: The timeLimit is 4000 because the Gigabytes can take a lot longer to update.\n HPE Device Type: NodeBMC | Target: iLO 5 aka BMC\n{ \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;nodeBMC\u0026#34; ], \u0026#34;xnames\u0026#34;: [ \u0026#34;x3000c0s1b0\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;hpe\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;iLO 5\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;description\u0026#34;: \u0026#34;Dryrun upgrade of HPE node iLO 5\u0026#34; } } Device Type: NodeBMC | Target: System ROM aka BIOS\n IMPORTANT: If updating the System ROM of an NCN, the NTP and DNS server values will be lost and must be restored. For NCNs other than ncn-m001 this can be done using the /opt/cray/csm/scripts/node_management/set-bmc-ntp-dns.sh script. Use the -h option to get a list of command line options required to restore the NTP and DNS values. See Configure DNS and NTP on Each BMC.\n { \u0026#34;stateComponentFilter\u0026#34;: { \u0026#34;deviceTypes\u0026#34;: [ \u0026#34;NodeBMC\u0026#34; ], \u0026#34;xnames\u0026#34;: [ \u0026#34;x3000c0s1b0\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;: { \u0026#34;manufacturer\u0026#34;: \u0026#34;hpe\u0026#34; }, \u0026#34;targetFilter\u0026#34;: { \u0026#34;targets\u0026#34;: [ \u0026#34;System ROM\u0026#34; ] }, \u0026#34;command\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;: false, \u0026#34;restoreNotPossibleOverride\u0026#34;: true, \u0026#34;timeLimit\u0026#34;: 1000, \u0026#34;description\u0026#34;: \u0026#34;Dryrun upgrade of HPE node system rom\u0026#34; } } The NCN must be rebooted after updating the BIOS firmware. Follow the Reboot NCNs procedure.\nProcedure  For HPE NCNs, check the DNS servers by running the script /opt/cray/csm/scripts/node_management/set-bmc-ntp-dns.sh ilo -H XNAME -s. Replace XNAME with the xname of the NCN BMC. See Configure DNS and NTP on Each BMC for more information. Run a dryrun for all NCNs first to determine which NCNs and targets need updating. For each NCN requiring updates to target BMC or iLO 5:  NOTE: Update of BMC and iLO 5 will not affect the nodes.\n  Unlock the NCN BMC. See Lock and Unlock Management Nodes. Run the FAS action on the NCN. Relock the NCN BMC. See Lock and Unlock Management Nodes.   For each NCN requiring updates to target BIOS or System ROM:  Unlock the NCN BMC. See Lock and Unlock Management Nodes. Run the FAS action on the NCN. Reboot the Node. See Reboot NCNs. For HPE NCNs, run the script /opt/cray/csm/scripts/node_management/set-bmc-ntp-dns.sh. See Configure DNS and NTP on Each BMC. Relock the NCN BMC. See Lock and Unlock Management Nodes.    Compute Node BIOS Workaround for HPE CRAY EX425 Correct an issue where the model of the liquid-cooled compute node BIOS is the incorrect name. The name has changed from WNC-ROME to HPE CRAY EX425 or HPE CRAY EX425 (ROME).\nPrerequisites   The system is running HPE Cray EX release v1.4 or higher.\n  The system has completed the Cray System Management (CSM) installation.\n  A firmware upgrade has been done following Update Liquid-Cooled Compute Node BIOS Firmware.\n The result of the upgrade is that the NodeX.BIOS has failed as noSolution and the stateHelper field for the operation states is \u0026quot;No Image Available\u0026quot;. The BIOS in question is running a version less than or equal to 1.2.5 as reported by Redfish or described by the noSolution operation in FAS.    The hardware model reported by Redfish is wnc-rome, which is now designated as HPE CRAY EX425.\nIf the Redfish model is different (ignoring casing) and the blades in question are not Windom, contact customer support. To find the model reported by Redfish, run the following:\nncn# cray fas operations describe {operationID} --format json { \u0026#34;operationID\u0026#34;:\u0026#34;102c949f-e662-4019-bc04-9e4b433ab45e\u0026#34;, \u0026#34;actionID\u0026#34;:\u0026#34;9088f9a2-953a-498d-8266-e2013ba2d15d\u0026#34;, \u0026#34;state\u0026#34;:\u0026#34;noSolution\u0026#34;, \u0026#34;stateHelper\u0026#34;:\u0026#34;No Image available\u0026#34;, \u0026#34;startTime\u0026#34;:\u0026#34;2021-03-08 13:13:14.688500503 +0000 UTC\u0026#34;, \u0026#34;endTime\u0026#34;:\u0026#34;2021-03-08 13:13:14.688508333 +0000 UTC\u0026#34;, \u0026#34;refreshTime\u0026#34;:\u0026#34;2021-03-08 13:13:14.722345901 +0000 UTC\u0026#34;, \u0026#34;expirationTime\u0026#34;:\u0026#34;2021-03-08 15:59:54.688500753 +0000 UTC\u0026#34;, \u0026#34;xname\u0026#34;:\u0026#34;x9000c1s0b0\u0026#34;, \u0026#34;deviceType\u0026#34;:\u0026#34;NodeBMC\u0026#34;, \u0026#34;target\u0026#34;:\u0026#34;Node1.BIOS\u0026#34;, \u0026#34;targetName\u0026#34;:\u0026#34;Node1.BIOS\u0026#34;, \u0026#34;manufacturer\u0026#34;:\u0026#34;cray\u0026#34;, \u0026#34;model\u0026#34;:\u0026#34;WNC-Rome\u0026#34;, \u0026#34;softwareId\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;fromImageID\u0026#34;:\u0026#34;00000000-0000-0000-0000-000000000000\u0026#34;, \u0026#34;fromSemanticFirmwareVersion\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;fromFirmwareVersion\u0026#34;:\u0026#34;wnc.bios-1.2.5\u0026#34;, \u0026#34;fromImageURL\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;fromTag\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;toImageID\u0026#34;:\u0026#34;00000000-0000-0000-0000-000000000000\u0026#34;, \u0026#34;toSemanticFirmwareVersion\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;toFirmwareVersion\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;toImageURL\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;toTag\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;blockedBy\u0026#34;:[ ] } The model in this example is WNC-Rome and the firmware version currently running is wnc.bios-1.2.5.\n  Procedure   Search for a FAS image record with cray as the manufacturer, Node1.BIOS as the target, and HPE CRAY EX425 as the model.\nncn# cray fas images list --format json | jq \u0026#39;.images[] | select(.manufacturer==\u0026#34;cray\u0026#34;) \\ | select(.target==\u0026#34;Node1.BIOS\u0026#34;) | select(any(.models[]; contains(\u0026#34;EX425\u0026#34;)))\u0026#39; { \u0026#34;imageID\u0026#34;: \u0026#34;e23f5465-ed29-4b18-9389-f8cf0580ca60\u0026#34;, \u0026#34;createTime\u0026#34;: \u0026#34;2021-03-04T00:04:05Z\u0026#34;, \u0026#34;deviceType\u0026#34;: \u0026#34;nodeBMC\u0026#34;, \u0026#34;manufacturer\u0026#34;: \u0026#34;cray\u0026#34;, \u0026#34;models\u0026#34;: [ \u0026#34;HPE CRAY EX425\u0026#34; ], \u0026#34;softwareIds\u0026#34;: [ \u0026#34;bios.ex425..\u0026#34; ], \u0026#34;target\u0026#34;: \u0026#34;Node1.BIOS\u0026#34;, \u0026#34;tags\u0026#34;: [ \u0026#34;default\u0026#34; ], \u0026#34;firmwareVersion\u0026#34;: \u0026#34;ex425.bios-1.4.3\u0026#34;, \u0026#34;semanticFirmwareVersion\u0026#34;: \u0026#34;1.4.3\u0026#34;, \u0026#34;pollingSpeedSeconds\u0026#34;: 30, \u0026#34;s3URL\u0026#34;: \u0026#34;s3:/fw-update/2227040f7c7d11eb9fa00e2f2e08fd5d/ex425.bios-1.4.3.tar.gz\u0026#34; } Take note of the returned imageID value to use in the next step.\n  Create a JSON file to override the existing image with the corrected values.\n IMPORTANT: The imageID must be changed to match the identified imageID in the previous step.\n { \u0026#34;stateComponentFilter\u0026#34;:{ \u0026#34;deviceTypes\u0026#34;:[ \u0026#34;nodeBMC\u0026#34; ] }, \u0026#34;inventoryHardwareFilter\u0026#34;:{ \u0026#34;manufacturer\u0026#34;:\u0026#34;cray\u0026#34; }, \u0026#34;targetFilter\u0026#34;:{ \u0026#34;targets\u0026#34;:[ \u0026#34;Node0.BIOS\u0026#34;, \u0026#34;Node1.BIOS\u0026#34; ] }, \u0026#34;imageFilter\u0026#34;:{ \u0026#34;imageID\u0026#34;:\u0026#34;e23f5465-ed29-4b18-9389-f8cf0580ca60\u0026#34;, \u0026#34;overrideImage\u0026#34;:true }, \u0026#34;command\u0026#34;:{ \u0026#34;version\u0026#34;:\u0026#34;latest\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;default\u0026#34;, \u0026#34;overrideDryrun\u0026#34;:true, \u0026#34;restoreNotPossibleOverride\u0026#34;:true, \u0026#34;timeLimit\u0026#34;:1000, \u0026#34;description\u0026#34;:\u0026#34; upgrade of Node BIOS\u0026#34; } }   Run a firmware upgrade using the updated parameters defined in the new JSON file.\nncn# cray fas actions create UPDATED_COMMAND.json   Get a high-level summary of the job to verify the changes corrected the issue.\nUse the returned actionID from the cray fas actions create command.\nncn# cray fas actions create UPDATED_COMMAND.json   "
},
{
	"uri": "/docs-csm/en-12/operations/conman/troubleshoot_conman_failing_to_connect_to_a_console/",
	"title": "Troubleshoot Conman Failing To Connect To A Console",
	"tags": [],
	"description": "",
	"content": "Troubleshoot ConMan Failing to Connect to a Console There are many reasons that ConMan may not be able to connect to a specific console. This procedure outlines several things to check that may impact the connectivity with a console.\nPrerequisites This procedure requires administrative privileges.\nProcedure Note: this procedure has changed since the CSM 0.9 release.\n  Find the cray-console-operator pod.\nncn# OP_POD=$(kubectl get pods -n services \\  -o wide|grep cray-console-operator|awk \u0026#39;{print $1}\u0026#39;) ncn# echo $OP_POD Example output:\ncray-console-operator-6cf89ff566-kfnjr   Set the XNAME variable to the component name (xname) of the node whose console is of interest.\nncn# XNAME=\u0026lt;xname\u0026gt;   Find the cray-console-node pod that is connecting with the console.\nncn# NODE_POD=$(kubectl -n services exec $OP_POD -c cray-console-operator -- sh -c \\  \u0026#34;/app/get-node $XNAME\u0026#34; | jq .podname | sed \u0026#39;s/\u0026#34;//g\u0026#39;) ncn# echo $NODE_POD Example output:\ncray-console-node-2   Check for general network availability.\nIf the Kubernetes worker node hosting a cray-console-node pod cannot access the network address of a console, the connection will fail.\n  Find the worker node on which this pod is running.\nncn# WNODE=$(kubectl get pods -o custom-columns=:.spec.nodeName -n services --no-headers $NODE_POD) ncn# echo $WNODE Example output:\nncn-w003   ssh to the worker node that the pod is running on.\nncn# ssh $WNODE   Check that the BMC for this node is accessible from this worker.\nThe component name (xname) of the BMC is the same as the node, but with the node designation at the end removed. For example if the node is x3000c0s15b0n0, the BMC is x3000c0s15b0.\nncn-w# ping BMC_XNAME PING x3000c0s7b0.hmn (10.254.1.7) 56(84) bytes of data. From ncn-m002.hmn (10.254.1.18) icmp_seq=1 Destination Host Unreachable From ncn-m002.hmn (10.254.1.18) icmp_seq=2 Destination Host Unreachable From ncn-m002.hmn (10.254.1.18) icmp_seq=3 Destination Host Unreachable From ncn-m002.hmn (10.254.1.18) icmp_seq=4 Destination Host Unreachable This indicates there is a network issue between the worker node and the node of interest. When the issue is resolved the console connection will be reestablished automatically.\n    Check for something else using the serial console connection.\nFor IPMI-based connections, there can only be one active connection at a time. If something else has taken that connection, ConMan will not be able to connect to it.\n  Check the log information for the node.\nncn# kubectl -n services logs $NODE_POD cray-console-node | grep $XNAME If something else is using the connection, there will be log entries like the following:\n2021/05/20 15:42:43 INFO: Console [x3000c0s15b0n0] disconnected from \u0026lt;x3000c0s15b0\u0026gt; 2021/05/20 15:43:23 INFO: Unable to connect to \u0026lt;x3000c0s15b0\u0026gt; via IPMI for [x3000c0s15b0n0]: connection timeout 2021/05/20 15:44:24 INFO: Unable to connect to \u0026lt;x3000c0s15b0\u0026gt; via IPMI for [x3000c0s15b0n0]: SOL in use 2021/05/20 15:45:23 INFO: Unable to connect to \u0026lt;x3000c0s15b0\u0026gt; via IPMI for [x3000c0s15b0n0]: SOL in use 2021/05/20 16:13:25 INFO: Unable to connect to \u0026lt;x3000c0s15b0\u0026gt; via IPMI for [x3000c0s15b0n0]: SOL in use   Force the connection to become available again.\nThe BMC username and password must be known for this command to work.\n read -s is used to prevent the password from appearing in the command history.\n ncn# USERNAME=root ncn# read -s IPMI_PASSWORD ncn# export IPMI_PASSWORD ncn# ipmitool -H \u0026lt;BMC_XNAME\u0026gt; -U $USERNAME -E -I lanplus sol deactivate   Retry ConMan to verify the connection has been reestablished.\n    "
},
{
	"uri": "/docs-csm/en-12/operations/firmware/update_firmware_with_fas/",
	"title": "Update Firmware With FAS",
	"tags": [],
	"description": "",
	"content": "Update Firmware with FAS If FAS has not yet been installed, firmware for NCNs can be updated manually without FAS. See Updating Firmware without FAS.\nThe Firmware Action Service (FAS) provides an interface for managing firmware versions of Redfish-enabled hardware in the system. FAS interacts with the Hardware State Managers (HSM), device data, and image data in order to update firmware.\nReset Gigabyte node BMC to factory defaults if having problems with ipmitool, problems using Redfish, or when flashing procedures fail. See Set Gigabyte Node BMC to Factory Defaults.\nFAS images contain the following information that is needed for a hardware device to update firmware versions:\n Hardware-specific information: Contains the allowed device states and how to reboot a device if necessary. Selection criteria: How to link a firmware image to a specific hardware type. Image data: Where the firmware image resides in Simple Storage Service (S3) and what firmwareVersion it will report after it is successfully applied. See Artifact Management for more information.  Topics  Prerequisites Warning Current capabilities Order of operations Hardware precedence order FAS administrative procedures Firmware actions Firmware operations Firmware images  Prerequisites  CSM software has been installed, firmware has been loaded into FAS as part of the HPC Firmware Pack (HFP) install, HSM is running, and nodes have been discovered. All management nodes have been locked. Identify the type and manufacturers of hardware in the system. If Gigabyte nodes are not in use on the system, do not update them!  Warning Non-compute nodes (NCNs) and their BMCs should be locked with the HSM locking API to ensure they are not unintentionally updated by FAS. See Lock and Unlock Management Nodes for more information. Failure to lock the NCNs could result in unintentional update of the NCNs if FAS is not used correctly; this will lead to system instability problems.\nFollow the process outlined in FAS CLI to update the system. Use the recipes listed in FAS Recipes to update each supported type.\n NOTE: Each system is different and may not have all hardware options.\n Current capabilities The following table describes the hardware items that can have their firmware updated via FAS. For more information about the upgradable targets, refer to the Firmware product stream repository.\nTable 1. Upgradable Firmware Items\n   Manufacturer Type Target     Cray nodeBMC BMC, Node0.BIOS, Node1.BIOS, Recovery, Node1.AccFPGA0, Node0.AccFPGA0   Cray chassisBMC BMC, Recovery   Cray routerBMC BMC, Recovery   Gigabyte nodeBMC BMC, BIOS   HPE nodeBMC iLO 5 (BMC or 1 ), System ROM ,Redundant System ROM (BIOS or 2)    Order of operations For each item in the Hardware Precedence Order:\n  Complete a dry-run:\n cray fas actions create {jsonfile} Note the ActionID. Poll the status of the action until the action state is completed:  cray fas actions describe {actionID} --format json      Interpret the outcome of the dry-run.\nLook at the counts and determine if the dry-run identified any hardware to update.\nFor the steps below, the following returned messages will help determine if a firmware update is needed. The following are end states for operations. The firmware action itself should be in completed once all operations have finished.\n NoOp: Nothing to do; already at the requested version. NoSol: No viable image is available; this will not be updated. succeeded:  IF dryrun: The operation should succeed if performed as a live update. succeeded means that FAS identified that it COULD update a component name (xname) and target with the declared strategy. IF live update: The operation succeeded and has updated the component name (xname) and target to the identified version.   failed:  IF dryrun: There is something that FAS could do, but it likely would fail (most likely because the file is missing). IF live update: The operation failed. The identified version could not be put on the component name (xname) and target.      If succeeded count is greater than zero, then perform a live update.\n Update the JSON file to set the overrideDryrun field to true. cray fas actions create {jsonfile}  Note the ActionID! Poll the status of the action until the action state is completed:  cray fas actions describe {actionID} --format json        Interpret the outcome of the live update; proceed to next type of hardware.\n  Hardware precedence order After identifying which hardware is in the system, start with the top item on this list to update. If any of the following hardware is not in the system, then skip it.\n IMPORTANT: This process does not communicate the SAFE way to update NCNs. If the NCNs and their BMCs have not been locked, or if FAS is blindly used to update NCNs without following the correct process, then THE STABILITY OF THE SYSTEM WILL BE JEOPARDIZED. Read the corresponding recipes before updating. There are sometimes ancillary actions that must be completed in order to ensure update integrity. NOTE: To update Switch Controllers (sC) or RouterBMC, refer to the Rosetta Documentation.\n  Cray  ChassisBMC NodeBMC  BMC NodeBIOS Redstone FPGA     Gigabyte  BMC BIOS   HPE  BMC (iLO5) BIOS (System ROM)    FAS administrative procedures There are several use cases for using the FAS to update firmware on the system. These use cases are intended to be run by system administrators with a good understanding of firmware. Under no circumstances should non-administrator users attempt to use FAS or perform a firmware update.\n Perform a firmware update: Update the firmware of a component name (xname)\u0026rsquo;s target to the latest, earliest, or an explicit version. Determine what hardware can be updated by performing a dry-run: This is the easiest way to determine what can be updated. Take a snapshot of the system: Record the firmware versions present on each target for the identified component names (xnames). If the firmware version corresponds to an image available in the images repository, link the imageID to the record. Restore the snapshot of the system: Take the previously recorded snapshot and use the related imageIDs to put the component name (xname)/targets back to the firmware version they were at, at the time of the snapshot. Provide firmware for updating: FAS can only update a component name (xname)/target if it has an image record that is applicable. Most administrators will not encounter this use case.  Firmware actions An action is collection of operations, which are individual firmware update tasks. Only one FAS action can be run at a time. Any other attempted action will be queued. Additionally, only one operation can be run on a component name (xname) at a time. For example, if there are 1000 xnames with 5 targets each to be updated, all 1000 xnames can be updating a target, but only 1 target on each xname will be updated at a time.\nThe life cycle of any action can be divided into the static and dynamic portions of the life cycle.\nThe static portion of the life cycle is where the action is created and configured. It begins with a request to create an action through either of the following requests:\n Direct: Request to /actions API. Indirect: Request to restore a snapshot via the /snapshots API.  The dynamic portion of the life cycle is where the action is executed to completion. It begins when the actions is transitioned from the new to configured state. The action will then be ultimately transitioned to an end state of aborted or completed.\nFirmware operations Operations are individual tasks in a FAS action. FAS will create operations based on the configuration sent through the actions create command. FAS operations will have one of the following states:\n initial - Operation just created. configured - The operation is configured, but nothing has been started. blocked - Only one operation can be performed on a node at a time. If more than one update is required for a component name (xname), then operations will be blocked. This will have a message of blocked by sibling. inProgress - Update is in progress, but not completed. verifying - Waiting for update to complete. failed - An update was attempted, but FAS is unable to tell that the update succeeded in the allotted time. noOperation - Firmware is at the correct version according to the images loaded into FAS. noSolution - FAS does not have a suitable image for an update. aborted - The operation was aborted before it could determine if it was successful. If aborted after the update command was sent to the node, then the node may still have updated.  Firmware images FAS requires images in order to update firmware for any device on the system. An image contains the data that allows FAS to establish a link between an administrative command, available devices (xname/targets), and available firmware.\nThe following is an example of an image:\n{ \u0026#34;imageID\u0026#34;: \u0026#34;3fa85f64-5717-4562-b3fc-2c963f66afa6\u0026#34;, \u0026#34;createTime\u0026#34;: \u0026#34;2020-05-11T17:11:07.017Z\u0026#34;, \u0026#34;deviceType\u0026#34;: \u0026#34;nodeBMC\u0026#34;, \u0026#34;manufacturer\u0026#34;: \u0026#34;intel\u0026#34;, \u0026#34;model\u0026#34;: [\u0026#34;s2600\u0026#34;,\u0026#34;s2600_REV_a\u0026#34;], \u0026#34;target\u0026#34;: \u0026#34;BIOS\u0026#34;, \u0026#34;tag\u0026#34;: [\u0026#34;recovery\u0026#34;, default\u0026#34;], \u0026#34;firmwareVersion\u0026#34;: \u0026#34;f1.123.24xz\u0026#34;, \u0026#34;semanticFirmwareVersion\u0026#34;: \u0026#34;v1.2.252\u0026#34;, \u0026#34;updateURI\u0026#34;: \u0026#34;/redfish/v1/Systems/UpdateService/BIOS\u0026#34;, \u0026#34;needManualReboot\u0026#34;: true, \u0026#34;waitTimeBeforeManualRebootSeconds\u0026#34;: 600, \u0026#34;waitTimeAfterRebootSeconds\u0026#34;: 180, \u0026#34;pollingSpeedSeconds\u0026#34;: 30, \u0026#34;forceResetType\u0026#34;: \u0026#34;ForceRestart\u0026#34;, \u0026#34;s3URL\u0026#34;: \u0026#34;s3://firmware/f1.1123.24.xz.iso\u0026#34;, \u0026#34;allowableDeviceStates\u0026#34;: [ \u0026#34;On\u0026#34;, \u0026#34;Off\u0026#34; ] } The main components of an image are described in the following sections.\nFirmware image: key This includes the deviceType, manufacturer, model, target, tag, semanticFirmwareVersion (firmware version) fields.\nThese fields are how administrators assess what firmware is on a device, and if an image is applicable to that device.\nFirmware image: process guides This includes the forceResetType, pollingSpeedSeconds, waitTime(s), allowableDeviceStates fields.\nFAS gets information about how to update the firmware from these fields. These values determine if FAS is responsible for rebooting the device, and what communication pattern to use.\nFirmware image: s3URL The URL that FAS uses to get the firmware binary and the download link that is supplied to Redfish devices. Redfish devices are not able to directly communicate with S3.\n"
},
{
	"uri": "/docs-csm/en-12/operations/firmware/updating_firmware_m001/",
	"title": "Updating BMC Firmware And Bios For NCN-m001",
	"tags": [],
	"description": "",
	"content": "Updating BMC Firmware and BIOS for ncn-m001 Retrieve the model name and firmware image required to update an HPE or Gigabyte ncn-m001 node.\n NOTE:\n On HPE nodes, the BMC Firmware is iLO 5 and BIOS is System ROM. The commands in the procedure must be run on ncn-m001.   Prerequisites The following information is needed:\n IP Address of ncn-m001 BMC IP Address of ncn-m001 Root password for ncn-m001 BMC  Find the Model Name Use one of the following commands to find the model name for the node type in use.\nHPE Nodes ncn-m001# curl -k -u root:password https://ipaddressOfBMC/redfish/v1/Systems/1 | jq .Model Gigabyte Nodes ncn-m001# curl -k -u root:password https://ipaddressOfBMC/redfish/v1/Systems/Self | jq .Model Get the Firmware Images   View a list of images stored in FAS that are ready to be flashed:\nIn the following example, ModelName is the name from the previous command.\nncn-m001# cray fas images list --format json | jq \u0026#39;.[] | .[] | select(.models | index(\u0026#34;ModelName\u0026#34;))\u0026#39; Locate the image in the returned output that is required to ncn-m001 firmware and/or BIOS.\nLook for the returned s3URL. For example:\n\u0026quot;s3URL\u0026quot;: \u0026quot;s3:/fw-update/4e5f569a603311eb96b582a8e219a16d/image.RBU\u0026quot;\n  Get the firmware images using the s3URL path from the previous step.\nncn-m001# cray artifacts get fw-update 4e5f569a603311eb96b582a8e219a16d/image.RBU image.RBU 4e5f569a603311eb96b582a8e219a16d/image.RBU is the path in the s3URL. image.RBU is the name of the file to save the image on local disk.\n  Flash the Firmware Gigabyte ncn-m001   Start a webserver from the directory containing the downloaded image:\nncn-m001# python3 -m http.server 8770   Update BMC:\n passwd = Root password of BMC ipaddressOfBMC = IP address of BMC ipaddressOfM001 = IP address of ncn-m001 node filename = Filename of the downloaded image  ncn-m001# curl -k -u root:passwd https://ipaddressOfBMC/redfish/v1/UpdateService/Actions/SimpleUpdate -d \u0026#39;{\u0026#34;ImageURI\u0026#34;:\u0026#34;http://ipaddressOfM001:8770/filename\u0026#34;, \u0026#34;TransferProtocol\u0026#34;:\u0026#34;HTTP\u0026#34;, \u0026#34;UpdateComponent\u0026#34;:\u0026#34;BMC\u0026#34;}\u0026#39;   Update BIOS:\n passwd = Root password of BMC ipaddressOfBMC = IP address of BMC ipaddressOfM001 = IP address of ncn-m001 node filename = Filename of the downloaded image  ncn-m001# curl -k -u root:passwd https://ipaddressOfBMC/redfish/v1/UpdateService/Actions/SimpleUpdate -d \u0026#39;{\u0026#34;ImageURI\u0026#34;:\u0026#34;http://ipaddressOfM001:8770/filename\u0026#34;, \u0026#34;TransferProtocol\u0026#34;:\u0026#34;HTTP\u0026#34;, \u0026#34;UpdateComponent\u0026#34;:\u0026#34;BIOS\u0026#34;}\u0026#39;  After updating BIOS, ncn-m001 will need to be rebooted. Follow the Reboot NCNs procedure to reboot ncn-m001.\n     HPE ncn-m001 The web interface will be used to update iLO 5 (BMC) firmware and/or System ROM (BIOS) on the HPE ncn-m001 node.\n  Copy the iLO 5 firmware and/or System ROM file(s) to a local computer from ncn-m001 using scp or other secure copy tools.\nlinux# scp root@ipaddressOfM001Node:pathToFile/filename .   Open a web browser window and type in the name or IP address of the iLO device for ncn-m001.\n  Log in with root and the root password for the iLO device.\n Click on \u0026quot;Firmware \u0026amp; OS Software\u0026quot; on the left menu. Click on \u0026quot;Update Firmware\u0026quot; on the right menu. Check \u0026quot;Local File\u0026quot;. Click \u0026quot;Choose File\u0026quot; and select the iLO firmware file or System ROM file. Click \u0026quot;Confirm TPM override\u0026quot;. Click \u0026quot;Flash\u0026quot;.   After updating System ROM (BIOS), ncn-m001 will need to be rebooted. Follow the Reboot NCNs procedure to reboot ncn-m001.\n   "
},
{
	"uri": "/docs-csm/en-12/operations/firmware/updating_firmware_without_fas/",
	"title": "Updating BMC Firmware And Bios For NCNs Without FAS",
	"tags": [],
	"description": "",
	"content": "Updating BMC Firmware and BIOS for NCNs without FAS  NOTE\n On HPE nodes, the BMC firmware is iLO 5 and BIOS is System ROM. The commands in the procedure must be run on ncn-m001. This procedure should only be used if FAS is not available, such as during initial CSM install.    Prerequisites Obtain the required firmware Flash the firmware  Gigabyte NCNs HPE NCNs  Using the ilorest command Using the iLO GUI      Prerequisites The following information is needed:\n IP address of each NCN BMC IP address of ncn-m001 root user password for each NCN BMC  Obtain the required firmware The firmware or BIOS can be obtained from the HFP tarball if it has been installed, or from the HPE Support Center (HPESC).\nThe correct version of firmware / BIOS must be selected.\nMove the firmware to be updated into an accessible directory.\nFlash the firmware Gigabyte NCNs This procedure can be followed on any Linux system with network connectivity to the NCN BMCs.\n  Start a webserver from the directory containing the downloaded firmware / BIOS image:\npython3 -m http.server 8770   Update BMC firmware.\n passwd = root user password of BMC ipaddressOfBMC = IP address of NCN BMC ipaddressOfM001 = IP address of ncn-m001 filename = Filename of the downloaded image  curl -k -u root:passwd https://ipaddressOfBMC/redfish/v1/UpdateService/Actions/SimpleUpdate \\  -d \u0026#39;{\u0026#34;ImageURI\u0026#34;:\u0026#34;http://ipaddressOfM001:8770/filename\u0026#34;, \u0026#34;TransferProtocol\u0026#34;:\u0026#34;HTTP\u0026#34;, \u0026#34;UpdateComponent\u0026#34;:\u0026#34;BMC\u0026#34;}\u0026#39;   Update BIOS.\n passwd = root user password of BMC ipaddressOfBMC = IP address of BMC ipaddressOfM001 = IP address of ncn-m001 filename = Filename of the downloaded image  curl -k -u root:passwd https://ipaddressOfBMC/redfish/v1/UpdateService/Actions/SimpleUpdate \\  -d \u0026#39;{\u0026#34;ImageURI\u0026#34;:\u0026#34;http://ipaddressOfM001:8770/filename\u0026#34;, \u0026#34;TransferProtocol\u0026#34;:\u0026#34;HTTP\u0026#34;, \u0026#34;UpdateComponent\u0026#34;:\u0026#34;BIOS\u0026#34;}\u0026#39;  After updating its BIOS, an NCN must be rebooted. Follow the Reboot NCNs procedure to reboot NCNs.\n   Repeat the previous two steps for all NCNs to be updated.\n  Stop the webserver started in the first step.\n  HPE NCNs Using the ilorest command If the command ilorest is available, then follow the procedure in this section to update the NCNs. Otherwise, see Using the iLO GUI.\n  Use the ilorest command to flash the firmware for each NCN that requires an update:\n passwd = root user password of BMC ipaddressOfBMC = IP address of BMC ipaddressOfM001 = IP address of ncn-m001 filename.fwpkg = Filename of the downloaded image  ilorest flashfwpkg filename.fwpkg --url ipaddressOfBMC -u root -p passwd  After updating its System ROM (BIOS), an NCN must be rebooted. Follow the Reboot NCNs procedure to reboot NCNs.\n   Using the iLO GUI The web interface will be used to update iLO 5 (BMC) firmware and/or System ROM (BIOS) on the HPE NCNs.\n  Copy the iLO 5 firmware and/or System ROM files to a local computer from ncn-m001 using scp or other secure copy tools.\nscp root@ipaddressOfM001Node:pathToFile/filename .   On a machine external to the cluster (for example, a laptop), do the following steps for each NCN to be updated:\n  Create an SSH tunnel.\n  -L creates the tunnel -N prevents a shell and stubs the connection   ssh -L 6443:ipaddressOfNCNBMC:443 -N ipaddressofM001   Open the following URL in a web browser: https://127.0.0.1:6443\n  Log in with root and the root user password for the iLO device.\n Click on Firmware \u0026amp; OS Software on the left menu. Click on Update Firmware on the right menu. Check Local File. Click Choose File and select the iLO firmware file or System ROM file. Click Confirm TPM override. Click Flash.   After updating its System ROM (BIOS), an NCN must be rebooted. Follow the Reboot NCNs procedure to reboot NCNs.\n   "
},
{
	"uri": "/docs-csm/en-12/operations/conman/access_compute_node_logs/",
	"title": "Access Compute Node Logs",
	"tags": [],
	"description": "",
	"content": "Access Compute Node Logs This procedure shows how the ConMan utility can be used to retrieve compute node logs.\nPrerequisites The user performing this procedure needs to have access permission to the cray-console-operator pod.\nLimitations Encryption of compute node logs is not enabled, so the passwords may be passed in clear text.\nProcedure Note: this procedure has changed since the CSM 0.9 release.\n  Log on to a Kubernetes master or worker node.\n  Find the cray-console-operator pod.\nncn# OP_POD=$(kubectl get pods -n services \\  -o wide|grep cray-console-operator|awk \u0026#39;{print $1}\u0026#39;) ncn# echo $OP_POD Example output:\ncray-console-operator-6cf89ff566-kfnjr   Log on to the pod.\nncn# kubectl exec -it -n services $OP_POD -- sh   The console log file for each node is labeled with the component name (xname) of that node.\nList the log directory contents.\n# ls -la /var/log/conman total 44 -rw------- 1 root root 1415 Nov 30 20:00 console.XNAME ...  The log directory is also accessible from the cray-console-node pods.\n   The log files are plain text files which can be viewed with commands like cat or tail.\n# tail /var/log/conman/console.XNAME   Exit out of the pod.\n# exit ncn#   "
},
{
	"uri": "/docs-csm/en-12/operations/conman/access_console_log_data_via_the_system_monitoring_framework_smf/",
	"title": "Access Console Log Data Via The System Monitoring Framework (smf)",
	"tags": [],
	"description": "",
	"content": "Access Console Log Data Via the System Monitoring Framework (SMF) Console log data is collected by SMF and can be queried through the Kibana UI or Elasticsearch. Each line of the console logs are an individual record in the SMF database.\nPrerequisites This procedure requires the Kibana service to be up and running on a non-compute node (NCN).\nProcedure   Determine the external domain name by running the following command on any NCN:\nncn# kubectl get secret site-init -n loftsman -o jsonpath=\u0026#39;{.data.customizations.yaml}\u0026#39; | base64 -d | grep \u0026#34;external:\u0026#34; external: SHASTA_EXTERNAL_DOMAIN.com   Navigate to the following URL in a web browser: https://sma-kibana.SHASTA_EXTERNAL_DOMAIN.com/app/kibana\n   If this appears: Do this:     the Keycloak login page Supply valid credentials, then wait to be redirected to the Kibana dashboard before continuing to the next step.   the error Kibana did not load properly. Check the server output for more information. Clear browser cookies for https://sma-kibana.SHASTA_EXTERNAL_DOMAIN.com   The Kibana dashboard (see example below) Proceed to next step    When the Kibana dashboard loads, the web UI displays the Discover page by default. Note that even without entering a search pattern, an index pattern shows entries ordered in time.\n  Select the Shasta index for the type of logs desired from the drop-down list to search that data source.\n  Identify the component name (xname) for individual consoles to search for specific logs.\nEach line of the log data is prepended with console.hostname: XNAME where XNAME is the name of the node for the console log. This information can be used to identify each individual console.\nFor example, the following is the console log for x3000c0s19b4n0:\nconsole.hostname: x3000c0s19b4n0 \u0026lt;ConMan\u0026gt; Console [x3000c0s19b4n0] joined by \u0026lt;root@localhost\u0026gt; on pts/0 at 10-09 15:11. console.hostname: x3000c0s19b4n0 2020-10-09 15:11:39 Keepalived_vrrp[38]: bogus VRRP packet received on bond0.nmn0 !!!   Enter Search terms for the specific console component name (xname) using the console.hostname: XNAME string.\n  Click the time range drop-down menu to select the time period for which logs are displayed.\nUsing a time range for these searches is important to limit the scope and number of records returned, as well as limiting the time required to perform the search.\nThe default time range is 15 minutes.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/conman/conman/",
	"title": "Conman",
	"tags": [],
	"description": "",
	"content": "ConMan ConMan is a tool used for connecting to remote consoles and collecting console logs. These node logs can then be used for various administrative purposes, such as troubleshooting node boot issues.\nConMan runs on the system as a containerized service. It runs in a set of Docker containers within Kubernetes pods named cray-console-operator and cray-console-node. Node console logs are stored locally within the cray-console-node pods in the /var/log/conman/ directory, as well as being collected by the System Monitoring Framework (SMF).\nIn CSM versions 1.0 and later, the ConMan logs and interactive consoles are accessible through one of the cray-console-node pods. There are multiple cray-console-node pods, scaled to the size of the system.\nHow To Use See Log in to a Node Using ConMan for more information.\n"
},
{
	"uri": "/docs-csm/en-12/operations/conman/disable_conman_after_system_software_installation/",
	"title": "Disable Conman After The System Software Installation",
	"tags": [],
	"description": "",
	"content": "Disable ConMan After the System Software Installation The ConMan utility is enabled by default. The first procedure provides instructions for disabling it after the system software has been installed, and the second procedure provides instructions on how to later re-enable it.\nPrerequisites This procedure requires administrative privileges.\nDisable Procedure Note: this procedure has changed since the CSM 0.9 release.\n  Log on to a Kubernetes master or worker node.\n  Scale the cray-console-operator pods to 0 replicas.\nncn# kubectl -n services scale --replicas=0 deployment/cray-console-operator Example output:\ndeployment.apps/cray-console-operator scaled   Verify the cray-console-operator service is no longer running.\nThe following command will give no output when the service is no longer running.\nncn# kubectl -n services get pods | grep console-operator   Scale the cray-console-node pods to 0 replicas.\nncn# kubectl -n services scale --replicas=0 statefulset/cray-console-node Example output:\nstatefulset.apps/cray-console-node scaled   Verify the cray-console-node service is no longer running.\nThe following command will give no output when the service is no longer running.\nncn# kubectl -n services get pods | grep console-node   Re-enable Procedure   Scale the cray-console-operator service back to 1 replica. It will scale the cray-console-node pods after it starts operation.\nncn# kubectl -n services scale --replicas=1 deployment/cray-console-operator Example output:\ndeployment.apps/cray-console-operator scaled   Verify services are running again.\nncn# kubectl -n services get pods | grep -e console-operator -e console-node Example output:\ncray-console-node-0 3/3 Running 0 8m44s cray-console-node-1 3/3 Running 0 8m18s cray-console-operator-79bf95964-lngpz 2/2 Running 0 9m29s   "
},
{
	"uri": "/docs-csm/en-12/operations/conman/establish_a_serial_connection_to_ncns/",
	"title": "Establish A Serial Connection To NCNs",
	"tags": [],
	"description": "",
	"content": "Establish a Serial Connection to NCNs The ConMan pod can be used to establish a serial console connection with each non-compute node (NCN) in the system.\nIn the scenario of a power down or reboot of an NCN worker, one must first determine if any cray-console pods are running on that NCN. It is important to move cray-console pods to other worker nodes before rebooting or powering off a worker node to minimize disruption in console logging.\nIf a cray-console-node pod is running on a worker node when it is powered off or rebooted, then access to its associated consoles will be unavailable until one of the following things happens:\n the worker node comes back up and the cray-console-node pod begins running on it. the cray-console-node pod is terminated and comes up on another worker node. the cray-console-operator pod assigns the associated consoles to a different cray-console-node pod.  Prerequisites The user performing these procedures needs to have access permission to the cray-console-operator and cray-console-node pods.\nConnection procedure   When trying to monitor a worker node that will be rebooted or powered down, first follow the Evacuation procedure.\n  Find the cray-console-operator pod.\nncn-mw# OP_POD=$(kubectl get pods -n services \\  -o wide|grep cray-console-operator|awk \u0026#39;{print $1}\u0026#39;) ncn-mw# echo $OP_POD Example output:\ncray-console-operator-6cf89ff566-kfnjr   Find the cray-console-node pod that is connecting with the console.\nncn-mw# NODE_POD=$(kubectl -n services exec $OP_POD -c cray-console-operator -- sh -c \\  \u0026#34;/app/get-node $XNAME\u0026#34; | jq .podname | sed \u0026#39;s/\u0026#34;//g\u0026#39;) ncn-mw# echo $NODE_POD Example output:\ncray-console-node-1   Establish a serial console session with the desired NCN.\nncn-mw# kubectl -n services exec -it $NODE_POD -- conman -j $XNAME The console session log files for each NCN are located in a shared volume in the cray-console-node pods. In those pods, the log files are in the /var/log/conman/ directory and are named console.\u0026lt;xname\u0026gt;.\nIMPORTANT: If the cray-console-node pod the user is connected through is running on the same NCN that the console session is connected to, and a reboot of that same NCN is initiated, then expect the connection to terminate and there to be a gap in the console log file. The gap will last until the console connection is reestablished through a different cray-console-node pod or until the existing pod is restarted on a different NCN. If the cray-console-node pod was running on a different NCN or was moved prior to the reboot, then the console log and session should persist through the operation.\n  Exit the connection to the console by entering \u0026amp;..\n  Evacuation procedure In order to avoid losing data while monitoring a reboot or power down of a worker node, first follow this procedure to evacuate the target worker node of its pods.\n  Set the WNODE variable to the name of the worker node being evacuated.\nModify the following example to reflect the actual worker node number.\nncn-mw# WNODE=ncn-wxxx   Cordon the node so that rescheduled pods do not end up back on the same node.\nncn-mw# kubectl cordon $WNODE   Find all cray-console pods that need to be migrated.\nThis includes cray-console-node, cray-console-data (but not its Postgres pods), and cray-console-operator.\nncn-mw# kubectl get pods -n services -l \u0026#39;app.kubernetes.io/name in (cray-console-node, cray-console-data, cray-console-operator)\u0026#39; \\  --field-selector spec.nodeName=$WNODE | awk \u0026#39;{print $1}\u0026#39; Example output:\ncray-console-operator-6cf89ff566-kfnjr   Delete the cray-console-operator and cray-console-data pods listed in the previous step.\nIf none were listed, then skip this step.\n  Delete the pods.\nncn-mw# for POD in $(kubectl get pods -n services -l \u0026#39;app.kubernetes.io/name in (cray-console-data, cray-console-operator)\u0026#39; \\  --field-selector spec.nodeName=$WNODE | awk \u0026#39;{print $1}\u0026#39;); do kubectl -n services delete pod $POD done   Wait for the console-operator and console-data pods to be re-scheduled on other nodes.\nRun the following command until both deployments show 1/1 pods are ready.\nncn-mw# kubectl -n services get deployment | grep cray-console Example output:\ncray-console-data 1/1 1 1 1m cray-console-operator 1/1 1 1 1m     Delete any cray-console-node pods listed in the earlier step.\nIf none were listed, then skip this step.\n  Delete the pods.\nncn-mw# for POD in $(kubectl get pods -n services -l \u0026#39;app.kubernetes.io/name=cray-console-node\u0026#39; --field-selector spec.nodeName=$WNODE | awk \u0026#39;{print $1}\u0026#39;); do kubectl -n services delete pod $POD done   Wait for the console-node pods to be re-scheduled on other nodes.\nRun the following command until all pods show ready.\nncn-mw# kubectl -n services get statefulset cray-console-node Example output:\nNAME READY AGE cray-console-node 2/2 1m     After the node has been rebooted and can accept cray-console pods again, remove the node cordon.\nncn-mw# kubectl uncordon $WNODE   "
},
{
	"uri": "/docs-csm/en-12/operations/conman/log_in_to_a_node_using_conman/",
	"title": "Log In To A Node Using Conman",
	"tags": [],
	"description": "",
	"content": "Log in to a Node Using ConMan This procedure shows how to connect to the node\u0026rsquo;s Serial Over Lan (SOL) via ConMan.\nPrerequisites The user performing this procedure needs to have access permission to the cray-console-operator and cray-console-node pods.\nProcedure Note: this procedure has changed since the CSM 0.9 release.\n  Log on to a Kubernetes master or worker node.\n  Find the cray-console-operator pod.\nncn# OP_POD=$(kubectl get pods -n services \\  -o wide|grep cray-console-operator|awk \u0026#39;{print $1}\u0026#39;) ncn# echo $OP_POD Example output:\ncray-console-operator-6cf89ff566-kfnjr   Set the XNAME variable to the component name (xname) of the node whose console you wish to open.\nncn# XNAME=x123456789s0c0n0   Find the cray-console-node pod that is connected to that node.\nncn# NODEPOD=$(kubectl -n services exec $OP_POD -c cray-console-operator -- \\  sh -c \u0026#34;/app/get-node $XNAME\u0026#34; | jq .podname | sed \u0026#39;s/\u0026#34;//g\u0026#39;) ncn# echo $NODEPOD Example output:\ncray-console-node-1   Connect to the node\u0026rsquo;s console using ConMan on the cray-console-node pod you found.\nncn# kubectl exec -it -n services $NODEPOD -- conman -j $XNAME Example output:\n\u0026lt;ConMan\u0026gt; Connection to console [x3000c0s25b1] opened. nid000009 login: Using the command above, a user can also attach to an already active SOL session that is being used by another user, so both can access the node\u0026rsquo;s SOL simultaneously.\n  Exit the connection to the console with the \u0026amp;. command.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/conman/manage_node_consoles/",
	"title": "Manage Node Consoles",
	"tags": [],
	"description": "",
	"content": "Manage Node Consoles ConMan is used for connecting to remote consoles and collecting console logs. These node logs can then be used for various administrative purposes, such as troubleshooting node boot issues.\nConMan runs on the system in a set of containers within Kubernetes pods named cray-console-operator and cray-console-node.\nThe cray-console-operator and cray-console-node pods determine which nodes they should monitor by checking with the Hardware State Manager (HSM) service. They do this once when they starts. If HSM has not discovered some nodes when they start, then HSM is unaware of them and therefore so are the cray-console-operator and cray-console-node pods.\nVerify that all nodes are being monitored for console logging and connect to them if desired.\nSee ConMan for other procedures related to remote consoles and node console logging.\nProcedure This procedure can be run from any member of the Kubernetes cluster to verify node consoles are being managed by ConMan and to connect to a console.\nNOTE: this procedure has changed since the CSM 0.9 release.\n  Find the cray-console-operator pod.\nncn# OP_POD=$(kubectl get pods -n services \\  -o wide|grep cray-console-operator|awk \u0026#39;{print $1}\u0026#39;) ncn# echo $OP_POD Example output:\ncray-console-operator-6cf89ff566-kfnjr   Find the cray-console-node pod that is connected to the node. Be sure to substitute the actual component name (xname) of the node in the command below.\nncn# XNAME=\u0026lt;xname\u0026gt; ncn# NODEPOD=$(kubectl -n services exec $OP_POD -c cray-console-operator -- sh -c \u0026#34;/app/get-node $XNAME\u0026#34; | jq .podname | sed \u0026#39;s/\u0026#34;//g\u0026#39;) ncn# echo $NODEPOD Example output:\ncray-console-node-2   Log into the cray-console-node container in this pod:\nncn# kubectl exec -n services -it $NODEPOD -c cray-console-node -- bash Example output:\ncray-console-node#   Check the list of nodes being monitored.\ncray-console-node# conman -q Output looks similar to the following:\nx9000c0s1b0n0 x9000c0s20b0n0 x9000c0s22b0n0 x9000c0s24b0n0 x9000c0s27b1n0 x9000c0s27b2n0 x9000c0s27b3n0   Compute nodes or UANs are automatically added to this list a short time after they are discovered.\n  To access the node\u0026rsquo;s console, run the following command from within the pod. Again, remember to substitute the actual component name (xname) of the node.\ncray-console-node# conman -j \u0026lt;xname\u0026gt;  The console session can be exited by entering \u0026amp;.\n   Repeat the previous steps to verify that cray-console is now managing all nodes that are included in HSM.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/conman/troubleshoot_conman_asking_for_password_on_ssh_connection/",
	"title": "Troubleshoot Conman Asking For Password On SSH Connection",
	"tags": [],
	"description": "",
	"content": "Troubleshoot ConMan Asking for Password on SSH Connection If ConMan starts to ask for a password when there is an SSH connection to the node on liquid-cooled hardware, that usually indicates there is a problem with the SSH key that was established on the node BMC. The key may have been replaced or overwritten on the hardware.\nUse this procedure to renew or reinstall the SSH key on the BMCs.\nPrerequisites This procedure requires administrative privileges.\nProcedure Note: this procedure has changed since the CSM 0.9 release.\n  Scale the cray-console-operator pods to 0 replicas.\nncn# kubectl -n services scale --replicas=0 deployment/cray-console-operator Example output:\ndeployment.apps/cray-console-operator scaled   Verify that the cray-console-operator service is no longer running.\nThe following command will give no output when the pod is no longer running.\nncn# kubectl -n services get pods | grep console-operator   Delete the SSH keys in a cray-console-node pod.\nncn# kubectl -n services exec -it cray-console-node-0 -- rm -v /var/log/console/conman.key /var/log/console/conman.key.pub   Restart the cray-console-operator pod.\nncn# kubectl -n services scale --replicas=1 deployment/cray-console-operator Example output:\ndeployment.apps/cray-console-operator scaled It may take some time to regenerate the keys and get them deployed to the BMCs, but in a while the console connections using SSH should be reestablished. Note that it may be worthwhile to determine how the SSH key was modified and establish site procedures to coordinate SSH key use; otherwise they may be overwritten again at a later time.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/conman/troubleshoot_conman_blocking_access_to_a_node_bmc/",
	"title": "Troubleshoot Conman Blocking Access To A Node BMC",
	"tags": [],
	"description": "",
	"content": "Troubleshoot ConMan Blocking Access to a Node BMC Disable ConMan if it is blocking access to a node by other means. ConMan runs on the system as a containerized service, and it is enabled by default. However, the use of ConMan to connect to a node blocks access to that node by other Serial over LAN (SOL) utilities or by a virtual KVM.\nFor information about how ConMan works, see ConMan.\nPrerequisites The Cray command line interface (CLI) tool is initialized and configured on the system.\nProcedure   Disable the console services.\nBecause the console services are looking for new hardware and continually verifying that console connections are established with all the nodes in the system, these services must be disabled to stop automatic console connections.\nFollow the directions in Disable ConMan After the System Software Installation to disable the automatic console connections.\n  Disable the SOL session.\nEven after the console services are disabled, the ConMan SOL session might need to be directly disabled using ipmitool. Note: This is only required for River nodes as Mountain hardware does not use IPMI.\n read -s is used to prevent the password from appearing in the command history.\n ncn# USERNAME=root ncn# read -s IPMI_PASSWORD ncn# export IPMI_PASSWORD ncn# ipmitool -I lanplus -H BMC_IP -U $USERNAME -E sol deactivate   Restart the console services.\nRefer to the directions in Disable ConMan After the System Software Installation to restart the console services when all work is complete.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/configure_cray_cli/",
	"title": "Configure The Cray Command Line Interface (cray Cli)",
	"tags": [],
	"description": "",
	"content": "Configure the Cray Command Line Interface (cray CLI) The cray command line interface (CLI) is a framework created to integrate all of the system management REST APIs into easily usable commands.\nProcedures in the CSM installation workflow use the cray CLI to interact with multiple services. The cray CLI configuration needs to be initialized for the Linux account, and the Keycloak user running the procedure needs to be authorized. This section describes how to initialize the cray CLI for use by a user and how to authorize that user.\nThe cray CLI only needs to be initialized once per user on a node.\nProcedure   Unset the CRAY_CREDENTIALS environment variable, if previously set.\nSome CSM installation procedures use the CLI with a Kubernetes managed service account that is normally used for internal operations. There is a procedure for extracting the OAUTH token for this service account and assigning it to the CRAY_CREDENTIALS environment variable to permit simple CLI operations. It must be unset in order to validate that the CLI is working with user authentication.\nncn# unset CRAY_CREDENTIALS   Initialize the cray CLI for the root account.\nThe cray CLI needs to know what host to use to obtain authorization and what user is requesting authorization, so it can obtain an OAUTH token to talk to the API gateway. This is accomplished by initializing the CLI configuration.\nIn this example, the vers username is used. It should be replaced with an appropriate user account:\n If LDAP configuration was enabled, then use a valid account in LDAP. If LDAP configuration was not enabled, or is not working, then a Keycloak local account may be created. See Configure Keycloak Account to create this local account in Keycloak.  ncn# cray init --hostname api-gw-service-nmn.local Expected output (including the typed input) should look similar to the following:\nUsername: vers Password: Success! Initialization complete.   Verify that the cray CLI is operational.\nncn# cray artifacts buckets list -vvv Expected output looks similar to the following:\nLoaded token: /root/.config/cray/tokens/api_gw_service_nmn_local.vers REQUEST: PUT to https://api-gw-service-nmn.local/apis/sts/token OPTIONS: {\u0026#39;verify\u0026#39;: False} S3 credentials retrieved successfully results = [ \u0026#34;alc\u0026#34;, \u0026#34;badger\u0026#34;, \u0026#34;benji-backups\u0026#34;, \u0026#34;boot-images\u0026#34;, \u0026#34;etcd-backup\u0026#34;, \u0026#34;fw-update\u0026#34;, \u0026#34;ims\u0026#34;, \u0026#34;install-artifacts\u0026#34;, \u0026#34;nmd\u0026#34;, \u0026#34;postgres-backup\u0026#34;, \u0026#34;prs\u0026#34;, \u0026#34;sat\u0026#34;, \u0026#34;sds\u0026#34;, \u0026#34;sls\u0026#34;, \u0026#34;sma\u0026#34;, \u0026#34;ssd\u0026#34;, \u0026#34;ssm\u0026#34;, \u0026#34;vbis\u0026#34;, \u0026#34;velero\u0026#34;, \u0026#34;wlm\u0026#34;,] If an error occurs, then continue to the troubleshooting section below.\n  Troubleshooting More information about what is failing can be found by adding -vvvvv to the cray init ... commands.\nInitialization fails If CLI initialization fails, there are several common causes:\n DNS failure looking up api-gw-service-nmn.local may be preventing the CLI from reaching the API Gateway and Keycloak for authorization Network connectivity issues with the NMN may be preventing the CLI from reaching the API Gateway and Keycloak for authorization Certificate mismatch or trust issues may be preventing a secure connection to the API Gateway Istio failures may be preventing traffic from reaching Keycloak Keycloak may not yet be set up to authorize the user  Internal error If an error similar to the following is seen, then restart radosgw on the storage nodes.\nThe server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application. Restart radosgw using the following steps. These steps must be run on one of the storage nodes running the Ceph radosgw process. By default these nodes are ncn-s001, ncn-s002, and ncn-s003.\n  Restart the Ceph radosgw process.\n The expected output will be similar to the following, but it will vary based on the nodes running radosgw.\n ncn-s# ceph orch restart rgw.site1.zone1 Example output:\nrestart rgw.site1.zone1.ncn-s001.cshvbb from host \u0026#39;ncn-s001\u0026#39; restart rgw.site1.zone1.ncn-s002.tlegbb from host \u0026#39;ncn-s002\u0026#39; restart rgw.site1.zone1.ncn-s003.vwjwew from host \u0026#39;ncn-s003\u0026#39;   Check to see that the processes restarted.\nncn-s# ceph orch ps --daemon_type rgw Example output:\nNAME HOST STATUS REFRESHED AGE VERSION IMAGE NAME IMAGE ID CONTAINER ID rgw.site1.zone1.ncn-s001.cshvbb ncn-s001 running (29s) 23s ago 9h 15.2.8 registry.local/ceph/ceph:v15.2.8 5553b0cb212c 2a712824adc1 rgw.site1.zone1.ncn-s002.tlegbb ncn-s002 running (29s) 28s ago 9h 15.2.8 registry.local/ceph/ceph:v15.2.8 5553b0cb212c e423f22d06a5 rgw.site1.zone1.ncn-s003.vwjwew ncn-s003 running (29s) 23s ago 9h 15.2.8 registry.local/ceph/ceph:v15.2.8 5553b0cb212c 1e6ad6bc2c62  A process which has restarted should have an AGE in seconds. Restarting all of them could require a couple of minutes depending on how many.\n   In the event that more than five minutes have passed and the radosgw processes have not restarted, then fail the ceph-mgr process.\n  Determine the active ceph-mgr.\nncn-s#ceph mgr dump | jq -r .active_name Example output:\nncn-s002.zozbqp   Fail the active ceph-mgr.\nncn-s# ceph mgr fail $(ceph mgr dump | jq -r .active_name)   Confirm that ceph-mgr has moved to a different ceph-mgr container.\nncn-s# ceph mgr dump | jq -r .active_name Example output:\nncn-s001.qucrpr   Verify that the radosgw processes restarted using the command from the previous step.\nAt this point the processes should restart. If they do not, then attempt this remediation procedure a second time.\n    "
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/update_a_cfs_configuration/",
	"title": "Update A CFS Configuration",
	"tags": [],
	"description": "",
	"content": "Update a CFS Configuration Modify a Configuration Framework Service (CFS) configuration by specifying the JSON of the configuration and its layers. Use the cray cfs configurations update command, similar to creating a configuration.\nPrerequisites  A CFS configuration has been created. The Cray command line interface (CLI) tool is initialized and configured on the system.  Procedure   Add and/or remove the configuration layers from an existing JSON configuration file.\nDo not include the name of the configuration in the JSON file. This is specified on the command line in the next step.\nncn# cat configurations-example.json Example configuration:\n{ \u0026#34;layers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;configurations-layer-example-1\u0026#34;, \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/example-repo.git\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;site.yml\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;\u0026lt;git commit id\u0026gt;\u0026#34; } ] }   Update the configuration in CFS.\nncn# cray cfs configurations update configurations-example \\ --file ./configurations-example.json --format json Example output:\n{ \u0026#34;lastUpdated\u0026#34;: \u0026#34;2021-07-28T03:26:30:37Z\u0026#34;, \u0026#34;layers\u0026#34;: [ { \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/example-repo.git\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;\u0026lt;git commit id\u0026gt;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;configurations-layer-example-1\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;site.yml\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;configurations-example\u0026#34; }   "
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/update_the_privacy_settings_for_gitea_configuration_content_repositories/",
	"title": "Update The Privacy Settings For Gitea Configuration Content Repositories",
	"tags": [],
	"description": "",
	"content": "Update the Privacy Settings for Gitea Configuration Content Repositories Change the visibility of Gitea configuration content repositories from public to private. All Cray-provided repositories are created as private by default.\nProcedure   Log in to the Version Control Service (VCS) as the crayvcs user.\nUse the following URL to access the VCS web interface:\nhttps://vcs.SYSTEM-NAME.DOMAIN-NAME   Navigate to the cray organization.\nhttps://vcs.SYSTEM-NAME.DOMAIN-NAME/vcs/cray   Select the repository title for each repository listed on the page.\n  Click the Settings button in the repository header section.\n  Update the visibility settings for the repository.\n  Click the Visibility check box to make the repository private.\n  Click the Update Settings button to save the change for the repository.\n    "
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/use_a_custom_ansible-cfg_file/",
	"title": "Use A Custom Ansible.cfg File",
	"tags": [],
	"description": "",
	"content": "Use a Custom ansible.cfg File The Configuration Framework Service (CFS) allows for flexibility with the Ansible Execution Environment (AEE) by allowing for changes to included ansible.cfg file. When installed, CFS imports a custom ansible.cfg file into the cfs-default-ansible-cfg Kubernetes ConfigMap in the services namespace.\nAdministrators who want to make changes to the ansible.cfg file on a per-session or system-wide basis can upload a new file to a new ConfigMap and direct CFS to use their file. See Set the ansible.cfg for a Session for more information.\nTo create a custom ansible.cfg that CFS can use, create a new ansible.cfg file and a ConfigMap:\nncn# vi ansible.cfg # create an Ansible config file ncn# kubectl create configmap custom-ansible-cfg -n services --from-file=ansible.cfg To use this Ansible configuration file for a specific session, set --ansible-config custom-ansible-cfg when creating a session, or set --default-ansible-config custom-ansible-cfg when setting global CFS options with the cray cfs options update command.\n"
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/use_a_specific_inventory_in_a_configuration_session/",
	"title": "Use A Specific Inventory In A Configuration Session",
	"tags": [],
	"description": "",
	"content": "Use a Specific Inventory in a Configuration Session A special repository can be added to a Configuration Framework Service (CFS) configuration to help with certain scenarios, specifically when developing Ansible plays for use on the system. A static inventory often changes along with the Ansible content, and CFS users may need to test different configuration values simultaneously and not be forced to use the global additionalInventoryUrl.\nTherefore, an additional_inventory mapping can be added to the CFS configuration. Similar to a standard configuration layer, the additional inventory only requires a commit and repository clone URL, and it overrides the global additionalInventoryUrl if it is specified in the global CFS options.\nFor example:\nncn-m001# cat configurations-example-additional-inventory.json Example configuration:\n{ \u0026#34;layers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;configurations-layer-example-1\u0026#34;, \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/example-repo.git\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;site.yml\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;\u0026lt;git commit id\u0026gt;\u0026#34; } ], \u0026#34;additional_inventory\u0026#34;: { \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/inventory.git\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;a7d08b6e1be590ac01711e39c684b6893c1da0a9\u0026#34; } } "
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/vcs_branching_strategy/",
	"title": "Vcs Branching Strategy",
	"tags": [],
	"description": "",
	"content": "VCS Branching Strategy Individual products import configuration content (Ansible plays, roles, and more) into a repository in the Version Control Service (VCS) through their installation process. Typically, this repository exists in the cray organization in VCS and its name has the format [product name]-config-management.\nThe import branch of the product is considered \u0026ldquo;pristine content\u0026rdquo; and is added to VCS in a read-only branch. This step is taken to ensure the future updates of the product\u0026rsquo;s configuration content can be based on a clean branch, and that upgrades can proceed without merging issues.\nHPE Cray products import their content into a branch with a name that has the format cray/[product]/[product version].\nThe version is in SemVer format. Product installation and operational workflows will direct users to create branches from these pristine product branches to begin customizing their configuration from the default provided by the HPE Cray product.\nThe workflow of branching from pristine imported content and handling upgrades to that content is shown in the diagram below (see \u0026ldquo;Branch Workflow\u0026rdquo;). In this scenario, the configuration customizations are made in a customer/main branch, which can be any branch in the repository, such as master, main, integration, or others. As configuration changes are made and the system is configured as required, users can point to the commits (white circles) in their CFS configuration layers to test and run HPE Cray products on the system. Users may also point to the commits on pristine branches (blue circle) in CFS configuration layers if the default configuration is sufficient.\nWhen a product upgrade occurs (cray/product/1.4.0 in the above diagram), the product installer will create a new branch and commit based off the previous pristine branch. If the previous customizations on the customer/main branch also need to be included with the new 1.4.0 content, the user should initiate a Git merge of the new pristine content into their branch (or possibly into a test branch based on customer/main). This process will be the same for subsequent updates of the product as well.\n IMPORTANT: If the HPE Cray product has specific instructions for installing and upgrading configuration content, those should take precedence over this generic workflow.\n The \u0026ldquo;Branch Workflow\u0026rdquo; diagram is an example workflow that can be used to manage new product content being introduced during upgrades. However, CFS and VCS do not require any specific branching strategy. Users are free to manage the branches as they see fit with the exception of the pristine branches imported by individual HPE Cray products. CFS configuration layers (see Configuration Layers) only require a Git commit ID, a Git repository clone URL, and the path to an Ansible playbook to run the configuration content in the repository.\n"
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/version_control_service_vcs/",
	"title": "Version Control Service (vcs)",
	"tags": [],
	"description": "",
	"content": "Version Control Service (VCS) The Version Control Service (VCS) includes a web interface for repository management, pull requests, and a visual view of all repositories and organizations. The following URL is for the VCS web interface:\nhttps://vcs.SHASTA_CLUSTER_DNS_NAME\nCloning a VCS repository On cluster nodes, the VCS service can be accessed through the gateway. VCS credentials for the crayvcs user are required before cloning a repository (see VCS administrative user below).\nTo clone a repository in the cray organization, use the following command:\nncn# git clone https://api-gw-service-nmn.local/vcs/cray/REPO_NAME.git VCS administrative user The Cray System Management (CSM) product installation creates the administrative user crayvcs that is used by CSM and other product installers to import their configuration content into VCS.\nThe initial VCS credentials for the crayvcs user are obtained with the following command:\nncn# kubectl get secret -n services vcs-user-credentials --template={{.data.vcs_password}} | base64 --decode Change VCS administrative user password The initial VCS login credentials for the crayvcs user are stored in three places:\n vcs-user-credentials Kubernetes secret: This is used to initialize the other two locations, as well as providing a place where other users can query for the password. VCS (Gitea): These credentials are used when pushing to Git using the default username and password. The password should be changed through the Gitea UI. Keycloak: These credentials are used to access the VCS UI. They must be changed through Keycloak. For more information on accessing Keycloak, see Access the Keycloak User Management UI.   WARNING: These three sources of credentials are not synced by any mechanism. Changing the default password requires that is it changed in all three places. Changing only one may result in difficulty determining the password at a later date, or may result in losing access to VCS altogether.\n To change the password in the vcs-user-credentials Kubernetes secret, use the following procedure:\n  Log in to Keycloak with the default admin credentials.\nPoint a browser at https://auth.SYSTEM_DOMAIN_NAME/keycloak/admin, replacing SYSTEM_DOMAIN_NAME with the actual NCN\u0026rsquo;s DNS name.\nThe following is an example URL for a system: https://auth.cmn.system1.us.cray.com/keycloak/admin\nUse the following admin login credentials:\n  Username: admin\n  The password can be obtained with the following command:\nncn# kubectl get secret -n services keycloak-master-admin-auth \\  --template={{.data.password}} | base64 --decode     Ensure the selected Realm is Shasta from the top-left dropdown in the left sidebar.\n  From the left sidebar, under the Manage section, select Users.\n  In the Search... textbox, type in crayvcs and click the search icon.\n  In the filtered table below, click on the ID for the row that shows crayvcs in the Username column.\n  Go to the Credentials tab and change the password.\nEnter the new password in the Reset Password form. Ensure Temporary is switched off. Click on Reset Password button.\n  Log in to Gitea with the default admin credentials.\nPoint the browser at https://vcs.SHASTA_CLUSTER_DNS_NAME/vcs/user/settings/account.\nIf presented with Keycloak login, use crayvcs as the username and the new VCS password. Wait to be redirected to the Gitea login page before continuing to the next step.\n  Use the following Gitea login credentials:\n  Username: crayvcs\n  The old VCS password, which can be obtained with the following command:\nncn# kubectl get secret -n services vcs-user-credentials \\  --template={{.data.vcs_password}} | base64 --decode     Enter the existing password (from previous step), new password, and confirmation, and then click Update Password.\n  Now SSH into ncn-w001 or ncn-m001.\n  Run git clone https://github.com/Cray-HPE/csm.git.\n  Change directories to be in the working directory set in the previous step.\n  Save a local copy of the customizations.yaml file.\nncn# kubectl get secrets -n loftsman site-init -o jsonpath=\u0026#39;{.data.customizations\\.yaml}\u0026#39; | base64 -d \u0026gt; customizations.yaml   Change the password in the customizations.yaml file.\nThe Gitea crayvcs password is stored in the vcs-user-credentials Kubernetes Secret in the services namespace. This must be updated so that clients which need to make requests can authenticate with the new password.\nIn the customizations.yaml file, set the values for the gitea keys in the spec.kubernetes.sealed_secrets field. The value in the data element where the name is password needs to be changed to the new Gitea password. The section below will replace the existing sealed secret data in the customizations.yaml file.\nFor example:\ngitea: generate: name: vcs-user-credentials data: - type: static args: name: vcs_password value: my_secret_password - type: static args: name: vcs_username value: crayvcs   Encrypt the values after changing the customizations.yaml file.\nncn# ./utils/secrets-seed-customizations.sh customizations.yaml If the above command complains that it cannot find certs/sealed_secrets.crt, then run the following commands to create it:\nncn# mkdir -p ./certs \u0026amp;\u0026amp; ./utils/bin/linux/kubeseal --controller-name sealed-secrets --fetch-cert \u0026gt; ./certs/sealed_secrets.crt   Upload the modified customizations.yaml file to Kubernetes.\nncn# kubectl delete secret -n loftsman site-init ncn# kubectl create secret -n loftsman generic site-init --from-file=customizations.yaml   Get the current cached sysmgmt manifest and save it into a gitea.yaml file.\nncn# kubectl get cm -n loftsman loftsman-sysmgmt -o jsonpath=\u0026#39;{.data.manifest\\.yaml}\u0026#39; \u0026gt; gitea.yaml   Run the following command to remove non-Gitea charts from the gitea.yaml file. This will also change the metadata.name so that it does not overwrite the sysmgmt.yaml file that is stored in the loftsman namespace.\nncn# for i in $(yq r gitea.yaml \u0026#39;spec.charts[*].name\u0026#39; | grep -Ev \u0026#39;^gitea\u0026#39;); do yq d -i gitea.yaml \u0026#39;spec.charts(name==\u0026#39;\u0026#34;$i\u0026#34;\u0026#39;)\u0026#39;; done ncn# yq w -i gitea.yaml metadata.name gitea ncn# yq d -i gitea.yaml spec.sources ncn# yq w -i gitea.yaml spec.sources.charts[0].location \u0026#39;https://packages.local/repository/charts\u0026#39; ncn# yq w -i gitea.yaml spec.sources.charts[0].name csm-algol60 ncn# yq w -i gitea.yaml spec.sources.charts[0].type repo   Example gitea.yaml after the command is run:\nExample:\napiVersion: manifests/v1beta1 metadata: name: sysmgmt spec: charts: - name: gitea namespace: services source: csm-algol60 values: cray-service: sealedSecrets: - apiVersion: bitnami.com/v1alpha1 kind: SealedSecret metadata: annotations: sealedsecrets.bitnami.com/cluster-wide: \u0026#39;true\u0026#39; ... sources: charts: - location: https://packages.local/repository/charts name: csm-algol60 type: repo ...   Generate the manifest that will be used to redeploy the chart with the modified resources.\nncn# manifestgen -c customizations.yaml -i gitea.yaml -o manifest.yaml   Validate that the manifest.yaml file only contains chart information for Gitea, and that the sources chart location points to https://packages.local/repository/charts.\n  Re-apply the gitea Helm chart with the updated customizations.yaml file.\nThis will update the vcs-user-credentials SealedSecret which will cause the SealedSecret controller to update the Secret.\nncn# loftsman ship --manifest-path ${PWD}/manifest.yaml   Verify that the Secret has been updated.\nGive the SealedSecret controller a few seconds to update the Secret, then run the following command to see the current value of the Secret:\nncn# kubectl get secret -n services vcs-user-credentials \\  --template={{.data.vcs_password}} | base64 --decode   Save an updated copy of customizations.yaml to the site-init secret in the loftsman Kubernetes namespace.\nncn# CUSTOMIZATIONS=$(base64 \u0026lt; customizations.yaml | tr -d \u0026#39;\\n\u0026#39;) ncn# kubectl get secrets -n loftsman site-init -o json | jq \u0026#34;.data.\\\u0026#34;customizations.yaml\\\u0026#34; |= \\\u0026#34;$CUSTOMIZATIONS\\\u0026#34;\u0026#34; | kubectl apply -f -   Access the cray Gitea organization The VCS UI uses Keycloak to authenticate users on the system. However, users from external authentication sources are not automatically associated with permissions in the cray Gitea organization. As a result, users configured via Keycloak can log in and create organizations and repositories of their own, but they cannot modify the cray organization that is created during system installation, unless they are given permissions to do so.\nThe crayvcs Gitea admin user that is created during CSM installation can log in to the UI via Keycloak. To allow users other than crayvcs to have access to repositories in the cray organization, use the following procedure:\n  Log in to VCS as the crayvcs user on the system.\nURL: https://vcs.SHASTA_CLUSTER_DNS_NAME\n  Navigate to the cray organization owners page.\nURL: https://vcs.SHASTA_CLUSTER_DNS_NAME/vcs/cray/teams/owners\n  Enter the username of the user who should have access to the organization in the Search user... text field, and click the Add Team Member button.\n   IMPORTANT The Owner role has full access to all repositories in the organization, as well as administrative access to the organization, including the ability to create and delete repositories.\n For granting non-administrative access to the organization and its repositories, create a new team at the following URL:\nhttps://vcs.SHASTA_CLUSTER_DNS_NAME/vcs/org/cray/teams/new\nSelect the permissions appropriately, and then navigate to the following URL to add members to the newly created team:\nhttps://vcs.SHASTA_CLUSTER_DNS_NAME/vcs/org/cray/teams/NEWTEAM\nBackup and restore data Data for Gitea is stored in two places: Git content is stored directly in a PVC, while structural data, such as Gitea users and the list and attributes of repositories, is stored in a Postgres database. Because of this, both sources must be backed up and restored together.\nBackup Postgres data   Determine which Postgres member is the leader.\nncn# kubectl exec gitea-vcs-postgres-0 -n services -c postgres -it -- patronictl list Example output:\n+ Cluster: gitea-vcs-postgres (6995618180238446669) -----+----+-----------+ | Member | Host | Role | State | TL | Lag in MB | +----------------------+--------------+--------+---------+----+-----------+ | gitea-vcs-postgres-0 | 10.45.0.21 | Leader | running | 1 | | | gitea-vcs-postgres-1 | 10.46.128.19 | | running | 1 | 0 | | gitea-vcs-postgres-2 | 10.47.0.21 | | running | 1 | 0 | +----------------------+--------------+--------+---------+----+-----------+   Log into the leader pod and dump the data to a local file.\nncn# POSTGRES_LEADER=gitea-vcs-postgres-0 ncn# kubectl exec -it ${POSTGRES_LEADER} -n services -c postgres -- pg_dumpall -c -U postgres \u0026gt; gitea-vcs-postgres.sql   Determine what secrets are associated with the PostgreSQL credentials:\nncn# kubectl get secrets -n services | grep gitea-vcs-postgres.credentials Example output:\npostgres.gitea-vcs-postgres.credentials Opaque 2 13d service-account.gitea-vcs-postgres.credentials Opaque 2 13d standby.gitea-vcs-postgres.credentials Opaque 2 13d   Export each secret to a manifest file:\nncn# SECRETS=\u0026#34;postgres service-account standby\u0026#34; ncn# echo \u0026#34;---\u0026#34; \u0026gt; gitea-vcs-postgres.manifest ncn# for secret in $SECRETS; do kubectl get secret \u0026#34;${secret}.gitea-vcs-postgres.credentials\u0026#34; -n services -o yaml \u0026gt;\u0026gt; gitea-vcs-postgres.manifest echo \u0026#34;---\u0026#34; \u0026gt;\u0026gt; gitea-vcs-postgres.manifest done   Edit the manifest file to remove creationTimestamp, resourceVersion, selfLink, and uid for each entry.\n  Copy all files to a safe location.\n  Backup PVC data The VCS Postgres backups should be accompanied by backups of the VCS PVC. The export process can be run at any time while the service is running using the following commands:\nncn# POD=$(kubectl -n services get pod -l app.kubernetes.io/instance=gitea -o json | jq -r \u0026#39;.items[] | .metadata.name\u0026#39;) ncn# kubectl -n services exec ${POD} -- tar -cvf vcs.tar /var/lib/gitea/ ncn# kubectl -n services cp ${POD}:vcs.tar ./vcs.tar Be sure to save the resulting tar file to a safe location.\nRestore Postgres data See Restore Postgres for VCS.\nRestore PVC data When restoring the VCS Postgres database, the PVC should also be restored to the same point in time. The restore process can be run at any time while the service is running using the following commands:\nncn# POD=$(kubectl -n services get pod -l app.kubernetes.io/instance=gitea -o json | jq -r \u0026#39;.items[] | .metadata.name\u0026#39;) ncn# kubectl -n services cp ./vcs.tar ${POD}:vcs.tar ncn# kubectl -n services exec ${POD} -- tar -xvf vcs.tar ncn# kubectl -n services rollout restart deployment gitea-vcs Alternative backup/restore strategy An alternative to the separate backups of the Postgres and PVC data is to backup the Git data. This has the advantage that only one backup is needed and that the Git backups can be imported into any Git server, not just Gitea. This has the disadvantage that some information about the Gitea deployment is lost (such as user and organization information) and may need to be recreated manually if the VCS deployment is lost.\nThe following scripts create and use a vcs-content directory that contains all Git data. This should be copied to a safe location after export, and moved back to the system before import.\nExport  WARNING: The following example uses the VCS admin username and password in plaintext on the command line, meaning it will be stored in the shell history as well as be visible to all users on the system in the process table. These dangers can be avoided by modifying or replacing the curl command (such as supplying the credentials to curl using the --netrc-file argument instead of the --user argument, or replacing it with a simple Python script).\n ncn# RESULTS=vcs-content ncn# mkdir $RESULTS ncn# VCS_USER=$(kubectl get secret -n services vcs-user-credentials --template={{.data.vcs_username}} | base64 --decode) ncn# VCS_PASSWORD=$(kubectl get secret -n services vcs-user-credentials --template={{.data.vcs_password}} | base64 --decode) ncn# git config --global credential.helper store ncn# echo \u0026#34;https://${VCS_USER}:${VCS_PASSWORD}@api-gw-service-nmn.local\u0026#34; \u0026gt; ~/.git-credentials ncn# for repo in $(curl -s https://api-gw-service-nmn.local/vcs/api/v1/orgs/cray/repos --user ${VCS_USER}:${VCS_PASSWORD}| jq -r \u0026#39;.[] | .name\u0026#39;) ; do git clone --mirror https://api-gw-service-nmn.local/vcs/cray/${repo}.git cd ${repo}.git git bundle create ${repo}.bundle --all cp ${repo}.bundle ../$RESULTS cd .. rm -r $repo.git done Import ncn# SOURCE=vcs-content ncn# VCS_USER=$(kubectl get secret -n services vcs-user-credentials --template={{.data.vcs_username}} | base64 --decode) ncn# VCS_PASSWORD=$(kubectl get secret -n services vcs-user-credentials --template={{.data.vcs_password}} | base64 --decode) ncn# git config --global credential.helper store ncn# echo \u0026#34;https://${VCS_USER}:${VCS_PASSWORD}@api-gw-service-nmn.local\u0026#34; \u0026gt; ~/.git-credentials ncn# for file in $(ls $SOURCE); do repo=$(echo $file | sed \u0026#39;s/.bundle$//\u0026#39;) git clone --mirror ${SOURCE}/${repo}.bundle cd ${repo}.git git remote set-url origin https://api-gw-service-nmn.local/vcs/cray/${repo}.git git push cd .. rm -r ${repo}.git done Prior to import, the repository structure may need to be recreated if it has not already been by an install.\nAdjust the repository list as necessary, if any additional repositories are present. Repository settings such as public or private will also need to be manually set, if applicable.\nFor example:\n WARNING: The following example uses the VCS admin username and password in plaintext on the command line, meaning it will be stored in the shell history as well as be visible to all users on the system in the process table. These dangers can be avoided by modifying or replacing the curl command (such as supplying the credentials to curl using the --netrc-file argument instead of the --user argument, or replacing it with a simple Python script).\n ncn# VCS_USER=$(kubectl get secret -n services vcs-user-credentials --template={{.data.vcs_username}} | base64 --decode) ncn# VCS_PASSWORD=$(kubectl get secret -n services vcs-user-credentials --template={{.data.vcs_password}} | base64 --decode) ncn# REPOS=\u0026#34;analytics-config-management cos-config-management cpe-config-management slurm-config-management sma-config-management uan-config-management csm-config-management\u0026#34; ncn# for repo in $REPOS ; do curl -X POST https://api-gw-service-nmn.local/vcs/api/v1/orgs/cray/repos -u ${VCS_USER}:${VCS_PASSWORD} -d name=${repo} done "
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/view_configuration_session_logs/",
	"title": "View Configuration Session Logs",
	"tags": [],
	"description": "",
	"content": "View Configuration Session Logs Logs for the individual steps of a session are available via the kubectl log command for each container of a Configuration Framework Service (CFS) session. Refer to Configuration Sessions for more info about these containers.\nTo find the name of the Kubernetes pod that is running the CFS session:\nncn-mw# kubectl get pods --no-headers -o custom-columns=\u0026#34;:metadata.name\u0026#34; -n services -l cfsession=example Store the returned pod name as the CFS_POD_NAME variable for future use:\nncn-mw# CFS_POD_NAME=cfs-f9d18751-e6d1-4326-bf76-434293a7b1c5-q8tsc Alternatively, if the session is one of many recent sessions and the session name is not known, it is possible to list all CFS pods by start time and pick the desired pod based on status or start time:\nncn-mw# kubectl -n services --sort-by=.metadata.creationTimestamp get pods | grep cfs Example output:\ncfs-47bed8b5-e1b1-4dd7-b71c-40e9750d3183-7msmr 0/7 Completed 0 36m cfs-0675d19f-5bec-424a-b0e1-9d466299aff5-dtwhl 0/7 Error 0 5m25s cfs-f49af8e9-b8ab-4cbb-a4f6-febe519ef65f-nw76v 0/7 Error 0 4m14s cfs-31635b42-6d03-4972-9eba-b011baf9c5c2-jmdjx 6/7 NotReady 0 3m33s cfs-b9f50fbe-04de-4d9a-b5eb-c75d2d561221-dhgg6 6/7 NotReady 0 2m10s To view the logs of the various containers:\nncn-mw# kubectl logs -n services ${CFS_POD_NAME} -c ${CONTAINER_NAME} The ${CONTAINER_NAME} value is one of the containers mentioned in Configuration Sessions. Depending on the number of configuration layers in the session, some sessions will have more containers available. Use the -f option in the previous command to follow the logs if the session is still running.\nTo view the Ansible logs, determine which configuration layer\u0026rsquo;s logs to view from the order of the configuration set in the session. For example, if it is the first layer, then the ${CONTAINER_NAME} will be ansible-0.\nncn-mw# kubectl logs -n services ${CFS_POD_NAME} -c ansible-0 The git-clone-# and ansible-# containers may not start at 0 and may not be numbered sequentially if the session was created with the --configuration-limit option.\n"
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/write_ansible_code_for_cfs/",
	"title": "Write Ansible Code For CFS",
	"tags": [],
	"description": "",
	"content": "Write Ansible Code for CFS HPE Cray provides Ansible plays and roles for software products deemed necessary for the system to function. Customers are free to write their own Ansible plays and roles to augment what HPE Cray provides or implement new features. Basic knowledge of Ansible is needed to write plays and roles. The information below includes recommendations and best practices for writing and running Ansible code on the system successfully with the Configuration Framework Service (CFS).\nHelp with Ansible can be found in the external Ansible documentation:\n Ansible playbook best practices Ansible examples  Ansible Code Structure The Version Control Service (VCS) is setup during the Cray System Management (CSM) product installation, which is the appropriate place to store configuration content. Individual product installations include the Ansible code to properly configure each product.\nThe structure of the individual repository directories matches the recommended directory layout from the external Ansible documentation. The default playbook site.yml is found at the top level, if it exists, and the Ansible roles and variables are in their appropriate directories. Inventory directories like group_vars and host_vars may exist, but they are empty and left for variable overrides and customizations by the user.\nWrite Playbooks for Multiple Node Types Within an Ansible playbook, users can designate which node groups the various tasks and roles will run against. For example, a default site.yml playbook may contain a list of roles that are run on only the Compute nodes, and a list of roles that will run on only Application nodes. This is designated using the hosts parameter.\nFor example, hosts: Compute would be used to target the compute nodes. Users can create additional sections that target other node types, or adjust the hosts that the included roles will run against as necessary. It is also possible to target multiple groups within a section of a playbook, or to specify complex targets, such as nodes that are in one group and not in another group. The syntax for this is available in the external Ansible documentation. Hosts can be in more than one group at a time if there are user-defined groups. In this case, Ansible will run all sections that match the node type against the node.\nSee the Ansible Inventory section for more information about groups that are made automatically available through CFS dynamic inventory.\nPerformance and Scaling Tips CFS will handle scaling up Ansible to run on many hosts, but there are still places where performance can be improved by correctly writing Ansible plays.\n Use image customization when possible to limit how many times a task is run and improve boot times. Configuration that is the same for all nodes of the same type will benefit from image customization. See the next section for how to target specific tasks for running only during image customization. Import roles rather than playbooks. Each time a new playbook starts, Ansible automatically gathers facts for all the systems it is running against. This is not necessary more than once and can slow down Ansible execution. Turn off facts that are not needed in a playbook by setting gather_facts: false. If only a few facts are required, it is also possible to limit fact gathering by setting gather_subset. For more information on gather_subset, see the external Ansible module setup documentation. Use loops rather than individual tasks where modules are called multiple times. Some Ansible modules will optimize the command, such as grouping package installations into a single transaction (Refer to the external Ansible playbook loops documentation).  "
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/enable_ansible_profiling/",
	"title": "Enable Ansible Profiling",
	"tags": [],
	"description": "",
	"content": "Enable Ansible Profiling Ansible tasks and playbooks can be profiled in order to determine execution times and single out poor performance in runtime. The default Configuration Framework Service (CFS) ansible.cfg in the cfs-default-ansible-cfg ConfigMap does not enable these profiling tools. If profiling tools are desired, modify the default Ansible configuration file to enable them.\nProcedure   Edit the cfs-default-ansible-cfg ConfigMap.\nncn# kubectl edit cm cfs-default-ansible-cfg -n services   Uncomment the indicated line by removing the # character from the beginning of the line.\n#callback_whitelist = cfs_aggregator, timer, profile_tasks, profile_roles   Comment out the indicated line by adding a # character to the beginning of the line.\ncallback_whitelist = cfs_aggregator   New sessions will be created with profiling information available in the Ansible logs of the session pods. Alternatively, if editing the default ansible.cfg file that CFS uses, is not desired, a new Ansible configuration can also be created to enable profiling and direct CFS to use it. See Use a Custom ansible.cfg File for more information.\n"
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/git_operations/",
	"title": "Git Operations",
	"tags": [],
	"description": "",
	"content": "Git Operations Use the git command to manage repository content in the Version Control Service (VCS).\nOnce a repository is cloned, the git command line tool is available to interact with a repository from VCS. The git command is used for making commits, creating new branches, and pushing new branches, tags, and commits to the remote repository stored in VCS.\nWhen pushing changes to the VCS server using the crayvcs user, input the password retrieved from the Kubernetes secret as the credentials. See the \u0026ldquo;VCS Administrative User\u0026rdquo; heading in Version Control Service (VCS) for more information.\nncn# git push Enter the appropriate credentials when prompted:\nUsername for 'https://api-gw-service-nmn.local': crayvcs Password for 'https://crayvcs@api-gw-service-nmn.local': \u0026lt;input password here\u0026gt; For more information on how to use the Git command line tools, refer to the external Git User Manual.\n"
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/manage_multiple_inventories_in_a_single_location/",
	"title": "Manage Multiple Inventories In A Single Location",
	"tags": [],
	"description": "",
	"content": "Manage Multiple Inventories in a Single Location Many configuration layers may be present in a single configuration for larger systems that configure multiple Cray products. When values for each of these layers need to be customized, it can be tedious to override values in each of the respective repositories. The CFS additionalInventoryUrl option allows for static inventory files to be automatically added to the hosts directory of each configuration layer before it is applied by Ansible. It is then possible to add this additional Ansible inventory information to all configuration sessions so it can be used simultaneously with other inventory types, including the CFS dynamic inventory type, across all configuration layers in a session.\nThe additionalInventoryUrl option is optional and is set on a global CFS level. If provided, it must be set to the URL of a Git repository containing inventory files in the base directory of the repository. For ordering purposes, any inventory generated by CFS will also be placed in this directory with the name 01-cfs-generated.yaml. See the \u0026ldquo;Dynamic Inventory and Host Groups\u0026rdquo; section in Ansible Inventory.\nThe following is an example of an inventory repository:\n02-static-inventory.ini 03-my-dynamic-inventory.py group_vars/... host_vars/... CFS will provide the following inventory to Ansible when running a configuration session:\nhosts/01-cfs-generated.yaml hosts/02-static-inventory.ini hosts/03-my-dynamic-inventory.py hosts/group_vars/... hosts/host_vars/... CFS will clone the additional inventory Git repository and use the default branch (usually master) to populate the hosts directory. Only one inventory repository can be specified, and it will apply to all CFS sessions.\nUse the following command to set the additionalInventoryUrl value:\nncn# cray cfs options update \\ --additional-inventory-url https://api-gw-service-nmn.local/vcs/cray/inventory.git Use the following command to unset the additionalInventoryUrl value:\nncn# cray cfs options update --additional-inventory-url \u0026#34;\u0026#34; "
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/set_limits_for_a_configuration_session/",
	"title": "Set Limits For A Configuration Session",
	"tags": [],
	"description": "",
	"content": "Set Limits for a Configuration Session The configuration layers and session hosts can be limited when running a Configuration Framework Service (CFS) session.\nLimit CFS Session Hosts Subsets of nodes can be targeted in the inventory when running CFS sessions, which is useful specifically when running a session with dynamic inventory. Use the CFS --ansible-limit option when creating a session to apply the limits. The option directly corresponds to the --limit option offered by ansible-playbook, and can be used to specify hosts, groups, or combinations of them with patterns. CFS passes the value of this option directly to the ansible-playbook command for each configuration layer in the session. See the Ansible documentation on Patterns: targeting hosts and groups.\n IMPORTANT: The --limit option is useful for temporarily limiting the scope of targets for a configuration session. For example, it could be used to target a subset of the Compute group that has been separated for development use. However it should not be used to limit an Ansible playbook to target only the nodes that the playbook is intended to use. If a playbook should only be run on a specific group, target the proper group(s) with the hosts: section of the Ansible playbook.\n See Using Ansible Limits for more information about limiting hosts and groups in playbooks.\nUse the following command to create a CFS session to run on all hosts in the Compute group, but not a previously defined dev group:\nncn# cray cfs sessions create --name example \\ --configuration-name configurations-example \\ --ansible-limit \u0026#39;Compute:!dev\u0026#39; Example output:\n{ \u0026#34;ansible\u0026#34;: { \u0026#34;config\u0026#34;: \u0026#34;cfs-default-ansible-cfg\u0026#34;, \u0026#34;limit\u0026#34;: \u0026#34;Compute:!dev\u0026#34;, \u0026#34;verbosity\u0026#34;: 0 }, \u0026#34;configuration\u0026#34;: { \u0026#34;limit\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;configurations-example\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;example\u0026#34;, \u0026#34;status\u0026#34;: { \u0026#34;artifacts\u0026#34;: [], \u0026#34;session\u0026#34;: { \u0026#34;status\u0026#34;: \u0026#34;pending\u0026#34;, \u0026#34;succeeded\u0026#34;: \u0026#34;none\u0026#34; } }, \u0026#34;tags\u0026#34;: {}, \u0026#34;target\u0026#34;: { \u0026#34;definition\u0026#34;: \u0026#34;dynamic\u0026#34;, \u0026#34;groups\u0026#34;: null } } Limit CFS Session Configuration Layers It is possible to limit the session to only specific layers of the configuration that is specified. This is useful when re-applying configuration of a specific layer and applying the other layers is not necessary or desired. This option may also reduce the number of configurations that need to be created and stored by CFS because sessions can specify layers from a master configuration layer list.\nUse the --configuration-limit option when creating a CFS session to apply configuration layer limits. Multiple layers to limit the session are specified as a comma-separated list either by name (if layers were given names when created) or by zero-based index as defined in the configuration submitted to CFS.\nUse the following command to create a CFS session to run only on example-layer1, and then example-layer5 of a previously created configurations-example configuration:\n WARNING: If the configuration\u0026rsquo;s layers do not have names, then indices must be specified. Do not mix layer names and layer indices when using limits.\n ncn# cray cfs sessions create --name example \\ --configuration-name configurations-example \\ --configuration-limit \u0026#39;example-layer1,example-layer5\u0026#39; Example output:\n{ \u0026#34;ansible\u0026#34;: { \u0026#34;config\u0026#34;: \u0026#34;cfs-default-ansible-cfg\u0026#34;, \u0026#34;limit\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;verbosity\u0026#34;: 0 }, \u0026#34;configuration\u0026#34;: { \u0026#34;limit\u0026#34;: \u0026#34;example-layer1,example-layer5\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;configurations-example\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;example\u0026#34;, \u0026#34;status\u0026#34;: { \u0026#34;artifacts\u0026#34;: [], \u0026#34;session\u0026#34;: { \u0026#34;status\u0026#34;: \u0026#34;pending\u0026#34;, \u0026#34;succeeded\u0026#34;: \u0026#34;none\u0026#34; } }, \u0026#34;tags\u0026#34;: {}, \u0026#34;target\u0026#34;: { \u0026#34;definition\u0026#34;: \u0026#34;dynamic\u0026#34;, \u0026#34;groups\u0026#34;: null } } "
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/set_the_ansible-cfg_for_a_session/",
	"title": "Set The Ansible.cfg For A Session",
	"tags": [],
	"description": "",
	"content": "Set the ansible.cfg for a Session View and update the Ansible configuration used by the Configuration Framework Service (CFS).\nAnsible configuration is available through the ansible.cfg file. See the Configuring Ansible external documentation for more information about what values can be set.\nCFS provides a default ansible.cfg file in the cfs-default-ansible-cfg Kubernetes ConfigMap in the services namespace.\nTo view the ansible.cfg file:\nncn# kubectl get cm -n services cfs-default-ansible-cfg \\ -o json | jq -r \u0026#39;.data.\u0026#34;ansible.cfg\u0026#34;\u0026#39; ....  WARNING: Much of the configuration in this file is required by CFS to function properly. Particularly the cfs_aggregator callback plug-in, which is used for reporting configuration state to the CFS APIs, and the cfs_* strategy plug-ins. Exercise extreme caution when making changes to this ConfigMap\u0026rsquo;s contents. See Ansible Execution Environments for more information.\n The default ansible.cfg file ConfigMap can be changed to a custom ConfigMap (within the services Kubernetes namespace) by updating it in the CFS service options. This will update all CFS sessions to use this file for ansible.cfg.\nTo use a different ansible.cfg on a per-session basis, use the --ansible-config option when creating a CFS session. Refer to Use a Custom ansible-cfg File for more information.\n"
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/specifying_hosts_and_groups/",
	"title": "Specifying Hosts And Groups",
	"tags": [],
	"description": "",
	"content": "Specifying Hosts and Groups When using the Configuration Framework Service (CFS), there are many steps where users may need to specify the hosts that CFS should configure. This can be done by specifying individual hosts, or groups of hosts. There are several places where a user may need to provide this information, particularly groups, and depending on where this information is provided, the behavior can change greatly.\nInventories CFS has multiple options for generating inventories, but regardless of which option is used, the information is then converted into an Ansible inventory/hosts file. The inventory is the list of components that Ansible can run against. Anything not in the inventory is unknown to Ansible. Components in an inventory can be placed into groups so that they can be easily referenced together either in the Ansible code or when providing a limit to CFS.\nFor more information on Ansible inventory, see the official Ansible Inventory Documentation.\nHosts Within Ansible plays, it is possible to target different hosts and groups. These hosts and groups must exist in the inventory when Ansible is run. Combined with the inventory, this will determine which hosts have tasks run. For more information, see the Ansible Hosts Documentation.\nLimits The limit parameter is a way of restricting a run to a smaller set of hosts. Users can specify hosts or groups, or combinations of the two, but no new information can be added at this point. Hosts or groups that do not appear in the inventory will still not be configured, and likewise it is not possible to change the behavior of any parts of the play. Ansible will target the same groups for each task that it would have before, but now with a more limited inventory.\n"
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/target_ansible_tasks_for_image_customization/",
	"title": "Target Ansible Tasks For Image Customization",
	"tags": [],
	"description": "",
	"content": "Target Ansible Tasks for Image Customization The Configuration Framework Service (CFS) enables Ansible playbooks to run against both running nodes and images. See the \u0026ldquo;Use Cases\u0026rdquo; header in the Configuration Management section for more information about image customization and when it should be used.\nCFS uses the cray_cfs_image variable to distinguish between node personalization (running on live nodes) and image customization (configuring an image prior to boot). When this variable is set to true, it indicates that the CFS session is an image customization type and the playbook is targeting an image.\nCFS automatically sets this variable in the hosts/01-cfs-generated.yaml file for all sessions. When the session target is image customization, it sets cray_cfs_image to true; otherwise, it is false.\ncray_cfs_image can be set with Ansible playbook conditionals to selectively run individual tasks with when: cray_cfs_image, or to ignore individual tasks with when: not cray_cfs_image.\nConditionals can also be applied to entire roles if desired (see the external apply Ansible conditionals to roles). In instances where the same playbook may be run in both modes, it is best practice to include a conditional on all parts of the playbook, or at least those that take significant time so that work is not duplicated.\nIt is also best practice to include a default in Ansible roles for playbook and role portability because CFS injects this variable at runtime. This can be done in the defaults section of the role, or where the variable is called. For example:\nwhen: \u0026#34;{{ cray_cfs_image | default(false) }}\u0026#34; If a default is not provided, any playbooks or roles will not be runnable outside of the CFS Ansible Execution Environment (AEE) without the user specifying cray_cfs_image in the vars files or with the Ansible extra-vars options.\nWhen running Ansible against an IMS-hosted image root during an image customization CFS session, there are no special requirements for the paths when copying or syncing files. The image root directories will appears as if Ansible is connecting to a regular, live node. However, the image is not a running node, so actions that require a running system, such as starting/reloading a service, will not work properly and will cause the Ansible play to fail. Actions like these should be done only during live-node configuration modes such as node personalization.\n"
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/track_the_status_of_a_session/",
	"title": "Track The Status Of A Session",
	"tags": [],
	"description": "",
	"content": "Track the Status of a Session A configuration session can be a long-running process, and depends on many system factors, as well as the number of configuration layers and Ansible tasks that are run in each layer. The Configuration Framework Service (CFS) provides the session status through the session metadata to allow for tracking progress and session state.\nTo view the session status of a session named example, use the following command:\n# cray cfs sessions describe example --format json Example output:\n{ \u0026#34;ansible\u0026#34;: { \u0026#34;config\u0026#34;: \u0026#34;cfs-default-ansible-cfg\u0026#34;, \u0026#34;limit\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;verbosity\u0026#34;: 0 }, \u0026#34;configuration\u0026#34;: { \u0026#34;limit\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;configurations-example\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;example\u0026#34;, \u0026#34;status\u0026#34;: { \u0026#34;artifacts\u0026#34;: [], \u0026#34;session\u0026#34;: { \u0026#34;completionTime\u0026#34;: \u0026#34;2020-07-28T03:26:30\u0026#34;, \u0026#34;job\u0026#34;: \u0026#34;cfs-8c8d628b-ebac-4946-a8b7-f1f167b35b0d\u0026#34;, \u0026#34;startTime\u0026#34;: \u0026#34;2020-07-28T03:26:00\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;complete\u0026#34;, \u0026#34;succeeded\u0026#34;: \u0026#34;true\u0026#34; } }, \u0026#34;tags\u0026#34;: {}, \u0026#34;target\u0026#34;: { \u0026#34;definition\u0026#34;: \u0026#34;dynamic\u0026#34;, \u0026#34;groups\u0026#34;: null } } The jq tool, along with the --format json output option of the CLI, are helpful for filtering the session data to view just the session status:\n# cray cfs sessions describe example \\ --format json | jq .status.session Example output:\n{ \u0026#34;completionTime\u0026#34;: \u0026#34;2020-07-28T03:26:30\u0026#34;, \u0026#34;job\u0026#34;: \u0026#34;cfs-8c8d628b-ebac-4946-a8b7-f1f167b35b0d\u0026#34;, \u0026#34;startTime\u0026#34;: \u0026#34;2020-07-28T03:26:00\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;complete\u0026#34;, \u0026#34;succeeded\u0026#34;: \u0026#34;true\u0026#34; } The status section of the cray cfs session describe command output will not be populated until the CFS session Kubernetes job has started.\nThe .status.session mapping shows the overall status of the configuration session. The .succeeded key within this mapping is a string with values of either \u0026quot;true\u0026quot;, \u0026quot;false\u0026quot;, \u0026quot;unknown\u0026quot;, or \u0026quot;none\u0026quot;.\n\u0026quot;none\u0026quot; occurs if the session has not yet completed, and \u0026quot;unknown\u0026quot; occurs when the session is deleted mid-run, there is an error creating the session and it never starts, or any similar case where checking the session status would fail to find the underlying Kubernetes job running the CFS session.\nValues of .status can be \u0026quot;pending\u0026quot;, \u0026quot;running\u0026quot;, or \u0026quot;complete\u0026quot;.\n"
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/troubleshoot_ansible_play_failures_in_cfs_sessions/",
	"title": "Troubleshoot Ansible Play Failures In CFS Sessions",
	"tags": [],
	"description": "",
	"content": "Troubleshoot Ansible Play Failures in CFS Sessions View the Kubernetes logs for a Configuration Framework Service (CFS) pod in an error state to determine whether the error resulted from the CFS infrastructure or from an Ansible play that was run by a specific configuration layer in a CFS session.\nUse this procedure to obtain important triage information for Ansible plays being called by CFS.\nPrerequisites  A configuration session exists for CFS.  Procedure   Find the CFS pod that is in an error state.\nIn the example below, the $CFS_POD_NAME is cfs-e8e48c2a-448f-4e6b-86fa-dae534b1702e-pnxmn.\nncn# kubectl get pods -n services $CFS_POD_NAME Example output:\nNAME READY STATUS RESTARTS AGE cfs-e8e48c2a-448f-4e6b-86fa-dae534b1702e-pnxmn 0/3 Error 0 25h   Check to see what containers are in the pod.\nncn# kubectl logs -n services $CFS_POD_NAME Example output:\nError from server (BadRequest): a container name must be specified for pod cfs-e8e48c2a-448f-4e6b-86fa-dae534b1702e-pnxmn, choose one of: [inventory ansible-0 istio-proxy] or one of the init containers: [git-clone-0 istio-init] Issues rarely occur in the istio-init and istio-proxy containers. These containers can be ignored for now.\n  Check the git-clone-0, inventory, ansible-0 containers in that order.\n  Check the git-clone-0 container.\nncn# kubectl logs -n services CFS_POD_NAME git-clone-0   Check the inventory container.\n# kubectl logs -n services CFS_POD_NAME inventory Example output:\n% Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0curl: (7) Failed to connect to localhost port 15000: Connection refused Waiting for Sidecar % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 HTTP/1.1 200 OK content-type: text/html; charset=UTF-8 cache-control: no-cache, max-age=0 x-content-type-options: nosniff date: Thu, 05 Dec 2019 15:00:11 GMT server: envoy transfer-encoding: chunked Sidecar available 2019-12-05 15:00:12,160 - INFO - cray.cfs.inventory - Starting CFS Inventory version=0.4.3, namespace=services 2019-12-05 15:00:12,171 - INFO - cray.cfs.inventory - Inventory target=dynamic for cfsession=boa-2878e4c0-39c2-4df0-989e-053bb1edee0c 2019-12-05 15:00:12,227 - INFO - cray.cfs.inventory.dynamic - Dynamic inventory found a total of 2 groups 2019-12-05 15:00:12,227 - INFO - cray.cfs.inventory - Writing out the inventory to /inventory/hosts   Check the ansible-0 container.\nLook towards the end of the Ansible log in the PLAY RECAP section to see if any have failed. If it failed, look above at the immediately preceding play. In the example below, the ncmp_hsn_cns role has an issue when being run against the compute nodes.\nncn# kubectl logs -n services CFS_POD_NAME ansible-0 Example output:\nWaiting for Inventory Waiting for Inventory Inventory available % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 [...] TASK [ncmp_hsn_cns : SLES Compute Nodes (HSN): Create/Update ifcfg-hsnx File(s)] *** fatal: [x3000c0s19b1n0]: FAILED! =\u0026gt; {\u0026#34;msg\u0026#34;: \u0026#34;\u0026#39;interfaces\u0026#39; is undefined\u0026#34;} fatal: [x3000c0s19b2n0]: FAILED! =\u0026gt; {\u0026#34;msg\u0026#34;: \u0026#34;\u0026#39;interfaces\u0026#39; is undefined\u0026#34;} fatal: [x3000c0s19b3n0]: FAILED! =\u0026gt; {\u0026#34;msg\u0026#34;: \u0026#34;\u0026#39;interfaces\u0026#39; is undefined\u0026#34;} fatal: [x3000c0s19b4n0]: FAILED! =\u0026gt; {\u0026#34;msg\u0026#34;: \u0026#34;\u0026#39;interfaces\u0026#39; is undefined\u0026#34;} NO MORE HOSTS LEFT ************************************************************* PLAY RECAP ********************************************************************* x3000c0s19b1n0 : ok=28 changed=20 unreachable=0 failed=1 skipped=77 rescued=0 ignored=1 x3000c0s19b2n0 : ok=27 changed=19 unreachable=0 failed=1 skipped=63 rescued=0 ignored=1 x3000c0s19b3n0 : ok=27 changed=19 unreachable=0 failed=1 skipped=63 rescued=0 ignored=1 x3000c0s19b4n0 : ok=27 changed=19 unreachable=0 failed=1 skipped=63 rescued=0 ignored=1     Run the Ansible play again once the underlying issue has been resolved.\n"
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/troubleshoot_cfs_session_failing_to_complete/",
	"title": "Troubleshoot CFS Session Failing To Complete",
	"tags": [],
	"description": "",
	"content": "Troubleshoot CFS Session Failing to Complete Troubleshoot issues where Configuration Framework Service (CFS) sessions/pods fail and Ansible hangs. These issues can be resolved by modifying Ansible to produce less output.\nPrerequisites A CFS session or pod is failing to complete, and the Ansible logs are not showing progress or completion.\nThe following is an example of the error causing Ansible to hang:\nPLAY [Compute] ***************************************************************** META: ran handlers META: ran handlers META: ran handlers PLAY [Compute] ***************************************************************** Using module file /usr/lib/python3.6/site-packages/ansible/modules/system/setup.py Pipelining is enabled. \u0026lt;x5000c3s3b0n1\u0026gt; ESTABLISH SSH CONNECTION FOR USER: root \u0026lt;x5000c3s3b0n1\u0026gt; SSH: EXEC ssh -vvv -o ServerAliveInterval=30 -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o \u0026#39;IdentityFile=\u0026#34;/secret/key\u0026#34;\u0026#39; -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o \u0026#39;User=\u0026#34;root\u0026#34;\u0026#39; -o ConnectTimeout=10 -o ControlPath=/root/.ansible/cp/f6f378183d x5000c3s3b0n1 \u0026#39;/bin/sh -c \u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39;/usr/bin/python3 \u0026amp;\u0026amp; sleep 0\u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39;\u0026#39; Procedure The steps in this procedure are independent from each other and are used to troubleshoot different underlying problems that both present a similar symptom.\n  Reduce the amount of output produced by Ansible.\nAny of the following steps can be taken to help reduce the output generated by Ansible:\n  Reduce the verbosity when running Ansible commands.\nIf the session was created with a higher value of \u0026ndash;ansible-verbosity (three or higher), Ansible can generate a lot of output that can cause the pod to hang. Reducing the verbosity by one or more may resolve this issue.\n  Update the Ansible configuration to produce less output.\nSee Enable Ansible Profiling for an example of modifying the configuration.\n  Adjust the use of flags used when running Ansible commands.\nThe display_ok_hosts and display_skipped_hosts are examples of settings that can be disabled to reduce output. Refer to the Ansible documentation for more information on what flags can be used.\n    "
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/configuration_management_of_system_components/",
	"title": "Configuration Management Of System Components",
	"tags": [],
	"description": "",
	"content": "Configuration Management of System Components The configuration of individual system components is managed with the cray cfs components command. The Configuration Framework Service (CFS) contains a database of the configuration state of available hardware known to the Hardware State Manager (HSM). When new nodes are added to the HSM database, a CFS Hardware Sync Agent enters the component into the CFS database with a null state of configuration.\nAdministrators are able to set a desired CFS configuration for each component, and the CFS Batcher ensures the desired configuration state and the current configuration state match.\nAutomatic Configuration Whenever CFS detects that the desired configuration does not match the current configuration state, CFS Batcher will automatically start a CFS session to apply the necessary configuration. See Configuration Management with CFS Batcher for more information.\nThere are several situations that will cause automatic configuration:\n When rebooted, components that have the cfs-state-reporter package installed will register a null current configuration, resulting in a full configuration. When a configuration is updated, all components with that desired configuration will automatically get updates for the layers of the configuration that have changed. If a configuration is only partially applied because of a previous failed configuration session and the component has not exceeded its maximum retries, it will be configured with any layers of the configurations that have not yet been successfully applied. When a user manually resets the configuration state of a component, it will force reconfiguration without rebooting a node. If a manual CFS session applies a version of a playbook that conflicts with the version in the desired configuration, CFS will re-apply the desired version after the manual session is completed. Any other situation that causes the desired state to not match with the current state of a component will trigger automatic configuration. CFS only tracks the current state of components as they are configured by CFS sessions. It does not track configuration state created or modified by other tooling on the system.  View Component Configuration Configuration status of a given component (using the component name (xname)) is available through the cray cfs components describe command. The following fields are provided to determine the status and state of the component:\n  configurationStatus\nThe status of the component\u0026rsquo;s configuration. Valid status values are unconfigured, failed, pending, and configured.\n  desiredConfig\nThe CFS configurations entry assigned to this component.\n  enabled\nIndicates whether the component will be configured by CFS or not.\n  errorCount\nThe number of times configuration sessions have failed to configure this component.\n  retryPolicy\nThe number of times the configuration will be attempted if it fails. If errorCount \u0026gt;= retryPolicy, CFS will not continue attempts to apply the desiredConfig.\n  state\nThe list of configuration layers that have been applied to the component from the desiredConfig.\n  To view the configuration state of a given component, use the describe command for a given component name (xname):\nncn# cray cfs components describe XNAME --format json Example output:\n{ \u0026#34;configurationStatus\u0026#34;: \u0026#34;configured\u0026#34;, \u0026#34;desiredConfig\u0026#34;: \u0026#34;configurations-example\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;errorCount\u0026#34;: 0, \u0026#34;id\u0026#34;: \u0026#34;x3000c0s13b0n0\u0026#34;, \u0026#34;retryPolicy\u0026#34;: 3, \u0026#34;state\u0026#34;: [ { \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/example.git\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;f6a2727a70fdd6d95df6ad9c883188e694d5b37f\u0026#34;, \u0026#34;lastUpdated\u0026#34;: \u0026#34;2021-07-28T03:26:00Z\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;site.yml\u0026#34;, \u0026#34;sessionName\u0026#34;: \u0026#34;batcher-6c95df62-2fe3-451b-8cc5-21d3cf748f83\u0026#34; }, { \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/another-example.git\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;282a9bfbf802d7b5c4d9bb5549b6e77957ec37f0\u0026#34;, \u0026#34;lastUpdated\u0026#34;: \u0026#34;2021-07-28T03:26:10Z\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;ncn.yml\u0026#34;, \u0026#34;sessionName\u0026#34;: \u0026#34;batcher-6c95df62-2fe3-451b-8cc5-21d3cf748f83\u0026#34; } ] } When a layer fails to configure, CFS will append a _failed status to the commit field. CFS Batcher will continue to attempt to configure this component with this configuration layer unless the errorCount has reached the retryPolicy limit.\n{ \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/another-example.git\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;282a9bfbf802d7b5c4d9bb5549b6e77957ec37f0_failed\u0026#34;, \u0026#34;lastUpdated\u0026#34;: \u0026#34;2021-07-28T03:26:20\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;ncn.yml\u0026#34;, \u0026#34;sessionName\u0026#34;: \u0026#34;batcher-74f83dad-9f90-4f5e-bf45-0498ffde8795\u0026#34; } In the event that a playbook is specified in the configuration that does not apply to the specific component, CFS will append _skipped to the commit field.\n{ \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/another-example.git\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;a8b132fa5ca04cbe1716501d7be38d9b34532a44_skipped\u0026#34;, \u0026#34;lastUpdated\u0026#34;: \u0026#34;2021-07-28T03:26:30\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;site.yml\u0026#34;, \u0026#34;sessionName\u0026#34;: \u0026#34;batcher-e3152e08-77df-4719-9b15-4fd5ad696730\u0026#34; } If a playbook exits early because of the Ansible any_errors_fatal setting, CFS will append _incomplete to the commit field for all components that did not cause the failure. This situation would most likely occur only when using an Ansible linear playbook execution strategy.\n{ \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/another-example.git\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;282a9bfbf802d7b5c4d9bb5549b6e77957ec37f0_incomplete\u0026#34;, \u0026#34;lastUpdated\u0026#34;: \u0026#34;2021-07-28T03:26:40\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;site.yml\u0026#34;, \u0026#34;sessionName\u0026#34;: \u0026#34;batcher-6c95df62-2fe3-451b-8cc5-21d3cf748f83\u0026#34; } Force Component Reconfiguration To force a component which has a specific desiredConfig to a different configuration, use the update subcommand to change the configuration:\nncn# cray cfs components update XNAME --desired-config new-config  IMPORTANT: Ensure that the new configuration has been created with the cray cfs configurations update new-config command before assigning the configuration to any components.\n To force a component to retry its configuration again after it failed, change the errorCount to less than the retryPolicy, or raise the retryPolicy. If the errorCount has not reached the retry limit, CFS will automatically keep attempting the configuration and no action is required.\nncn# cray cfs components update XNAME --error-count 0 Disable Component Configuration To disable CFS configuration of a component, use the --enabled option:\n WARNING: When a node reboots and the state-reporter reports in to CFS, it will automatically enable configuration. The following command only disables configuration until a node reboots.\n ncn# cray cfs components update XNAME --enabled false Use --enabled true to re-enable the component.\n"
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/configuration_management_with_the_cfs_batcher/",
	"title": "Configuration Management With The CFS Batcher",
	"tags": [],
	"description": "",
	"content": "Configuration Management with the CFS Batcher Creating configuration sessions with the Configuration Framework Service (CFS) enables remote execution for configuring live nodes and boot images prior to booting. CFS also provides its Batcher component for configuration management of registered system components. The CFS Batcher periodically examines the aggregated configuration state of registered components and schedules CFS sessions against those that have not been configured to their desired state. The frequency of scheduling, the maximum number of components to schedule in the same CFS session, and the expiration time for scheduling less than full sessions are configurable.\nThe CFS-Batcher schedules CFS sessions according to the following rules:\n Components are assigned to a batch if they need configuration, are not disabled, and are currently not assigned to a batch.  Components are grouped according to their desired state information. A new batch is created if no partial batches match the desired state, and all similar batches are full.   Batches are scheduled as CFS sessions when the batch is full or the batch window time has been exceeded.  The timer for the batch window is started when the first component is added, and is never reset. Nodes should never wait more than the window period between being ready for configuration and being scheduled in a CFS session.   CFS cannot guarantee that jobs for similar batches will start at the same time, even if all CFS sessions are created at the same time. This variability is due to the nature of Kubernetes scheduling.  Checking the start time for the CFS session is more accurate than checking the pod start time when determining when a batch was scheduled.    There are two safety mechanisms built into the Batcher scheduling that can delay batches more than the usual amount of time. Both mechanisms are indicated in the logs:\n CFS Batcher will not schedule multiple sessions to configure the same component. Batcher monitors on-going sessions that it started so that if one session is started and the desired configuration changes, Batcher can wait until the initial session is completed before scheduling the component with the new configuration to a new session.  If Batcher is restarted, it will attempt to rebuild its state based on sessions with the \u0026ldquo;batcher-\u0026rdquo; naming scheme that are still in progress. This ensures that scheduling conflicts will not occur even if Batcher is restarted. On restart, some information on the in-flight sessions is lost, so this wait ensures that the Batcher does not schedule multiple configuration sessions for the same component at the same time.   If several CFS sessions that are created by the Batcher Agent fail in a row (the most recent 20 sessions), Batcher will start throttling the creation of new sessions.  The throttling is automatically reset if a single session succeeds. Users can also manually reset this by restarting Batcher. The back-off is increased if new sessions continue to fail. This helps protect against cases where high numbers of retries are allowed so that Batcher cannot flood Kubernetes with new jobs in a short period of time.    Configure Batcher Several Batcher behaviors are configurable. All of the Batcher configuration is available through the CFS options:\n# cray cfs options list | grep -i batch Example output:\nbatchSize = 25 batchWindow = 60 batcherCheckInterval = 10 defaultBatcherRetryPolicy = 3 See CFS Global Options for more information. Use the cray cfs options update command to change these values as needed.\nReview the following information about CFS Batcher options before changing the defaults. Setting these to non-optimal values may affect system performance. The optimal values will depend on system size and the specifics of the configuration layers that will be applied in the sessions created by CFS Batcher.\n  batchSize\nThis option determines the maximum number of components that will be included in each session created by CFS Batcher.\nThe default value is 25 components per session.\n WARNING: Increasing this value will result in fewer batcher-created sessions, but will also require more resources for Ansible Execution Environment (AEE) containers to do the configuration.\n   batchWindow\nThis option sets the number of seconds that CFS batcher will wait before scheduling a CFS session when the number of components needing configuration has not reached the batchSize limit. CFS Batcher will immediately create a session when the batchSize limit is reached. However, in the case where there are few components or long periods of time between components notifying CFS Batcher of the need for configuration, the batchWindow will time-box the creation of sessions so no component needs to wait for the queue to fill.\nThe default value is 60 seconds.\n WARNING: Lower values will cause CFS Batcher to be more responsive to creating sessions, but values too low may result in degraded performance of both the CFS APIs as well as the overall system.\n   batcherCheckInterval\nThis option sets how often CFS batcher checks for components waiting to be configured. This value must be lower than batchWindow value.\nThe default value is 10 seconds.\n WARNING: Lower values will cause CFS Batcher to be more responsive to creating sessions, but values too low may result in degraded performance of the CFS APIs on larger systems.\n   defaultBatcherRetryPolicy\nWhen a component (node) requiring configuration fails to configure from a previous configuration session launched by CFS Batcher, the error is logged. defaultBatcherRetryPolicy is the maximum number of failed configurations allowed per component before CFS Batcher will stop attempts to configure the component.\nThis value can be overridden on a per component basis.\n  List CFS Batcher Sessions The CFS Batcher prepends all CFS session names it creates with batcher-. Sessions that have be created by CFS Batcher are found by using the following command with the --name-contains option:\n# cray cfs sessions list --name-contains batcher- To list the batcher sessions that are currently running, filter with the cray cfs sessions list command options:\n# cray cfs sessions list --name-contains batcher- --status running Use the cray cfs sessions list --help command output for all filtering options, including session age, tags, status, and success.\nMap CFS Batcher Sessions to BOS Sessions To find all of the sessions created by the CFS Batcher because of configuration requests made by a specific Boot Orchestration Service (BOS) session, filter the sessions by the name of the BOS session, which is added as a tag on the sessions. The BOS session ID is required to run the following command.\n# cray cfs sessions list --tags bos_session=BOS_SESSION_ID "
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/configuration_sessions/",
	"title": "Configuration Sessions",
	"tags": [],
	"description": "",
	"content": "Configuration Sessions Once configurations have been created with the required layers and values set in the configuration repositories (or the additional inventory repository), create a Configuration Framework Session (CFS) session to apply the configuration to the targets.\nSessions are created via the Cray CLI or through the CFS REST API. A session stages Ansible inventory (whether dynamic, static, or image customization), launches Ansible Execution Environments (AEE) in order for each configuration layer in the service mesh, tears down the environments as required, and reports the session status to the CFS API.\nWhen a session target is an Image Management Service (IMS) image ID for the purposes of pre-boot image customization, the CFS session workflow varies slightly. The inventory staging instead calls IMS to expose the requested image root(s) via SSH. After the AEE(s) finish applying the configuration layers, CFS then instructs IMS to tear down the image root environment and package up the resultant image and records the new image ID in the session metadata.\nSession Naming Conventions CFS follows the same naming conventions for session names as Kubernetes does for jobs. Session names must follow the Kubernetes naming conventions and are limited to 45 characters.\nRefer to the external Kubernetes naming conventions documentation for more information.\nConfiguration Session Filters CFS provides several filters for use when listing sessions or using the bulk delete option. These following filters are available:\n  --status: Session status options include pending, running, and complete.\n  --succeeded: If the session has not yet completed, this will be set to none. Otherwise, this will be set to true, false, or unknown in the event that CFS was unable to find the Kubernetes job associated with the session.\n  --min-age/--max-age: Returns only the sessions that fall within the given age. For example, --max-age could be used to list only the recent sessions, or --min-age could be used to find old sessions for cleanup. Age is given in the format \u0026ldquo;1d\u0026rdquo; for days, or \u0026ldquo;6h\u0026rdquo; for hours.\n  --tags: Sessions can be created with searchable tags. By default, this includes the bos_session tag when CFS is triggered by BOS. This can be searched using the following command:\nncn-m001# cray cfs sessions list --tags bos_session=BOS_SESSION_NAME   Configuration Session Workflow CFS progresses through a session by running a series of commands in containers located in a Kubernetes job pod. Four container types are present in the job pod which pertain to CFS session setup, execution, and teardown:\n  git-clone-*\nThese init containers are responsible for cloning the configuration repository and checking out the branch/commit specified in each configuration layer.\nThese containers are run in the same order as the layers are specified, and their names are indexed appropriately: git-clone-0, git-clone-1, and so on.\n  git-clone-hosts\nThis init container clones the repository specified in the parameter additionalInventoryUrl, if specified.\n  inventory\nThis container is responsible for generating the dynamic inventory or for communicating to IMS to stage boot image roots that need to be made available via SSH when the session --target-definition is image.\n  ansible-*\nThese containers run the AEE after CFS injects the inventory and Git repository content from previous containers. One container is executed for each configuration layer specified.\nThese containers are run in the same order as the layers are specified, and their names are indexed appropriately: ansible-0, ansible-1, and so on.\n  teardown\nThis container waits for the last ansible-* to complete and subsequently calls IMS to package up customized image roots. The container only exists when the session --target-definition is image.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/create_a_cfs_configuration/",
	"title": "Create A CFS Configuration",
	"tags": [],
	"description": "",
	"content": "Create a CFS Configuration Create a Configuration Framework Service (CFS) configuration, which contains an ordered list of layers. Each layer is defined by a Git repository clone URL, a Git commit, a name, and the path in the repository to an Ansible playbook to execute.\nPrerequisites  The Cray command line interface (CLI) tool is initialized and configured on the system.  Procedure   Create a JSON file to hold data about the CFS configuration.\nncn# cat configurations-example.json Example configuration:\n{ \u0026#34;layers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;configurations-layer-example-1\u0026#34;, \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/example-repo.git\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;site.yml\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;\u0026lt;git commit id\u0026gt;\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;configurations-layer-example-2\u0026#34;, \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/example-repo2.git\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;site.yml\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;\u0026lt;git commit id\u0026gt;\u0026#34; }, # { ... add more configuration layers here, if needed ... } ] }   Add the configuration to CFS with the JSON file.\nncn# cray cfs configurations update configurations-example \\ --file ./configurations-example.json --format json Example output:\n{ \u0026#34;lastUpdated\u0026#34;: \u0026#34;2021-07-28T03:26:00:37Z\u0026#34;, \u0026#34;layers\u0026#34;: [ ... ], \u0026#34;name\u0026#34;: \u0026#34;configurations-example\u0026#34; }   "
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/create_a_cfs_session_with_dynamic_inventory/",
	"title": "Create A CFS Session With Dynamic Inventory",
	"tags": [],
	"description": "",
	"content": "Create a CFS Session with Dynamic Inventory A Configuration Framework Service (CFS) session using dynamic inventory is used to configure live nodes. To create a CFS session using the default dynamic inventory, simply provide a session name and the name of the configuration to apply:\nncn# cray cfs sessions create --name example \\ --configuration-name configurations-example Example output:\n{ \u0026#34;ansible\u0026#34;: { \u0026#34;config\u0026#34;: \u0026#34;cfs-default-ansible-cfg\u0026#34;, \u0026#34;limit\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;verbosity\u0026#34;: 0 }, \u0026#34;configuration\u0026#34;: { \u0026#34;limit\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;configurations-example\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;example\u0026#34;, \u0026#34;status\u0026#34;: { \u0026#34;artifacts\u0026#34;: [], \u0026#34;session\u0026#34;: { \u0026#34;status\u0026#34;: \u0026#34;pending\u0026#34;, \u0026#34;succeeded\u0026#34;: \u0026#34;none\u0026#34; } }, \u0026#34;tags\u0026#34;: {}, \u0026#34;target\u0026#34;: { \u0026#34;definition\u0026#34;: \u0026#34;dynamic\u0026#34;, \u0026#34;groups\u0026#34;: null } } Add the --target-definition dynamic parameter to the create command to explicitly define the inventory type to be dynamic. This will enable CFS to provide the Ansible host groups via its dynamic inventory. The individual Ansible playbooks specified in the configuration layers will decide which hosts and/or groups will have configuration applied to them.\n"
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/create_an_image_customization_cfs_session/",
	"title": "Create An Image Customization CFS Session",
	"tags": [],
	"description": "",
	"content": "Create an Image Customization CFS Session A configuration session that is meant to customize image roots tracked by the Image Management Service (IMS) can be created using the --target-definition image option. This option will instruct the Configuration Framework Service (CFS) to prepare the image IDs specified and assign them to the groups specified in Ansible inventory. IMS will then provide SSH connection information to each image root that CFS will use to configure Ansible.\nAlong with the --target-definition option, users must also provide the --target-group option. This option can be provided multiple times, and allows users to specify the Ansible inventory by creating multiple groups within the inventory and the image(s) that should be in each group. It is important to note that users provide the entire inventory when using image customization, and groups that are not specified will not be included, even if they appear in other CFS inventory types, such as dynamic inventory. For more information on what it means to provide the inventory, see Specifying Hosts and Groups.\nUsers can expect that staging the image and generating an inventory will be a longer process than creating a session with other target definitions (for example, inventories). Tearing down the configuration session will also require additional time while IMS packages up the image build artifacts and uploads them to the artifact repository.\n Check if image is registered with IMS Create CFS image customization session Retrieve the resultant image ID  Check if image is registered with IMS In order to use the image target definition, an image must be registered with the IMS.\nFor example, if the image ID is 5d64c8b2-4f0e-4b2e-b334-51daba16b7fb, then use jq along with the CLI --format json output option to determine if the image ID is known to IMS:\nncn-mw# cray ims images list --format json | jq -r \u0026#39;any(.[]; .id == \u0026#34;5d64c8b2-4f0e-4b2e-b334-51daba16b7fb\u0026#34;)\u0026#39; Example output:\ntrue Create CFS image customization session To create a CFS session for image customization, provide a session name, the name of the configuration to apply, and the group/image ID mapping:\n WARNING: If a CFS session is created with an ID that is not known to IMS, then CFS will not fail and will instead wait for the image ID to become available in IMS.\n ncn-mw# cray cfs sessions create --name example \\  --configuration-name configurations-example \\  --target-definition image --format json \\  --target-group Compute IMS_IMAGE_ID Example output:\n{ \u0026#34;ansible\u0026#34;: { \u0026#34;config\u0026#34;: \u0026#34;cfs-default-ansible-cfg\u0026#34;, \u0026#34;limit\u0026#34;: null, \u0026#34;verbosity\u0026#34;: 0 }, \u0026#34;configuration\u0026#34;: { \u0026#34;limit\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;configurations-example\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;example\u0026#34;, \u0026#34;status\u0026#34;: { \u0026#34;artifacts\u0026#34;: [], \u0026#34;session\u0026#34;: { \u0026#34;status\u0026#34;: \u0026#34;pending\u0026#34;, \u0026#34;succeeded\u0026#34;: \u0026#34;none\u0026#34; } }, \u0026#34;tags\u0026#34;: {}, \u0026#34;target\u0026#34;: { \u0026#34;definition\u0026#34;: \u0026#34;image\u0026#34;, \u0026#34;groups\u0026#34;: [ { \u0026#34;members\u0026#34;: [ \u0026#34;\u0026lt;IMS IMAGE ID\u0026gt;\u0026#34; ], \u0026#34;name\u0026#34;: \u0026#34;Compute\u0026#34; } ] } } Retrieve the resultant image ID When an image customization CFS session is complete, use the CFS describe command to show the IMS image ID that results from the applied configuration:\nncn-mw# cray cfs sessions describe example --format json | jq .status.artifacts Example output:\n[ { \u0026#34;image_id\u0026#34;: \u0026#34;\u0026lt;IMS IMAGE ID\u0026gt;\u0026#34;, \u0026#34;result_id\u0026#34;: \u0026#34;\u0026lt;RESULTANT IMS IMAGE ID\u0026gt;\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;ims_customized_image\u0026#34; } ] This resultant image ID can be used to be further customized pre-boot, or if it is ready, in a Boot Orchestration Service (BOS) boot session template.\n"
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/create_and_populate_a_vcs_configuration_repository/",
	"title": "Create And Populate A Vcs Configuration Repository",
	"tags": [],
	"description": "",
	"content": "Create and Populate a VCS Configuration Repository Create a new repository in the VCS and populate it with content for site customizations in a custom Configuration Framework Service (CFS) configuration layer.\nPrerequisites  The Version Control Service (VCS) login credentials for the crayvcs user are set up. See the \u0026ldquo;VCS Administrative User\u0026rdquo; heading in Version Control Service (VCS) for more information.  Procedure   Create the empty repository in VCS.\nReplace the CRAYVCS_PASSWORD value in the following command before running it.\nncn# curl -X POST https://api-gw-service-nmn.local/vcs/api/v1/org/cray/repos \\ -d \u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;NEW_REPO\u0026#34;, \u0026#34;private\u0026#34;: true}\u0026#39; -u crayvcs:CRAYVCS_PASSWORD \\ -H \u0026#34;Content-Type: application/json\u0026#34;   Clone the empty VCS repository.\nncn# git clone https://api-gw-service-nmn.local/vcs/cray/NEW_REPO.git   Change to the directory of the empty Git repository and populate it with content.\nncn# cd NEW_REPO ncn# cp -a ~/user/EXAMPLE-config-management/* .   Add the new content, commit it, and push it to VCS.\nThe following command will move the content to the master branch of the repository.\nncn# git add --all \u0026amp;\u0026amp; git commit -m \u0026#34;Initial config\u0026#34; \u0026amp;\u0026amp; git push   Retrieve the Git hash for the CFS layer definition.\nncn# git rev-parse --verify HEAD   "
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/customize_configuration_values/",
	"title": "Customize Configuration Values",
	"tags": [],
	"description": "",
	"content": "Customize Configuration Values In general, most systems will require some customization from the default values provided by HPE Cray products. As stated in the previous section, these changes cannot be made on the pristine product branches that are imported during product installation and upgrades. Changes can only be made in Git branches that are based on the pristine branches.\nChanging or overriding default values should be done in accordance with Ansible best practices (see the external Ansible best practices guide) and variable precedence (see the external Ansible variable guide) in mind.\nThe following practices should also be followed:\n When it is necessary to add more functionality beyond an Ansible playbook provided by an HPE Cray product, include the product playbook in a new playbook instead of modifying it directly. Any modifications to a product playbook will result in a merge being required during a product upgrade. Do not modify default Ansible role variables, override all values using inventory (group_vars and host_vars directories). Cray products do not import any content to inventory locations, so merges of new product content will not cause conflicts if variables are located in inventory. Do not put any sensitive or secret information, such as passwords, in the Git repository. These values should be pulled during runtime from an external key management system.  Handling Sensitive Information Passwords and other sensitive content should not be stored in a Version Control Service (VCS) repository. Instead, consider writing Ansible tasks/roles that pull the value in dynamically while the playbook is running from an external secrets management system.\nAt this time, the Ansible Vault is not supported by the Configuration Framework Service (CFS).\nExample: Override a Role Default Value To override a value that is defined in an Ansible role in a configuration repository, set the value in the Ansible inventory. If the override pertains to an entire Ansible group of nodes, create a file as follows:\n  Clone the configuration repository.\n  Checkout the branch that will include the change, or create a new branch.\n  Capture the variable name in the roles/[role name]/defaults/main.yml file.\n  Create a new directory and edit a file with the role name.\nncn# mkdir -p group_vars/all \u0026amp;\u0026amp; touch group_vars/all/[role name].yml   Set the variable to a new value in the file.\nncn# echo \u0026#39;[variable name]: [new variable value]\u0026#39; \u0026gt;\u0026gt; group_vars/all/[role name].yml   Stage the file in the Git branch, commit it, and promote the change.\n  This change will be applied to all nodes by using the group name all. To narrow the variable scope to a specific group (Compute for example), use the group name instead of all as follows:\nncn# mkdir -p group_vars/Compute \u0026amp;\u0026amp; touch group_vars/Compute/[role name].yml ncn# echo \u0026#39;[variable name]: [new variable value]\u0026#39; \u0026gt;\u0026gt; group_vars/Compute/[role name].yml To narrow the variable scope to a single node create the file in the host_vars/[node xname]/[role name].yaml and override the value.\nThe name of the created file is largely inconsequential. The identified best practice is to include the name of the role in the created file for reasons of maintainability and discoverability. However, be aware that the file name matters when multiple files in the same directory contain the same variable with different values. In that case, use a single all.yml file rather than a directory, or use files names with import ordering in mind. See the external Ansible documentation for more information on how variables precedence is handled.\nTo override role variables for roles that exist across multiple repositories, consider using the CFS Additional Inventory feature. See Manage Multiple Inventories in a Single Location.\nExample: Add or Remove Functionality to a Provided Playbook To add more functionality to a playbook provided by a configuration repository, it is considered best practice to leave the existing playbook unmodified (if possible) to not have merge conflicts when new versions of the playbook are installed. For instance, if a site.yml playbook needs to be extended with a custom site-custom.yml playbook, consider creating a new playbook that imports and runs them both. For example, the site-all.yml playbook.\nncn# cat site-all.yml - import_playbook: site.yml - import_playbook: site-custom.yml See the external Ansible documentation on re-using playbooks.\nTo remove a role from a provided playbook, the best practice is to determine if the role provides a variable to skip the roles tasks altogether. See the roles/[role name]/README file for a listing of the role variables.\nIf changes to role variables are not able to skip the role, the role may be commented out in the playbook. However, note that an upgrade to the configuration will result in a merge conflict because of the changes made in the playbook if the upgrade pristine branch is merged with the branch containing the commented playbook.\n"
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/delete_cfs_sessions/",
	"title": "Delete CFS Sessions",
	"tags": [],
	"description": "",
	"content": "Delete CFS Sessions Delete an existing Configuration Framework Service (CFS) configuration session with the CFS delete command.\nPrerequisites This requires that the Cray command line interface is configured. See Configure the Cray Command Line Interface.\nDelete single CFS session Use the session name to delete the session:\nncn# cray cfs sessions delete \u0026lt;session_name\u0026gt; No output is expected.\nDelete multiple CFS sessions To delete all completed CFS sessions, use the deleteall command.\nncn# cray cfs sessions deleteall This command can also filter the sessions to delete based on tags, name, status, age, and success or failure. By default, if no other filter is specified, this command only deletes completed sessions.\nDelete old CFS sessions automatically Completed CFS sessions can be automatically deleted based on age. See the Automatic Session Deletion with sessionTTL section.\n"
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/ansible_execution_environments/",
	"title": "Ansible Execution Environments",
	"tags": [],
	"description": "",
	"content": "Ansible Execution Environments Configuration Framework Service (CFS) sessions are comprised of a single Kubernetes pod with several containers. Inventory and Git clone setup containers run first, and a teardown container runs last (if the session is running an image customization).\nThe containers that run the Ansible code cloned from the Git repositories in the configuration layers are Ansible Execution Environments (AEE). The AEE is provided as a SLES-based docker image, which includes Ansible version 2.9.11 installed using Python 3.6. In addition to the base Ansible installation, CFS also includes several Ansible modules and plug-ins that are required for CFS and Ansible to work properly on the system.\nThe following modules and plug-ins are available:\n  cfs_aggregator.py Callback Plug-in\nThis callback plug-in is included to relay playbook execution results back to CFS for the purpose of tracking session status and component state.\n WARNING: This plug-in is required for CFS to function properly and must not be removed from the ansible.cfg file.\n   cfs_linear and cfs_free Strategy Plug-ins\nCFS provides two strategy plug-ins, cfs_linear and cfs_free, which should be used in place of the stock Ansible free and linear playbook execution strategies.\nFor more information about Ansible strategies, see the external Ansible playbook strategies documentation.\n  shasta_s3_cred.py Module\nThis module is provided to obtain access to S3 credentials stored in Kubernetes secrets in the cluster, specifically secrets with names such as \u0026lt;service\u0026gt;-s3-credentials.\nAn example of using this module is as follows:\n- name: Retrieve credentials from abc-s3-credentials k8s secret shasta_s3_creds: k8s_secret: abc-s3-credentials k8s_namespace: services register: creds no_log: true The access key is available at \u0026ldquo;{{ creds.access_key }}\u0026rdquo; and the secret key is at \u0026ldquo;{{ creds.secret_key }}\u0026rdquo;.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/ansible_inventory/",
	"title": "Ansible Inventory",
	"tags": [],
	"description": "",
	"content": "Ansible Inventory The Configuration Framework Service (CFS) provides several options for targeting nodes or boot images for configuration by Ansible. The contents of the Ansible inventory determine which nodes are available for configuration in each CFS session and how default configuration values can be customized. For more information on what it means to define an inventory, see Specifying Hosts and Groups.\nThe following are the inventory options provided by CFS:\n Dynamic inventory Static inventory Image customization  Dynamic inventory and host groups Dynamic inventory is the default inventory when creating a CFS session. CFS automatically generates an Ansible hosts file with data provided by the Hardware State Manager (HSM) when using a dynamic inventory. CFS automatically generates Ansible hosts groups for each group defined in HSM and creates Ansible host groups for nodes based on hardware roles and sub-roles.\nRetrieve a list of HSM groups with the following command:\nncn-mw# cray hsm groups list --format json | jq .[].label These groups can be referenced in Ansible plays or when creating a CFS session directly.\nHardware roles and sub-roles are available as \u0026lt;Role\u0026gt; and \u0026lt;Role\u0026gt;_\u0026lt;Subrole\u0026gt; Ansible host groups. For instance, if targeting just the nodes with the Application role, the host group name is Application. If targeting just the sub-role UAN, which is a sub-role of the Application role, the host group name provided by CFS is Application_UAN. See HSM Roles and Subroles for more information.\nConsult the cray-hms-base-config Kubernetes ConfigMap in the services namespace for a listing of the available roles and sub-roles on the system.\nDuring a CFS session, the dynamic inventory is generated and placed in the hosts/01-cfs-generated.yaml file, relative to the configuration management repository root defined in the current configuration layer. Refer to the external Ansible Inventory documentation for more information about managing inventory, as well as variable precedence within multiple inventory files.\nCFS prefixes its dynamic inventory file with 01- so that its variables can be easily overridden as needed because Ansible reads inventory files in lexicographic order.\nStatic inventory It is also possible for users to bypass HSM and specify their own hosts and groups using a static inventory file. This replaces the dynamic inventory, so each host and group that is going to be targeted must be listed in an inventory file by the user. This approach is useful for testing configuration changes on a small scale.\nCreate a static inventory file in a hosts directory at the root of the configuration management repository in Ansible INI format. For example, create it in a branch and persist the changes.\nIn the following example, this is done for a single node in static inventory:\nncn# mkdir -p hosts; cd hosts; cat \u0026gt; static \u0026lt;\u0026lt;EOF [test_nodes] x3000c0s25b0n0 EOF ncn# cd ..; git add hosts/static ncn# git commit -m \u0026#34;Added a single test node to static inventory\u0026#34; ncn# git push The process can be used to include any nodes in the system reachable over the Node Management Network (NMN), which contains the public SSH key pair provisioned by the install process. This inventory information will only be located in the repository to which it is added. If the desired configuration contains multiple layers, use the additionalInventoryUrl option in CFS to provide inventory information on a per-session level instead of a per-repository level. Refer to Manage Multiple Inventories in a Single Location for more information.\nImage customization Inventory for image customization is also provided by the user. This type of configuration session does not target live nodes, so HSM has no knowledge of either the host or the groups it belongs to. Instead, when creating a configuration session meant to customize a boot image, the Image Management Service (IMS) image IDs are used as hosts and grouped according to user input to the session creation.\nSee Create an Image Customization CFS Session for more information.\n"
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/automatic_session_deletion_with_sessionttl/",
	"title": "Automatic Session Deletion With Sessionttl",
	"tags": [],
	"description": "",
	"content": "Automatic Session Deletion with sessionTTL By default, the Configuration Framework Service (CFS) will delete completed CFS sessions whose start date was more than seven days prior. Kubernetes jobs associated with these sessions will also be deleted as part of this process. This is done to ensure that CFS sessions do not accumulate and eventually adversely affect the performance of the Kubernetes cluster.\nFor larger systems or systems that do frequent reboots of nodes that are configured with CFS sessions, this setting may need to be reduced.\n IMPORTANT: The sessionTTL option deletes all completed sessions that meet the TTL criteria, regardless of if they were successful.\n Prerequisites This requires that the Cray command line interface is configured. See Configure the Cray Command Line Interface.\nUpdate sessionTTL Update the sessionTTL using the following command:\nncn# cray cfs options update --session-ttl 24h Example output will contain a line resembling the following:\nsessionTTL = \u0026#34;24h\u0026#34; Disabling sessionTTL To disable the sessionTTL feature, use an empty string as the argument of the --session-ttl flag:\nncn# cray cfs options update --session-ttl \u0026#34;\u0026#34; "
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/cfs_flow_diagrams/",
	"title": "CFS Flow",
	"tags": [],
	"description": "",
	"content": "CFS Flow  Single Session Flow Automated Session Flow  Single Session Flow This section covers the components and actions taken when a user or service creates a session using the CFS sessions endpoint.\n A user creates a CFS configuration. A user creates a CFS session, causing a session record to be created. When a session record is created, the CFS-API also posts an event to a Kafka queue. The CFS-Operator is always monitoring the Kafka queue, and handles events as they come in. The CFS-Operator creates a Kubernetes job for the session in response to a session creation event. The CFS-Operator monitors the Kubernetes job (not the pod) for completion. When the Kubernetes job is complete, the CFS-Operator updates the session record in the CFS-API.  Automated Session Flow This section covers the components and actions taken when a user or service sets a desired configuration for a component, causing automatic configuration to occur.\n A user creates a CFS configuration. A user sets the desired configuration for some number of components. This may immediately trigger configuration if the component is enabled in CFS and the desired configuration has not yet been applied. If that is the case, then skip to step 4. When a node reboots, the CFS-State-Reporter runs on the node, and contacts the CFS-API to enable and clear the state for the current node. This will always trigger the next steps for configuration as long as a desired configuration is set for the node. The CFS-Batcher monitors the CFS-API, periodically querying for enabled components with a pending configuration status. (The status is determined by the API at query time based on the desired and current state of the component). Any components found are placed into batches. The CFS-Batcher calls the CFS-API to create sessions for each batch, using the ansible-limit parameter to limit each session to the components in a batch. The CFS-API creates a session record and session creation event. See Single Session Flow for details. The CFS-Operator monitors for session creation events. See Single Session Flow for details. The CFS-Operator creates a Kubernetes job. See Single Session Flow for details. The Ansible Execution Environment contains a custom Ansible plugin that calls CFS to update the status of all components affected after each play. If the component does not have a configured status due to failure or other reasons, return to step 4.  "
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/cfs_global_options/",
	"title": "CFS Global Options",
	"tags": [],
	"description": "",
	"content": "CFS Global Options The Configuration Framework Service (CFS) provides a global service options endpoint for modifying the base configuration of the service itself.\nView the options with the following command:\nncn# cray cfs options list --format json Example output:\n{ \u0026#34;additionalInventoryUrl\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;batchSize\u0026#34;: 25, \u0026#34;batchWindow\u0026#34;: 60, \u0026#34;batcherCheckInterval\u0026#34;: 10, \u0026#34;defaultAnsibleConfig\u0026#34;: \u0026#34;cfs-default-ansible-cfg\u0026#34;, \u0026#34;defaultBatcherRetryPolicy\u0026#34;: 1, \u0026#34;defaultPlaybook\u0026#34;: \u0026#34;site.yml\u0026#34;, \u0026#34;hardwareSyncInterval\u0026#34;: 10, \u0026#34;sessionTTL\u0026#34;: \u0026#34;7d\u0026#34; } The following are the CFS global options:\n  additionalInventoryUrl\nA Git clone URL to supply additional inventory content to all CFS sessions.\nSee Manage Multiple Inventories in a Single Location for more information.\n  batchSize\nThis option determines the maximum number of components that will be included in each session created by CFS Batcher.\nSee Configuration Management with the CFS Batcher for more information.\n  batchWindow\nThis option sets the number of seconds that CFS batcher will wait before scheduling a CFS session when the number of components needing configuration has not reached the batchSize limit.\nSee Configuration Management with the CFS Batcher for more information.\n  batcherCheckInterval\nThis option sets how often CFS batcher checks for components waiting to be configured. This value must be lower than batchWindow.\nSee Configuration Management with the CFS Batcher for more information.\n  defaultBatcherRetryPolicy\nWhen a component (node) requiring configuration fails to configure from a previous configuration session launched by CFS Batcher, the error is logged. defaultBatcherRetryPolicy is the maximum number of failed configurations allowed per component before CFS Batcher will stop attempts to configure the component.\nSee Configuration Management with the CFS Batcher for more information.\n  defaultAnsibleConfig\nSee Set the ansible.cfg for a Session for more information.\n  defaultPlaybook\nUse this value when no playbook is specified in a configuration layer.\n  hardwareSyncInterval\nThe number of seconds between checks to the Hardware State Manager (HSM) for new hardware additions to the system. When new hardware is registered with HSM, CFS will add it as a component.\nSee Configuration Management of System Components for more information.\n  The default values for all CFS global options can be modified with the cray cfs options update command.\n"
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/cfs_key_management/",
	"title": "CFS Key Management And Permission Denied Errors",
	"tags": [],
	"description": "",
	"content": "CFS Key Management and Permission Denied Errors Configuration Framework Service (CFS) manages its own keys separate from keys for communication between CFS and the components or images that it is configuring. These are separate from the keys used by users and should not need to be managed.\nPermission Denied Errors If Ansible is unable to connect with its target and fails with an Unreachable - Permission denied error, the first place to check is the cfs-state-reporter on the target node.\nEvery booted node should be running a copy of cfs-state-reporter. This service is responsible for pulling down the public key. To check the status of this service, ssh to the node that CFS cannot communicate with, and run systemctl status cfs-state-reporter.\nncn-m001# systemctl status cfs-state-reporter cfs-state-reporter should be complete, but report success. Any other state can be an indication of a problem.\n● cfs-state-reporter.service - cfs-state-reporter reports configuration level of the system Loaded: loaded (/usr/lib/systemd/system/cfs-state-reporter.service; enabled; vendor preset: disabled) Active: inactive (dead) since Wed 2022-01-19 18:53:45 UTC; 1s ago Process: 678311 ExecStart=/usr/bin/python3 ${MODULEFLAG} ${MODULENAME} (code=exited, status=0/SUCCESS) Main PID: 678311 (code=exited, status=0/SUCCESS) cfs-state-reporter Failed If cfs-state-reporter is complete but has failed, it can safely be restarted with systemctl restart cfs-state-reporter, although any log messages in the status should first be noted in case they are needed for later debugging.\n● cfs-state-reporter.service - cfs-state-reporter reports configuration level of the system Loaded: loaded (/usr/lib/systemd/system/cfs-state-reporter.service; enabled; vendor preset: disabled) Active: failed (Result: exit-code) since Thu 2022-01-13 14:41:57 UTC; 6 days ago Process: 14849 ExecStart=/usr/bin/python3 ${MODULEFLAG} ${MODULENAME} (code=exited, status=1/FAILURE) Main PID: 14849 (code=exited, status=1/FAILURE) cfs-state-reporter Still Running cfs-state-reporter may also still be in a running state. In this case it is likely waiting either to authenticate or to pull down the SSH key. The service can safely be restarted as with the failure case, but this is less likely to be successful.\nIf the log messages indicate problems communicating with Spire, checking the health of the Spire service on the node is the next step. See Troubleshoot Spire Failing to Start on NCNs for more information on troubleshooting Spire.\nIf there are errors indicating failure to communicate with the Boot Script Service (BSS) or the metadata service, check the health of BSS with kubectl -n services logs deployment/cray-bss -c cray-bss and the health of cfs-trust with kubectl -n services logs deployment/cfs-trust -c cfs-trust.\n"
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/change_the_ansible_verbosity_logs/",
	"title": "Change The Ansible VerBOSity Logs",
	"tags": [],
	"description": "",
	"content": "Change the Ansible Verbosity Logs It is useful to view the Ansible logs in a Configuration Framework Session (CFS) session with greater verbosity than the default. CFS sessions are able to set the Ansible verbosity from the command line when the session is created. The verbosity will apply to all configuration layers in the session.\nSpecify an integer using the \u0026ndash;ansible-verbosity option, where 1 = -v, 2 = -vv, and so on. Valid values range from 0 (default) to 4. See the ansible-playbook help for more information.\nIt is not recommended to use level 3 or 4 with sessions that target large numbers of hosts. When using --ansible-verbosity to debug Ansible plays or roles, consider also limiting the session targets with --ansible-limit to reduce log output.\n WARNING: Setting the --ansible-verbosity to 4 can cause CFS sessions to hang for unknown reasons. To correct this issue, reduce the verbosity to 3 or lower, or adjust the usage of the display_ok_hosts and display_skipped_hosts settings in the ansible.cfg file the session is using. Consider also reviewing the Ansible tasks being run and reducing the amount log output from these individual tasks.\n "
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/configuration_layers/",
	"title": "Configuration Layers",
	"tags": [],
	"description": "",
	"content": "Configuration Layers The Configuration Framework Service (CFS) uses configuration layers to specify the location of configuration content that will be applied. Configurations may include one or more layers. Each layer is defined by a Git repository clone URL, a Git commit, a name (optional), and the path in the repository to an Ansible playbook to execute.\nConfigurations with a single layer are useful when testing out a new configuration on targets, or when configuring system components with one product at a time. To fully configure a node or boot image component with all of the software products required, multiple layers can be used to apply all configurations in a single CFS session. When applying layers in a session, CFS runs through the configuration layers serially in the order specified.\nExample Configuration (Single Layer) The following is an example configuration with a single layer. This can be used as a template to create a new configuration JSON file to input to CFS.\nncn# cat configuration-single.json Example configuration:\n{ \u0026#34;layers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;configurations-layer-example-1\u0026#34;, \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/example-repo.git\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;site.yml\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;43ecfa8236bed625b54325ebb70916f55884b3a4\u0026#34; } ] } Example Configuration (Multiple Layers) The following is an example configuration with multiple layers from one or more different configuration repositories. This can be used as a template to create a new configuration JSON file to input to CFS.\nncn# cat configuration-multiple.json Example configuration:\n{ \u0026#34;layers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;configurations-layer-example-1\u0026#34;, \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/example-repo.git\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;site.yml\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;43ecfa8236bed625b54325ebb70916f55884b3a4\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;configurations-layer-example-2\u0026#34;, \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/example-repo.git\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;site-custom.yml\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;43ecfa8236bed625b54325ebb70916f55884b3a4\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;configurations-layer-example-3\u0026#34;, \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/second-example-repo.git\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;site.yml\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;8236bed625b4b3a443ecfa54325ebb70916f5588\u0026#34; } ] } Use Branches in Configuration Layers When defining a configuration layer, the branch or commit values can be used to reference a Git commit. The commit value is the recommended way to reference a Git commit. In the following example, when the configuration is created or updated, CFS will automatically check with VCS to get the commit at the head of the branch. Both the commit and the branch are then stored. The commit acts as normal, and the branch is stored to make future updates to the commit easier.\nncn-m001# cat configurations-example.json Example configuration:\n{ \u0026#34;layers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;configurations-layer-example-1\u0026#34;, \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/example-repo.git\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;site.yml\u0026#34;, \u0026#34;branch\u0026#34;: \u0026#34;main\u0026#34; } ] } ncn-m001# cray cfs configurations update configurations-example \\ --file ./configurations-example.json \\ --format json Example output:\n{ \u0026#34;lastUpdated\u0026#34;: \u0026#34;2021-07-28T03:26:30:37Z\u0026#34;, \u0026#34;layers\u0026#34;: [ { \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/example-repo.git\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;\u0026lt;git commit id\u0026gt;\u0026#34;, \u0026#34;branch\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;configurations-layer-example-1\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;site.yml\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;configurations-example\u0026#34; } If changes are made to a repository and branches are specified in the configuration, users can then use the --update-branches flag to update a configuration so that all commits reflect the latest commit on the branches specified.\nncn-m001# cray cfs configurations update configurations-example --update-branches Example output:\n{ \u0026#34;lastUpdated\u0026#34;: \u0026#34;2021-07-28T03:26:30:37Z\u0026#34;, \u0026#34;layers\u0026#34;: [ { \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/example-repo.git\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;\u0026lt;latest git commit id\u0026gt;\u0026#34;, \u0026#34;branch\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;configurations-layer-example-1\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;site.yml\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;configurations-example\u0026#34; } Manage Configurations Use the cray cfs configurations --help command to manage CFS configurations on the system. The following operations are available:\n list: List all configurations. describe: Display info about a single configuration and its layer(s). update: Create a new configuration or modify an existing configuration. delete: Delete an existing configuration.  "
},
{
	"uri": "/docs-csm/en-12/operations/configuration_management/configuration_management/",
	"title": "Configuration Management",
	"tags": [],
	"description": "",
	"content": "Configuration Management The Configuration Framework Service (CFS) is available on systems for remote execution and configuration management of nodes and boot images. This includes nodes available in the Hardware State Manager (HSM) inventory (compute, management, and application nodes), and boot images hosted by the Image Management Service (IMS).\nCFS configures nodes and images via a gitops methodology. All configuration content is stored in a version control service (VCS), and is managed by authorized system administrators. CFS provides a scalable Ansible Execution Environment (AEE) for the configuration to be applied with flexible inventory and node targeting options.\nUse Cases CFS is available for the following use cases on systems:\n Image customization: Pre-configure bootable images available via IMS. This use case enables partitioning a full configuration of a target node. Non-node-specific settings are applied pre-boot, which reduces the amount of configuration required after a node boots, and therefore reduces the bring-up time for nodes. Post-boot configuration: Fully configure or reconfigure booted nodes in a scalable, performant way to add the required settings. \u0026ldquo;Push-based\u0026rdquo; deployment: When using post-boot configuration with only node-specific configuration data, the target undergoes node personalization. The two-step process of pre-boot image customization and post-boot node personalization results in a fully configured node, optimized for minimal bring-up times. \u0026ldquo;Pull-based\u0026rdquo; deployment: Provide configuration management to nodes by prescribing a desired configuration state and ensuring the current node configuration state matches the desired state automatically. This is achieved via the CFS Hardware Synchronization Agent and the CFS Batcher implementation.  CFS Components CFS is comprised of a group of services and components interacting within the Cray System Management (CSM) service mesh, and provides a means for system administrators to configure nodes and boot images via Ansible. CFS includes the following components:\n A REST API service. A command-line interface (CLI) to the API (via the cray cfs command). Pre-packaged AEE(s) with values tuned for performant configuration for executing Ansible playbooks, and reporting plug-ins for communication with CFS. The CFS Hardware Sync Agent, which pulls in node information from the system inventory to the CFS database to track the node configuration state. The CFS Batcher, which manages the configuration state of system components (nodes).  Although it is not a formal part of the service, CFS integrates with a Gitea instance (VCS) running in the CSM service mesh for management of the configuration content life-cycle.\nHigh-Level Configuration Workflow CFS remotely executes Ansible configuration content on nodes or boot images with the following workflow:\n Creating a configuration with one or more layers within a specific Git repository, and committing it to be executed by Ansible. Targeting a node, boot image, or group of nodes to apply the configuration. Creating a configuration session to apply and track the status of Ansible, applying each configuration layer to the targets specified in the session metadata.  Additionally, configuration management of specific components (nodes) can also be achieved by doing the following:\n Creating a configuration with one or more layers within a specific Git repository, and committing it to be executed by Ansible. Setting the desired configuration state of a node to the prescribed layers. Enabling the CFS Batcher to automatically configure nodes by creating one or more configuration sessions to apply the configuration layer(s).  "
},
{
	"uri": "/docs-csm/en-12/operations/compute_rolling_upgrades/upgrade_compute_nodes_with_crus/",
	"title": "Upgrade Compute Nodes With CRUS",
	"tags": [],
	"description": "",
	"content": "Upgrade Compute Nodes with CRUS Note: CRUS is deprecated in CSM 1.2.0. It will be removed in a future CSM release and replaced with BOS V2, which will provide similar functionality. See Deprecated features.\nUpgrade a set of compute nodes with the Compute Rolling Upgrade Service (CRUS). Manage the workload management status of nodes and quiesce each node before taking the node out of service and upgrading it. Then reboot it into the upgraded state and return it to service within the workload manager (WLM).\nPrerequisites  The Cray command line interface (CLI) tool is initialized and configured on the system. See Configure the Cray Command Line Interface. A Boot Orchestration Service (BOS) session template describing the desired states of the nodes being upgraded must exist.  Procedure   Create and populate the starting node group.\nThis is the group of nodes that will be upgraded.\n  Create a starting node group (starting label).\nLabel names are defined by the user. The names used in this procedure are only examples. The label name used in this example is slurm-nodes.\nncn-mw# cray hsm groups create --label slurm-nodes --description \u0026#39;Starting Node Group for my Compute Node upgrade\u0026#39;   Add members to the group.\nAdd compute nodes to the group by using the component name (xname) for each node being added.\nncn-mw# cray hsm groups members create slurm-nodes --id XNAME --format toml Example output:\n[[results]] URI = \u0026#34;/hsm/v2/groups/slurm-nodes/members/x0c0s28b0n0\u0026#34;     Create a group for upgrading nodes (upgrading label).\nThe label name used in this example is upgrading-nodes.\nncn-mw# cray hsm groups create --label upgrading-nodes --description \u0026#39;Upgrading Node Group for my Compute Node upgrade\u0026#39; Do not add members to this group; it should be empty when the compute rolling upgrade process begins.\n  Create a group for failed nodes (failed label).\nThe label name used in this example is failed-nodes.\nncn-mw# cray hsm groups create --label failed-nodes --description \u0026#39;Failed Node Group for my Compute Node upgrade\u0026#39; Do not add members to this group; it should be empty when the compute rolling upgrade process begins.\n  Create an upgrade session with CRUS.\nThe following example is upgrading 50 nodes per step. The --upgrade-template-id value should be the name of the Boot Orchestration Service (BOS) session template being used to reboot the nodes.\nncn-mw# cray crus session create \\  --starting-label slurm-nodes \\  --upgrading-label upgrading-nodes \\  --failed-label failed-nodes \\  --upgrade-step-size 50 \\  --workload-manager-type slurm \\  --upgrade-template-id=BOS_SESSION_TEMPLATE_NAME \\  --format toml Example output:\napi_version = \u0026#34;1.0.0\u0026#34; completed = false failed_label = \u0026#34;failed-nodes\u0026#34; kind = \u0026#34;ComputeUpgradeSession\u0026#34; messages = [] starting_label = \u0026#34;slurm-nodes\u0026#34; state = \u0026#34;UPDATING\u0026#34; upgrade_id = \u0026#34;e0131663-dbee-47c2-aa5c-13fe9b110242\u0026#34; upgrade_step_size = 50 upgrade_template_id = \u0026#34;boot-template\u0026#34; upgrading_label = \u0026#34;upgrading-nodes\u0026#34; workload_manager_type = \u0026#34;slurm\u0026#34;   Note the upgrade_id in the returned data of the previous command.\nncn-mw# UPGRADE_ID=e0131663-dbee-47c2-aa5c-13fe9b110242   Monitor the status of the upgrade session.\nThe progress of the session through the upgrade process is described in the messages field of the session. This is a list of messages, in chronological order, containing information about stage transitions, step transitions, and other conditions of interest encountered by the session as it progresses. It is cleared once the session completes.\nncn-mw# cray crus session describe $UPGRADE_ID --format toml Example output:\napi_version = \u0026#34;1.0.0\u0026#34; completed = false failed_label = \u0026#34;failed-nodes\u0026#34; kind = \u0026#34;ComputeUpgradeSession\u0026#34; messages = [ \u0026#34;Quiesce requested in step 0: moving to QUIESCING\u0026#34;, \u0026#34;All nodes quiesced in step 0: moving to QUIESCED\u0026#34;, \u0026#34;Began the boot session for step 0: moving to BOOTING\u0026#34;,] starting_label = \u0026#34;slurm-nodes\u0026#34; state = \u0026#34;UPDATING\u0026#34; upgrade_id = \u0026#34;e0131663-dbee-47c2-aa5c-13fe9b110242\u0026#34; upgrade_step_size = 50 upgrade_template_id = \u0026#34;boot-template\u0026#34; upgrading_label = \u0026#34;upgrading-nodes\u0026#34; workload_manager_type = \u0026#34;slurm\u0026#34; A CRUS session goes through a number of steps (approximately the number of nodes to be upgraded divided by the requested step size) to complete an upgrade. Each step moves through the following stages, unless the boot session is interrupted by being deleted.\n Starting - Preparation for the step; CRUS initiates WLM quiescing of nodes. Quiescing - Waits for all WLM nodes in the step to reach a quiesced (not busy) state. Quiesced - The nodes in the step are all quiesced and CRUS initiates booting the nodes into the upgraded environment. Booting - Waits for the boot session to complete. Booted - The boot session has completed. Check the success or failure of the boot session. Mark all nodes in the step as failed if the boot session failed. WLM Waiting - The boot session succeeded. Wait for nodes to reach a ready state in the WLM. All nodes in the step that fail to reach a ready state within 10 minutes of entering this stage are marked as failed. Cleanup - The upgrade step has finished. Clean up resources to prepare for the next step.  When a step moves from one stage to the next, CRUS adds a message to the messages field of the upgrade session to mark the progress.\n  Delete the CRUS upgrade session. (Optional)\nOnce a CRUS upgrade session has completed, it can no longer be used. It can be kept for historical purposes if desired, or it can be deleted.\nncn-mw# cray crus session delete $UPGRADE_ID --format toml Example output:\napi_version = \u0026#34;1.0.0\u0026#34; completed = true failed_label = \u0026#34;failed-nodes\u0026#34; kind = \u0026#34;ComputeUpgradeSession\u0026#34; messages = [ \u0026#34;Upgrade Session Completed\u0026#34;,] starting_label = \u0026#34;slurm-nodes\u0026#34; state = \u0026#34;DELETING\u0026#34; upgrade_id = \u0026#34;e0131663-dbee-47c2-aa5c-13fe9b110242\u0026#34; upgrade_step_size = 50 upgrade_template_id = \u0026#34;boot-template\u0026#34; upgrading_label = \u0026#34;upgrading-nodes\u0026#34; workload_manager_type = \u0026#34;slurm\u0026#34; The session may be visible briefly after it is deleted. This allows for orderly cleanup of the session.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/compute_rolling_upgrades/compute_rolling_upgrades/",
	"title": "Compute Rolling Upgrades",
	"tags": [],
	"description": "",
	"content": "Compute Rolling Upgrades Note: CRUS is deprecated in CSM 1.2.0. It will be removed in a future CSM release and replaced with BOS V2, which will provide similar functionality. See Deprecated features.\nThe Compute Rolling Upgrade Service (CRUS) upgrades sets of compute nodes without requiring an entire set of nodes to be out of service at once. CRUS manages the workload management status of nodes, handling each of the following steps required to upgrade compute nodes:\n Quiesce each node before taking the node out of service. Upgrade the node. Reboot the node into the upgraded state. Return the node to service within its respective workload manager.  CRUS enables administrators to limit the impact on production caused from upgrading compute nodes by working through one step of the upgrade process at a time. The nodes in each step are first taken out of service in the workload manager to prevent work from being scheduled. They are then upgraded, rebooted, and put back into service in the workload manager.\nCRUS is built upon a few basic features of the system:\n The grouping of nodes by label provided by the Hardware State Manager (HSM) groups mechanism. Workload management that can gracefully take nodes out of service (quiesce nodes), declare nodes as failed, and return nodes to service. The Boot Orchestration Service (BOS) and boot session templates.  "
},
{
	"uri": "/docs-csm/en-12/operations/compute_rolling_upgrades/crus_workflow/",
	"title": "CRUS Workflow",
	"tags": [],
	"description": "",
	"content": "CRUS Workflow Note: CRUS is deprecated in CSM 1.2.0. It will be removed in a future CSM release and replaced with BOS V2, which will provide similar functionality. See Deprecated features.\nThe following workflow is intended to be a high-level overview of how to upgrade compute nodes. This workflow depicts how services interact with each other during the compute node upgrade process, and helps to provide a quicker and deeper understanding of how the system functions.\nUse cases Administrator upgrades select compute nodes to a newer compute image by using Compute Rolling Upgrade Service (CRUS).\nRequirements  The compute nodes are up and running. Compute node workloads are managed by Slurm.  Components This workflow is based on the interaction of CRUS with Boot Orchestration Service (BOS) and Slurm (Workload Manager).\nThe following terms are mentioned in this workflow:\n Compute Rolling Upgrade Service (CRUS) allows an administrator to modify the boot image and/or configuration on a set of compute nodes without the need to take the entire set of nodes out of service at once. It manages the workload management status of nodes, quiescing each node before taking the node out of service, upgrading the node, rebooting the node into the upgraded state and then returning the node to service within the workload manager. Boot Orchestration Service (BOS) is responsible for booting, configuring, and shutting down collections of nodes. The Boot Orchestration Service has the following components:  Boot Orchestration Session Template is a collection of one or more boot set objects. A boot set defines a collection of nodes and the information about the boot artifacts and parameters. Boot Orchestration Session carries out an operation. The possible operations in a session are boot, shutdown, reboot, and configure. Boot Orchestration Agent (BOA) is automatically launched to execute the session. A BOA executes the given operation, and if the operation is a boot or a reboot, it also configures the nodes post-boot (if configure is enabled).   The Slurm control daemon (slurmctld) is the central management daemon of Slurm. It runs on non-compute nodes in a container. It monitors all other Slurm daemons and resources, accepts jobs, and allocates resources to those jobs. The Slurm daemon (slurmd) monitors all tasks running on compute nodes, accepts tasks, launches tasks, and kills running tasks upon request. It runs on compute nodes.  Workflow The following sequence of steps occur during this workflow.\n1. Administrator creates HSM groups and populates the starting group   Create three HSM groups with starting, failed, and upgrading labels.\nAny names can be used for these groups. For this example: crus_starting, crusfailed, and crusupgrading, respectively.\n  Add all of the compute nodes to be updated to the crus_starting group.\nLeave the crusfailed, and crusupgrading groups empty.\n  2. Administrator creates a session template A session template is a collection of metadata for a group of nodes and their desired configuration.\nCreate a BOS session template which points to the new image, the desired CFS configuration, and with a boot set which includes all the compute nodes to be updated. The boot set can include additional nodes, but it must contain all the nodes that need to be updated. The BOS session template should specify crusupgrading in the node_groups field of one of its boot sets.\nThis example will use the BOS session template named newcomputetemplate.\n3. Administrator creates a CRUS session A new upgrade session is launched as a result of this call.\nSpecify the following parameters:\n   Parameter Example Meaning     failed_label crusfailed An empty Hardware State Manager (HSM) group which CRUS will populate with any nodes that fail their upgrades.   starting_label crus_starting An HSM group which contains the total set of nodes to be upgraded.   upgrading_label crusupgrading An empty HSM group which CRUS will use to boot and configure subsets of the compute nodes.   upgradestepsize 50 The number of nodes to include in each discrete upgrade step.*   upgradetemplateid newcomputetemplate The name of the BOS session template to use for the upgrades.   workloadmanagertype slurm Only Slurm is supported.     * Each group of concurrent upgrades will never exceed this number of compute nodes, although in some cases they may be smaller.\n 4. CRUS to HSM CRUS calls HSM to find the nodes in the crus_starting group.\n5. CRUS to HSM CRUS selects a number of these nodes equal to upgradestepsize and calls HSM to put them into the crusupgrading group.\n6. CRUS to Slurm CRUS tells Slurm to quiesce these nodes. As each node is quiesced, Slurm puts the node offline.\n7. Slurm to CRUS Slurm reports back to CRUS that all of the nodes as offline.\n8. CRUS to BOS CRUS calls BOS to create a session with the following arguments:\n   Parameter Value     operation reboot   templateUuid newcomputetemplate   limit crusupgrading    9. CRUS retrieves the BOA job details from BOS   CRUS retrieves the BOS session to get the BOA job name.\n  CRUS waits for the BOA job to finish.\n  CRUS looks at the exit code of the BOA job to determine whether or not there were errors.\nIf there were errors, CRUS adds the nodes from the crusupgrading group into the crusfailed group.\n  CRUS calls HSM to empty the crusupgrading group.\n  10. CRUS repeats steps for remaining nodes, then updates status   CRUS repeats steps 5-9 until all of the nodes from the crus_starting group have gone through these steps.\n  CRUS marks the session status as complete.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/compute_rolling_upgrades/troubleshoot_a_failed_crus_session_due_to_bad_parameters/",
	"title": "Troubleshoot A Failed CRUS Session Because Of Bad Parameters",
	"tags": [],
	"description": "",
	"content": "Troubleshoot a Failed CRUS Session Because of Bad Parameters Note: CRUS is deprecated in CSM 1.2.0. It will be removed in a future CSM release and replaced with BOS V2, which will provide similar functionality. See Deprecated features.\nA CRUS session must be deleted and recreated if it does not start or complete because of parameters having incorrect values.\nThe following are examples of incorrect parameters:\n Choosing the wrong Boot Orchestration Service (BOS) session template. Choosing the wrong group labels. Improperly defined BOS session template. For example, specifying nodes in the template instead of using the label of the upgrading group.  Prerequisites  A Compute Rolling Upgrade Service (CRUS) session was run and failed to complete. The Cray command line interface (CLI) tool is initialized and configured on the system. See Configure the Cray Command Line Interface.  Procedure   Delete the failed session.\nDeleting a CRUS session that is in progress will terminate the session and move all of the unfinished nodes into the group said up for failed nodes. The time frame for recognizing a delete request, cleaning up, and deleting the session is roughly a minute. A session being deleted will move to a DELETING status immediately upon receiving a delete request, which will prevent further processing of the upgrade in that session.\nncn# cray crus session delete CRUS_UPGRADE_ID Example output:\napi_version = \u0026#34;1.0.0\u0026#34; completed = false failed_label = \u0026#34;failed-node-group\u0026#34; kind = \u0026#34;ComputeUpgradeSession\u0026#34; messages = [ \u0026#34;Processing step 0 in stage STARTING failed - failed to obtain Node Group named \u0026#39;slurm-node-group\u0026#39; - {\u0026#34;type\u0026#34;:\u0026#34;about:blank\u0026#34;,\u0026#34;title\u0026#34;:\u0026#34;Not Found\u0026#34;,\u0026#34;detail\u0026#34;:\u0026#34;No such group: slurm-node-group\u0026#34;,\u0026#34;status\u0026#34;:404}\\n[404]\u0026#34;,] starting_label = \u0026#34;slurm-node-group\u0026#34; state = \u0026#34;DELETING\u0026#34; upgrade_id = \u0026#34;d388c6f5-be67-4a31-87a9-819bb4fa804c\u0026#34; upgrade_step_size = 50 upgrade_template_id = \u0026#34;boot-template\u0026#34; upgrading_label = \u0026#34;node-group\u0026#34; workload_manager_type = \u0026#34;slurm\u0026#34;   Recreate the session that failed.\nEnsure that the correct parameters are used when restarting the session.\nncn# cray crus session create \\  --starting-label slurm-nodes \\  --upgrading-label node-group \\  --failed-label failed-node-group \\  --upgrade-step-size 50 \\  --workload-manager-type slurm \\  --upgrade-template-id boot-template Example output:\napi_version = \u0026#34;1.0.0\u0026#34; completed = false failed_label = \u0026#34;failed-node-group\u0026#34; kind = \u0026#34;ComputeUpgradeSession\u0026#34; messages = [] starting_label = \u0026#34;slurm-nodes\u0026#34; state = \u0026#34;UPDATING\u0026#34; upgrade_id = \u0026#34;135f9667-6d33-45d4-87c8-9b09c203174e\u0026#34; upgrade_step_size = 50 upgrade_template_id = \u0026#34;boot-template\u0026#34; upgrading_label = \u0026#34;node-group\u0026#34; workload_manager_type = \u0026#34;slurm\u0026#34;   "
},
{
	"uri": "/docs-csm/en-12/operations/compute_rolling_upgrades/troubleshoot_a_failed_crus_session_due_to_unmet_conditions/",
	"title": "Troubleshoot A Failed CRUS Session Because Of Unmet Conditions",
	"tags": [],
	"description": "",
	"content": "Troubleshoot a Failed CRUS Session Because of Unmet Conditions Note: CRUS is deprecated in CSM 1.2.0. It will be removed in a future CSM release and replaced with BOS V2, which will provide similar functionality. See Deprecated features.\nIf a CRUS session has any unmet conditions, adding or fixing them will cause the session to continue from wherever it got stuck. Updating other parts of the system to meet the required conditions of a CRUS session will unblock the upgrade session.\nThe following are examples of unmet conditions:\n Undefined groups in the Hardware State Manager (HSM). No predefined Boot Orchestration Service (BOS) session template exists that describes the desired states of the nodes being upgraded.  Prerequisites  A Compute Rolling Upgrade Service (CRUS) session was run and failed to complete. The Cray command line interface (CLI) tool is initialized and configured on the system. See Configure the Cray Command Line Interface.  Procedure   View the details for the CRUS session that failed.\nncn# cray crus session describe CRUS_UPGRADE_ID Example output:\napi_version = \u0026#34;1.0.0\u0026#34; completed = false failed_label = \u0026#34;failed-node-group\u0026#34; kind = \u0026#34;ComputeUpgradeSession\u0026#34; messages = [ \u0026#34;Processing step 0 in stage STARTING failed - failed to obtain Node Group named \u0026#39;failed-node-group\u0026#39; - {\u0026#34;type\u0026#34;:\u0026#34;about:blank\u0026#34;,\u0026#34;title\u0026#34;:\u0026#34;Not Found\u0026#34;,\u0026#34;detail\u0026#34;:\u0026#34;No such group: failed-node-group\u0026#34;,\u0026#34;status\u0026#34;:404}\\n[404]\u0026#34;,] starting_label = \u0026#34;slurm-nodes\u0026#34; state = \u0026#34;UPDATING\u0026#34; upgrade_id = \u0026#34;2c7fdce6-0047-4421-9676-4301d411d14e\u0026#34; upgrade_step_size = 50 upgrade_template_id = \u0026#34;dummy-boot-template\u0026#34; upgrading_label = \u0026#34;dummy-node-group\u0026#34; workload_manager_type = \u0026#34;slurm\u0026#34; The messages value returned in the output will provide details explaining where the job failed. In this example, there is a note stating the failed node group could not be obtained. This implies that the user forgot to create the failed node group before starting the job.\n  Create a new node group for the missing group.\nFollowing the example in the previous step, the failed node group needs to be created.\nncn# cray hsm groups create --label failed-node-group Example output:\n[[results]] URI = \u0026#34;/hsm/v2/groups/failed-node-group\u0026#34;   View the details for the CRUS session again to see if the job started.\nncn# cray crus session describe CRUS_UPGRADE_ID Example output:\napi_version = \u0026#34;1.0.0\u0026#34; completed = false failed_label = \u0026#34;failed-node-group\u0026#34; kind = \u0026#34;ComputeUpgradeSession\u0026#34; messages = [ \u0026#34;Processing step 0 in stage STARTING failed - failed to obtain Node Group named \u0026#39;failed-node-group\u0026#39; - {\u0026#34;type\u0026#34;:\u0026#34;about:blank\u0026#34;,\u0026#34;title\u0026#34;:\u0026#34;Not Found\u0026#34;,\u0026#34;detail\u0026#34;:\u0026#34;No such group: failed-node-group\u0026#34;,\u0026#34;status\u0026#34;:404}\\n[404]\u0026#34;, \u0026#34;Quiesce requested in step 0: moving to QUIESCING\u0026#34;, \u0026#34;All nodes quiesced in step 0: moving to QUIESCED\u0026#34;, \u0026#34;Began the boot session for step 0: moving to BOOTING\u0026#34;,] starting_label = \u0026#34;slurm-nodes\u0026#34; state = \u0026#34;UPDATING\u0026#34; upgrade_id = \u0026#34;2c7fdce6-0047-4421-9676-4301d411d14e\u0026#34; upgrade_step_size = 50 upgrade_template_id = \u0026#34;dummy-boot-template\u0026#34; upgrading_label = \u0026#34;dummy-node-group\u0026#34; workload_manager_type = \u0026#34;slurm\u0026#34; The messages value states that the job has resumed now that the error has been fixed.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/compute_rolling_upgrades/troubleshoot_nodes_failing_to_upgrade_in_a_crus_session/",
	"title": "Troubleshoot Nodes Failing To Upgrade In A CRUS Session",
	"tags": [],
	"description": "",
	"content": "Troubleshoot Nodes Failing to Upgrade in a CRUS Session Note: CRUS is deprecated in CSM 1.2.0. It will be removed in a future CSM release and replaced with BOS V2, which will provide similar functionality. See Deprecated features.\nTroubleshoot compute nodes failing to upgrade during a Compute Rolling Upgrade Service (CRUS) session and rerun the session on the failed nodes.\nWhen nodes are marked as failed they are added to the failed node group associated with the upgrade session, and the nodes are marked as down in the workload manager (WLM). If the WLM supports some kind of reason string, that string contains the cause of the down status.\nComplete a CRUS session that did not successfully upgrade all of the intended compute nodes.\nPrerequisites  A CRUS upgrade session has completed with a group of nodes that failed to upgrade. The Cray command line interface (CLI) tool is initialized and configured on the system. See Configure the Cray Command Line Interface.  Procedure   Determine which nodes failed the upgrade by listing the contents of the Hardware State Manager (HSM) group that was set up for failed nodes.\nncn# cray hsm groups describe FAILED_NODES_GROUP Example output:\nlabel = \u0026#34;failed-nodes\u0026#34; description = \u0026#34;\u0026#34; [members] ids = [ \u0026#34;x0c0s28b0n0\u0026#34;,]   Determine the cause of the failed nodes and fix it.\nFailed nodes result from the following:\n Failure of the BOS upgrade session for a given step of the upgrade causes all of the nodes in that step to be marked as failed. Failure of any given node in a step to reach a ready state in the workload manager within 10 minutes of detecting that the BOS boot session has completed causes that node to be marked as failed. Deletion of a CRUS session while the current step is at or beyond the Booting stage causes all of the nodes in that step that have not reached a ready state in the workload manager to be marked as failed.    Create a new CRUS session on the failed nodes.\n  Create a new failed node group with a different name.\nThis group should be empty.\nncn# cray hsm groups create --label NEW_FAILED_NODES_GROUP --description \u0026#39;Failed Node Group for my Compute Node upgrade\u0026#39;   Create a new CRUS session.\nUse the label of the failed node group from the original upgrade session as the starting label, and use the new failed node group as the failed label. The rest of the parameters need to be the same ones that were used in the original upgrade.\nncn# cray crus session create \\  --starting-label OLD_FAILED_NODES_GROUP \\  --upgrading-label node-group \\  --failed-label NEW_FAILED_NODES_GROUP \\  --upgrade-step-size 50 \\  --workload-manager-type slurm \\  --upgrade-template-id boot-template Example output:\napi_version = \u0026#34;1.0.0\u0026#34; completed = false failed_label = \u0026#34;NEW_FAILED_NODES_GROUP\u0026#34; kind = \u0026#34;ComputeUpgradeSession\u0026#34; messages = [] starting_label = \u0026#34;OLD_FAILED_NODES_GROUP\u0026#34; state = \u0026#34;UPDATING\u0026#34; upgrade_id = \u0026#34;135f9667-6d33-45d4-87c8-9b09c203174e\u0026#34; upgrade_step_size = 50 upgrade_template_id = \u0026#34;boot-template\u0026#34; upgrading_label = \u0026#34;node-group\u0026#34; workload_manager_type = \u0026#34;slurm\u0026#34;     "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/troubleshoot_uan_boot_issues/",
	"title": "Troubleshoot UAN Boot Issues",
	"tags": [],
	"description": "",
	"content": "Troubleshoot UAN Boot Issues Use this topic to guide troubleshooting of UAN boot issues.\nThe UAN boot process BOS boots UANs. BOS uses session templates to define various parameters such as:\n Which nodes to boot Which image to boot Kernel parameters Whether to perform post-boot configuration (Node Personalization) of the nodes by CFS. Which CFS configuration to use if Node Personalization is enabled.  UAN boots are performed in three phases:\n PXE booting an iPXE binary that will load the initrd of the wanted UAN image to boot. Booting the initrd (dracut) image which configures the UAN for booting the UAN image. This process consists of two phases.  Configuring the UAN node to use the Content Projection Service (CPS) and Data Virtualization Service (DVS). These services manage the UAN image rootfs mounting and make that image available to the UAN nodes. Mounting the rootfs   Booting the UAN image rootfs.  PXE Issues Most failures to PXE are the result of misconfigured network switches and/or BIOS settings. The UAN must PXE boot over the Node Management Network (NMN) and the switches must be configured to allow connectivity to the NMN. The cable for the NMN must be connected to the first port of the OCP card on HPE DL325 and DL385 nodes or to the first port of the built-in LAN-On-Motherboard (LOM) on Gigabyte nodes.\nInitrd (Dracut) Issues Dracut failures are often caused by the wrong interface being named nmn0, or by having multiple entries for the UAN component name (xname) in DNS. The latter is a result of multiple interfaces making DHCP requests. Either condition can cause IP address mismatches in the dvs_node_map. DNS configures entries based on DHCP leases.\nWhen dracut starts, it renames the network device named by the ifmap=netX:nmn0 kernel parameter to nmn0. This interface is the only one dracut will enable DHCP on. The ip=nmn0:dhcp kernel parameter limits dracut to DHCP only nmn0. The ifmap value must be set correctly in the kernel_parameters field of the BOS session template.\nFor UAN nodes that have more than one PCI card installed, ifmap=net2:nmn0 is the correct setting. If only one PCI card is installed, ifmap=net0:nmn0 is normally the correct setting.\nUANs require CPS and DVS to boot from images. These services are configured in dracut to retrieve the rootfs and mount it. If the image fails to download, check that DVS and CPS are both healthy, and DVS is running on all worker nodes. Run the following commands to check DVS and CPS:\nncn-m001# kubectl get nodes -l cps-pm-node=True -o custom-columns=\u0026#34;:metadata.name\u0026#34; --no-headers Example output:\nncn-w001 ncn-w002 ncn-m001# for node in `kubectl get nodes -l cps-pm-node=True -o custom-columns=\u0026#34;:metadata.name\u0026#34; --no-headers`; do ssh $node \u0026#34;lsmod | grep \u0026#39;^dvs \u0026#39;\u0026#34; Example output:\ndone ncn-w001 ncn-w002 If DVS and CPS are both healthy, then both of these commands will return all the worker NCNs in the HPE Cray EX system.\nImage Boot Issues Once dracut exits, the UAN will boot the rootfs image. Failures seen in this phase tend to be failures of spire-agent, cfs-state-reporter, or both, to start. The cfs-state-reporter tells BOA that the node is ready and allows BOA to start CFS for Node Personalization. If cfs-state-reporter does not start, check if the spire-agent has started. The cfs-state-reporter depends on the spire-agent. Running systemctl status spire-agent will show that that service is enabled and running if there are no issues with that service. Similarly, running systemctl status cfs-state-reporter will show a status of SUCCESS.\n  Verify the spire-agent service is enabled and running.\nuan# systemctl status spire-agent Example output:\n● spire-agent.service - SPIRE Agent Loaded: loaded (/usr/lib/systemd/system/spire-agent.service; enabled; vendor preset: enabled) Active: active (running) since Wed 2021-02-24 14:27:33 CST; 19h ago Main PID: 3581 (spire-agent) Tasks: 57 CGroup: /system.slice/spire-agent.service └─3581 /usr/bin/spire-agent run -expandEnv -config /root/spire/conf/spire-agent.conf   Verify cfs-state-reporter is healthy and returns SUCCESS.\nuan# systemctl status cfs-state-reporter Example output:\n● cfs-state-reporter.service - cfs-state-reporter reports configuration level of the system Loaded: loaded (/usr/lib/systemd/system/cfs-state-reporter.service; enabled; vendor preset: enabled) Active: inactive (dead) since Wed 2021-02-24 14:29:51 CST; 19h ago Main PID: 3827 (code=exited, status=0/SUCCESS)   "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/upload_node_boot_information_to_boot_script_service_bss/",
	"title": "Upload Node Boot Information To Boot Script Service (bss)",
	"tags": [],
	"description": "",
	"content": "Upload Node Boot Information to Boot Script Service (BSS) The following information must be uploaded to BSS as a prerequisite to booting a node via iPXE:\n The location of an initrd image in the artifact repository The location of a kernel image in the artifact repository Kernel boot parameters The node(s) associated with that information, using either host name or NID  BSS manages the iPXE boot scripts that coordinate the boot process for nodes, and it enables basic association of boot scripts with nodes. The boot scripts supply a booting node with a pointer to the necessary images (kernel and initrd) and a set of boot-time parameters.\nPrerequisites  The Cray command line interface (CLI) tool is initialized and configured on the system. Boot Script Service (BSS) is running in containers on a non-compute node (NCN). An initrd image and kernel image for one or more nodes have been uploaded to the artifact repository (see Manage Artifacts with the Cray CLI).  Procedure Because the parameters that must be specified in the PUT command are lengthy, this procedure shows a simple bash script (not to be confused with iPXE boot scripts) to enter the boot information into BSS. The first step creates a script that can use either node ID (NID) or host name to identify the node(s) with which to associate the boot information.\n  Create a bash script to enter the following boot information into BSS in preparation for booting one or more nodes identified by NID or host name.\n  NCN = the host name of a non-compute node (NCN) that is a Kubernetes master node. This procedure uses api-gw-service-nmn.local, the API service name on the Node Management Network (NMN). For more information, see Access to System Management Services.\n  KERNEL = the download URL of the kernel image artifact that was uploaded to S3, which is in the s3://s3_BUCKET/S3_OBJECT_KEY/kernel format.\n  INITRD = the download URL of the initrd image artifact that was uploaded to S3, which is in the s3://s3_BUCKET/S3_OBJECT_KEY/initrd format.\n  PARAMS = the boot kernel parameters.\nIMPORTANT: The PARAMS line must always include the substring crashkernel=360M. This enables node dumps, which are needed to troubleshoot node crashes.\n  NIDS = a list of node IDs of the nodes to be booted.\n  HOSTS = a list of strings identifying by host name the nodes to be booted.\n  The following script is generic. A script with specific values is below this one.\n#!/bin/bash NCN=api-gw-service-nmn.local KERNEL=s3://S3_BUCKET/S3_OBJECT_KEY/initrd INITRD=s3://S3_BUCKET/S3_OBJECT_KEY/kernel PARAMS=\u0026quot;STRING_WITH_BOOT_PARAMETERS crashkernel=360M\u0026quot; # # By NID NIDS=NID1,NID2,NID3 cray bss bootparameters create --nids $NIDS --kernel $KERNEL --initrd $INITRD --params $PARAMS # # By host name #HOSTS=\u0026quot;STRING_IDENTIFYING_HOST1\u0026quot;,\u0026quot;STRING_IDENTIFYING_HOST2\u0026quot; #cray bss bootparameters create --hosts $HOSTS --kernel $KERNEL --initrd $INITRD --params $PARAMS BSS supports a mechanism that allows for a default boot setup, rather than needing to specify boot details for each specific node. The HOSTS value should be set to \u0026ldquo;Default\u0026rdquo; in order to utilize the default boot setup. This feature is particular useful with larger systems.\nThe following script has specific values for the kernel/initrd image names, the kernel parameters, and the list of NIDS and hosts.\n#!/bin/bash NCN=api-gw-service-nmn.local KERNEL=s3://boot-images/97b548b9-2ea9-45c9-95ba-dfc77e5522eb/kernel INITRD=s3://boot-images/97b548b9-2ea9-45c9-95ba-dfc77e5522eb/initrd PARAMS=\u0026quot;console=ttyS0,115200n8 console=tty0 initrd=97b548b9-2ea9-45c9-95ba-dfc77e5522eb root=nfs:$NCN:/var/lib/nfsroot/cmp000001_image rw nofb selinux=0 rd.net.timeout.carrier=20 crashkernel=360M\u0026quot; PARAMS=\u0026quot;console=ttyS0,115200n8 console=tty0 initrd=${INITRD##*/} \\ root=nfs:10.2.0.1:$NFS_IMAGE_ROOT_DIR rw nofb selinux=0 rd.shell crashkernel=360M \\ ip=dhcp rd.neednet=1 htburl=https://10.2.100.50/apis/hbtd/hmi/v1/heartbeat\u0026quot; # # By NID NIDS=1 cray bss bootparameters create --nids $NIDS --kernel $KERNEL --initrd $INITRD --params $PARAMS # # By host name #HOSTS=\u0026quot;nid000001-nmn\u0026quot; #cray bss bootparameters create --hosts $HOSTS --kernel $KERNEL --initrd $INITRD --params $PARAMS   Run the bash script to upload the boot information to BSS for the identified nodes.\nlocalhost# chmod +x script.sh \u0026amp;\u0026amp; ./script.sh   View the boot script.\nThis will show the specific boot script that will be passed to a given node when requesting a boot script. This is useful for debugging boot problems and to verify that BSS is configured correctly.\nlocalhost# cray bss bootscript list --nid NODE_ID   Confirm that the information has been uploaded to BSS.\n  If nodes identified by host name:\nlocalhost# cray bss bootparameters list --hosts HOST_NAME For example:\nlocalhost# cray bss bootparameters list --hosts Default   If nodes identified by NID:\nlocalhost# cray bss bootparameters list --nids NODE_ID For example:\nlocalhost# cray bss bootparameters list --nids 1     View entire contents of BSS, if desired.\nlocalhost# cray bss dumpstate list To view the information retrieved from the HSM:\nlocalhost# cray bss hosts list To view the view the configured boot parameter information:\nlocalhost# cray bss bootparameters list   Boot information has been added to BSS in preparation for iPXE booting all nodes in the list of host names or NIDs.\nAs part of power up the nodes in the host name or NID list, the next step is to reboot the nodes.\n"
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/view_the_status_of_a_bos_session/",
	"title": "View The Status Of A BOS Session",
	"tags": [],
	"description": "",
	"content": "View the Status of a BOS Session The Boot Orchestration Service (BOS) supports a status endpoint that reports the status for individual BOS sessions. The status can be retrieved for each boot set within the session, as well as the individual items within a boot set.\nBOS sessions contain one or more boot sets. Each boot set contains one or more phases, depending upon the operation for that session. For example, a reboot operation would have a shutdown, boot, and possibly configuration phase, but a shutdown operation would only have a shutdown phase. Each phase contains the following categories not_started, in_progress, succeeded, failed, and excluded.\nMetadata Each session, boot set, and phase contains similar metadata. The following is a list of useful attributes to look for in the metadata:\n  start_time\nThe time a session, boot set, or phase started work.\n  in_progress\nThis flag means that the session, boot set, or phase has started and still has work going on.\n  complete\nThe complete flag means the session, boot set, or phase has finished.\n  error_count\nThe number of errors encountered in the boot sets or phases.\n  stop_time\nThe time a session, boot set, or phase ended work.\n  The following table summarizes how to interpret the various combinations of values for the in_progress and complete flags.\n   in_progress Flag complete Flag Meaning     False False Item has not started   True False Item is in progress   False True Item has completed   True True Invalid state (should not occur)    The in_progress flags, complete flags, and error_count flags are cumulative, meaning that they summarize the state of the sub-items.\nPhase: The in_progress flag indicates that there are nodes in the in_progress category. The complete flag means there are no nodes in the in_progress or not_started categories.\nBoot set: The in_progress flag means there is one or more phases that are in_progress. The complete flag means all phases in the boot set are complete.\nSession: The in_progress flag means one or more of the boot sets are in_progress. The complete flag means all boot sets are complete.\nView the Status of a Session The BOS session ID is required to view the status of a session. To list the available sessions, use the following command:\nncn-m001# cray bos session list --format json Example output:\n[ \u0026quot;99a192c2-050e-41bc-a576-548610851742\u0026quot;, \u0026quot;4374f3e6-e8ed-4e66-bf63-3ebe0e618db2\u0026quot;, \u0026quot;fb14932a-a9b7-41b2-ad21-b4bc632cf1ef\u0026quot;, \u0026quot;9321ab7a-bf7f-42fd-8103-94a296552856\u0026quot;, \u0026quot;50aaaa85-6807-45c7-b6de-f984a930e2eb\u0026quot;, \u0026quot;972cfd09-3403-4282-ab93-b41992f7c0d8\u0026quot;, \u0026quot;2c86c1b9-5281-4610-b044-479f1536727a\u0026quot;, \u0026quot;7719385a-e462-4bb6-8fd8-55caa0836528\u0026quot;, \u0026quot;0aac0252-4637-4198-919f-6bafda7fafef\u0026quot;, \u0026quot;13207c87-0b9f-410c-88c1-6e26ff63cb34\u0026quot;, \u0026quot;bd18e7e3-978f-4699-b8f2-8a4ce2d46f75\u0026quot;, \u0026quot;b741e4de-2064-4de4-9f23-20b6c1d0dc1a\u0026quot;, \u0026quot;f4eebe51-a217-46d0-8733-b9499a092042\u0026quot; ] It is recommended to describe the session using the session ID above to verify the desired selection was selected:\nncn-m001# cray bos session describe SESSION_ID Example output:\nstatus_link = \u0026quot;/v1/session/f4eebe51-a217-46d0-8733-b9499a092042/status\u0026quot; complete = false start_time = \u0026quot;2020-07-22 13:39:07.706774\u0026quot; templateUuid = \u0026quot;cle-1.3.0\u0026quot; error_count = 4 boa_job_name = \u0026quot;boa-f4eebe51-a217-46d0-8733-b9499a092042\u0026quot; in_progress = false operation = \u0026quot;reboot\u0026quot; The status for the session will show the session ID, the boot sets in the session, the metadata, and some links. In the following example, there is only one boot set named computes, and the session ID being used is f4eebe51-a217-46d0-8733-b9499a092042.\nTo display the status for the session:\nncn-m001# cray bos session status list SESSION_ID -–format json Example output:\n{ \u0026quot;boot_sets\u0026quot;: [ \u0026quot;computes\u0026quot; ], \u0026quot;id\u0026quot;: \u0026quot;f4eebe51-a217-46d0-8733-b9499a092042\u0026quot;, \u0026quot;links\u0026quot;: [ { \u0026quot;href\u0026quot;: \u0026quot;/v1/session/f4eebe51-a217-46d0-8733-b9499a092042/status\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot; }, { \u0026quot;href\u0026quot;: \u0026quot;/v1/session/f4eebe51-a217-46d0-8733-b9499a092042/status/computes\u0026quot; , \u0026quot;rel\u0026quot;: \u0026quot;Boot Set\u0026quot; } ], \u0026quot;metadata\u0026quot;: { \u0026quot;in_progress\u0026quot;: false, \u0026quot;start_time\u0026quot;: \u0026quot;2020-07-22 13:39:07.706774\u0026quot;, \u0026quot;complete\u0026quot;: false, \u0026quot;error_count\u0026quot;: 4 } } View the Status of a Boot Set Run the following command to view the status for a specific boot set in a session. For more information about retrieving the session ID and boot set name, refer to the \u0026ldquo;View the Status of a Session\u0026rdquo; section above. Descriptions of the different status sections are described below.\n  Boot set\nThe id parameter identifies which session this status belongs to.\nThe name parameter is the name of the boot set.\nThe links section displays links that enable administrators to drill down into each phase of the boot set.\nThere is metadata section for the boot set as a whole.\n  Phases\nThe name parameter is the name of the phase.\nThere is a metadata section for each phase.\nEach phase contains the following categories: not_started, in_progress, succeeded, failed, and excluded. The nodes are listed in the category they are currently occupying.\n  ncn-m001# cray bos session status describe BOOT_SET_NAME SESSION_ID --format json Example output:\n{ \u0026quot;phases\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;shutdown\u0026quot;, \u0026quot;categories\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;not_started\u0026quot;, \u0026quot;node_list\u0026quot;: [] }, { \u0026quot;name\u0026quot;: \u0026quot;succeeded\u0026quot;, \u0026quot;node_list\u0026quot;: [] }, { \u0026quot;name\u0026quot;: \u0026quot;failed\u0026quot;, \u0026quot;node_list\u0026quot;: [ \u0026quot;x3000c0s19b4n0\u0026quot;, \u0026quot;x3000c0s19b1n0\u0026quot;, \u0026quot;x3000c0s19b3n0\u0026quot;, \u0026quot;x3000c0s19b2n0\u0026quot; ] }, { \u0026quot;name\u0026quot;: \u0026quot;excluded\u0026quot;, \u0026quot;node_list\u0026quot;: [] }, { \u0026quot;name\u0026quot;: \u0026quot;in_progress\u0026quot;, \u0026quot;node_list\u0026quot;: [] } ], \u0026quot;metadata\u0026quot;: { \u0026quot;stop_time\u0026quot;: \u0026quot;2020-07-22 13:53:19.842705\u0026quot;, \u0026quot;in_progress\u0026quot;: false, \u0026quot;start_time\u0026quot;: \u0026quot;2020-07-22 13:39:08.276530\u0026quot;, \u0026quot;complete\u0026quot;: true, \u0026quot;error_count\u0026quot;: 4 } }, { \u0026quot;name\u0026quot;: \u0026quot;boot\u0026quot;, \u0026quot;categories\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;not_started\u0026quot;, \u0026quot;node_list\u0026quot;: [ \u0026quot;x3000c0s19b4n0\u0026quot;, \u0026quot;x3000c0s19b3n0\u0026quot;, \u0026quot;x3000c0s19b1n0\u0026quot;, \u0026quot;x3000c0s19b2n0\u0026quot; ] }, { \u0026quot;name\u0026quot;: \u0026quot;succeeded\u0026quot;, \u0026quot;node_list\u0026quot;: [] }, { \u0026quot;name\u0026quot;: \u0026quot;failed\u0026quot;, \u0026quot;node_list\u0026quot;: [] }, { \u0026quot;name\u0026quot;: \u0026quot;excluded\u0026quot;, \u0026quot;node_list\u0026quot;: [] }, { \u0026quot;name\u0026quot;: \u0026quot;in_progress\u0026quot;, \u0026quot;node_list\u0026quot;: [] } ], \u0026quot;metadata\u0026quot;: { \u0026quot;in_progress\u0026quot;: false, \u0026quot;start_time\u0026quot;: \u0026quot;2020-07-22 13:39:08.276542\u0026quot;, \u0026quot;complete\u0026quot;: false, \u0026quot;error_count\u0026quot;: 0 } }, { \u0026quot;name\u0026quot;: \u0026quot;configure\u0026quot;, \u0026quot;categories\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;not_started\u0026quot;, \u0026quot;node_list\u0026quot;: [ \u0026quot;x3000c0s19b4n0\u0026quot;, \u0026quot;x3000c0s19b3n0\u0026quot;, \u0026quot;x3000c0s19b1n0\u0026quot;, \u0026quot;x3000c0s19b2n0\u0026quot; ] }, { \u0026quot;name\u0026quot;: \u0026quot;succeeded\u0026quot;, \u0026quot;node_list\u0026quot;: [] }, { \u0026quot;name\u0026quot;: \u0026quot;failed\u0026quot;, \u0026quot;node_list\u0026quot;: [] }, { \u0026quot;name\u0026quot;: \u0026quot;excluded\u0026quot;, \u0026quot;node_list\u0026quot;: [] }, { \u0026quot;name\u0026quot;: \u0026quot;in_progress\u0026quot;, \u0026quot;node_list\u0026quot;: [] } ], \u0026quot;metadata\u0026quot;: { \u0026quot;in_progress\u0026quot;: false, \u0026quot;start_time\u0026quot;: \u0026quot;2020-07-22 13:39:08.276552\u0026quot;, \u0026quot;complete\u0026quot;: false, \u0026quot;error_count\u0026quot;: 0 } } ], \u0026quot;session\u0026quot;: \u0026quot;f4eebe51-a217-46d0-8733-b9499a092042\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;computes\u0026quot;, \u0026quot;links\u0026quot;: [ { \u0026quot;href\u0026quot;: \u0026quot;/v1/session/f4eebe51-a217-46d0-8733-b9499a092042/status/computes\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot; }, { \u0026quot;href\u0026quot;: \u0026quot;/v1/session/f4eebe51-a217-46d0-8733-b9499a092042/status/computes/shutdown\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;Phase\u0026quot; }, { \u0026quot;href\u0026quot;: \u0026quot;/v1/session/f4eebe51-a217-46d0-8733-b9499a092042/status/computes/boot\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;Phase\u0026quot; }, { \u0026quot;href\u0026quot;: \u0026quot;/v1/session/f4eebe51-a217-46d0-8733-b9499a092042/status/computes/configure\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;Phase\u0026quot; } ], \u0026quot;metadata\u0026quot;: { \u0026quot;in_progress\u0026quot;: false, \u0026quot;start_time\u0026quot;: \u0026quot;2020-07-22 13:39:08.276519\u0026quot;, \u0026quot;complete\u0026quot;: false, \u0026quot;error_count\u0026quot;: 4 } } View the Status for an Individual Phase Direct calls to the API are needed to retrieve the status for an individual phase. Support for the Cray CLI is not currently available. The following command is used to view the status of a phase:\nncn-m001# curl -H \u0026#34;Authorization: Bearer BEARER_TOKEN\u0026#34; -X GET \\ https://api-gw-service-nmn.local/apis/bos/v1/session/SESSION_ID/status/BOOT_SET_NAME/PHASE In the following example, the session ID is f89eb554-c733-4197-b2f2-4e1e5ba0c0ec, the boot set name is computes, and the individual phase is shutdown.\nncn-m001# curl -H \u0026#34;Authorization: Bearer BEARER_TOKEN\u0026#34; -X GET \\ https://api-gw-service-nmn.local/apis/bos/v1/session/f89eb554-c733-4197-b2f2-4e1e5ba0c0ec/status/computes/shutdown { \u0026#34;categories\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;not_started\u0026#34;, \u0026#34;node_list\u0026#34;: [] }, { \u0026#34;name\u0026#34;: \u0026#34;succeeded\u0026#34;, \u0026#34;node_list\u0026#34;: [] }, { \u0026#34;name\u0026#34;: \u0026#34;failed\u0026#34;, \u0026#34;node_list\u0026#34;: [] }, { \u0026#34;name\u0026#34;: \u0026#34;excluded\u0026#34;, \u0026#34;node_list\u0026#34;: [] }, { \u0026#34;name\u0026#34;: \u0026#34;in_progress\u0026#34;, \u0026#34;node_list\u0026#34;: [ \u0026#34;x5000c1s2b0n1\u0026#34;, \u0026#34;x5000c1s0b0n0\u0026#34;, \u0026#34;x3000c0s19b4n0\u0026#34;, \u0026#34;x5000c1s0b1n0\u0026#34;, \u0026#34;x5000c1s0b1n1\u0026#34;, \u0026#34;x5000c1s1b1n1\u0026#34;, \u0026#34;x5000c1s2b0n0\u0026#34;, \u0026#34;x3000c0s19b3n0\u0026#34;, \u0026#34;x5000c1s0b0n1\u0026#34;, \u0026#34;x5000c1s2b1n1\u0026#34;, \u0026#34;x3000c0s19b1n0\u0026#34;, \u0026#34;x5000c1s1b1n0\u0026#34;, \u0026#34;x5000c1s2b1n0\u0026#34;, \u0026#34;x3000c0s19b2n0\u0026#34;, \u0026#34;x5000c1s1b0n1\u0026#34;, \u0026#34;x5000c1s1b0n0\u0026#34; ] } ], \u0026#34;metadata\u0026#34;: { \u0026#34;complete\u0026#34;: false, \u0026#34;error_count\u0026#34;: 0, \u0026#34;in_progress\u0026#34;: true, \u0026#34;start_time\u0026#34;: \u0026#34;2020-06-30 21:42:39.355423\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;shutdown\u0026#34; } View the Status for an Individual Category Direct calls to the API are needed to retrieve the status for an individual category. Support for the Cray CLI is not currently available. The following command is used to view the status of a phase:\nncn-m001# curl -H \u0026#34;Authorization: Bearer BEARER_TOKEN\u0026#34; -X GET \\ https://api-gw-service-nmn.local/apis/bos/v1/session/SESSION_ID/status/BOOT_SET_NAME/PHASE/CATEGORY In the following example, the session ID is f89eb554-c733-4197-b2f2-4e1e5ba0c0ec, the boot set name is computes, the phase is shutdown, and the category is in_progress.\nncn-m001# curl -H \u0026#34;Authorization: Bearer BEARER_TOKEN\u0026#34; -X GET \\ https://api-gw-service-nmn.local/apis/bos/v1/session/f89eb554-c733-4197-b2f2-4e1e5ba0c0ec/status/computes/shutdown/in_progress { \u0026#34;name\u0026#34;: \u0026#34;in_progress\u0026#34;, \u0026#34;node_list\u0026#34;: [ \u0026#34;x5000c1s2b0n1\u0026#34;, \u0026#34;x5000c1s0b0n0\u0026#34;, \u0026#34;x3000c0s19b4n0\u0026#34;, \u0026#34;x5000c1s0b1n0\u0026#34;, \u0026#34;x5000c1s0b1n1\u0026#34;, \u0026#34;x5000c1s1b1n1\u0026#34;, \u0026#34;x5000c1s2b0n0\u0026#34;, \u0026#34;x3000c0s19b3n0\u0026#34;, \u0026#34;x5000c1s0b0n1\u0026#34;, \u0026#34;x5000c1s2b1n1\u0026#34;, \u0026#34;x3000c0s19b1n0\u0026#34;, \u0026#34;x5000c1s1b1n0\u0026#34;, \u0026#34;x5000c1s2b1n0\u0026#34;, \u0026#34;x3000c0s19b2n0\u0026#34;, \u0026#34;x5000c1s1b0n1\u0026#34;, \u0026#34;x5000c1s1b0n0\u0026#34; ] } "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/sessions/",
	"title": "BOS Sessions",
	"tags": [],
	"description": "",
	"content": "BOS Sessions Overview of Boot Orchestration Service (BOS) session operations and limitations.\nBOS creates a session when it is asked to perform one of the following operations:\n Boot - Boot a designated collection of nodes. Shutdown - Shutdown a designated collection of nodes. Reboot - Reboot a designated collection of nodes. Configure - Configure a designated collection of booted nodes.  BOS sessions can be used to boot compute nodes with customized image roots.\nA session requires two parameters, a session template ID and an operation to perform on that template. The BOS API\u0026rsquo;s session endpoint can display a list of all of the sessions that have been created, including previous and currently running sessions. The endpoint can also display the details of a given session when the specific session ID is provided as a parameter. Sessions can also be deleted through the API.\nBOS supports a RESTful API. This API can be interacted with directly using tools like cURL. It can also be interacted with through the Cray Command Line Interface (CLI). See Manage a BOS Session for more information.\nBOA functionality The Boot Orchestration Agent (BOA) implements each session and sees it through to completion. A BOA is a Kubernetes job. It runs once to completion. If there are transient failures, BOA will exit and Kubernetes will reschedule it so that it can re-execute its session.\nBOA moves nodes towards the requested state, but if a node fails during any of the intermediate steps, it takes note of it. BOA will then provide a command in the output of the BOA log that can be used to retry the action. This behavior impacts all BOS operations.\nFor example, if there is a 6,000 node system and 3 nodes fail to power off during a BOS operation. then BOA will continue and attempt to re-provision the remaining 5,997 nodes. After the command is finished, it will provide information about what the administrator needs to do in order to retry the operation on the 3 nodes that failed.\nCurrent BOS session limitations The following limitations currently exist with BOS sessions:\n No checking is done to prevent the launch of multiple sessions with overlapping lists of nodes. Concurrently running sessions may conflict with each other. The boot ordinal and shutdown ordinal are not honored. The partition parameter is not honored. The Configuration Framework Service (CFS) has its own limitations. Refer to the Configuration Management documentation for more information.  "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/stage_changes_without_bos/",
	"title": "Stage Changes Without BOS",
	"tags": [],
	"description": "",
	"content": "Stage Changes Without BOS Sometimes there is a need to stages changes to take place on a reboot, without immediately rebooting a node. When this is called for, users can bypass BOS, and set boot artifacts or configuration that will only take place when a node is later booted, whether that occurs manually, or triggered by a task manager.\nStage Boot Artifacts For information on staging boot artifacts, see the section Upload Node Boot Information to Boot Script Service (BSS).\nStage a Configuration   Disable CFS for all nodes receiving the staged configuration. Nodes will automatically re-enable configuration when they are rebooted and will be configured with any staged changes.\nncn-m001# cray cfs components update \u0026lt;xname\u0026gt; --enabled false   Either set the new desired configuration, or update the existing configuration.\nIf an entirely new configuration is being used, or if no configuration was previously set for a component, update the configuration name with the following:\nncn-m001# cray cfs components update \u0026lt;xname\u0026gt; --configuration-name \u0026lt;configuration_name\u0026gt; If all nodes that share a configuration are being staged with an update, updating the shared configuration will stage the change for all relevant nodes. Be aware that if this step is taken and not all nodes that use the configuration are disabled in CFS, the configuration will automatically and immediately apply to all enabled nodes that are using it.\nncn-m001# cray cfs configurations update \u0026lt;configuration_name\u0026gt; --file \u0026lt;file_path\u0026gt; Users also have the option of specifying branches rather than commits in configurations. If this feature is used, the configuration can also be updated by telling CFS to update the commits for all layers of a configuration that specify branches. Like with updating the configuration from a file, this will automatically start configuration on any enabled nodes that are using this configuration. For information on using branches, see the section (Use Branches in Configuration Layers\n  "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/tools_for_resolving_boot_issues/",
	"title": "Tools For Resolving Compute Node Boot Issues",
	"tags": [],
	"description": "",
	"content": "Tools for Resolving Compute Node Boot Issues A number of tools can be used to analyze and debug issues encountered during the compute node boot process. The underlying issue and symptoms dictate the type of tool required.\nnmap Use nmap to send out DHCP discover requests to test DHCP. nmap can be installed using the following command:\nncn# zypper install nmap To reach the DHCP server, the request generally needs to be sent over the Node Management network (NMN) from a non-compute node (NCN).\nIn the following example, nmap is used to send a broadcast request over the eth1 interface:\nncn# nmap --script broadcast-dhcp-discover -e eth1 Wireshark Use Wireshark to display network traffic. It has powerful display filters that help find information that can be used for debugging. To learn more, visit the Wireshark home page.\ntcpdump Use tcpdump to capture network traffic, such as DHCP or TFTP requests. It can be installed using the following mechanisms:\n  Install tcpdump inside an Alpine-based pod:\nalpine_pod# apk add --no-cache tcpdump   Install tcpdump on an NCN or some other node that is running SUSE:\nsuse# zypper install tcpdump   Invoking tcpdump without any arguments will write all of its output to stdout. This is reasonable for some tasks, but the volume of traffic that tcpdump can capture is large, so it is often better to write the output to a file.\nUse the following command to send tcpdump output to stdout:\nlinux# tcpdump Use the following command to send tcpdump output to a file (/tmp/tcpdump.output in the following example):\nlinux# tcpdump -w /tmp/tcpdump.output Use either tcpdump or Wireshark to read from the tcpdump file. Here is how to read the file using tcpdump:\nlinux# tcpdump -r /tmp/tcpdump.output Filtering the traffic using tcpdump filters is not recommended because when a TFTP server answers a client, it will usually use an ephemeral port that the user may not be able to identify and will not be captured by tcpdump. It is better to capture everything with tcpdump and then filter with Wireshark when looking at the resulting output. Filtering on DHCP traffic can be performed because that uses ports 67 and 68 specifically.\nTFTP client Use a TFTP client to send TFTP requests to the TFTP server. This will test that the server is functional. TFTP requests can be sent from the NCN, remote node, or laptop, as long as it targets the NMN.\nInstall the TFTP client using the following command:\nncn# zypper install atftp The atftp TFTP client can be used to request files from the TFTP server. The TFTP server is on the NMN and listens on port 69. The TFTP server sends the ipxe.efi file as the response in this example.\nRequest the files:\nncn# atftp tftp\u0026gt; connect 10.100.160.2 69 tftp\u0026gt; get ipxe.efi test-ipxe.efi tftp\u0026gt; quit List the files:\nncn# ls -l test-ipxe.efi Example output:\n-rw-r--r-- 1 root root 951904 Sep 11 10:44 test-ipxe.efi Serial Over LAN (SOL) sessions There are two tools that can be used to access a BMC\u0026rsquo;s console via SOL:\n  ipmitool\nipmitool is a utility for controlling IPMI-enabled devices.\nUse the following command to access a node\u0026rsquo;s SOL via ipmitool:\n read -s is used to prevent the password from being written to the screen or the shell history.\n ncn# USERNAME=root ncn# read -s IPMI_PASSWORD ncn# export IPMI_PASSWORD ncn# ipmitool -I lanplus -U $USERNAME -E -H \u0026lt;node_management_network_IP_address_of_node\u0026gt; sol activate Example:\nncn# ipmitool -I lanplus -U $USERNAME -E -H 10.100.165.2 sol activate   ConMan\nThe ConMan tool is used to collect logs from nodes. It is also used to attach to the node\u0026rsquo;s SOL console. For more information, refer to ConMan and Access Compute Node Logs.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/troubleshoot_booting_nodes_with_hardware_issues/",
	"title": "Troubleshoot Booting Nodes With Hardware Issues",
	"tags": [],
	"description": "",
	"content": "Troubleshoot Booting Nodes with Hardware Issues How to identify a node with hardware issues and how to disable is via the HSM.\nIf a node included in a Boot Orchestration Service (BOS) session template is having hardware issues, it can prevent the node from powering back up correctly. The entire BOS session will fail with a timeout error waiting for the node to become ready.\nThe following is example log output from a node with hardware issues, resulting in a failed BOS session:\nncn-m001# kubectl logs BOS_POD_ID Example output:\n[...] 2020-10-03 17:47:30,053 - ERROR - cray.boa.smd.wait_for_nodes - Number of retries: 361 exceeded allowed amount: 360; 2 nodes were not in the state: Ready 2020-10-03 17:47:30,054 - DEBUG - cray.boa.smd.wait_for_nodes - These nodes were not in the state: Ready x1003c0s1b1n1 x1001c0s2b1n1 Disabling nodes that have underlying hardware issues preventing them from booting will help resolve this issue. This can be done via the Hardware State Manager (HSM). This method does not return the node with hardware issues to a healthy state, but it does enable a BOS session that was encountering issues to complete successfully.\n"
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/troubleshoot_compute_node_boot_issues_related_to_dynamic_host_configuration_protocol_dhcp/",
	"title": "Troubleshoot Compute Node Boot Issues Related To Dynamic Host Configuration Protocol (DHCP)",
	"tags": [],
	"description": "",
	"content": "Troubleshoot Compute Node Boot Issues Related to Dynamic Host Configuration Protocol (DHCP) DHCP issues can result in node boot failures. This procedure helps investigate and resolve such issues.\nPrerequisites  This procedure requires administrative privileges. kubectl is installed.  Limitations Encryption of compute node logs is not enabled, so the passwords may be passed in clear text.\nProcedure   Log in to a non-compute node (NCN) as root.\n  Check that the DHCP service is running.\nncn-m001# kubectl get pods -A | grep kea Example output:\nservices cray-dhcp-kea-554698bb69-r9wwt 3/3 Running 0 13h services cray-dhcp-kea-postgres-0 2/2 Running 0 10d services cray-dhcp-kea-postgres-1 2/2 Running 0 3d18h services cray-dhcp-kea-postgres-2 2/2 Running 0 10d services cray-dhcp-kea-wait-for-postgres-3-7gqvg 0/3 Completed 0 10d   Start a tcpdump session on the NCN.\nThe following example sends tcpdump data to stdout.\ncray-dhcp# tcpdump   Obtain the DHCP pod\u0026rsquo;s ID.\nncn-m001# PODID=$(kubectl get pods --no-headers -o wide | grep cray-dhcp | awk \u0026#39;{print $1}\u0026#39;)   Enter the DHCP pod using its ID.\nncn-m001# kubectl exec -it $PODID /bin/sh   Start a tcpdump session from within the DHCP pod.\n  Open another terminal to perform the following tasks:\n  Issue a DHCP discover request from the NCN using nmap.\n  Analyze the NCN tcpdump data in order to ensure that the DHCP discover request is visible.\n    Go back to the original terminal to analyze the DHCP pod\u0026rsquo;s tcpdump data in order to ensure that the DHCP discover request is visible inside the pod.\nTroubleshooting Information:\nIf the DHCP Discover request is not visible on the NCN, it may be due to a firewall issue. If the DHCP Discover request is not visible inside the pod, double check if the request was issued over the correct interface for the Node Management Network (NMN). If it was, it could indicate a firewall issue.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/troubleshoot_compute_node_boot_issues_related_to_slow_boot_times/",
	"title": "Troubleshoot Compute Node Boot Issues Related To Slow Boot Times",
	"tags": [],
	"description": "",
	"content": "Troubleshoot Compute Node Boot Issues Related to Slow Boot Times Inspect BOS, the Boot Orchestration Agent (BOA) job logs, and the Configuration Framework Service (CFS) job logs to obtain information that is critical for boot troubleshooting. Use this procedure to determine why compute nodes are booting slower than expected.\nPrerequisites A boot session has been created with the Boot Orchestration Service (BOS).\nProcedure   View the BOA logs.\n  Find the BOA job from the boot session.\nThe output of the command below is organized by the creation time of the BOA job with the most recent one listed last.\nncn-m001# kubectl -nservices --sort-by=.metadata.creationTimestamp get pods | grep boa Example output:\nboa-e3c845be-3092-4807-a0c9-272bf0e15896-7pnl4 0/2 Completed 0 3d boa-c740f74d-f5af-41f3-a71b-1a3fc00cbe7a-k5hdw 0/2 Completed 0 2d12h boa-a365b6a2-3614-4b53-9b6b-df0f4485e25d-nbcdb 0/2 Completed 0 2m43s   Watch the log from BOA job.\nncn-m001# kubectl logs -n services -f -c boa BOA_JOB_ID Example output:\n2019-11-12 02:14:27,771 - DEBUG - cray.boa - BOA starting 2019-11-12 02:14:28,786 - DEBUG - cray.boa - Boot Agent Image: acad2b43-dff5-483d-a392-8b1b1f91a60c Nodes: x5000c1s1b1n0, x3000c0s35b2n0, x5000c1s3b1n1, x3000c0s35b3n0, x5000c1s0b1n0, x5000c1s3b0n1, x5000c1s2b0n0, x5000c1s3b1n0, x5000c1s1b1n1, x5000c1s2b0n1, x3000c0s35b1n0, x5000c1s3b0n0, x5000c1s0b1n1, x5000c1s1b0n0, x5000c1s2b1n0, x5000c1s1b0n1, x5000c1s2b1n1 created. 2019-11-12 02:14:29,118 - INFO - cray.boa - Boot Session: 88df3fc3-6697-41cc-9f63-7076d78a9110 2019-11-12 02:14:29,505 - DEBUG - cray.boa.logutil - cray.boa.agent.reboot called with args: (Boot Agent Image: acad2b43-dff5-483d-a392-8b1b1f91a60c Nodes: x5000c1s1b1n0, x3000c0s35b2n0, x5000c1s3b1n1, x3000c0s35b3n0, x5000c1s0b1n0, x5000c1s3b0n1, x5000c1s2b0n0, x5000c1s3b1n0, x5000c1s1b1n1, x5000c1s2b0n1, x3000c0s35b1n0, x5000c1s3b0n0, x5000c1s0b1n1, x5000c1s1b0n0, x5000c1s2b1n0, x5000c1s1b0n1, x5000c1s2b1n1,) 2019-11-12 02:14:29,505 - INFO - cray.boa.agent - Rebooting the Session: 88df3fc3-6697-41cc-9f63-7076d78a9110 Set: computes 2019-11-12 02:15:15,898 - DEBUG - cray.boa.logutil - cray.boa.dbclient.db_write_session called with args: (\u0026lt;etcd3.client.Etcd3Client object at 0x7f822db68dd8\u0026gt;, '88df3fc3-6697-41cc-9f63-7076d78a9110', 'computes', 'status', 'boot_capmc_finished') 2019-11-12 02:15:15,898 - DEBUG - cray.boa.dbclient - Key: /session/88df3fc3-6697-41cc-9f63-7076d78a9110/computes/status/ Value: boot_capmc_finished 2019-11-12 02:15:15,938 - INFO - cray.boa.smd.wait_for_nodes - Standby: 17 entries 2019-11-12 02:15:15,938 - INFO - cray.boa.smd.wait_for_nodes - Waiting 5 seconds for 17 nodes to be in state: Ready [...]     View the CFS logs related to the boot job.\n  Find the most recent CFS jobs.\nThere may be more than one job if multiple components are being configured. If there are multiple different BOA jobs running, check the BOA logs first to find the timestamp value when CFS was updated. Expect a delay of a couple minutes after the CFS session starts depending on the cfs-batcher settings.\nncn-m001# kubectl -n services get cfs Example output:\nNAME JOB STATUS SUCCEEDED REPOSITORY CLONE URL BRANCH COMMIT PLAYBOOK AGE 066bc062-7fc3-11ea-970e-a4bf0138f2ba cfs-1628cf85-e847-49af-891c-1b7655d8056d complete true https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git master site.yml 4d10h 3c3758a8-7fd9-11ea-a365-a4bf0138f2ba cfs-05420ebf-fbbc-4d3a-a0af-a840e379fe12 complete true https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git master site.yml 4d8h batcher-65f94609-0599-4d86-a8ad-9555d2a9ab9d cfs-b10975a0-fdde-4d00-98f8-0a2895b32d57 complete true https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git 0a38dc0d61f94eb43bf32c8bad801c4d41bf52d9 site.yml 3d17h batcher-6d823363-c7cd-4616-afb8-416156a83522 cfs-78726a81-eb72-4e2f-80e8-a8d08a7c031c complete true https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git 0a38dc0d61f94eb43bf32c8bad801c4d41bf52d9 site.yml 29h batcher-ef877321-922c-4517-bc05-e4f2a5141b2b cfs-a6c6f707-c7ca-48d7-aff7-71b26398c216 complete true https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git a371a11a5cf139ba67cee5823c8ce0e5b61d7a3f site.yml 4d5h ed684272-7fe8-11ea-a0fd-a4bf0138f2ba cfs-6ed992a3-7f63-4187-a2bf-fc4451ead997 complete true https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git master site.yml 4d6h ncn-customization-ncn-w001-uai-hosts-load cfs-acb9f57f-e390-49c6-8028-842550f3d73e complete false https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git master cray-ncn-customization-load.yml 4d6h ncn-customization-ncn-w002-uai-hosts-load cfs-37aebeb8-1c3f-45a4-a9b1-d25ad4e10a91 complete false https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git master cray-ncn-customization-load.yml 4d6h ncn-customization-ncn-w002-uai-hosts-unload cfs-095cce88-1925-4625-a611-ae19d9976a60 complete false https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git master cray-ncn-customization-unload.yml 4d6h ncn-customization-ncn-w003-uai-hosts-load cfs-6b3fdebd-ab2b-4751-b29f-436ff2893569 complete false https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git master cray-ncn-customization-load.yml 4d6h ncn-customization-ncn-w003-uai-hosts-unload cfs-d94ebbe6-6b61-4f78-9dc4-fd24576d32dd complete false https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git master cray-ncn-customization-unload.yml 4d6h If multiple BOA jobs exist, describe the CFS sessions and look at the configuration, as well as which components are included. It is unlikely, but a single session may contain components from multiple separate BOS sessions if they both request the same configuration for different components at around the same time.\nncn-m001# kubectl -n services describe cfs SESSION_NAME   Find the pods for the CFS job.\nncn-m001# kubectl -n services get pods | grep JOB_NAME Example output:\ncfs-1628cf85-e847-49af-891c-1b7655d8056d-29ntt 0/4 Completed 0 4d11h   View the log from the CFS job.\nncn-m001# kubectl -n services logs POD_NAME ansible Example output:\nInventory available % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 HTTP/1.1 200 OK content-type: text/html; charset=UTF-8 cache-control: no-cache, max-age=0 x-content-type-options: nosniff date: Thu, 16 Apr 2020 09:20:15 GMT server: envoy transfer-encoding: chunked [...] PLAY [Compute] ***************************************************************** TASK [rsyslog : Add rsyslog.d config] ****************************************** changed: [cle_default_rootfs_cfs_066bc062-7fc3-11ea-970e-a4bf0138f2ba] TASK [localtime : Create /etc/localtime symlink] ******************************* changed: [cle_default_rootfs_cfs_066bc062-7fc3-11ea-970e-a4bf0138f2ba] TASK [ntp : Install stock /etc/chrony.conf] ************************************ changed: [cle_default_rootfs_cfs_066bc062-7fc3-11ea-970e-a4bf0138f2ba] TASK [cle-hosts-cf : create temporary workarea] ******************************** changed: [cle_default_rootfs_cfs_066bc062-7fc3-11ea-970e-a4bf0138f2ba] TASK [cle-hosts-cf : copy /etc/hosts from NCN host OS into compute image] ****** changed: [cle_default_rootfs_cfs_066bc062-7fc3-11ea-970e-a4bf0138f2ba] TASK [cle-hosts-cf : copy /etc/hosts into place] ******************************* changed: [cle_default_rootfs_cfs_066bc062-7fc3-11ea-970e-a4bf0138f2ba] TASK [cle-hosts-cf : remove temporary workarea] ******************************** changed: [cle_default_rootfs_cfs_066bc062-7fc3-11ea-970e-a4bf0138f2ba] [...]     Use the data returned in the BOA and CFS logs to determine the underlying issue for slow boot times.\n"
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/troubleshoot_compute_node_boot_issues_related_to_the_boot_script_service_bss/",
	"title": "Troubleshoot Compute Node Boot Issues Related To The Boot Script Service (bss)",
	"tags": [],
	"description": "",
	"content": "Troubleshoot Compute Node Boot Issues Related to the Boot Script Service (BSS) Boot Script Service (BSS) delivers a boot script to a node based on its MAC address. This boot script tells the node where to obtain its boot artifacts, which include:\n kernel initrd  In addition, the boot script also contains the kernel boot parameters. This procedure helps resolve issues related to missing boot artifacts.\nPrerequisites This procedure requires administrative privileges.\nLimitations Encryption of compute node logs is not enabled, so the passwords may be passed in clear text.\nProcedure   Log onto a non-compute node (NCN) as root.\n  Check that BSS is running.\nncn-m001# kubectl get pods -n services -o wide | grep cray-bss | grep -v -etcd- Example output:\ncray-bss-fd888bd54-gvpxq 2/2 Running 0 2d3h 10.32.0.16 ncn-w002 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt;   Check that the boot script of the node that is failing to boot contains the correct boot artifacts.\n  If nodes are identified by their host names, execute the following:\nncn-m001# cray bss bootparameters list --hosts HOST_NAME   If nodes are identified by their node IDs, execute the following:\nncn-m001# cray bss bootparameters list --nids NODE_ID     View the entire BSS contents.\nncn-m001# cray bss dumpstate list   View the actual boot script.\nUsing hosts:\nncn-m001# cray bss bootscript list --host HOST_NAME Using the MAC address to get the actual boot script:\nncn-m001# cray bss bootscript list --mac MAC_ADDRESS Using node IDs to retrieve boot parameters:\nncn-m001# cray bss bootscript list --nid NODE_ID   "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/troubleshoot_compute_node_boot_issues_related_to_trivial_file_transfer_protocol_tftp/",
	"title": "Troubleshoot Compute Node Boot Issues Related To Trivial File Transfer Protocol (tftp)",
	"tags": [],
	"description": "",
	"content": "Troubleshoot Compute Node Boot Issues Related to Trivial File Transfer Protocol (TFTP) TFTP issues can result in node boot failures. Use this procedure to investigate and resolve such issues.\nPrerequisites This procedure requires administrative privileges.\nLimitations Encryption of compute node logs is not enabled, so the passwords may be passed in clear text.\n  Log onto a non-compute node (NCN) as root.\n  Check that the TFTP service is running.\nncn-m001# kubectl get pods -n services -o wide | grep cray-tftp   Start a tcpdump session on the NCN.\n  Obtain the TFTP pod\u0026rsquo;s ID.\nncn-m001# PODID=$(kubectl get pods -n services --no-headers -o wide | grep cray-tftp | awk \u0026#39;{print $1}\u0026#39;) ncn-m001# echo $PODID   Enter the TFTP pod using the pod ID.\nDouble check that PODID contains only one ID. If there are multiple TFTP pods listed, just choose one as the ID.\nncn-m001# kubectl exec -n services -it $PODID /bin/sh   Start a tcpdump session from within the TFTP pod.\n  Open another terminal to perform the following tasks:\n  Use a TFTP client to issue a TFTP request from either the NCN or a laptop.\n  Analyze the NCN tcpdump data to ensure that the TFTP discover request is visible.\n    Go back to the original terminal to analyze the TFTP pod\u0026rsquo;s tcpdump data in order to ensure that the TFTP request is visible inside the pod.\nTroubleshooting Information:\nIf the TFTP request is not visible on the NCN, it may be due to a firewall issue. If the TFTP request is not visible inside the pod, double check that the request was issued over the correct interface for the Node Management Network (NMN). If it was, the underlying issue could be related to the firewall.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/troubleshoot_compute_node_boot_issues_related_to_unified_extensible_firmware_interface_uefi/",
	"title": "Troubleshoot Compute Node Boot Issues Related To Unified Extensible Firmware Interface (uefi)",
	"tags": [],
	"description": "",
	"content": "Troubleshoot Compute Node Boot Issues Related to Unified Extensible Firmware Interface (UEFI) If a node is stuck in the UEFI shell, ConMan will be able to connect to it, but nothing else will appear in its logs. The node\u0026rsquo;s logs will look similar to the following, indicating that ConMan is updating its log hourly:\n\u0026lt;ConMan\u0026gt; Console [86] log at 2018-09-07 20:00:00 CDT. \u0026lt;ConMan\u0026gt; Console [86] log at 2018-09-07 21:00:00 CDT. \u0026lt;ConMan\u0026gt; Console [86] log at 2018-09-07 22:00:00 CDT. \u0026lt;ConMan\u0026gt; Console [86] log at 2018-09-07 23:00:00 CDT. \u0026lt;ConMan\u0026gt; Console [86] log at 2018-09-08 00:00:00 CDT. This procedure helps resolve this issue.\nPrerequisites This procedure requires administrative privileges.\nLimitations Encryption of compute node logs is not enabled, so the passwords may be passed in clear text.\nProcedure   Log onto the node via ipmitool or ConMan.\n  Select Enter.\nThe system will present one of the following prompts, both of which indicate that the user has entered the UEFI shell.\n  Use one of the following options to resolve the issue:\n Contact the system administrator or someone who is knowledgeable about UEFI if the node is stuck in the UEFI shell. Reseat the node if it is suspected that this may be a hardware-related issue. To reseat a node, pull the power cable off the back end of the box. Wait a few seconds, then reconnect the power cable and push the power button on the front of the box. Reseating a node must be done on site. Contact customer support for more information.    "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/troubleshoot_compute_node_boot_issues_using_kubernetes/",
	"title": "Troubleshoot Compute Node Boot Issues Using Kubernetes",
	"tags": [],
	"description": "",
	"content": "Troubleshoot Compute Node Boot Issues Using Kubernetes A number of Kubernetes commands can be used to debug issues related to the node boot process. All of the traffic bound for the DHCP server, TFTP server, and Boot Script Service (BSS) is sent on the Node Management Network (NMN).\nIn the current arrangement, all three services are located on a non-compute node (NCN). Thus, traffic must first travel through the NCN to reach these services inside their pods. When attempting to track down missing requests for either DHCP or TFTP, it is helpful to set up tcpdump on the NCN where the pod is resident to ensure that the request got that far. The NODE column in the output of kubectl get pods -o wide shows which node the pod is running on.\nTroubleshooting Tips   Retrieve logs for a specific Kubernetes pod:\nSyntax:\nncn-m001# kubectl logs -n NAMESPACE pod_name Example:\nncn-m001# kubectl get pods -n services -o wide|grep -E \u0026#34;NAME|kea\u0026#34; NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES cray-dhcp-kea-6b78789fc4-lzmff 3/3 Running 0 5d12h 10.42.0.30 ncn-w002 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; ncn-m001# kubectl logs -n services DHCP_KEA_POD_ID -c CONTAINER DHCPDISCOVER from a4:bf:01:23:1a:f4 via vlan100 ICMP Echo reply while lease 10.100.160.199 valid. Abandoning IP address 10.100.160.199: pinged before offer Reclaiming abandoned lease 10.100.160.195. [...]   Check if a Kubernetes pod is running:\nSyntax:\nncn-m001# kubectl get pods -A -o wide | grep pod_name Example:\nncn-m001# kubectl get pods -A -o wide |grep -E \u0026#34;NAME|kea\u0026#34; NAMESPACE NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES services cray-dhcp-kea-6b78789fc4-lzmff 3/3 Running 0 5d12h 10.42.0.30 ncn-w002 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt;   Gain access to a Kubernetes pod:\nUse the following command to enter a shell inside a container within the pod. Once inside the shell, execute commands as needed.\nncn-m001# kubectl exec -A -it pod_name /bin/sh For example, if the pod\u0026rsquo;s name is cray-dhcp-kea-6b78789fc4-lzmff, execute:\nncn-m001# kubectl exec -A -it cray-dhcp-kea-6b78789fc4-lzmff /bin/sh   "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/limitations_for_gigabyte_bmc_hardware/",
	"title": "BOS Limitations For Gigabyte BMC Hardware",
	"tags": [],
	"description": "",
	"content": "BOS Limitations for Gigabyte BMC Hardware Special steps need to be taken when using the Boot Orchestration Service (BOS) to boot, reboot, shutdown, or configure Gigabyte hardware. Gigabyte hardware treats power off and power on requests as successful, regardless of if actually successfully completed. The power on/off requests are ignored by Cray Advanced Platform Monitoring and Control (CAPMC) if they are received within a short period of time, which is typically around 60 seconds per operation.\nThe work around for customers with Gigabyte BMC hardware is to manually serialize power off events. This is done to prevent frequent power actions from being attempted and ignored by CAPMC. From a boot orchestration perspective, this can be effectively worked around by issuing CAPMC power off commands before issuing BOS reboot commands.\n"
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/session_templates/",
	"title": "BOS Session Templates",
	"tags": [],
	"description": "",
	"content": "BOS Session Templates Describes the contents of a BOS session template.\nA session template can be created by specifying parameters as part of the call to the Boot Orchestration Service (BOS). When calling BOS directly, JSON is passed as part of the call.\nSession templates can be used to boot images that are customized with the Image Management Service (IMS). A session template has a collection of one or more boot set objects. A boot set defines a collection of nodes and the information about the boot artifacts and kernel parameters used to boot them. This information is written to the Boot Script Service (BSS) and sent to each node over the specified network, enabling these nodes to boot.\nThe Simple Storage Service (S3) is used to store the manifest.json file that is created by IMS. This file contains links to all of the boot artifacts. The following S3 parameters are used in a BOS session template:\n type: This is the type of storage used. Currently, the only allowable value is s3. path: This is the path to the manifest.json file in S3. The path will follow the s3://\u0026lt;BUCKET_NAME\u0026gt;/\u0026lt;KEY_NAME\u0026gt; format. etag: This entity tag helps identify the version of the manifest.json file. Currently not used but cannot be left blank.  The following is an example BOS session template:\n{ \u0026#34;cfs_url\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git\u0026#34;, \u0026lt;\u0026lt;-- Configuration manifest API endpoint \u0026#34;enable_cfs\u0026#34;: true, \u0026lt;\u0026lt;-- Invokes CFS \u0026#34;name\u0026#34;: \u0026#34;session-template-example\u0026#34;, \u0026#34;boot_sets\u0026#34;: { \u0026#34;boot_set1\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;nmn\u0026#34;, \u0026#34;boot_ordinal\u0026#34;: 1, \u0026#34;kernel_parameters\u0026#34;: \u0026#34;console=ttyS0,115200 bad_page=panic crashkernel=360M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell k8s_gw=api-gw-service-nmn.local quiet turbo_boost_limit=999\u0026#34;, \u0026#34;rootfs_provider\u0026#34;: \u0026#34;cpss3\u0026#34;, \u0026#34;node_list\u0026#34;: [ \u0026lt;\u0026lt;-- List of individual nodes \u0026#34;x3000c0s19b1n0\u0026#34; ], \u0026#34;etag\u0026#34;: \u0026#34;foo\u0026#34;, \u0026lt;\u0026lt;-- Used to identify the version of the manifest.json file \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/e06530f1-fde2-4ca5-9148-7e84f4857d17/manifest_sans_boot_parameters.json\u0026#34;, \u0026lt;\u0026lt;-- The path to the manifest.json file in S3 \u0026#34;rootfs_provider_passthrough\u0026#34;: \u0026#34;66666666:dvs:api-gw-service-nmn.local:300:eth0\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34; \u0026lt;\u0026lt;-- Type of storage }, \u0026#34;boot_set2\u0026#34;: { ... } }, When multiple boot sets are used in a session template, the boot_ordinal and shutdown_ordinal values indicate the order in which boot sets need to be acted upon. Boot sets sharing the same ordinal number will be addressed at the same time.\nEach boot set needs its own set of S3 parameters (path, type, and optionally etag).\nSpecify Nodes in a BOS Session Template There are three different ways to specify the nodes inside a boot set in a BOS session template. The node list, node groups, or node role groups values can be used. Each can be specified as a comma-separated list.\n  Node list\nThe \u0026quot;node_list\u0026quot; value is a list of nodes identified by component names (xnames).\nFor example:\n\u0026#34;node_list\u0026#34;: [\u0026#34;x3000c0s19b1n0\u0026#34;, \u0026#34;x3000c0s19b1n1\u0026#34;, \u0026#34;x3000c0s19b2n0\u0026#34;]   Node groups\nThe \u0026quot;node_groups\u0026quot; value is a list of groups defined by the Hardware State Manager (HSM). Each group may contain zero or more nodes. Groups can be arbitrarily defined.\nFor example:\n\u0026#34;node_groups\u0026#34;: [\u0026#34;green\u0026#34;, \u0026#34;white\u0026#34;, \u0026#34;pink\u0026#34;]   Node roles groups\nThe node role groups is a list of groups based on a node\u0026rsquo;s designated role. Each node\u0026rsquo;s role is specified in the HSM database. For example, to target all of the nodes with a \u0026ldquo;Compute\u0026rdquo; role, \u0026ldquo;Compute\u0026rdquo; would need to be specified in the \u0026quot;node_role_groups\u0026quot; value.\nFor example:\n\u0026#34;node_roles_groups\u0026#34;: [\u0026#34;Compute\u0026#34;] The following roles are defined in the HSM database:\n Compute Service System Application Storage Management    "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/kernel_boot_parameters/",
	"title": "Kernel Boot Parameters",
	"tags": [],
	"description": "",
	"content": "Kernel Boot Parameters The Image Management Service (IMS) extracts kernel boot parameters from the /boot/kernel-parameters file in the image, if that file exists, and stores them in S3. IMS already stores the other boot artifacts (kernel, initrd, and rootfs) in S3. When told to boot an image, the Boot Orchestration Service (BOS) will extract these parameters and deliver them to the Boot Script Service (BSS) so they can be used during the next boot of a node.\nThere are two benefits to having kernel boot parameters extracted from the image. First, these parameters can be tightly coupled to the image. Second, these parameters do not need to be specified in the BOS session template, making the template shorter, cleaner, and less error prone.\nThe kernel boot parameters obtained from the image can be overridden by specifying the same parameters in the BOS session template. BOS supplies these parameters to the kernel in a deliberate order that causes the parameters obtained from the image to be overridden by those obtained from the session template.\nThe following is a simplified kernel boot parameter ordering:\n\u0026lt;Image parameters\u0026gt; \u0026lt;Session template parameters\u0026gt; If there are competing values, the ones earlier in the boot string are superseded by the ones appearing later in the string.\nThe actual contents of the boot parameters are not as simple as previously described. For completeness, the following is the entire kernel boot parameter ordering:\n\u0026lt;Image parameters\u0026gt; \u0026lt;Session template parameters\u0026gt; \u0026lt;rootfs parameters\u0026gt; \u0026lt;rootfs passthrough parameters\u0026gt; \u0026lt;BOS session id\u0026gt; "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/limit_the_scope_of_a_bos_session/",
	"title": "Limit The Scope Of A BOS Session",
	"tags": [],
	"description": "",
	"content": "Limit the Scope of a BOS Session The Boot Orchestration Service (BOS) supports an optional \u0026ndash;limit parameter when creating a session. This parameter can be used to further limit the nodes that BOS runs against, and is applied to all boot sets.\nThe --limit parameter takes a comma-separated list of nodes, groups, or roles in any combination. The BOS session will be limited to run against components that match both the boot set information and one or more of the nodes, groups, or roles listed in the limit.\nThe table below describes the operations that can be used to further limit the scope of a BOS session. Components are treated as OR operations unless preceded by one of the operations listed in the following table.\n   Operation Description     \u0026amp; Added to the beginning of a group or role to specify an intersection of groups.   ! Added to the beginning of a node, group, or role to exclude it.   all When only trying to exclude a node or group, the limit must start with \u0026ldquo;all\u0026rdquo;.    The table below helps demonstrate the logic used with the \u0026ndash;limit parameter and includes examples of how to limit against different nodes, groups, and roles.\n   Description Pattern Targets     All nodes all (or leave empty) All nodes   One node node1 node1   Multiple nodes node1,node2 node1 and node2   Excluding a node all,!node1 All nodes except node1   One group group1 Nodes in group1   Multiple groups group1,group2 Nodes in group1 or group2   Excluding groups group1,!group2 Nodes in group1 but not in group2   Intersection of groups group1,\u0026amp;group2 Nodes in both group1 and group2    The --limit parameter for BOS works similarly to the --ansible-limit parameter for CFS, as well as the --limit parameter for Ansible. Some limitations do apply for those familiar with the Ansible syntax. BOS accepts only a comma-separated list, not colons, and does not support regular expressions in the patterns. For more information on what it means to provide a limit, see Specifying Hosts and Groups.\n"
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/log_file_locations_and_ports_used_in_compute_node_boot_troubleshooting/",
	"title": "Log File Locations And Ports Used In Compute Node Boot Troubleshooting",
	"tags": [],
	"description": "",
	"content": "Log File Locations and Ports Used in Compute Node Boot Troubleshooting This section includes the port IDs and log file locations of components associated with the node boot process.\nLog File Locations The log file locations for ConMan, DHCP, and TFTP.\n  ConMan logs are located within the conman pod at /var/log/conman.log.\n  DHCP:\nncn-m001# kubectl logs DHCP_POD_ID   TFTP:\nncn-m001# kubectl logs -n services TFTP_POD_ID   Port IDs The following table includes the port IDs for DHCP and TFTP.\n   Component Port     DHCP server 67   DHCP client 68   TFTP server 69    "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/manage_a_bos_session/",
	"title": "Manage A BOS Session",
	"tags": [],
	"description": "",
	"content": "Manage a BOS Session Once there is a Boot Orchestration Service (BOS) session template created, users can perform operations on nodes, such as boot, reboot, configure, and shutdown. Managing sessions through the Cray CLI can be accomplished using the cray bos session commands.\nCreate a New Session Creating a new BOS session requires the following command-line options:\n --template-uuid: Use this option to specify the name value returned in the cray bos sessiontemplate list command. --operation: Use this option to indicate if a boot, reboot, configure, or shutdown action is being taken.  The following is a boot operation:\nncn-m001# cray bos session create --template-uuid SESSIONTEMPLATE_NAME --operation Boot Example output:\noperation = \u0026quot;Boot\u0026quot; templateUuid = \u0026quot;TEMPLATE_UUID\u0026quot; [[links]] href = \u0026quot;foo-c7faa704-3f98-4c91-bdfb-e377a184ab4f\u0026quot; jobId = \u0026quot;boa-a939bd32-9d27-433f-afc2-735e77ec8e58\u0026quot; rel = \u0026quot;session\u0026quot; type = \u0026quot;GET\u0026quot; List all Sessions List all existing BOS sessions with the following command:\nncn-m001# cray bos session list Example output:\nresults = [ \u0026quot;fc469e41-6419-4367-a571-d5fd92893398\u0026quot;, \u0026quot;st3-d6730dd5-f0f8-4229-b224-24df005cae52\u0026quot;,] Show Details for a Session Get details for a BOS session using the session ID returned in the cray bos session list command output.\nncn-m001# cray bos session describe BOS_SESSION_JOB_ID Example output:\ncomputes = \u0026quot;boot_finished\u0026quot; boa_finish = \u0026quot;2019-12-13 17:07:23.501674\u0026quot; bos_launch = \u0026quot;2019-12-13 17:02:24.000324\u0026quot; operation = \u0026quot;reboot\u0026quot; session_template_id = \u0026quot;cle-1.1.0\u0026quot; boa_launch = \u0026quot;2019-12-13 17:02:29.703310\u0026quot; stage = \u0026quot;Done\u0026quot; Troubleshooting: There is a known issue in BOS where some sessions cannot be described using the cray bos session describe command. The issue with the describe action results in a 404 error, despite the session existing in the output of cray bos session list command.\nDelete a Session Delete a specific BOS session:\nncn-m001# cray bos session delete BOS_SESSION_JOB_ID "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/manage_a_session_template/",
	"title": "Manage A Session Template",
	"tags": [],
	"description": "",
	"content": "Manage a Session Template A session template must be created before starting a session with the Boot Orchestration Service (BOS). Session templates are managed via the Cray CLI with the cray bos sessiontemplate commands.\nGet the Framework for a Session Template When creating a new BOS session template, it can be helpful to start with a framework and then edit it as needed. Use the following command to retrieve the BOS session template framework:\nncn-m001# cray bos sessiontemplatetemplate list --format json Example output:\n{ \u0026quot;boot_sets\u0026quot;: { \u0026quot;name_your_boot_set\u0026quot;: { \u0026quot;boot_ordinal\u0026quot;: 1, \u0026quot;etag\u0026quot;: \u0026quot;your_boot_image_etag\u0026quot;, \u0026quot;kernel_parameters\u0026quot;: \u0026quot;your-kernel-parameters\u0026quot;, \u0026quot;network\u0026quot;: \u0026quot;nmn\u0026quot;, \u0026quot;node_list\u0026quot;: [ \u0026quot;xname1\u0026quot;, \u0026quot;xname2\u0026quot;, \u0026quot;xname3\u0026quot; ], \u0026quot;path\u0026quot;: \u0026quot;your-boot-path\u0026quot;, \u0026quot;rootfs_provider\u0026quot;: \u0026quot;your-rootfs-provider\u0026quot;, \u0026quot;rootfs_provider_passthrough\u0026quot;: \u0026quot;your-rootfs-provider-passthrough\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;your-boot-type\u0026quot; } }, \u0026quot;cfs\u0026quot;: { \u0026quot;configuration\u0026quot;: \u0026quot;desired-cfs-config\u0026quot; }, \u0026quot;enable_cfs\u0026quot;: true, \u0026quot;name\u0026quot;: \u0026quot;name-your-template\u0026quot; } Create a Session Template with the Cray CLI The following command takes a JSON input file that contains the information required to create a new BOS session template. It reads it in and creates an actual BOS session template using the BOS API.\nncn-m001# cray bos sessiontemplate create --file INPUT_FILE --name NEW_TEMPLATE_NAME The following is an example of an input file:\n{ \u0026#34;cfs_url\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git\u0026#34;, \u0026#34;enable_cfs\u0026#34;: true, \u0026#34;name\u0026#34;: \u0026#34;cle-1.2.0\u0026#34;, \u0026#34;boot_sets\u0026#34;: { \u0026#34;boot_set1\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;nmn\u0026#34;, \u0026#34;boot_ordinal\u0026#34;: 1, \u0026#34;kernel_parameters\u0026#34;: \u0026#34;console=ttyS0,115200 bad_page=panic crashkernel=360M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell k8s_gw=api-gwservice-nmn.local quiet turbo_boost_limit=999\u0026#34;, \u0026#34;rootfs_provider\u0026#34;: \u0026#34;cpss3\u0026#34;, \u0026#34;node_list\u0026#34;: [ \u0026#34;x3000c0s19b1n0\u0026#34; ], \u0026#34;etag\u0026#34;: \u0026#34;90b2466ae8081c9a604fd6121f4c08b7\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/06901f40-f2a6-4a64-bc26-772a5cc9d321/manifest.json\u0026#34;, \u0026#34;rootfs_provider_passthrough\u0026#34;: \u0026#34;dvs:api-gw-service-nmn.local:300:eth0\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34; } }, \u0026#34;partition\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;cfs_branch\u0026#34;: \u0026#34;master\u0026#34; } Create a Session Template with a Bash Script A BOS session template can also be generated with a shell script, which directly uses the BOS API. The following is an example script for creating a session template. The get_token function retrieves a token that validates the request to the API gateway. The values in the body section of the script can be customized when creating a new session template.\n#!/bin/bash # Up to date as of 2020-02-05 ADMIN_SECRET=$(kubectl get secrets admin-client-auth -ojsonpath=\u0026#39;{.data.client-secret}\u0026#39; | base64 -d) TOKEN=$(curl -s -d grant_type=client_credentials \\  -d client_id=admin-client \\  -d client_secret=$ADMIN_SECRET \\  https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | python -c \u0026#39;import sys, json; print json.load(sys.stdin)[\u0026#34;access_token\u0026#34;]\u0026#39;) kernel_parameters=\u0026#34;console=ttyS0,115200 bad_page=panic crashkernel=360M hugepagelist=2m-2g \\ intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless \\ numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y \\ rd.neednet=1 rd.retry=10 rd.shell k8s_gw=api-gw-service-nmn.local quiet turbo_boost_limit=999\u0026#34; body=\u0026#39;{ \u0026#34;name\u0026#34;: \u0026#34;cle-1.2.0\u0026#34;, \u0026#34;boot_sets\u0026#34;: { \u0026#34;boot_set1\u0026#34;: { \u0026#34;boot_ordinal\u0026#34;: 1, \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/06901f40-f2a6-4a64-bc26-772a5cc9d321/manifest.json\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34;, \u0026#34;etag\u0026#34;: \u0026#34;90b2466ae8081c9a604fd6121f4c08b7\u0026#34;, \u0026#34;node_list\u0026#34;: [\u0026#34;x3000c0s19b1n0\u0026#34;], \u0026#34;rootfs_provider\u0026#34;: \u0026#34;cpss3\u0026#34;, \u0026#34;rootfs_provider_passthrough\u0026#34;: \u0026#34;dvs:api-gw-service-nmn.local:300:eth0\u0026#34;, \u0026#34;kernel_parameters\u0026#34;: \u0026#34;\u0026#39;\u0026#34;$kernel_parameters\u0026#34;\u0026#39;\u0026#34;, \u0026#34;network\u0026#34;: \u0026#34;nmn\u0026#34; }}, \u0026#34;cfs_branch\u0026#34;: \u0026#34;master\u0026#34;, \u0026#34;cfs_url\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git\u0026#34;, \u0026#34;enable_cfs\u0026#34;: true, \u0026#34;partition\u0026#34;: \u0026#34;\u0026#34; }\u0026#39; curl -i -X POST -s https://api-gw-service-nmn.local/apis/bos/v1/sessiontemplate \\  -H \u0026#34;Authorization: Bearer $TOKEN\u0026#34; \\  -H \u0026#34;Content-Type: application/json\u0026#34; \\  -d \u0026#34;$body\u0026#34; Either script above will generate the following session template:\nncn-m001# cray bos sessiontemplate describe session_template1 --format json Example output:\n{ \u0026quot;cfs_url\u0026quot;: \u0026quot;https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git\u0026quot;, \u0026quot;enable_cfs\u0026quot;: true, \u0026quot;name\u0026quot;: \u0026quot;cle-1.2.0\u0026quot;, \u0026quot;boot_sets\u0026quot;: { \u0026quot;boot_set1\u0026quot;: { \u0026quot;network\u0026quot;: \u0026quot;nmn\u0026quot;, \u0026quot;boot_ordinal\u0026quot;: 1, \u0026quot;kernel_parameters\u0026quot;: \u0026quot;console=ttyS0,115200 bad_page=panic crashkernel=360M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchr \u0026quot;rootfs_provider\u0026quot;: \u0026quot;cpss3\u0026quot;, \u0026quot;node_list\u0026quot;: [ \u0026quot;x3000c0s19b1n0\u0026quot; ], \u0026quot;etag\u0026quot;: \u0026quot;90b2466ae8081c9a604fd6121f4c08b7\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;s3://boot-images/06901f40-f2a6-4a64-bc26-772a5cc9d321/manifest.json\u0026quot;, \u0026quot;rootfs_provider_passthrough\u0026quot;: \u0026quot;dvs:api-gw-service-nmn.local:300:eth0\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;s3\u0026quot; } }, \u0026quot;partition\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;cfs_branch\u0026quot;: \u0026quot;master\u0026quot; } List All Session Templates Use the following command to view all of the available session templates:\nncn-m001# cray bos sessiontemplate list --format json Example output:\n[ { \u0026quot;enable_cfs\u0026quot;: true, \u0026quot;description\u0026quot;: \u0026quot;Template for booting compute nodes, generated by the installation\u0026quot;, \u0026quot;boot_sets\u0026quot;: { \u0026quot;computes\u0026quot;: { \u0026quot;network\u0026quot;: \u0026quot;nmn\u0026quot;, \u0026quot;rootfs_provider\u0026quot;: \u0026quot;cpss3\u0026quot;, \u0026quot;boot_ordinal\u0026quot;: 1, \u0026quot;kernel_parameters\u0026quot;: \u0026quot;console=ttyS0,115200 bad_page=panic crashkernel=360M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell k8s_gw=api-gw-service-nmn.local quiet turbo_boost_limit=999\u0026quot;, \u0026quot;node_roles_groups\u0026quot;: [ \u0026quot;Compute\u0026quot; ], \u0026quot;etag\u0026quot;: \u0026quot;b0ace28163302e18b68cf04dd64f2e01\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;s3://boot-images/ef97d3c4-6f10-4d58-b4aa-7b70fcaf41ba/manifest.json\u0026quot;, \u0026quot;rootfs_provider_passthrough\u0026quot;: \u0026quot;dvs:api-gw-service-nmn.local:300:eth0\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;s3\u0026quot; } }, \u0026quot;name\u0026quot;: \u0026quot;cle-1.2.0\u0026quot;, \u0026quot;cfs_branch\u0026quot;: \u0026quot;master\u0026quot;, \u0026quot;cfs_url\u0026quot;: \u0026quot;https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git\u0026quot; } ] [...] Show Details for a Session Template View the details for a specific session template. In the following example, the session template name is cle-1.2.0.\nncn-m001# cray bos sessiontemplate describe SESSION_TEMPLATE_NAME --format json Example output:\n{ \u0026quot;cfs_url\u0026quot;: \u0026quot;https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git\u0026quot;, \u0026quot;enable_cfs\u0026quot;: true, \u0026quot;description\u0026quot;: \u0026quot;Template for booting compute nodes, generated by the installation\u0026quot;, \u0026quot;boot_sets\u0026quot;: { \u0026quot;computes\u0026quot;: { \u0026quot;network\u0026quot;: \u0026quot;nmn\u0026quot;, \u0026quot;rootfs_provider\u0026quot;: \u0026quot;cpss3\u0026quot;, \u0026quot;boot_ordinal\u0026quot;: 1, \u0026quot;kernel_parameters\u0026quot;: \u0026quot;console=ttyS0,115200 bad_page=panic crashkernel=360M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell k8s_gw=api-gw-service-nmn.local quiet turbo_boost_limit=999\u0026quot;, \u0026quot;node_roles_groups\u0026quot;: [ \u0026quot;Compute\u0026quot; ], \u0026quot;etag\u0026quot;: \u0026quot;b0ace28163302e18b68cf04dd64f2e01\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;s3://boot-images/ef97d3c4-6f10-4d58-b4aa-7b70fcaf41ba/manifest.json\u0026quot;, \u0026quot;rootfs_provider_passthrough\u0026quot;: \u0026quot;dvs:api-gw-service-nmn.local:300:eth0\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;s3\u0026quot; } }, \u0026quot;cfs_branch\u0026quot;: \u0026quot;master\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;cle-1.2.0\u0026quot; } Delete a Session Template Remove an existing session template with the following command:\nncn-m001# cray bos sessiontemplate delete SESSIONTEMPLATE_NAME "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/node_boot_root_cause_analysis/",
	"title": "Node Boot Root Cause Analysis",
	"tags": [],
	"description": "",
	"content": "Node Boot Root Cause Analysis The first step in debugging compute node boot-related issues is to determine the underlying cause, and the stage that the issue was encountered at.\nThe ConMan tool collects compute node logs. To learn more about ConMan, refer to ConMan.\nA node\u0026rsquo;s console data can be accessed through its log file, as described in Access Compute Node Logs). This information can also be accessed by connecting to the node\u0026rsquo;s console with ipmitool. Refer to online documentation to learn more about using ipmitool.\n"
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/redeploy_the_ipxe_and_tftp_services/",
	"title": "Redeploy The IPXE And Tftp Services",
	"tags": [],
	"description": "",
	"content": "Redeploy the iPXE and TFTP Services Redeploy the iPXE and TFTP services if a pod with a ceph-fs Process Virtualization Service (PVS) on a Kubernetes worker node is causing a HEALTH_WARN error.\nResolve issues with ceph-fs and ceph-mds by restarting the iPXE and TFTP services. The Ceph cluster will return to a healthy state after this procedure.\nPrerequisites This procedure requires administrative privileges.\nProcedure   Find the iPXE and TFTP deployments.\nncn-m001# kubectl get deployments -n services|egrep \u0026#39;tftp|ipxe\u0026#39; Example output:\ncray-ipxe 1/1 1 1 22m cray-tftp 3/3 3 3 28m   Delete the deployments for the iPXE and TFTP services.\nncn-m001# kubectl -n services delete deployment cray-tftp ncn-m001# kubectl -n services delete deployment cray-ipxe   Check the status of Ceph.\nCeph commands need to be run on ncn-m001. If a health warning is shown after checking the status, the ceph-mds daemons will need to be restarted on the manager nodes.\n  Check the health of the Ceph cluster.\nncn-m001# ceph -s Example output:\n cluster: id: bac74735-d804-49f3-b920-cd615b18316b health: HEALTH_WARN 1 filesystem is degraded services: mon: 3 daemons, quorum ncn-m001,ncn-m002,ncn-m003 (age 13d) mgr: ncn-m001(active, since 24h), standbys: ncn-m002, ncn-m003 mds: cephfs:1/1 {0=ncn-m002=up:reconnect} 2 up:standby osd: 60 osds: 60 up (since 4d), 60 in (since 4d) rgw: 5 daemons active (ncn-s001.rgw0, ncn-s002.rgw0, ncn-s003.rgw0, ncn-s004.rgw0, ncn-s005.rgw0) data: pools: 13 pools, 1664 pgs objects: 2.47M objects, 9.3 TiB usage: 26 TiB used, 78 TiB / 105 TiB avail pgs: 1664 active+clean io: client: 990 MiB/s rd, 111 MiB/s wr, 2.76k op/s rd, 1.03k op/s wr   Obtain more information on the health of the cluster.\nncn-m001# ceph health detail Example output:\nHEALTH_WARN 1 filesystem is degraded FS_DEGRADED 1 filesystem is degraded fs cephfs is degraded   Show the status of all CephFS components.\nncn-m001# ceph fs status Example output:\ncephfs - 9 clients ====== +------+-----------+----------+----------+-------+-------+ | Rank | State | MDS | Activity | dns | inos | +------+-----------+----------+----------+-------+-------+ | 0 | reconnect | ncn-m002 | | 11.0k | 74 | +------+-----------+----------+----------+-------+-------+ +-----------------+----------+-------+-------+ | Pool | type | used | avail | +-----------------+----------+-------+-------+ | cephfs_metadata | metadata | 780M | 20.7T | | cephfs_data | data | 150M | 20.7T | +-----------------+----------+-------+-------+ +-------------+ | Standby MDS | +-------------+ | ncn-m003 | | ncn-m001 |   Restart the ceph-mds service.\nThis step should only be done if a health warning is shown in the previous substeps.\nncn-m001# for i in 1 2 3 ; do ansible ncn-m00$i -m shell -a \u0026#34;systemctl restart ceph-mds@ncn-m00$i\u0026#34;; done     Failover the ceph-mds daemon.\nThis step should only be done if a health warning still exists after restarting the ceph-mds service.\nncn-m001# ceph mds fail ncn-m002 The initial output will display the following:\ncephfs - 0 clients ====== +------+--------+----------+----------+-------+-------+ | Rank | State | MDS | Activity | dns | inos | +------+--------+----------+----------+-------+-------+ | 0 | **rejoin** | ncn-m003 | | 0 | 0 | +------+--------+----------+----------+-------+-------+ +-----------------+----------+-------+-------+ | Pool | type | used | avail | +-----------------+----------+-------+-------+ | cephfs_metadata | metadata | 781M | 20.7T | | cephfs_data | data | 117M | 20.7T | +-----------------+----------+-------+-------+ +-------------+ | Standby MDS | +-------------+ | ncn-m002 | | ncn-m001 | +-------------+ The rejoin status should turn to active:\ncephfs - 7 clients ====== +------+--------+----------+---------------+-------+-------+ | Rank | State | MDS | Activity | dns | inos | +------+--------+----------+---------------+-------+-------+ | 0 | **active** | ncn-m003 | Reqs: 0 /s | 11.1k | 193 | +------+--------+----------+---------------+-------+-------+ +-----------------+----------+-------+-------+ | Pool | type | used | avail | +-----------------+----------+-------+-------+ | cephfs_metadata | metadata | 781M | 20.7T | | cephfs_data | data | 117M | 20.7T | +-----------------+----------+-------+-------+ +-------------+ | Standby MDS | +-------------+ | ncn-m002 | | ncn-m001 | +-------------+   Ensure the service is deleted along with the associated PVC.\nThe output for the command below should empty. If an output is displayed, such as in the example below, then the resources have not been deleted.\nncn-m001# kubectl get pvc -n services|grep tftp Example of resources not being deleted in returned output:\ncray-tftp-shared-pvc Bound pvc-315d08b0-4d00-11ea-ad9d-b42e993b7096 5Gi RWX ceph-cephfs-external 29m Optional: Use the following command to delete the associated PVC.\nncn-m001# kubectl -n services delete pvc PVC_NAME   Deploy the TFTP service.\nWait for the TFTP pods to come online and verify the PVC was created.\nncn-m001# loftsman helm upgrade cray-tftp loftsman/cray-tftp   Deploy the iPXE service.\nThis may take a couple of minutes and may show up in error state. Wait a couple minutes and it will go to running.\nncn-m001# loftsman helm upgrade cms-ipxe loftsman/cms-ipxe   Log into the iPXE pod and verify the iPXE file was created.\nThis may take another couple of minutes while it is creating the files.\n  Find the iPXE pod ID.\nncn-m001# kubectl get pods -n services --no-headers -o wide | grep cray-ipxe | awk \u0026#39;{print $1}\u0026#39;   Log into the pod using the iPXE pod ID.\nncn-m001# kubectl exec -n services -it IPXE_POD_ID /bin/sh To see the containers in the pod:\nncn-m001# kubectl describe pod/CRAY-IPXE_POD_NAME -n services     Log into the TFTP pods and verify it is seeing the correct file size.\n  Find the TFTP pod ID.\nncn-m001# kubectl get pods -n services --no-headers -o wide | grep cray-tftp | awk \u0026#39;{print $1}\u0026#39; Example output:\ncray-tftp-7dc77f9cdc-bn6ml cray-tftp-7dc77f9cdc-ffgnh cray-tftp-7dc77f9cdc-mr6zd cray-tftp-modprobe-42648 cray-tftp-modprobe-4kmqg cray-tftp-modprobe-4sqsk cray-tftp-modprobe-hlfcc cray-tftp-modprobe-r6bvb cray-tftp-modprobe-v2txr   Log into the pod using the TFTP pod ID.\nncn-m001# kubectl exec -n services -it TFTP_POD_ID /bin/sh   Change to the /var/lib/tftpboot directory.\n# cd /var/lib/tftpboot   Check the ipxe.efi size on the TFTP servers.\nIf there are any issues, the file will have a size of 0 bytes.\n# ls -l Example output:\ntotal 1919 -rw-r--r-- 1 root root 980768 May 15 16:49 debug.efi -rw-r--r-- 1 root root 983776 May 15 16:50 ipxe.efi     "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/clean_up_logs_after_a_boa_kubernetes_job/",
	"title": "Clean Up Logs After A Boa Kubernetes Job",
	"tags": [],
	"description": "",
	"content": "Clean Up Logs After a BOA Kubernetes Job Delete log entries from previous boot orchestration jobs. The Boot Orchestration Service (BOS) launches a Boot Orchestration Agent (BOA) Kubernetes job. BOA then launches a Configuration Framework Service (CFS) session, resulting in a CFS-BOA Kubernetes job. Thus, there are two separate sets of jobs that can be removed.\nDeleting log entries creates more space and helps improve the usability of viewing logs.\nPrerequisites  A Boot Orchestration Service (BOS) session has finished.  Procedure   View the existing list of jobs.\nThe following command will list the BOA jobs.\nncn-m001# kubectl get jobs -n services | grep boa Example output:\nboa-2c2211aa-9876-4aa7-92e2-c8a64d9bd9a6 1/1 6m58s 13d boa-51918dbd-bde2-4836-9500-2a7bad93787c 1/1 65s 9d boa-6fc198cc-486b-4340-81e0-f17c199a1ec6 1/1 97s 9d boa-8656f64d-baa9-43ea-9e11-2a0b27e89037 1/1 17m 13d boa-86b78489-1d76-4957-9c0e-a7b1d6665c35 1/1 15m 13d boa-a939bd32-9d27-433f-afc2-735e77ec8e58 1/1 13m 13d boa-e9adfa63-24dc-4da6-b870-b3535adf0bcc 1/1 7m53s 13d   Delete any jobs that are no longer needed.\nDo not delete any jobs that are currently running.\nncn-m001# kubectl delete jobs BOA_JOB_ID   "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/compute_node_boot_issue_symptom_duplicate_address_warnings_and_declined_dhcp_offers_in_logs/",
	"title": "Compute Node Boot Issue Symptom Duplicate Address Warnings And Declined DHCP Offers In Logs",
	"tags": [],
	"description": "",
	"content": "Compute Node Boot Issue Symptom: Duplicate Address Warnings and Declined DHCP Offers in Logs If the DHCP and node logs show duplicate address warnings and indicate declined DHCP offers, it may be because another component owns the IP address that DHCP is trying to assign to a node. If this happens, the node will not accept the IP address and will repeatedly submit a DHCP discover request. As a result, the node and DHCP become entangled in a loop of requesting and rejecting. This often happens when DHCP is statically assigning IP addresses to nodes, but the assigned IP address for a node has already been assigned to another component.\nSymptoms This scenario results in node logs similar to the following:\nNode log:\n[ 97.946332] dracut Warning: Duplicate address detected for 10.100.160.195 while doing dhcp. retrying [ 97.789015] dracut-initqueue[604]: dracut Warning: Duplicate address detected for 10.100.160.195 while doing dhcp. \\ retrying [ 108.007243] dracut Warning: Duplicate address detected for 10.100.160.195 while doing dhcp. retrying [ 107.873650] dracut-initqueue[604]: dracut Warning: Duplicate address detected for 10.100.160.195 while doing dhcp. \\ retrying [ 110.082877] dracut Warning: Duplicate address detected for 10.100.160.195 while doing dhcp. retrying DHCP log:\nAbandoning IP address 10.100.160.195: declined. DHCPDECLINE of 10.100.160.195 from a4:bf:01:2e:81:4c (undefined) via eth0: abandoned DHCPOFFER on 10.100.160.195 to \u0026#34;\u0026#34; (undefined) via eth0 DHCPREQUEST for 10.100.160.195 (10.100.160.2) from a4:bf:01:29:92:be via eth0: unknown lease 10.100.160.195. DHCPREQUEST for 10.100.160.195 (10.100.160.2) from a4:bf:01:29:92:eb via eth0: unknown lease 10.100.160.195. DHCPOFFER on 10.100.160.195 to a4:bf:01:2e:81:4c via eth0 DHCPREQUEST for 10.100.160.195 (10.100.160.2) from a4:bf:01:2e:81:4c via eth0 DHCPACK on 10.100.160.195 to a4:bf:01:2e:81:4c via eth0 Abandoning IP address 10.100.160.195: declined. Notice that two different components (identifiable by the two different MAC addresses a4:bf:01:29:92:eb and a4:bf:01:2e:81:4c) have made DHCP requests for the IP address 10.100.160.195.\na4:bf:01:29:92:eb is the component that owns the IP address 10.100.160.195, while a4:bf:01:2e:81:4c has been statically assigned the IP address 10.100.160.195 in the DHCP configuration file. As such, DHCP keeps trying to assign it that address, but after being offered the address, a4:bf:01:2e:81:4c declines it because it realizes that a4:bf:01:29:92:eb already owns it.\nProblem Detection There are multiple ways to check if this problem exists:\n  Ping the IP address and see if another component responds. Log into the component and determine its IP address. If it is the same as the IP address that DHCP is attempting to assign, then this issue does exist.\n  Check the Address Resolution Protocol (ARP) cache using the arp command. Because it is a cache, it is possible that IP addresses can age out of the cache, so the IP address may not be present. If the address that is failing to be assigned is in the ARP cache, and it is assigned to a node with a different MAC address, then that is confirmation that this problem has occurred.\nncn-m001# arp Example output:\nAddress HWtype HWaddress Flags Mask Iface ncn-w002.local ether 98:03:9b:b4:f1:fe C bond0.nmn0 10.46.11.201 ether ca:d3:dc:33:29:e7 C weave 10.46.12.7 ether 7e:7e:7f:f0:0d:2d C weave 10.46.11.197 ether 62:4c:91:91:ec:9f C weave 10.46.11.193 ether 52:dd:02:01:34:ab C weave 10.32.0.5 ether ba:ff:65:af:a7:4e C weave 10.46.11.191 ether be:36:79:07:84:08 C weave 10.45.1.121 ether fe:93:50:63:9a:fd C weave 10.46.11.187 ether e6:2e:8c:ed:f8:78 C weave 10.46.11.250 ether c6:73:6d:c4:b9:77 C weave 10.48.15.0 ether da:c2:40:ed:f4:ec CM flannel.2 [...]   Resolution Force the component that has been assigned an incorrect IP address to request another one. This may involve powering that component down and then back up.\n"
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/compute_node_boot_issue_symptom_message_about_invalid_eeprom_checksum_in_node_console_or_log/",
	"title": "Compute Node Boot Issue Symptom Message About Invalid Eeprom Checksum In Node Console Or Log",
	"tags": [],
	"description": "",
	"content": "Compute Node Boot Issue Symptom: Message About Invalid EEPROM Checksum in Node Console or Log On rare occasions, the processor hardware may lose the Serial Over Lan (SOL) connections and may need to be reseated to allow the node to successfully boot.\nSymptoms This issue can be identified if the following is displayed in the node\u0026rsquo;s console or log:\nconsole.38:2018-09-08 04:54:51 [ 16.721165] ixgbe 0000:18:00.0: The EEPROM Checksum Is Not Valid console.38:2018-09-08 04:55:00 [ 25.768872] ixgbe 0000:18:00.1: The EEPROM Checksum Is Not Valid The following figure shows that the EEPROM checksum errors lead to a dracut-initqueue timeout, and eventually cause the node to drop into the dracut emergency shell.\nProblem Detection Run dmidecode from the compute node to identify its model. H87926-500 is the silver model that may exhibit this issue, whereas the production model, H87926-550, does not exhibit SOL connection issues.\ncmp4:~ # dmidecode|grep H87926 Example output:\n Version: H87926-550 Resolution One way to resolve this issue is to ensure that the latest ixgbe network driver is installed on the nodes.\n"
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/compute_node_boot_issue_symptom_node_is_not_able_to_download_the_required_artifacts/",
	"title": "Compute Node Boot Issue Symptom Node Is Not Able To Download The Required Artifacts",
	"tags": [],
	"description": "",
	"content": "Compute Node Boot Issue Symptom: Node is Not Able to Download the Required Artifacts If either or both of the kernel or the initrd boot artifacts are missing from the artifact repository, Boot Script Service (BSS), or both, the node will not be able to download the required boot artifacts and will fail to boot.\nSymptoms The node\u0026rsquo;s console or log will display lines beginning with, \u0026lsquo;'Could not start download'\u0026rsquo;. Refer to the image below for an example of this error message.\nProblem Detection Use the following command from a non-compute node (NCN) to see which boot artifacts BSS assumes as those used for booting the node.\nncn-m001# cray bss bootparameters list Each boot artifact has a download URL, as shown in the following example output:\n[[results]] kernel = \u0026quot;s3://boot-images/dc87a741-f7cc-4167-afae-592c5a8ca7ec/vmlinuz-4.12.14-197.29_9.1.14-cray_shasta_c\u0026quot; [[results]] kernel = \u0026quot;s3://boot-images/89e5a1dc-0caa-418a-9742-a832829db0ab/kernel\u0026quot; [[results]] kernel = \u0026quot;s3://boot-images/97b548b9-2ea9-45c9-95ba-dfc77e5522eb/kernel\u0026quot; [[results]] kernel = \u0026quot;s3://boot-images/29c2cc23-a9d6-4e9a-ab1a-b5fa9270c975/kernel\u0026quot; [[results]] initrd = \u0026quot;s3://boot-images/dc87a741-f7cc-4167-afae-592c5a8ca7ec/initrd-4.12.14-197.29_9.1.14-cray_shasta_c\u0026quot; [[results]] initrd = \u0026quot;s3://boot-images/97b548b9-2ea9-45c9-95ba-dfc77e5522eb/initrd\u0026quot; [[results]] initrd = \u0026quot;s3://boot-images/89e5a1dc-0caa-418a-9742-a832829db0ab/initrd\u0026quot; [[results]] initrd = \u0026quot;s3://boot-images/29c2cc23-a9d6-4e9a-ab1a-b5fa9270c975/initrd\u0026quot; [[results]] params = \u0026quot;console=ttyS0,115200n8 console=tty0 initrd=37103ceb-3813-45ba-85b0-a8fc53edd5da rw selinux=0 nofb rd.shell rd.net.timeout.carrier=20 ip=dhcp rd.neednet=1 rd.retry=60 crashkernel=360M reds=use_server api_gw_ip=api-gw-service-nmn.local\u0026quot; initrd = \u0026quot;s3://boot-images/97b548b9-2ea9-45c9-95ba-dfc77e5522eb/initrd\u0026quot; hosts = [ \u0026quot;Unknown-x86_64\u0026quot;,] kernel = \u0026quot;s3://boot-images/97b548b9-2ea9-45c9-95ba-dfc77e5522eb/kernel\u0026quot; Use the artifact\u0026rsquo;s S3 key to download it:\nncn-m001# cray artifacts get S3_BUCKET S3_OBJECT_KEY DOWNLOAD_FILE_PATH For example, if s3://boot-images/97b548b9-2ea9-45c9-95ba-dfc77e5522eb/initrd is the S3 URI for the file initrd, run the following command:\nncn-m001# cray artifacts get boot-images \\ 97b548b9-2ea9-45c9-95ba-dfc77e5522eb/initrd initrd This command will return 404 errors if the specified object does not exist in the S3 bucket.\nResolution Ensure that the required boot artifacts are stored in the artifact repository and/or BSS. If the artifact\u0026rsquo;s name is different than what is already in BSS, then BSS needs to be updated to match.\n"
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/compute_node_boot_sequence/",
	"title": "Compute Node Boot Sequence",
	"tags": [],
	"description": "",
	"content": "Compute Node Boot Sequence Provides an overview of the compute node boot process and touches upon the fact that issues can be encountered during this process.\nThe following is a high-level overview of the boot sequence for compute nodes:\n  The compute node is powered on.\n  The BIOS issues a DHCP discover request.\n  DHCP responds with the following:\n next-server, which is the IP address of the TFTP server. The name of the file to download from the TFTP server.    The node\u0026rsquo;s PXE sends a TFTP request to the TFTP server.\n  If the TFTP server has the requested file, it sends it to the node\u0026rsquo;s PXE. In this case, the file name is ipxe.efi, which is a Cray-crafted iPXE binary that points at the Boot Script Service (BSS). The BSS will then serve up another iPXE boot script.\n  The ipxe.efi file downloads another ipxe boot script from BSS.\nThis script provides information for downloading:\n The location of kernel. The location of initrd. A string containing the kernel parameters.    The node attempts to download kernel and initrd boot artifacts. If successful, it will boot using these and the kernel parameters. Otherwise, it will retry to download these boot artifacts indefinitely.\n  There may be times when certain issues may be encountered during the compute node boot up process. In order to resolve these issues, it is important to understand the underlying cause, symptoms, and stage at which the issue has occurred. The exact process and tools required to resolve the issue depends on this information.\n"
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/configure_the_bos_timeout_when_booting_nodes/",
	"title": "Configure The BOS Timeout When Booting Compute Nodes",
	"tags": [],
	"description": "",
	"content": "Configure the BOS Timeout When Booting Compute Nodes Manually update the boa-job-template ConfigMap to tune the timeout and sleep intervals for the Boot Orchestration Agent (BOA). Correcting the timeout value is a good troubleshooting option for when BOS sessions hang waiting for nodes to be in a Ready state.\nIf the BOS timeout occurs when booting compute nodes, the system will be unable to boot via BOS.\nPrerequisites A Boot Orchestration Service (BOS) session was run and compute nodes are failing to move to a Ready state.\nProcedure   Edit the boa-job-template ConfigMap to add the new timeout values.\nncn-m001# kubectl edit configmap -n services boa-job-template Node boots can be set to time out faster by adding the following environment variables to the boa-job-template. These variables do not appear in the ConfigMap by default.\n  NODE_STATE_CHECK_NUMBER_OF_RETRIES\nBOA will check on the expected state of nodes this many times before giving up. This number can be set to a very low number to make BOA time-out quickly.\n  NODE_STATE_CHECK_SLEEP_INTERVAL\nThis is how long BOA will sleep between checks. This number can be set to a very low number to make BOA time-out quickly.\n  The current default behavior in the absence of these parameters is 5 seconds (sleep interval) x 120 (retries), which has a timeout of 600 seconds or 10 minutes. The default values are shown below:\n- name: \u0026#34;NODE_STATE_CHECK_NUMBER_OF_RETRIES\u0026#34; value: \u0026#34;120\u0026#34; - name: \u0026#34;NODE_STATE_CHECK_SLEEP_INTERVAL\u0026#34; value: \u0026#34;5\u0026#34; The example below increases the number of retries to 360, which results in a timeout of 1800 seconds or 30 minutes if the sleep interval is not changed from the default value of 5 seconds. Different values might be needed depending on system size.\nAdd the following values to the ConfigMap:\n- name: \u0026#34;NODE_STATE_CHECK_NUMBER_OF_RETRIES\u0026#34; value: \u0026#34;360\u0026#34; The new variables need to be placed under the environment (env:) section in the ConfigMap. As an example, the env section in the ConfigMap looks as below.\nenv: - name: OPERATION value: \u0026#34;{{ operation }}\u0026#34; - name: SESSION_ID value: \u0026#34;{{ session_id }}\u0026#34; - name: SESSION_TEMPLATE_ID value: \u0026#34;{{ session_template_id }}\u0026#34; - name: SESSION_LIMIT value: \u0026#34;{{ session_limit }}\u0026#34; - name: DATABASE_NAME value: \u0026#34;{{ DATABASE_NAME }}\u0026#34; - name: DATABASE_PORT value: \u0026#34;{{ DATABASE_PORT }}\u0026#34; - name: LOG_LEVEL value: \u0026#34;{{ log_level }}\u0026#34; - name: SINGLE_THREAD_MODE value: \u0026#34;{{ single_thread_mode }}\u0026#34; - name: S3_ACCESS_KEY valueFrom: secretKeyRef: name: {{ s3_credentials }} key: access_key - name: S3_SECRET_KEY valueFrom: secretKeyRef: name: {{ s3_credentials }} key: secret_key - name: GIT_SSL_CAINFO value: /etc/cray/ca/certificate_authority.crt - name: S3_PROTOCOL value: \u0026#34;{{ S3_PROTOCOL }}\u0026#34; - name: S3_GATEWAY value: \u0026#34;{{ S3_GATEWAY }}\u0026#34; **- name: \u0026#34;NODE_STATE_CHECK_NUMBER_OF_RETRIES\u0026#34; value: \u0026#34;360\u0026#34;**   Restart BOA.\nRestarting BOA will allow the new timeout values to take effect.\nncn-m001# kubectl scale deployment -n services cray-bos --replicas=0 ncn-m001# kubectl scale deployment -n services cray-bos --replicas=1   "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/create_a_session_template_to_boot_compute_nodes_with_cps/",
	"title": "Create A Session Template To Boot Compute Nodes With Cps",
	"tags": [],
	"description": "",
	"content": "Create a Session Template to Boot Compute Nodes with CPS When compute nodes are booted, the Content Projection Service (CPS) and Data Virtualization Service (DVS) project the root file system (rootfs) over the network to the compute nodes by default.\nAnother option when compute nodes are booted is to download their rootfs into RAM.\nProcedure   Use either the cray bos session create CLI command or the bash script to create a session template.\nRefer to Manage a Session Template for more information about creating a session template.\nThe Simple Storage Service (S3) parameters that are used in the scripts are shown below:\n  type: Set to s3\n  path: Set to s3://\u0026lt;BUCKET_NAME\u0026gt;/\u0026lt;KEY_NAME\u0026gt;\n  etag: Set to \u0026lt;etag\\\u0026gt; The following values need to be set below to make CPS the rootfs provider:\n  \u0026quot;rootfs_provider\u0026quot;: is set to \u0026quot;cpss3\u0026quot;\n  \u0026quot;rootfs_provider_passthrough\u0026quot;: is set to \u0026quot;dvs:api-gw-service-nmn.local:300:eth0\u0026quot; The Content Projection Service (CPS) is an optional provider for rootfs on compute nodes. The rootfs_provider_passthrough parameter is customized according to the following format:\n  rootfs_provider_passthrough=\u0026lt;transport\u0026gt;:\u0026lt;api_gateway\u0026gt;:\u0026lt;timeout\u0026gt;:interface[,\u0026lt;interface\u0026gt;[,\u0026lt;interface\u0026gt;]...]:\u0026lt;ramroot\u0026gt; The variables used in this parameter represent the following:\n  \u0026lt;transport\u0026gt;\nFile system network transport (For example, NFS and DVS).\nCan be left as an empty string to use the default value dvs.\n  \u0026lt;api_gateway\u0026gt;\nName or address of the Kubernetes API gateway.\nCan be left as an empty string to use the default value api-gw-service-nmn.local.\n  \u0026lt;timeout\u0026gt;\nThe timeout, in seconds, for attempting to mount the netroot via CPS.\nCan be left as an empty string to use the default value of 300 seconds.\n  \u0026lt;etag\u0026gt;\nLists the syntax in use. BOS fills in the s3-path and etag values, so the user does not need to fill in any data.\n  interface[,\u0026lt;interface\u0026gt;[,\u0026lt;interface\u0026gt;]\u0026hellip;]\nA comma-separated list of interfaces to support. A minimum of one interface must be specified.\nThe first interface specified must exist on the node or the module will exit with an error. Any other specified interface that is not found on the node will be ignored. The module will wait until all specified and existing interfaces are up before proceeding with boot. The first interface specified will be passed to the CPS mount command to identify the interface to be used for mounting.\n  \u0026lt;ramroot\u0026gt;\nIndicates that the specified S3 path should be copied to RAM (tmpfs) and mounted locally instead of persisting as a remote file system mount.\nCan be left empty. Any string except \u0026ldquo;0\u0026rdquo; is interpreted as True.\n  For example:\nrootfs_provider_passthrough=dvs:api-gw-service-nmn.local:300:eth0 BOS will construct the root= kernel parameter, which will be used by the node when it boots, based on the rootfs_provider and rootfs_provider_passthrough values.\nFor CPS, BOS supplies a protocol craycps-s3, the S3 path to the rootfs, and the etag value (if it exists). The rest of the parameters are supplied from the rootfs_provider_passthrough values as specified above.\nBOS will construct it in the following format:\nroot=craycps-s3:s3-path:\u0026lt;etag\u0026gt;:\u0026lt;transport\u0026gt;:\u0026lt;api_gateway\u0026gt;:\u0026lt;timeout\u0026gt;:interface[,\u0026lt;interface\u0026gt;[,\u0026lt;interface\u0026gt;]...]:\u0026lt;ramroot\u0026gt; The following is an example of an input file to use with the Cray CLI:\n{ \u0026#34;enable_cfs\u0026#34;: true, \u0026#34;description\u0026#34;: \u0026#34;Template for booting compute nodes, generated by the installation\u0026#34;, \u0026#34;boot_sets\u0026#34;: { \u0026#34;computes\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;nmn\u0026#34;, \u0026#34;rootfs_provider\u0026#34;: \u0026#34;cpss3\u0026#34;, \u0026#34;boot_ordinal\u0026#34;: 1, \u0026#34;kernel_parameters\u0026#34;: \u0026#34;console=ttyS0,115200 bad_page=panic crashkernel=360M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell k8s_gw=api-gw-service-nmn.local quiet turbo_boost_limit=999\u0026#34;, \u0026#34;node_roles_groups\u0026#34;: [ \u0026#34;Compute\u0026#34; ], \u0026#34;etag\u0026#34;: \u0026#34;b0ace28163302e18b68cf04dd64f2e01\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/ef97d3c4-6f10-4d58-b4aa-7b70fcaf41ba/manifest.json\u0026#34;, \u0026#34;rootfs_provider_passthrough\u0026#34;: \u0026#34;dvs:api-gw-service-nmn.local:300:eth0\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34; } }, \u0026#34;name\u0026#34;: \u0026#34;cps_rootfs_template\u0026#34;, \u0026#34;cfs_branch\u0026#34;: \u0026#34;master\u0026#34;, \u0026#34;cfs_url\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git\u0026#34; } Or use a bash script to setup a session template using the BOS API.\n#!/bin/bash function get_token () { ADMIN_SECRET=$(kubectl get secrets admin-client-auth -ojsonpath=\u0026#39;{.data.client-secret}\u0026#39; | base64 -d) curl -s -d grant_type=client_credentials -d client_id=admin-client -d client_secret=$ADMIN_SECRET \\  https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | python3 -c \u0026#39;import sys, json; print(json.load(sys.stdin)[\u0026#34;access_token\u0026#34;])\u0026#39; } body=\u0026#39; { \u0026#34;name\u0026#34;: \u0026#34;st1\u0026#34;, \u0026#34;boot_sets\u0026#34;: { \u0026#34;boot_set1\u0026#34;: { \u0026#34;boot_ordinal\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;s3\u0026#34;, \u0026#34;etag\u0026#34;: \u0026#34;foo\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;s3://boot-images/ef97d3c4-6f10-4d58-b4aa-7b70fcaf41ba/manifest.json\u0026#34;, \u0026#34;node_roles_groups\u0026#34;: [\u0026#34;Compute\u0026#34;], \u0026#34;node_list\u0026#34;: [\u0026#34;\u0026#34;], \u0026#34;rootfs_provider\u0026#34;: \u0026#34;cps\u0026#34;, \u0026#34;rootfs_provider_passthrough\u0026#34;: \u0026#34;dvs:api-gw-service-nmn.local:300:eth0\u0026#34;, \u0026#34;kernel_parameters\u0026#34;: \u0026#34;console=ttyS0,115200 bad_page=panic crashkernel=360M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell k8s_gw=api-gw-service-nmn.local quiet turbo_boost_limit=999\u0026#34;, \u0026#34;network\u0026#34;: \u0026#34;nmn\u0026#34; } }, \u0026#34;cfs_branch\u0026#34;: \u0026#34;master\u0026#34;, \u0026#34;cfs_url\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/config-management.git\u0026#34;, \u0026#34;enable_cfs\u0026#34;: true, \u0026#34;partition\u0026#34;: \u0026#34;\u0026#34; }\u0026#39; curl -i -X POST -s https://api-gw-service-nmn.local/apis/bos/v1/sessiontemplate \\  -H \u0026#34;Authorization: Bearer $(get_token)\u0026#34; \\  -H \u0026#34;Content-Type: application/json\u0026#34; \\  -d \u0026#34;$body\u0026#34;   The new CPS-based session template can be used when creating a BOS session. The following is an example of creating a reboot session using the CLI:\nncn# cray bos session create --template-uuid cps_rootfs_template --operation Reboot "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/edit_the_ipxe_embedded_boot_script/",
	"title": "Edit The IPXE Embedded Boot Script",
	"tags": [],
	"description": "",
	"content": "Edit the iPXE Embedded Boot Script Manually adjust the iPXE embedded boot script to change the order of network interfaces for DHCP request. Changing the order of network interfaces for DHCP requests helps improve boot time performance.\nPrerequisites This procedure requires administrative privileges.\nProcedure   Edit the ConfigMap using one of the following options.\nNOTE: Save a backup of the ConfigMap before making any changes.\nThe following is an example of creating a backup:\nncn-m001# kubectl get configmap -n services cray-ipxe-bss-ipxe \\  -o yaml \u0026gt; /root/cray-ipxe-bss-ipxe-backup.yaml Administrators can add, remove, or reorder sections in the ConfigMap related to the interface being used.\nIn the following example, the net2 section is located before the net0 section. If an administrator wants net0 to be run first, they could move the net0 section to be located before the net2 section.\n:net2 dhcp net2 || goto net2_stop echo net2 IPv4 lease: ${ip} mac: ${net2/mac} chain --timeout 10000 https://api-gw-service-nmn.local/apis/bss/boot/v1/bootscript?mac=${net2/mac} || echo Failed to retrieve next chain from Boot Script Service over net2 (https://api-gw-service-nmn.local/apis/bss/boot/v1/bootscript?mac=${net2/mac} \u0026amp;\u0026amp; goto net2_stop :net2_stop ifclose net2 || echo No routes to drop. :net0 dhcp net0 || goto net0_stop echo net0 IPv4 lease: ${ip} mac: ${net0/mac} chain --timeout 10000 https://api-gw-service-nmn.local/apis/bss/boot/v1/bootscript?mac=${net0/mac} || echo Failed to retrieve next chain from Boot Script Service over net0 (https://api-gw-service-nmn.local/apis/bss/boot/v1/bootscript?mac=${net0/mac} \u0026amp;\u0026amp; goto net0_stop :net0_stop ifclose net0 || echo No routes to drop.   Option 1: Edit the cray-ipxe-bss-ipxe ConfigMap directly.\nncn-m001# kubectl edit configmap -n services cray-ipxe-bss-ipxe   Option 2: Edit the ConfigMap by saving the file, editing it, and reloading the ConfigMap.\n  Save the file.\nncn-m001# kubectl get configmap -n services cray-ipxe-bss-ipxe \\  -o yaml \u0026gt; /root/cray-ipxe-bss-ipxe.yaml   Edit the cray-ipxe-bss-ipxe.yaml file.\nncn-m001# vi /root/cray-ipxe-bss-ipxe.yaml   Reload the ConfigMap.\nDeleting and recreating the ConfigMap will reload it.\nncn-m001# kubectl delete configmap -n services cray-ipxe-bss-ipxe ncn-m001# kubectl create -f /root/cray-ipxe-bss-ipxe.yaml       Delete the iPXE pod to ensure the updated ConfigMap will be used.\n  Find the pod ID.\nncn-m001# kubectl -n services get pods|grep cray-ipxe cray-ipxe-5dddfc65f-qfmrr 2/2 Running 2 39h   Delete the pod.\nReplace CRAY-IPXE_POD_ID with the value returned in the previous step. In this example, the pod ID is cray-ipxe-5dddfc65f-qfmrr.\nncn-m001# kubectl -n services delete pod CRAY-IPXE_POD_ID     Wait about 30 seconds for the iPXE binary to be regenerated, and then the nodes will pick up the new ipxe.efi binary.\n"
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/healthy_compute_node_boot_process/",
	"title": "Healthy Compute Node Boot Process",
	"tags": [],
	"description": "",
	"content": "Healthy Compute Node Boot Process In order to investigate node boot-related issues, it is important to understand the flow of a healthy boot process and the associated components. This section outlines the normal flow of components that play a role in booting compute nodes, including DHCP, BSS, and TPTP.\nDHCP A healthy DHCP exchange between server and client looks like the following:\n   Traffic Description Sender     DHCP Discover A broadcast request from the client requesting an IP address. The request contains the client\u0026rsquo;s MAC address. Client   DHCP Offer The server offers an IP address to the client. Server   DHCP Request After testing the IP address to see that it is not in use, the client requests the proffered IP address. Client   DHCP ACK The server acknowledges that the client owns the lease on the IP address. Server    The following figure shows what a healthy DHCP discover process looks like via Wireshark, which is a packet analyzer:\nThe DHCP client uses port 68, whereas the DHCP server uses port 67. Unlike most Kubernetes pods, the DHCP pod is located on the host network.\nTFTP A healthy TFTP exchange between server and client looks like the following.\n   Traffic Description Sender     Read Request File: filename tsize=0 The client requests a file with a tsize equal to zero. Client   Option Acknowledgement The server acknowledges the request and provides the file\u0026rsquo;s size and block transfer size. Server   Error Code, Code: Option negotiation failed, Message: User aborted the transfer The client aborts the transfer once it determines the file size. Client   Read Request File: filename The client requests the file again. Client   Option Acknowledgement The server acknowledges the request and provides the block transfer size. Server   Acknowledgement, Block: 0 The client acknowledges the server. Client   Data Packet, Block: 1 The server sends the first data packet. Server   Acknowledgement, Block: 1 The client acknowledges reception of block 1. Client    The last two steps repeat until the file transfer is complete. The last block from the server will be labeled as (Last). The TFTP server listens on port 69. Kubernetes forwards port 69 on every node in the Kubernetes cluster to the TFTP pod.\nBoot Script Service (BSS) A healthy transaction with the Boot Script Service (BSS) looks similar to the following:\nncn-m001# cray bss bootscript list --mac a4:bf:01:3e:c0:a2 Example output:\n#!ipxe kernel --name kernel http://rgw.local:8080/boot-images/29c2cc23-a9d6-4e9a-ab1a-b5fa9270c975/kernel?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=5RN45WD0L8KY8W4317WP%2F20200326%2Fdefault%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20200326T185958Z\u0026amp;X-Amz-Expires=86400\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Signature=43f5b0c5909ee51dabc564d2b72401983ff8fd03cc6fc309b04cb16e67f1989d initrd=initrd console=ttyS0,115200 bad_page=panic crashkernel=360M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell k8s_gw=api-gw-service-nmn.local quiet turbo_boost_limit=999 root=craycps-s3:s3://boot-images/29c2cc23-a9d6-4e9a-ab1a-b5fa9270c975/rootfs:8c274aecef9e1668a8a44e8cfc2b24b5-165:dvs:api-gw-service-nmn.local:300:eth0 xname=x3000c0s17b4n0 nid=4 || goto boot_retry initrd --name initrd http://rgw.local:8080/boot-images/29c2cc23-a9d6-4e9a-ab1a-b5fa9270c975/initrd?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=5RN45WD0L8KY8W4317WP%2F20200326%2Fdefault%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20200326T185958Z\u0026amp;X-Amz-Expires=86400\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Signature=d18f8da89108b9f2e659d7bbefcd106d5f13703a59f8ca837bcbc5938a9f9cc5 || goto boot_retry boot || goto boot_retry :boot_retry sleep 30 chain https://api-gw-service-nmn.local/apis/bss/boot/v1/bootscript?mac=a4:bf:01:3e:f9:28\u0026amp;retry=1 "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/boot_issue_symptom_node_hsn_interface_does_not_appear_or_shows_no_link_detected/",
	"title": "Boot Issue Symptom Node HSN Interface Does Not Appear Or Show Detected Links Detected",
	"tags": [],
	"description": "",
	"content": "Boot Issue Symptom: Node HSN Interface Does Not Appear or Show Detected Links Detected A node may fail to boot if the HSN interface is experiencing issues, or if it is not able to detect any links.\nSymptom The node\u0026rsquo;s HSN interface does not appear in the output of the ip addr command or the output of the ethtool interface command shows no link detected.\nResolution Reseat the node\u0026rsquo;s PCIe card.\n"
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/boot_orchestration/",
	"title": "Boot Orchestration",
	"tags": [],
	"description": "",
	"content": "Boot Orchestration The Boot Orchestration Service (BOS) is responsible for booting, configuring, and shutting down collections of nodes. This is accomplished using BOS components, such as boot orchestration session templates and sessions, as well as launching a Boot Orchestration Agent (BOA) that fulfills boot requests.\nBOS users create a BOS session template via the REST API. A session template is a collection of metadata for a group of nodes and their desired boot artifacts and configuration. A BOS session can then be created by applying an action to a session template. The available actions are boot, reboot, shutdown, and configure. BOS will create a Kubernetes BOA job to apply an action. BOA coordinates with the underlying subsystems to complete the action requested. The session can be monitored to determine the status of the request.\nBOS depends on each of the following services to complete its tasks:\n BOA - Handles any action type submitted to the BOS API. BOA jobs are created and launched by BOS. Boot Script Service (BSS) - Stores the configuration information that is used to boot each hardware component. Nodes consult BSS for their boot artifacts and boot parameters when nodes boot or reboot. Configuration Framework Service (CFS) - BOA launches CFS to apply configuration to the nodes in its boot sets (node personalization). Cray Advanced Platform Monitoring and Control (CAPMC) - Used to power on and off the nodes. Hardware State Manager (HSM) - Tracks the state of each node and what groups and roles nodes are included in.  Use the BOS Cray CLI Commands BOS utilizes the Cray CLI commands. The latest API information can be found with the following command:\nncn-m001# cray bos list Example output:\n[[results]] major = \u0026quot;1\u0026quot; minor = \u0026quot;0\u0026quot; patch = \u0026quot;0\u0026quot; [[results.links]] href = \u0026quot;https://api-gw-service-nmn.local/apis/bos/v1\u0026quot; rel = \u0026quot;self\u0026quot; BOS API Changes in Upcoming CSM-1.2.0 Release This is a forewarning of changes that will be made to the BOS API in the upcoming CSM-1.2.0 release. The following changes will be made:\n The --template-body option for the Cray CLI bos command will be deprecated. Performing a GET on the session status for a boot set (i.e. /v1/session/{session_id}/status/{boot_set_name}) currently returns a status code of 201, but instead it should return a status code of 200. This will be corrected to return 200.  "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/boot_uans/",
	"title": "Boot UANs",
	"tags": [],
	"description": "",
	"content": "Boot UANs Boot UANs with an image so that they are ready for user logins.\nPrerequisites UAN boot images and a BOS session template have been created. See Create UAN Boot Images.\nProcedure   Create a BOS session to boot the UAN nodes.\nncn-mw# cray bos session create --template-uuid uan-sessiontemplate-PRODUCT_VERSION \\  --operation reboot --format json | tee session.json Example output:\n{ \u0026#34;links\u0026#34;: [ { \u0026#34;href\u0026#34;: \u0026#34;/v1/session/89680d0a-3a6b-4569-a1a1-e275b71fce7d\u0026#34;, \u0026#34;jobId\u0026#34;: \u0026#34;boa-89680d0a-3a6b-4569-a1a1-e275b71fce7d\u0026#34;, \u0026#34;rel\u0026#34;: \u0026#34;session\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;GET\u0026#34; }, { \u0026#34;href\u0026#34;: \u0026#34;/v1/session/89680d0a-3a6b-4569-a1a1-e275b71fce7d/status\u0026#34;, \u0026#34;rel\u0026#34;: \u0026#34;status\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;GET\u0026#34; } ], \u0026#34;operation\u0026#34;: \u0026#34;reboot\u0026#34;, \u0026#34;templateUuid\u0026#34;: \u0026#34;uan-sessiontemplate-PRODUCT_VERSION\u0026#34; } The first attempt to reboot the UANs will most likely fail. The UAN boot may hang and the UAN console will look similar to the following:\n2021-03-19 01:32:41 dracut-initqueue[420]: DVS: node map generated. 2021-03-19 01:32:41 katlas: init_module: katlas loaded, currently disabled 2021-03-19 01:32:41 2021-03-19 01:32:41 DVS: Revision: kbuild Built: Mar 17 2021 @ 15:14:05 against LNet 2.12.4 2021-03-19 01:32:41 DVS debugfs: Revision: kbuild Built: Mar 17 2021 @ 15:14:05 against LNet 2.12.4 2021-03-19 01:32:41 dracut-initqueue[420]: DVS: loadDVS: successfully added 10 new nodes into map. 2021-03-19 01:32:41 ed dvsproc module. 2021-03-19 01:32:41 DVS: message size checks complete. 2021-03-19 01:32:41 dracut-initqueuedvs_thread_generator: Watching pool DVS-IPC_msg (id 0) 2021-03-19 01:32:41 [420]: DVS: loaded dvs module. 2021-03-19 01:32:41 dracut-initqueue[420]: mount is: /opt/cray/cps-utils/bin/cpsmount.sh -a api-gw-service-nmn.local -t dvs -T 300 -i nmn0 -e 3116cf653e84d265cf8da94956f34d9e-181 s3://boot-images/763213c7-3d5f-4f2f-9d8a-ac6086583f43/rootfs /tmp/cps 2021-03-19 01:32:41 dracut-initqueue[420]: 2021/03/19 01:31:01 cpsmount_helper Version: 1.0.0 2021-03-19 01:32:47 dracut-initqueue[420]: 2021/03/19 01:31:07 Adding content: s3://boot-images/763213c7-3d5f-4f2f-9d8a-ac6086583f43/rootfs 3116cf653e84d265cf8da94956f34d9e-181 dvs 2021-03-19 01:33:02 dracut-initqueue[420]: 2021/03/19 01:31:22 WARN: readyForMount=false type=dvs ready=0 total=2 2021-03-19 01:33:18 dracut-initqueue[420]: 2021/03/19 01:31:38 WARN: readyForMount=false type=dvs ready=0 total=2 2021-03-19 01:33:28 dracut-initqueue[420]: 2021/03/19 01:31:48 2 dvs servers [10.252.1.7 10.252.1.8] If this occurs, repeat the BOS command.\n  Retrieve the BOS session ID from the output of the cray bos session create command in the previous step.\nncn-mw# BOS_SESSION=$(jq -r \u0026#39;.links[] | select(.rel==\u0026#34;session\u0026#34;) | .href\u0026#39; session.json | cut -d \u0026#39;/\u0026#39; -f4) ; echo $BOS_SESSION Example output:\n89680d0a-3a6b-4569-a1a1-e275b71fce7d   Retrieve the Boot Orchestration Agent (BOA) Kubernetes job name for the BOS session.\nncn-mw# BOA_JOB_NAME=$(cray bos session describe $BOS_SESSION --format json | jq -r .boa_job_name)   Retrieve the Kubernetes pod name for the BOA assigned to run this session.\nncn-mw# BOA_POD=$(kubectl get pods -n services -l job-name=$BOA_JOB_NAME --no-headers -o custom-columns=\u0026#34;:metadata.name\u0026#34;)   View the logs for the BOA to track session progress.\nncn-mw# kubectl logs -f -n services $BOA_POD -c boa   List the CFS sessions started by the BOA.\n Skip this step if CFS was not enabled in the boot session template used to boot the UANs.\n If CFS was enabled in the boot session template, the BOA will initiate a CFS session.\nIn the following command, pending and complete are also valid statuses to filter on.\nncn-mw# cray cfs sessions list --tags bos_session=$BOS_SESSION --status running --format json   Verify that the Day Zero patch was applied correctly during Create UAN Boot Images.\n Skip this step if the patch has already been verified.\n   SSH into a newly booted UAN.\nncn-mw# ssh uan01-nmn   Verify that the DVS RPM versions match what exists in the 1.4.0-p2/rpms directory.\nuan01# rpm -qa | grep \u0026#39;cray-dvs.*2.12\u0026#39; | sort Example output:\ncray-dvs-compute-2.12_4.0.102-7.0.1.0_8.1__g30d29e7a.x86_64 cray-dvs-devel-2.12_4.0.102-7.0.1.0_8.1__g30d29e7a.x86_64 cray-dvs-kmp-cray_shasta_c-2.12_4.0.102_k4.12.14_197.78_9.1.58-7.0.1.0_8.1__g30d29e7a.x86_64   Log out of the UAN.\nuan01# exit     "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/bos_workflows/",
	"title": "BOS Workflows",
	"tags": [],
	"description": "",
	"content": "BOS Workflows The following workflows present a high-level overview of common Boot Orchestration Service (BOS) operations. These workflows depict how services interact with each other when booting, configuring, or shutting down nodes. They also help provide a quicker and deeper understanding of how the system functions.\nThe following workflows are included in this section:\n Boot and Configure Nodes Reconfigure Nodes Power Off Nodes  Boot and Configure Nodes Use Case: Administrator powers on and configures select compute nodes.\nComponents: This workflow is based on the interaction of the BOS with other services during the boot process:\nMentioned in this workflow:\n Boot Orchestration Service (BOS) is responsible for booting, configuring, and shutting down collections of nodes. The Boot Orchestration Service has the following components:  Boot Orchestration Session Template is a collection of one or more boot set objects. A boot set defines a collection of nodes and the information about the boot artifacts and parameters. Boot Orchestration Session carries out an operation. The possible operations in a session are boot, shutdown, reboot, and configure. Boot Orchestration Agent (BOA) is automatically launched to execute the session. A BOA executes the given operation, and if the operation is a boot or a reboot, it also configures the nodes post-boot (if configure is enabled).   Cray Advanced Platform and Monitoring Control (CAPMC) service provides system-level power control for nodes in the system. CAPMC interfaces directly with the Redfish APIs to the controller infrastructure to effect power and environmental changes on the system. Hardware State Manager (HSM) tracks the state of each node and their group and role associations. Boot Script Service (BSS) stores per-node information about iPXE boot script. Nodes consult BSS for boot artifacts (kernel, initrd, image root) and boot parameters when nodes boot or reboot. The Simple Storage Service (Ceph S3) is an artifact repository that stores boot artifacts. Configuration Framework Service (CFS) configures nodes using configuration framework. Launches and aggregates the status from one or more Ansible instances against nodes (node personalization) or images (image customization).  Workflow Overview: The following sequence of steps occur during this workflow.\n  Administrator creates a configuration\nAdd a configuration to CFS.\n# cray cfs configurations update sample-config --file configuration.json Example output:\n{ \u0026quot;lastUpdated\u0026quot;: \u0026quot;2020-09-22T19:56:32Z\u0026quot;, \u0026quot;layers\u0026quot;: [ { \u0026quot;cloneUrl\u0026quot;: \u0026quot;https://api-gw-service-nmn.local/vcs/cray/configmanagement. git\u0026quot;, \u0026quot;commit\u0026quot;: \u0026quot;01b8083dd89c394675f3a6955914f344b90581e2\u0026quot;, \u0026quot;playbook\u0026quot;: \u0026quot;site.yaml\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;sample-config\u0026quot; }   Administrator creates a session template\nA session template is a collection of metadata for a group of nodes and their desired configuration. A session template can be created from a JSON structure. It returns a SessionTemplate ID if successful.\nSee Manage a Session Template for more information.\n  Administrator creates a session\nCreate a session to perform the operation specified in the operation request parameter on the boot set defined in the session template. For this use case, Administrator creates a session with operation as Boot and specifies the session template ID. The set of allowed operations are:\n Boot – Boot nodes that are powered off Configure – Reconfigure the nodes using the Configuration Framework Service (CFS) Reboot – Gracefully power down nodes that are on and then power them back up Shutdown – Gracefully power down nodes that are on  # cray bos session create \\ --template-uuid SESSIONTEMPLATE_NAME \\ --operation Boot   Launch BOA\nThe creation of a session results in the creation of a Kubernetes BOA job to complete the operation. BOA coordinates with other services to complete the requested operation.\n  BOA to HSM\nBOA coordinates with HSM to validate node group and node status.\n  BOA to S3\nBOA coordinates with S3 to verify boot artifacts like kernel, initrd, and root file system.\n  BOA to BSS\nBOA updates BSS with boot artifacts and kernel parameters for each node.\n  BOA to CAPMC\nBOA coordinates with CAPMC to power-on the nodes.\n  CAPMC boots nodes\nCAPMC interfaces directly with the Redfish APIs and powers on the selected nodes.\n  BSS interacts with the nodes\nBSS generates iPXE boot scripts based on the image content and boot parameters that have been assigned to a node. Nodes download the iPXE boot script from BSS.\n  S3 interacts with the nodes\nNodes download the boot artifacts. The nodes boot using the boot artifacts pulled from S3.\n  BOA to HSM\nBOA waits for the nodes to boot up and be accessible via SSH. This can take up to 30 minutes. BOA coordinates with HSM to ensures that nodes are booted and Ansible can SSH to them.\n  BOA to CFS\nBOA directs CFS to apply post-boot configuration.\n  CFS applies configuration\nCFS runs Ansible on the nodes and applies post-boot configuration (also called node personalization). CFS then communicates the results back to BOA.\n  Reconfigure Nodes Use Case: Administrator reconfigures compute nodes that are already booted and configured.\nComponents: This workflow is based on the interaction of the BOS with other services during the reconfiguration process.\nMentioned in this workflow:\n Boot Orchestration Service (BOS) is responsible for booting, configuring, and shutting down collections of nodes. The Boot Orchestration Service has the following components:  Boot Orchestration Session Template is a collection of one or more boot set objects. A boot set defines a collection of nodes and the information about the boot artifacts and parameters. Boot Orchestration Session carries out an operation. The possible operations in a session are boot, shutdown, reboot, and configure. Boot Orchestration Agent (BOA) is automatically launched to execute the session. A BOA executes the given operation, and if the operation is a boot or a reboot, it also configures the nodes post-boot (if configure is enabled).   Configuration Framework Service (CFS) configures nodes using configuration framework. Launches and aggregates the status from one or more Ansible instances against nodes (node personalization) or images (image customization). Hardware State Manager (HSM) tracks the state of each node and their group and role associations.  Workflow Overview: The following sequence of steps occur during this workflow.\n  Administrator creates a session template\nA session template is a collection of metadata for a group of nodes and their desired configuration. A session template can be created from a JSON structure. It returns a SessionTemplate ID if successful.\nSee Manage a Session Template for more information.\n  Administrator creates a session\nCreate a session to perform the operation specified in the operation request parameter on the boot set defined in the session template. For this use case, Administrator creates a session with operation as Boot and specifies the session template ID. The set of allowed operations are:\n Boot – Boot nodes that are powered off Configure – Reconfigure the nodes using the Configuration Framework Service (CFS) Reboot – Gracefully power down nodes that are on and then power them back up Shutdown – Gracefully power down nodes that are on  # cray bos session create \\ --template-uuid SESSIONTEMPLATE_NAME \\ --operation Configure   Launch BOA\nThe creation of a session results in the creation of a Kubernetes BOA job to complete the operation. BOA coordinates with the underlying subsystem to complete the requested operation.\n  BOA to HSM\nBOA coordinates with HSM to validate node group and node status.\n  BOA to CFS\nBOA directs CFS to apply post-boot configuration.\n  CFS applies configuration\nCFS runs Ansible on the nodes and applies post-boot configuration (also called node personalization).\n  CFS to BOA\nCFS then communicates the results back to BOA.\n  Power Off Nodes Use Cases: Administrator powers off selected compute nodes.\nComponents: This workflow is based on the interaction of the Boot Orchestration Service (BOS) with other services during the node shutdown process:\nMentioned in this workflow:\n Boot Orchestration Service (BOS) is responsible for booting, configuring, and shutting down collections of nodes. The Boot Orchestration Service has the following components:  Boot Orchestration Session Template is a collection of one or more boot set objects. A boot set defines a collection of nodes and the information about the boot artifacts and parameters. Boot Orchestration Session carries out an operation. The possible operations in a session are boot, shutdown, reboot, and configure. Boot Orchestration Agent (BOA) is automatically launched to execute the session. A BOA executes the given operation, and if the operation is a boot or a reboot, it also configures the nodes post-boot (if configure is enabled).   Cray Advanced Platform and Monitoring Control (CAPMC) service provides system-level power control for nodes in the system. CAPMC interfaces directly with the Redfish APIs to the controller infrastructure to effect power and environmental changes on the system. Hardware State Manager (HSM) tracks the state of each node and their group and role associations.  Workflow Overview: The following sequence of steps occur during this workflow.\n  Administrator creates a session template\nA session template is a collection of metadata for a group of nodes and their desired configuration. A session template can be created from a JSON structure. It returns a SessionTemplate ID if successful.\nSee Manage a Session Template for more information.\n  Administrator creates a session\nCreate a session to perform the operation specified in the operation request parameter on the boot set defined in the session template. For this use case, Administrator creates a session with operation as Boot and specifies the session template ID. The set of allowed operations are:\n Boot – Boot nodes that are powered off Configure – Reconfigure the nodes using the Configuration Framework Service (CFS) Reboot – Gracefully power down nodes that are on and then power them back up Shutdown – Gracefully power down nodes that are on  # cray bos session create \\ --template-uuid SESSIONTEMPLATE_NAME \\ --operation Shutdown   Launch BOA\nThe creation of a session results in the creation of a Kubernetes BOA job to complete the operation. BOA coordinates with the underlying subsystem to complete the requested operation.\n  BOA to HSM\nBOA coordinates with HSM to validate node group and node status.\n  BOA to CAPMC\nBOA directs CAPMC to power off the nodes.\n  CAPMC to the nodes\nCAPMC interfaces directly with the Redfish APIs and powers off the selected nodes.\n  CAPMC to BOA\nCAPMC communicates the results back to BOA.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/check_the_progress_of_bos_session_operations/",
	"title": "Check The Progress Of BOS Session Operations",
	"tags": [],
	"description": "",
	"content": "Check the Progress of BOS Session Operations Describes how to view the logs of BOS operations with Kubernetes.\nWhen a Boot Orchestration Service (BOS) session is created, it will return a job ID. This ID can be used to locate the Boot Orchestration Agent (BOA) Kubernetes job that executes the session. For example:\nncn-m001# cray bos session create --template-uuid SESSIONTEMPLATE_NAME --operation Boot Example output:\noperation = \u0026quot;Boot\u0026quot; templateUuid = \u0026quot;TEMPLATE_UUID\u0026quot; [[links]] href = \u0026quot;foo-c7faa704-3f98-4c91-bdfb-e377a184ab4f\u0026quot; jobId = \u0026quot;boa-a939bd32-9d27-433f-afc2-735e77ec8e58\u0026quot; rel = \u0026quot;session\u0026quot; type = \u0026quot;GET\u0026quot; All BOS Kubernetes pods operate in the services namespace.\nFind the BOA Kubernetes Job Use the following command to locate the Kubernetes BOA pod.\nncn-m001# kubectl get pods -n services | grep -E \u0026#34;NAME | BOS_SESSION_JOB_ID\u0026#34; For example:\nncn-m001# kubectl get pods -n services | grep -E \u0026#34;NAME | boa-a939bd32-9d27-433f-afc2-735e77ec8e58\u0026#34; NAME READY STATUS RESTARTS AGE boa-a939bd32-9d27-433f-afc2-735e77ec8e58-ztscd 0/2 Completed 0 16m Use the following command to locate the Kubernetes BOA job.\nbash# kubectl get jobs -n services BOS_SESSION_JOB_ID For example:\n# kubectl get jobs -n services boa-a939bd32-9d27-433f-afc2-735e77ec8e58 NAME COMPLETIONS DURATION AGE boa-a939bd32-9d27-433f-afc2-735e77ec8e58 1/1 13m 15m The Kubernetes BOA pod name is not a one-to-one match with the BOA job name. The pod name has -XXXX appended to it, where \u0026lsquo;X\u0026rsquo; is a hexadecimal digit.\nView the BOA Log Use the following command to look at the BOA pod\u0026rsquo;s logs.\nncn-m001# kubectl logs -n services KUBERNETES_BOA_POD_ID -c boa For example:\nncn-m001# kubectl logs -n services boa-a939bd32-9d27-433f-afc2-735e77ec8e58 -c boa View the Configuration Framework Service (CFS) Log If a session template has CFS enabled, then BOA will attempt to configure the nodes during a boot, reboot, or configure operation. Use the BOA job ID to find the CFS job that BOA launched to configure the nodes.\nncn-m001# cray cfs sessions describe BOA_JOB_ID For example:\n# cray cfs sessions describe boa-86b78489-1d76-4957-9c0e-a7b1d6665c35 --format json { \u0026#34;ansible\u0026#34;: { \u0026#34;limit\u0026#34;: \u0026#34;x3000c0s19b4n0,x3000c0s19b3n0,x3000c0s19b2n0,x3000c0s19b1n0\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;site.yml\u0026#34; }, \u0026#34;id\u0026#34;: \u0026#34;ffdda2c6-2277-11ea-8db8-b42e993b706a\u0026#34;, \u0026#34;links\u0026#34;: [ { \u0026#34;href\u0026#34;: \u0026#34;/apis/cfs/sessions/boa-86b78489-1d76-4957-9c0e-a7b1d6665c35\u0026#34;, \u0026#34;rel\u0026#34;: \u0026#34;self\u0026#34; }, { \u0026#34;href\u0026#34;: \u0026#34;/apis/cms.cray.com/v1/namespaces/services/cfsessions/boa-86b78489-1d76-4957-9c0e-a7b1d6665c35\u0026#34;, \u0026#34;rel\u0026#34;: \u0026#34;k8s\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;boa-86b78489-1d76-4957-9c0e-a7b1d6665c35\u0026#34;, \u0026#34;repo\u0026#34;: { \u0026#34;branch\u0026#34;: \u0026#34;master\u0026#34;, \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git\u0026#34; }, \u0026#34;status\u0026#34;: { \u0026#34;artifacts\u0026#34;: [], \u0026#34;session\u0026#34;: { \u0026#34;completionTime\u0026#34;: \u0026#34;2019-12-19T16:05:11+00:00\u0026#34;, \u0026#34;job\u0026#34;: \u0026#34;cfs-85e3e48f-6795-4570-b379-347b05b39dbe\u0026#34;, \u0026lt;\u0026lt;-- Kubernetes CFS job ID \u0026#34;startTime\u0026#34;: \u0026#34;2019-12-19T15:55:37+00:00\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;complete\u0026#34;, \u0026#34;succeeded\u0026#34;: \u0026#34;true\u0026#34; }, \u0026#34;targets\u0026#34;: { \u0026#34;failed\u0026#34;: 0, \u0026#34;running\u0026#34;: 0, \u0026#34;success\u0026#34;: 0 } }, \u0026#34;target\u0026#34;: { \u0026#34;definition\u0026#34;: \u0026#34;dynamic\u0026#34;, \u0026#34;groups\u0026#34;: [] } } Use the Kubernetes CFS job ID in the returned output above to find the CFS pod ID. It is the pod with three containers listed, not two.\nncn-m001# kubectl -n services get pods|grep KUBERNETES_CFS_JOB_ID Example output:\ncfs-85e3e48f-6795-4570-b379-347b05b39dbe-59645667b-ffznt 2/2 Running 0 3h57m cfs-85e3e48f-6795-4570-b379-347b05b39dbe-cvr54 0/3 Completed 0 3h57m View the pod\u0026rsquo;s logs for the Ansible container:\nncn-m001# kubectl -n services logs -f -c ansible KUBERNETES_CFS_POD_ID View the BOS log The BOS log shows when a session was launched. It also logs any errors encountered while attempting to launch a session.\nThe BOS Kubernetes pod ID can be found with the following command:\nncn-m001# kubectl get pods -n services | grep bos | grep -v etcd Example output:\ncray-bos-d97cf465c-klcrw 2/2 Running 0 90s Examine the logs:\nncn-m001# kubectl logs BOS_POD_ID BOS uses an etcd database. Looking at the etcd logs is typically not necessary.\n"
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/clean_up_after_a_bos-boa_job_is_completed_or_cancelled/",
	"title": "Clean Up After A BOS/boa Job Is Completed Or CANcelled",
	"tags": [],
	"description": "",
	"content": "Clean Up After a BOS/BOA Job is Completed or Cancelled When a BOS session is created, there are a number of items created on the system. When a session is cancelled or completed, these items need to be cleaned up to ensure there is not lingering content from the session on the system.\nWhen a session is launched, the items below are created:\n Boot Orchestration Agent (BOA) job: The Kubernetes job that runs and handles the BOS session. ConfigMap for BOA: This ConfigMap contains the configuration information that the BOA job uses. The BOA pod mounts a ConfigMap named boot-session at /mnt/boot_session inside the pod. This ConfigMap has a random UUID name, such as e786def5-37a6-40db-b36b-6b67ebe174ee. This name does not obviously connect it to the BOA job. etcd entries: BOS makes an entry for the session in its etcd key/value store. If the BOA job has run for long enough, it will also have written a status entry into etcd for this session. Configuration Framework Service (CFS) session: If configuration is enabled, and the session is doing a boot, reboot, or configure operation, then BOA will have instructed CFS to configure the nodes once they boot. There is not an easy way to link a BOA session to the CFS sessions that are spawned.  Prerequisites  A Boot Orchestration Service (BOS) session has been completed or cancelled. The Cray command line interface (CLI) tool is initialized and configured on the system.  Procedure   Identify the BOA job that needs to be deleted.\nDescribe the BOS session to find the name of the BOA job under the attribute boa_job_name.\nncn-m001# cray bos session describe --format json BOS_SESSION_ID Example output:\n{ \u0026quot;status_link\u0026quot;: \u0026quot;/v1/session/d200f7e4-1a9f-4466-9ef4-30add3bd87dd/status\u0026quot;, \u0026quot;complete\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;start_time\u0026quot;: \u0026quot;2020-08-11 21:02:09.137917\u0026quot;, \u0026quot;templateUuid\u0026quot;: \u0026quot;cle-1.3.0-nid1\u0026quot;, \u0026quot;error_count\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;boa_job_name\u0026quot;: \u0026quot;boa-d200f7e4-1a9f-4466-9ef4-30add3bd87dd\u0026quot;, \u0026quot;in_progress\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;operation\u0026quot;: \u0026quot;boot\u0026quot;, \u0026quot;stop_time\u0026quot;: null }   Find the ConfigMap for the BOA job.\nThe ConfigMap is listed as boot-session under the Volumes section. Retrieve the Name value from the returned output.\nncn-m001# kubectl -n services describe job BOA_JOB_NAME Example output:\n[...] Volumes: boot-session: Type: ConfigMap (a volume populated by a ConfigMap) **Name: e786def5-37a6-40db-b36b-6b67ebe174ee** Optional: false   Delete the ConfigMap.\nncn-m001# kubectl -n services delete cm CONFIGMAP_NAME   Delete the etcd entry for the BOS session.\nncn-m001# cray bos session delete BOS_SESSION_ID   Stop CFS from configuring nodes.\nThere are several different use cases covered in this step. The process varies depending on whether a job is being cancelled, or if the CFS content is simply being cleaned up.\nIn the BOS session template, if configuration is enabled, BOA instructs the nodes to configure on boot when doing a boot or reboot operation. When only doing a configure operation, the configuration happens right away. If configuration is disabled or the operation is shutdown, then BOA will not instruct CFS to configure the nodes, and nothing further needs to be done. The remainder of this step may be skipped.\nIf BOA instructs CFS to configure the nodes, then CFS will set the desired configuration for the nodes in its database. Once BOA tells CFS to configure the nodes, which happens early in the BOA job, then CFS will configure the nodes immediately if the operation is configure, or upon the node booting if the operation is boot or reboot.\nAttempting to prevent CFS from configuring the nodes is a multi-step, tedious process. It may be simpler to allow CFS to configure the nodes. If the nodes are going to be immediately rebooted, then the CFS configuration will be rerun once the nodes have booted, thus undoing any previous configuration. Alternately, if the nodes are going to be immediately shutdown, this will remove any need to prevent CFS from configuring the nodes.\nFollow the procedures for one of the following use cases:\n  Configuration has completed and the sessions need to be cleaned up the to reduce clutter:\n  Find the old sessions that needs to be deleted.\nncn-m001# cray cfs sessions list   Delete the sessions.\nncn-m001# cray cfs sessions delete CFS_SESSION_NAME     Configuration has completed and the desired state needs to be cleaned up so that configuration does not happen on restart:\n  Unset the desired state for all components affected.\nTo find the impacted component names (xnames) for the components with the desired configuration matching what was applied:\nncn-m001# cray cfs components list Prevent the configuration from running:\nncn-m001# cray cfs components update XNAME --desired-state-commit This needs to be done for each component. It is enough to prevent configuration from running, and it does not revert to the previous desired state. The previous desired state has already been overwritten at this point, so if the user is trying to completely revert, they will either need to know and apply the previous desired state manually, or return BOS with the previous template using the configure operation (which may also trigger a configure operation).\n    Configuration was set/started and needs to be cancelled:\n  Unset the desired state for all components affected.\nTo find the impacted component names (xnames) for the components with the desired configuration matching what was applied:\nncn-m001# cray cfs components list Prevent the configuration from running:\nncn-m001# cray cfs components update XNAME --desired-state-commit This needs to be done for each component. It is enough to prevent configuration from running, and it does not revert to the previous desired state. The previous desired state has already been overwritten at this point, so if the user is trying to completely revert, they will either need to know and apply the previous desired state manually, or return BOS with the previous template using the configure operation (which may also trigger a configure operation).\n  Restart the batcher.\nThis will purge any information that CFS cached in relation to the BOA job that it was intending to act upon.\nTo get the cfs-batcher pod ID:\nncn-m001# kubectl -n services get pods|grep cray-cfs-batcher Example output:\ncray-cfs-batcher-644599c6cc-rwl8f 2/2 Running 0 6d17h To restart the pod, scale the replicas to 0 to stop it, and back up to 1 to restart it:\nncn-m001# kubectl -n services scale CFS-BATCHER_POD_ID --replicas=0 ncn-m001# kubectl -n services scale CFS-BATCHER_POD_ID --replicas=1   Find the existing session that needs to be deleted.\nncn-m001# cray cfs sessions list   Delete the sessions.\nThis step must be done after restarting cfs-batcher. If the cached information is not purged from Batcher first, then Batcher may start additional CFS sessions in response to them being killed. The Batcher agent would fight against the user if it is not restarted.\nUnfortunately, it is hard to link a specific BOA session to a CFS session. At this time, they are identified by comparing the CFS timestamps with those of the BOA job, and associating them based on proximity. Additionally, examine the components in the CFS job to see that they match the components in the BOA job.\nncn-m001# cray cfs sessions delete CFS_SESSION_NAME       Delete the BOA job.\nThe BOA job is not deleted right away because it is needed to find the ConfigMap name.\nncn-m001# kubectl -n services delete job BOA_JOB_NAME   "
},
{
	"uri": "/docs-csm/en-12/operations/boot_orchestration/boot_issue_symptom_node_console_or_logs_indicate_that_the_server_response_has_timed_out/",
	"title": "Compute Node Boot Issue Symptom Node Console Or Logs Indicate That The Server Response Has Timed Out",
	"tags": [],
	"description": "",
	"content": "Compute Node Boot Issue Symptom: Node Console or Logs Indicate that the Server Response has Timed Out If the TFTP request is able to access the TFTP service pod but is unable to find its way back to the node, it may be because the kernel is not tracking established TFTP connections.\nSymptoms The following image, which is tcpdump data from within the TFTP pod, shows what happens when the TFTP request cannot find a route back to the node that sent the request. The node IP address is 10.32.0.1, which is the IP address of the Kubernetes weave network. It is forwarding the node\u0026rsquo;s TFTP to this pod. The server IP address is 10.32.0.13.\n Line 1: The read request from the node arrives. Line 2: The TFTP server attempts to acknowledge the read request. Line 3: ICMP complains about an unreachable destination/port. Lines 4-6: The TFTP server cannot locate the route to the node. It issues an ARP request for 10.32.0.1, but that does not have any effect. Lines 8 and 11: After waiting, the client resends a read request and eventually times out. This repeated request causes a repeat of lines 2-6 as seen in lines 9,12, and 14-17.  Problem Detection Check if the nf_nat_tftp kernel module has been loaded. The kernel module is loaded on all ingress points in the Kubernetes cluster, so there will likely be no missing kernel modules.\nResolution   Load nf_nat_tftp if it has not been loaded already by executing modprobe nf_nat_tftp from the non-compute node (NCN).\nncn-m001# kubectl get pods -n services -o wide|grep -E \u0026#34;NAME|tftp\u0026#34; Example output:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES cray-tftp-885cc65c4-fk8bm 2/2 Running 0 56s 10.32.0.63 ncn-w002 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt;   Restart the cray-tftp service.\nncn-m001# kubectl delete pod cray-tftp-885cc65c4-fk8bm Example output:\npod \u0026quot;cray-tftp-885cc65c4-fk8bm\u0026quot; deleted   "
},
{
	"uri": "/docs-csm/en-12/operations/artifact_management/manage_artifacts_with_the_cray_cli/",
	"title": "Manage Artifacts With The Cray Cli",
	"tags": [],
	"description": "",
	"content": "Manage Artifacts with the Cray CLI The artifacts (objects) available for use on the system are created and managed with the Cray CLI. The cray artifacts command provides the ability to manage any given artifact. The Cray CLI automatically authenticates users and provides Simple Storage Service (S3) credentials.\nAll operations with the cray artifacts command assume that the user has already been authenticated. If the user has not been authenticated with the Cray CLI, run the following command:\nncn# cray auth login Enter the appropriate credentials when prompted:\nUsername: adminuser Password: Success! will be returned if the user is successfully authenticated.\nAuthorization is Local to a Host: whenever you are using the CLI (cray command) on a host (e.g. a workstation or NCN) where it has not been used before, it is necessary to authenticate on that host using cray auth login. There is no mechanism to distribute CLI authorization amongst hosts.\nView S3 Buckets There are several S3 buckets available that can be used to upload and download files with the cray artifacts command. To see the list of available S3 buckets:\nncn# cray artifacts buckets list Example output:\nresults = [ \u0026quot;alc\u0026quot;, \u0026quot;badger\u0026quot;, \u0026quot;benji-backups\u0026quot;, \u0026quot;boot-images\u0026quot;, \u0026quot;etcd-backup\u0026quot;, \u0026quot;fw-update\u0026quot;, \u0026quot;ims\u0026quot;, \u0026quot;nmd\u0026quot;, \u0026quot;sds\u0026quot;, \u0026quot;ssm\u0026quot;, \u0026quot;vbis\u0026quot;, \u0026quot;wlm\u0026quot;,] Create and Upload Artifacts Use the cray artifacts create command to create an object and upload it to S3.\nIn the example below, S3_BUCKET is a placeholder for the bucket name, site/repos/repo.tgz is the object name, and /path/to/repo.tgz is the location of the file to be uploaded to S3 on the local file system.\nncn# cray artifacts create S3_BUCKET site/repos/repo.tgz /path/to/repo.tgz Example output:\nartifact = \u0026quot;5c5b6ae5-64da-4212-887a-301087a17099\u0026quot; Key = \u0026quot;site/repos/repo.tgz\u0026quot; In S3, the object name can be path-like and include slashes to resemble files in directories. This is useful for organizing objects within a bucket, but S3 treats it as a name only. No directory structure exists.\nWhen interacting with Cray services, use the artifact value returned by the cray artifacts create command. This will ensure that Cray services can access the uploaded object.\nDownload Artifacts Artifacts are downloaded with the cray artifacts get command. Provide the object name, the bucket, and a file path to download the artifact in order to use this command.\nncn# cray artifacts get S3_BUCKET S3_OBJECT_KEY DOWNLOAD_FILEPATH For example:\nncn# cray artifacts get boot-images 5c5b6ae5-64da-4212-887a-301087a17099 /path/to/downloads/dl-repo.tgz No output is shown unless an error occurs.\nDelete Artifacts Artifacts are removed from buckets with the cray artifacts delete command. Provide the object name and the bucket to delete it.\nncn# cray artifacts delete S3_BUCKET S3_OBJECT_KEY No output is shown unless an error occurs.\nList Artifacts Use the cray artifacts list command to list all artifacts in a bucket.\nncn# cray artifacts list S3_BUCKET Example output:\n[[artifacts]] LastModified = \u0026quot;2020-04-03T12:20:23.876000+00:00\u0026quot; ETag = \u0026quot;\\\u0026quot;e3f195c20a2399bf1b5a20df12416115\\\u0026quot;\u0026quot; StorageClass = \u0026quot;STANDARD\u0026quot; Key = \u0026quot;recipes/47411cbe-e249-40f2-8c13-0df7856b91a3/recipe.tar.gz\u0026quot; Size = 11234 [artifacts.Owner] DisplayName = \u0026quot;Image Management Service User\u0026quot; ID = \u0026quot;IMS\u0026quot; [...] Retrieve Artifact Details Details of an artifact object in a bucket are found with the cray artifacts describe command. The output of this command provides information about the size of the artifact and any metadata associated with the object.\nIMPORTANT: The Cray-specific metadata provided by this command is automatically generated. This metadata should be considered deprecated and should not be used for future development.\nncn# cray artifacts describe S3_BUCKET S3_OBJECT_KEY Example output:\n[artifact] AcceptRanges = \u0026quot;bytes\u0026quot; ContentType = \u0026quot;binary/octet-stream\u0026quot; LastModified = \u0026quot;2020-04-03T12:20:23+00:00\u0026quot; ContentLength = 11234 VersionId = \u0026quot;.2aoRPGDGRuRIFrjc9urQiHLADvwPCU\u0026quot; ETag = \u0026quot;\\\u0026quot;e3f195c20a2399bf1b5a20df12416115\\\u0026quot;\u0026quot; [artifact.Metadata] md5sum = \u0026quot;e3f195c20a2399bf1b5a20df12416115\u0026quot; "
},
{
	"uri": "/docs-csm/en-12/operations/artifact_management/use_s3_libraries_and_clients/",
	"title": "Use S3 Libraries And Clients",
	"tags": [],
	"description": "",
	"content": "Use S3 Libraries and Clients Several command line clients and language-specific libraries are available in addition to the Simple Storage Service (S3) RESTful API. Developers and system administrators can interact with artifacts in the S3 object store with these tools.\nTo learn more, refer to the following links:\n https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html - S3 Python client https://docs.aws.amazon.com/sdk-for-go/api/service/s3/ - Go client https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html - Amazon Web Services (AWS) S3 CLI  "
},
{
	"uri": "/docs-csm/en-12/operations/artifact_management/artifact_management/",
	"title": "Artifact Management",
	"tags": [],
	"description": "",
	"content": "Artifact Management The Ceph Object Gateway Simple Storage Service (S3) API is used for artifact management. The RESTful API that Ceph provides via the gateway is compatible with the basic data access model of the Amazon S3 API. See the https://docs.ceph.com/en/pacific/radosgw/s3/ for more information about compatibility. The object gateway is also referred to as the RADOS gateway or simply RGW.\nS3 is an object storage service that provides high-level performance, scalability, security, and data availability. S3 exposes a rudimentary data model, similar to a file system, where buckets (directories) store objects (files). Bucket- and object-level Access Control Lists (ACL) can be provided for flexible access authorization to artifacts stored in S3.\nRGW on HPE Cray EX Systems RGW is installed as a part of the HPE Cray EX Stage 3 deployment. The S3 API is available on systems at the following location:\nhttps://rgw-vip.local The RGW administrative interface (radosgw-admin) is available on non-compute nodes (NCNs).\n"
},
{
	"uri": "/docs-csm/en-12/operations/artifact_management/generate_temporary_s3_credentials/",
	"title": "Generate Temporary S3 Credentials",
	"tags": [],
	"description": "",
	"content": "Generate Temporary S3 Credentials Cray provides a simple token service (STS) via the API gateway for administrators to generate temporary Simple Storage Service (S3) credentials for use with S3 buckets. Temporary S3 credentials are generated using either cURL or Python.\nThe generated S3 credentials will expire after one hour.\nProcedure   Retrieve temporary S3 credentials with cURL.\n  Obtain a JWT token.\nSee Retrieve an Authentication Token for more information.\n  Generate temporary S3 credentials.\nThe following command to call STS assumes the environment variable $TOKEN contains the JWT.\nncn# curl -X PUT -H \u0026#34;Authorization: Bearer $TOKEN\u0026#34; \\ https://api-gw-service-nmn.local/apis/sts/token Example output:\n{ \u0026quot;Credentials\u0026quot;: { \u0026quot;AccessKeyId\u0026quot;: \u0026quot;KtSRFzmAkoDfgCnBLYt\u0026quot;, \u0026quot;EndpointURL\u0026quot;: \u0026quot;http://rgw.local:8080\u0026quot;, \u0026quot;Expiration\u0026quot;: \u0026quot;2019-10-14T15:15:43.480741+00:00\u0026quot;, \u0026quot;SecretAccessKey\u0026quot;: \u0026quot;6CD15EIY6DQOD3DMN0VZPV1XP3W9N4FFPRI0300\u0026quot;, \u0026quot;SessionToken\u0026quot;: \u0026quot;qbwVvv6w1ec/NwI0VzzOXuzFVczjdVICcij0s7kmqKvyZ59RrHJWjLKvmUhGeBATMtkEK72s+qL7Tdn06tPMCQr04MEOpyeUOLmfFyKN3Awm0/7Rlx7rKVaOejpeYaRzO2kWDu3llrpZOONSMPYfck6KjAfvqg/ZJPGEJ5Mzb9YfeSCBq0ghj3G51o9V4DhjjL0YoA/XARMnN0NTHav+OIUHBkXcxZIfT+ti9bSjmz6ExKsJj8zPLvGMK2TIo/Xp\u0026quot; } }     Retrieve temporary S3 credentials with Python (s3creds.py).\n# /usr/bin/env python3 # s3creds.py - Generate a temporary s3 token from the Cray Simple Token Service import os import oauthlib.oauth2 import requests_oauthlib realm = \u0026#39;shasta\u0026#39; client_id = \u0026#39;shasta\u0026#39; username = \u0026#39;testuser\u0026#39; # Provide a user here password = os.environ.get(\u0026#39;TESTUSER_PASSWORD\u0026#39;) # Obtain the password from the env, or elsewhere token_url = \u0026#39;https://api-gw-service-nmn.local/keycloak/realms/%s/protocol/openid-connect/token\u0026#39; % realm sts_url = \u0026#39;https://api-gw-service-nmn.local/apis/sts/token\u0026#39; # Create an OAuth2Session and request a token oauth_client = oauthlib.oauth2.LegacyApplicationClient(client_id=client_id) session = requests_oauthlib.OAuth2Session( client=oauth_client, token_updater=lambda t: None, auto_refresh_url=token_url, auto_refresh_kwargs={\u0026#39;client_id\u0026#39;: client_id} ) session.fetch_token( token_url=token_url, client_id=client_id, username=username, password=password ) # Retrieve S3 credentials from STS sts_response = session.put(sts_url) sts_response.raise_for_status() if sts_response.ok: creds = sts_response.json()[\u0026#39;Credentials\u0026#39;] creds_kwargs = { \u0026#39;aws_access_key_id\u0026#39;: creds[\u0026#39;AccessKeyId\u0026#39;], \u0026#39;aws_secret_access_key\u0026#39;: creds[\u0026#39;SecretAccessKey\u0026#39;], \u0026#39;aws_session_token\u0026#39;: creds[\u0026#39;SessionToken\u0026#39;], \u0026#39;endpoint_url\u0026#39;: creds[\u0026#39;EndpointURL\u0026#39;], } The mapping creds_kwargs can now be used for further interaction with S3 in Python.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/update_a_resource_specification/",
	"title": "Update A Resource Specification",
	"tags": [],
	"description": "",
	"content": "Update a Resource Specification Modify a specific UAI resource specification using the resource_id of that specification.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command) The administrator must know the Resource ID of the resource specification to be updated: List UAI Resource Specifications  Procedure To modify a particular resource specification, use a command of the following form:\nncn-m001-pit# cray uas admin config resources update [OPTIONS] RESOURCE_ID The [OPTIONS] used by this command are the same options used to create resource specifications. See Create a UAI Resource Specification and Elements of a UAI for a full description of those options.\nUpdate a UAI resource specification.\nThe following example changes the CPU and memory limits on a UAI resource specification to 1 CPU and 1GiB, respectively.\nncn-m001-pit# cray uas admin config resources update \\ --limit \u0026#39;{\u0026#34;cpu\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;memory\u0026#34;: \u0026#34;1Gi\u0026#34;}\u0026#39; 85645ff3-1ce0-4f49-9c23-05b8a2d31849 The following example does the same for the CPU and memory requests:\nncn-m001-pit# cray uas admin config resources update \\ --request \u0026#39;{\u0026#34;cpu\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;memory\u0026#34;: \u0026#34;1Gi\u0026#34;}\u0026#39; 85645ff3-1ce0-4f49-9c23-05b8a2d31849 Top: User Access Service (UAS)\nNext Topic: Delete a UAI Resource Specification\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/update_a_uai_image_registration/",
	"title": "Update A UAI Image Registration",
	"tags": [],
	"description": "",
	"content": "Update a UAI Image Registration Modify the UAS registration information of a UAI image.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command) The administrator must know the Image ID of the UAI Image Registration to be updated: List UAI Registered Images  Procedure Once a UAI image has been registered, it may be necessary to change its attributes. For example, the default image may need to change.\nModify the registration information of a UAI image by using a command of the form:\nncn-m001-pit# cray uas admin config images update OPTIONS IMAGE_ID Use the --default or --imagename options as specified when registering an image to update those specific elements of an existing image registration. For example, to make the registry.local/cray/custom-end-user-uai:latest image shown in other procedures the default image, use the following command:\nncn-m001-pit# cray uas admin config images update --default yes 8fdf5d4a-c190-24c1-2b96-74ab98c7ec07 Top: User Access Service (UAS)\nNext Topic: Delete a UAI Image Registration\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/update_a_uas_volume/",
	"title": "Update A UAS Volume",
	"tags": [],
	"description": "",
	"content": "Update a UAS Volume Modify the configuration of an already-registered UAS volume. Almost any part of the configuration of a UAS volume can be modified.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command) The administrator must know UAS volume ID of a volume; perform List Volumes Registered in UAS if needed The administrator should be familiar with Add a Volume to UAS; the options and caveats for updating volumes are the same as for creating volumes  Procedure Modify the configuration of a UAS volume.\nOnce a UAS volume has been configured, any part of it except for the volume_id can be updated with a command of the following form:\ncray uas admin config volumes update [options] \u0026lt;volume-id\u0026gt; For example:\nncn-m001-pit# cray uas admin config volumes update --volumename \u0026#39;my-example-volume\u0026#39; a0066f48-9867-4155-9268-d001a4430f5c The --volumename, --volume-description, and --mount-path options may be used in any combination to update the configuration of a given volume.\nTop: User Access Service (UAS)\nNext Topic: Delete a Volume Configuration\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/",
	"title": "User Access Service (UAS)",
	"tags": [],
	"description": "",
	"content": "User Access Service (UAS) The User Access Service (UAS) is a service that manages User Access Instances (UAIs) which are containerized services under Kubernetes that provide application developers and users with a lightweight login environment in which to create and run user applications. UAIs run on non-compute nodes (NCN), specifically Kubernetes Worker nodes.\nAt a high level, there are two ways to configure UAS with respect to allowing users access to UAIs. The standard configuration involves the use of Broker UAIs through which users establish SSH login sessions. When a login session is established to a Broker UAI the Broker UAI either locates or creates a new UAI on behalf of the user and forwards the user\u0026rsquo;s SSH connection to that UAI. A legacy configuration requires users to create their own UAIs through the cray CLI. Once a UAI is created in this way, the users can use SSH to log into the UAI directly. The legacy configuration will soon be deprecated. Sites using it should migrate to the Broker UAI based configuration.\nOnce logged into a UAI, users can use most of the facilities found on a User Access Node (UAN) with certain limitations. Users can also use UAIs to transfer data between the Cray system and external systems.\nBy default, the timezone inside the UAI container is configured to match the timezone on the host NCN on which it is running, For example, if the timezone on the host NCN is set to CDT, the UAIs on that host will also be set to CDT.\n   Component Function/Description     User Access Instance (UAI) An instance of UAS container.   cray-uas-mgr Manages UAI life cycles.       Container Element Components     Operating system SLES15 SP2   kubectl command Utility to interact with Kubernetes.   cray command Command that allows users to create, describe, and delete UAIs.    Administrative users use cray uas admin uais list to list the following parameters for all existing UAIs:\nNOTE: The example values below are used throughout the UAS procedures. They are used as examples only. Users should substitute with site-specific values.\n   Parameter Description Example value     uai_connect_string The UAI connection string ssh user@203.0.113.0 -i ~/.ssh/id\\_rsa   uai_img The UAI image ID registry.local/cray/cray-uas-sles15sp1-slurm:latest   uai_name The UAI name uai-user-be3a6770   uai_status The state of the UAI. Running: Ready   username The user who created the UAI. user   uai_age The age of the UAI. 11m   uai_host The node hosting the UAI. ncn-w001    Authorized users in Legacy UAI Management use cray uas list to see the same information on all existing UAIs owned by the user (if any).\nGetting Started UAS is highly configurable and it is recommended that administrators familiarize themselves with, at least, the major concepts covered in the Table of Contents below before allowing users to use UAIs. In particular, the concepts of End-User UAIs and Broker UAIs, and the procedures for setting up and customizing Broker UAIs are critical to setting up UAS properly.\nAnother important topic, once administrators are familiar with setting up UAS to provide basic UAIs, is customizing the UAI image to support user workflows. At the simplest level, administrators will want to create and use a UAI image that matches the booted compute nodes. This can be done by following the Customize End-User UAI Images procedure.\nTable of Contents  UAS Limitations List UAS Version Information End-User UAIs Special Purpose UAIs Elements of a UAI UAI Host Nodes UAI Host Node Selection UAI macvlans Network Attachments UAI Network Attachment Customization Configure UAIs in UAS  UAI Images  Listing Registered UAI Images Register a UAI Image Retrieve UAI Image Registration Information Update a UAI Image Registration Delete a UAI Image Registration   Volumes  List Volumes Registered in UAS Add a Volume to UAS Obtain Configuration of a UAS Volume Update a UAS Volume Delete a Volume Configuration   Resource Specifications  List UAI Resource Specifications Create a UAI Resource Specification Retrieve Resource Specification Details Update a Resource Specification Delete a UAI Resource Specification   UAI Classes  List Available UAI Classes Create a UAI Class View a UAI Class Modify a UAI Class Delete a UAI Class     UAI Management  List UAIs Creating a UAI Examining a UAI Using a Direct Administrative Command Deleting a UAI   Common UAI Configurations  Choosing UAI Resource Settings Setting End-User UAI Timeouts Broker UAI Resiliency and Load Balancing   Broker Mode UAI Management  Configure End-User UAI Classes for Broker Mode Configure a Broker UAI class Start a Broker UAI Log in to a Broker UAI   UAI Image Customization  Customize the Broker UAI Image Customize End-User UAI Images   Legacy Mode User-Driven UAI Management  Configure A Default UAI Class for Legacy Mode Create and Use Default UAIs in Legacy Mode List Available UAI Images in Legacy Mode Create UAIs From Specific UAI Images in Legacy Mode UAS and UAI Legacy Mode Health Checks   Troubleshoot UAS Issues  Troubleshoot UAS by Viewing Log Output Troubleshoot UAIs by Viewing Log Output Troubleshoot Stale Brokered UAIs Troubleshoot UAI Stuck in ContainerCreating Troubleshoot Duplicate Mount Paths in a UAI Troubleshoot Missing or Incorrect UAI Images Troubleshoot UAIs with Administrative Access Troubleshoot Common Mistakes when Creating a Custom End-User UAI Image Troubleshoot UAS / CLI Authentication Issues Troubleshoot Broker UAI SSSD Cannot Use /etc/sssd/sssd.conf   Clear UAS Configuration  Next Topic: UAS Limitations\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/view_a_uai_class/",
	"title": "View A UAI Class",
	"tags": [],
	"description": "",
	"content": "View a UAI Class Display all the information for a specific UAI class by referencing its class ID.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command) The administrator must know the Class ID of a UAI class: List Available UAI Classes  Procedure View all the information about a specific UAI class.\nTo examine an existing UAI class, use a command of the following form:\nncn-m001-pit# cray uas admin config classes describe \u0026lt;class-id\u0026gt; The following example uses the --format yaml option to display the UAI class configuration in YAML format. Replace yaml with json to return JSON-formatted output. Omitting the --format option displays the UAI class in the default TOML format.\nReplace bb28a35a-6cbc-4c30-84b0-6050314af76b in the example command with the ID of the UAI class to be examined.\nncn-m001-pit# cray uas admin config classes describe bdb4988b-c061-48fa-a005-34f8571b88b4 --format yaml Example output:\nclass_id: bdb4988b-c061-48fa-a005-34f8571b88b4 comment: UAI Class to Create Brokered End-User UAIs default: false image_id: 1996c7f7-ca45-4588-bc41-0422fe2a1c3d namespace: user opt_ports: [] priority_class_name: uai-priority public_ip: false replicas: 3 resource_config: comment: Resource Specification to use with Brokered End-User UAIs limit: \u0026#39;{\u0026#34;cpu\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;memory\u0026#34;: \u0026#34;1Gi\u0026#34;}\u0026#39; request: \u0026#39;{\u0026#34;cpu\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;memory\u0026#34;: \u0026#34;1Gi\u0026#34;}\u0026#39; resource_id: f26ee12c-6215-4ad1-a15e-efe4232f45e6 resource_id: f26ee12c-6215-4ad1-a15e-efe4232f45e6 service_account: timeout: hard: \u0026#39;86400\u0026#39; soft: \u0026#39;1800\u0026#39; warning: \u0026#39;60\u0026#39; tolerations: uai_compute_network: true uai_creation_class: uai_image: default: true image_id: 1996c7f7-ca45-4588-bc41-0422fe2a1c3d imagename: registry.local/cray/cray-uai-sles15sp2:1.2.4 volume_list: - 11a4a22a-9644-4529-9434-d296eef2dc48 - a3b149fd-c477-41f0-8f8d-bfcee87fdd0a volume_mounts: - mount_path: /etc/localtime volume_description: host_path: path: /etc/localtime type: FileOrCreate volume_id: 11a4a22a-9644-4529-9434-d296eef2dc48 volumename: timezone - mount_path: /lus volume_description: host_path: path: /lus type: DirectoryOrCreate volume_id: a3b149fd-c477-41f0-8f8d-bfcee87fdd0a volumename: lustre Refer to UAI Classes and Elements of a UAI for an explanation of the output of this command.\nTop: User Access Service (UAS)\nNext Topic Modify a UAI Class\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/volumes/",
	"title": "Volumes",
	"tags": [],
	"description": "",
	"content": "Volumes Volumes provide a way to connect UAIs to external data, whether they be Kubernetes managed objects, external file systems or files, host node files and directories, or remote networked data to be used within the UAI.\nThe following are examples of how volumes are commonly used by UAIs:\n To connect UAIs to configuration files like /etc/localtime maintained by the host node To connect End-User UAIs to Slurm or PBS Professional Workload Manager configuration shared through Kubernetes To connect End-User UAIs to Programming Environment libraries and tools hosted on the UAI host nodes To connect End-User UAIs to Lustre or other external storage for user data To connect Broker UAIs to a directory service (see Configure a Broker UAI Class) or SSH configuration (see Customize the Broker UAI Image) needed to authenticate and redirect user sessions  Any kind of volume recognized by the Kubernetes installation can be installed as a volume within UAS. In the case of Legacy Mode UAI creation without a default UAI Class, all configured volumes are used when creating UAIs. This can be controlled more precisely by defining and using UAI Classes. There is more information on Kubernetes volumes in the Kubernetes Documentation.\nNOTE: As with UAI images, registering a volume with UAS creates the configuration that will be used to create a UAI. If the underlying object referred to by the volume does not exist at the time the UAI is created, the UAI will, in most cases, wait until the object becomes available before starting up. This will be visible in the UAI state which will eventually move to waiting.\nTop: User Access Service (UAS)\nNext Topic: List Volumes Registered in UAS\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/uai_host_node_selection/",
	"title": "UAI Host Node Selection",
	"tags": [],
	"description": "",
	"content": "UAI Host Node Selection When selecting UAI host nodes, it is a good idea to take into account the amount of combined load users and system services will bring to those nodes. UAIs run by default at a lower priority than system services on worker nodes which means that, if the combined load exceeds the capacity of the nodes, Kubernetes will eject UAIs and/or refuse to schedule them to protect system services. This can be disruptive or frustrating for users. This section explains how to identify the currently configured UAI host nodes and how to adjust that selection to meet the needs of users.\nIdentify UAI Host Nodes UAI host node identification is an exclusive activity, not an inclusive one, so it starts by identifying the nodes that could potentially be UAI host nodes by their Kubernetes role:\n  Identify nodes that could potentially be UAI host nodes by their Kubernetes role.\nncn-m001-pit# kubectl get nodes | grep -v master Example output:\nNAME STATUS ROLES AGE VERSION ncn-w001 Ready \u0026lt;none\u0026gt; 10d v1.20.13 ncn-w002 Ready \u0026lt;none\u0026gt; 25d v1.20.13 ncn-w003 Ready \u0026lt;none\u0026gt; 23d v1.20.13 In this example, there are three nodes known by Kubernetes that are not running as Kubernetes master nodes. These are all potential UAI host nodes.\n  Identify the nodes that are excluded from eligibility as UAI host nodes.\nncn-m001-pit# kubectl get no -l uas=False Example output:\nNAME STATUS ROLES AGE VERSION ncn-w001 Ready \u0026lt;none\u0026gt; 10d v1.20.13 NOTE: Given the fact that labels are textual not boolean, it is a good idea to try various common spellings of false. The ones that will prevent UAIs from running are \u0026lsquo;False\u0026rsquo;, \u0026lsquo;false\u0026rsquo; and \u0026lsquo;FALSE\u0026rsquo;. Repeat the above with all three options to be sure.\nOf the non-master nodes, there is one node in this example that is configured to reject UAIs, ncn-w001. So, ncn-w002 and ncn-w003 are UAI host nodes.\n  Specify UAI Host Nodes UAI host nodes are determined by labeling the nodes to reject UAIs. For example:\nncn-m001-pit# kubectl label node ncn-w001 uas=False --overwrite Please note here that setting uas=True or any variant of that, while potentially useful for local book keeping purposes, does NOT transform the node into a UAS host node. With that setting the node will be a UAS node because the value of the uas flag is not in the list False, false or FALSE, but unless the node previously had one of the false values, it was a UAI node all along. Perhaps more to the point, removing the uas label from a node labeled uas=True does not take the node out of the list of UAI host nodes. The only way to make a non-master Kubernetes node not be a UAS host node is to explicitly set the label to False, false or FALSE.\nMaintain an HSM Group for UAI Host Nodes When it comes to customizing non-compute node (NCN) contents for UAIs, it is useful to have a Hardware State Manager (HSM) node group containing the NCNs that are UAI hosts nodes. The hpe-csm-scripts package provides a script called make_node_groups that is useful for this purpose. This script is normally installed as /opt/cray/csm/scripts/node_management/make_node_groups. It can create and update node groups for management master nodes, storage nodes, management worker nodes, and UAI host nodes.\nThe following summarizes its use:\nncn-m001# /opt/cray/csm/scripts/node_management/make_node_groups --help Example output:\ngetopt: unrecognized option \u0026#39;--help\u0026#39; usage: make_node_groups [-m][-s][-u][w][-A][-R][-N] Where: -m - creates a node group for management master nodes -s - creates a node group for management storage nodes -u - creates a node group for UAI worker nodes -w - creates a node group for management worker nodes -A - creates all of the above node groups -N - executes a dry run, showing commands not running them -R - deletes existing node group(s) before creating them Here is an example of a dry-run that will create or update a node group for UAI host nodes:\nncn-m001# /opt/cray/csm/scripts/node_management/make_node_groups -N -R -u Example output:\n(dry run)cray hsm groups delete uai (dry run)cray hsm groups create --label uai (dry run)cray hsm groups members create uai --id x3000c0s4b0n0 (dry run)cray hsm groups members create uai --id x3000c0s5b0n0 (dry run)cray hsm groups members create uai --id x3000c0s6b0n0 (dry run)cray hsm groups members create uai --id x3000c0s7b0n0 (dry run)cray hsm groups members create uai --id x3000c0s8b0n0 (dry run)cray hsm groups members create uai --id x3000c0s9b0n0 Notice that when run in dry-run (-N option) mode, the script only prints out the CLI commands it will execute without actually executing them. When run with the -R option, the script removes any existing node groups before recreating them, effectively updating the contents of the node group. The -u option tells the script to create or update only the node group for UAI host nodes. That node group is named uai in the HSM.\nSo, to create a new node group or replace an existing one, called uai, containing the list of UAI host nodes, use the following command:\n# /opt/cray/csm/scripts/node_management/make_node_groups -R -u Use Kubernetes Taints and Tolerations to Make NCNs Exclusive UAI Hosts If a site has the NCN resources to host UAIs exclusively on a set of NCNs without impacting the operation of the HPE Cray EX System Management Plane, it is recommended to isolate UAIs on NCNs that do not also host Management Plane services. This can be done using Kubernetes Taints and Tolerations. By default, UAIs tolerate running on nodes where the uai_only taint has been set, while management services beyond the minimal set required to make the node a functioning Kubernetes Worker node on HPE Cray EX do not tolerate that taint. By adding that taint to nodes in the Kubernetes cluster, sites can keep management services away from those nodes while allowing UAIs to run there. By further adding the uas=False label to all worker nodes in the Kubernetes cluster where UAIs are not allowed, sites can ensure that UAIs only run on exclusive UAI hosts.\nFurther selection of UAI hosts can be achieved by any site by adding further taints to Kubernetes nodes, and configuring tolerations for those taints into specific UAI Classes.\nTop: User Access Service (UAS)\nNext Topic: UAI macvlans Network Attachments\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/uai_host_nodes/",
	"title": "UAI Host Nodes",
	"tags": [],
	"description": "",
	"content": "UAI Host Nodes UAIs run as Kubernetes pods on Kubernetes worker nodes. UAS provides a a mechanism using Kubernetes labels to prevent UAIs from running on a specific worker nodes, but any Kubernetes node that is not labeled to prevent UAIs from running on it is considered eligible to host UAIs. The administrator of a given site may control the set of UAI host nodes by labeling Kubernetes worker nodes appropriately.\nCertain product installation procedures call for the installation of product components on the UAI Host Nodes so that UAIs can use those resources directly from the host node (as opposed to, for example, external shared storage). It is important to make sure that any such resources are maintained on the UAI host nodes. If a UAI is configured to use resources from the host node that cannot be found, then the UAI will fail to start, usually remaining in a Waiting state. This documentation contains procedures for diagnosing and fixing issues related to missing host node resources.\nNodes can also be \u0026ldquo;tainted\u0026rdquo; in Kubernetes to permit UAIs but not permit general HPE Cray EX System management plane services to run on those nodes. Through the use of Kubernetes Taints and Tolerations, with tolerations configured in a UAI Class, it is possible to achieve fine-grained control of where UAIs of different classes are deployed on an HPE Cray EX System.\nTop: User Access Service (UAS)\nNext Topic: UAI Host Node Selection\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/uai_image_customization/",
	"title": "UAI Image Customization",
	"tags": [],
	"description": "",
	"content": "UAI Image Customization This section covers common customizations of both End-User UAIs and Broker UAIs.\nRefer to the following topics for more information:\n Customize the Broker UAI Image Customize End-User UAI Images  Top: User Access Service (UAS)\nNext Topic: Customize the Broker UAI Image\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/uai_images/",
	"title": "UAI Images",
	"tags": [],
	"description": "",
	"content": "UAI Images There are three kinds of UAI images used by UAS:\n A pre-packaged Broker UAI image provided with the UAS A pre-packaged basic End-User UAI Image provided with the UAS Custom End-User UAI images created on site, usually based on compute node contents  UAS provides two stock UAI images when installed. The first is a standard End-User UAI Image that has the necessary software installed in it to support a basic Linux distribution login experience. This image is provided for the purpose of sanity testing the UAS installation and as a simple starting point for administrative experimentation with UAS and UAIs.\nThe second image is a Broker UAI image. Broker UAIs are a special type of UAIs used in the \u0026ldquo;broker based\u0026rdquo; operation model. Broker UAIs present a single SSH endpoint that responds to each SSH connection by locating or creating a suitable End-User UAI and redirecting the SSH session to that End-User UAI.\nA site may provide any number of Custom End-User UAI Images as needed to support various use cases and workflows.\nTop: User Access Service (UAS)\nNext Topic: Listing Registered UAI Images\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/uai_macvlans_network_attachments/",
	"title": "UAI Macvlans Network Attachments",
	"tags": [],
	"description": "",
	"content": "UAI macvlans Network Attachments UAIs need to be able to reach compute nodes across the HPE Cray EX internal networks. When the compute node networks are structured as multiple subnets, this requires routing from the UAIs to those subnets. The default route in a UAI goes to the public network through the Customer Access Network (CAN) so that will not work for reaching compute nodes. To solve this problem, UAS installs Kubernetes Network Attachments within the Kubernetes user namespace. One of these network attachments is used by UAIs.\nThe type of network attachment used on HPE Cray EX hardware for this purpose is a macvlan network attachment, so this is often referred to on HPE Cray EX systems as macvlans. This network attachment integrates the UAI into the HPE Cray EX internal networks on the UAI host node where the UAI is running and assigns the UAI an IP address on the network defined by the network attachment. The network attachment also installs a set of routes in the UAI used to reach the compute nodes in the HPE Cray EX platform.\nWARNING This release sets a route over the NMN by default. In CPE release 22.04, instructions for Workload Managers specify that macvlan be changed to use the high speed network. This was found to have a negative impact on the slingshot fabric, as unknown MAC addresses would result in broadcast traffic. If macvlan is being changed to use the HSN, make sure the CPE instructions specify how to use ipvlan instead of macvlan. In a future CSM release, the network attachment definition will be using ipvlan instead of macvlan to avoid this issue.\nCheck how the network attachment is configured with:\nkubectl describe net-attach-def -n user macvlan-uas-nmn-conf Top: User Access Service (UAS)\nNext Topic: UAI Network Attachment Customization\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/uai_management/",
	"title": "UAI Management",
	"tags": [],
	"description": "",
	"content": "UAI Management UAS supports two manual methods and one automated method of UAI management:\n Direct administrative UAI management Legacy mode user driven UAI management UAI broker mode UAI management  Direct administrative UAI management is available mostly to allow administrators to set up Broker UAIs for the Broker Mode UAI Management and to control UAIs that are created under one of the other two methods. It is unlikely that a site will choose to create End-User UAIs this way, but it is possible to do. The administrative UAI management API provides an administrative way to list, create, examine, and delete UAIs.\nThe legacy mode of UAI management gives users the authority to create, list, and delete UAIs that belong to them. While this is a conceptually simple mode, it can lead to an unnecessary proliferation of UAIs belonging to a single user if the user is not careful to create UAIs only when needed. The legacy mode also cannot take advantage of the breadth of UAI classes to create more than one kind of UAI for different users' needs. In the legacy mode, UAIs can be created using a default UAI Class as a template and will always be created this way if a default UAI Class is configured, or, in the absence of a default UAI Class, using any of the registered UAI images and all of the volumes configured in the UAS. Use of a default UAI Class for legacy mode UAI creation is strongly advised.\nBroker UAIs mode creates / re-use UAIs on demand when a user logs into a Broker UAI using SSH. A site may run multiple Broker UAIs, each configured to create UAIs of a different UAI class and each running with its own externally visible IP address. By choosing the correct IP address and logging into the broker, a user ultimately arrives in an End-User UAI tailored for a given use case. Because the broker is responsible for managing the underlying End-User UAIs, users need not be given authority to create UAIs directly and, therefore, cannot cause a proliferation of unneeded UAIs. Because the Broker UAIs each run separately on different IP addresses with, potentially, different user authorizations configured, a site can control which users are given access to which classes of End-User UAIs.\nTop: User Access Service (UAS)\nNext Topic: List UAIs\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/uai_network_attachments/",
	"title": "UAI Network Attachment Customization",
	"tags": [],
	"description": "",
	"content": "UAI Network Attachment Customization The UAI network attachment configuration flows from the Cray Site Initializer (CSI) localization data through customizations.yaml into the UAS Helm chart and, ultimately, into Kubernetes in the form of a \u0026ldquo;network-attachment-definition\u0026rdquo;.\nThis section describes the data at each of those stages to show how the final network attachment gets created. Customization of the network attachments may be needed by some sites to, for example, increase the size of the reserved sub-net used for UAI macvlan attachments.\nCSI Localization Data The details of CSI localization are beyond the scope of this guide, but here are the important settings, and the values used in the following examples:\n The interface name on which the Kubernetes worker nodes reach their Node Management Network (NMN) subnet: bond0.nmn0 The network and CIDR configured on that interface: 10.252.0.0/17 The IP address of the gateway to other NMN subnets found on that network: 10.252.0.1 The subnets where compute nodes reside on this system:  10.92.100.0/24 10.106.0.0/17 10.104.0.0/17    Contents of customizations.yaml When CSI runs, it produces the following data structure in the spec section of customizations.yaml:\nspec: [...] wlm: [...] macvlansetup: nmn_subnet: 10.252.2.0/23 nmn_supernet: 10.252.0.0/17 nmn_supernet_gateway: 10.252.0.1 nmn_vlan: bond0.nmn0 # NOTE: the term DHCP here is misleading, this is merely # a range of reserved IP addresses for UAIs that should not # be handed out to others because the network # attachment will hand them out to UAIs. nmn_dhcp_start: 10.252.2.10 nmn_dhcp_end: 10.252.3.254 routes: - dst: 10.92.100.0/24 gw: 10.252.0.1 - dst: 10.106.0.0/17 gw: 10.252.0.1 - dst: 10.104.0.0/17 gw: 10.252.0.1 The nmn_subnet value shown here is not relevant for this section.\nThese values, in turn, feed into the following translation to UAS Helm chart settings:\ncray-uas-mgr: uasConfig: uai_macvlan_interface: \u0026#39;{{ wlm.macvlansetup.nmn_vlan }}\u0026#39; uai_macvlan_network: \u0026#39;{{ wlm.macvlansetup.nmn_supernet }}\u0026#39; uai_macvlan_range_start: \u0026#39;{{ wlm.macvlansetup.nmn_dhcp_start }}\u0026#39; uai_macvlan_range_end: \u0026#39;{{ wlm.macvlansetup.nmn_dhcp_end }}\u0026#39; uai_macvlan_routes: \u0026#39;{{ wlm.macvlansetup.routes }}\u0026#39; UAS Helm Chart The inputs in the previous section tell the UAS Helm chart how to install the network attachment for UAIs. While the actual template used for this is more complex, the following is a simplified view of the template used to generate the network attachment.\napiVersion: \u0026#34;k8s.cni.cncf.io/v1\u0026#34; kind: NetworkAttachmentDefinition [...] spec: config: \u0026#39;{ \u0026#34;cniVersion\u0026#34;: \u0026#34;0.3.0\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;macvlan\u0026#34;, \u0026#34;master\u0026#34;: \u0026#34;{{ .Values.uasConfig.uai_macvlan_interface }}\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;bridge\u0026#34;, \u0026#34;ipam\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;host-local\u0026#34;, \u0026#34;subnet\u0026#34;: \u0026#34;{{ .Values.uasConfig.uai_macvlan_network }}\u0026#34;, \u0026#34;rangeStart\u0026#34;: \u0026#34;{{ .Values.uasConfig.uai_macvlan_range_start }}\u0026#34;, \u0026#34;rangeEnd\u0026#34;: \u0026#34;{{ .Values.uasConfig.uai_macvlan_range_end }}\u0026#34;, \u0026#34;routes\u0026#34;: [ {{- range $index, $route := .Values.uasConfig.uai_macvlan_routes }} {{- range $key, $value := $route }} { \u0026#34;{{ $key }}\u0026#34;: \u0026#34;{{ $value }}\u0026#34;, }, {{- end }} {{- end }} ] } }\u0026#39; The range templating in the routes section expands the routes from customizations.yaml into the network attachment routes.\nUAI Network Attachment in Kubernetes All of this produces a network attachment definition in Kubernetes called macvlan-uas-nmn-conf which is used by UAS.\nThe following contents would result from the above data:\napiVersion: v1 items: - apiVersion: k8s.cni.cncf.io/v1 kind: NetworkAttachmentDefinition ... spec: config: \u0026#39;{ \u0026#34;cniVersion\u0026#34;: \u0026#34;0.3.0\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;macvlan\u0026#34;, \u0026#34;master\u0026#34;: \u0026#34;bond0.nmn0\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;bridge\u0026#34;, \u0026#34;ipam\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;host-local\u0026#34;, \u0026#34;subnet\u0026#34;: \u0026#34;10.252.0.0/17\u0026#34;, \u0026#34;rangeStart\u0026#34;: \u0026#34;10.252.124.10\u0026#34;, \u0026#34;rangeEnd\u0026#34;: \u0026#34;10.252.125.244\u0026#34;, \u0026#34;routes\u0026#34;: [ { \u0026#34;dst\u0026#34;: \u0026#34;10.92.100.0/24\u0026#34;, \u0026#34;gw\u0026#34;: \u0026#34;10.252.0.1\u0026#34; }, { \u0026#34;dst\u0026#34;: \u0026#34;10.106.0.0/17\u0026#34;, \u0026#34;gw\u0026#34;: \u0026#34;10.252.0.1\u0026#34; }, { \u0026#34;dst\u0026#34;: \u0026#34;10.104.0.0/17\u0026#34;, \u0026#34;gw\u0026#34;: \u0026#34;10.252.0.1\u0026#34; } ] } }\u0026#39; [...] In this example, Kubernetes will assign UAI IP addresses in the range 10.252.2.10 through 10.252.3.244 on the network attachment, and will permit those UAIs to reach compute nodes on any of four possible NMN subnets:\n Directly through the NMN subnet hosting the UAI host node itself (10.252.0.0/17 here) Through the gateway in the local NMN subnet (10.252.0.1 here) to:  10.92.100.0/24 10.106.0.0/17 10.104.0.0/17    Top: User Access Service (UAS)\nNext Topic: Configure UAIs in UAS\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/uas_and_uai_health_checks/",
	"title": "UAS And UAI Legacy Mode Health Checks",
	"tags": [],
	"description": "",
	"content": "UAS and UAI Legacy Mode Health Checks Check the health of UAS and UAI to validate installation / upgrade of an HPE Cray EX system. This is a legacy mode procedure that can be run at installation / upgrade time to make sure that the following are true:\n UAS is installed and running correctly UAI images are installed and registered correctly UAIs can be created in legacy mode  Initialize and Authorize the CLI The procedures below use the CLI as an authorized user and run on two separate node types. The first part runs on the LiveCD node while the second part runs on a non-LiveCD Kubernetes master or worker node. When using the CLI on either node, the CLI configuration must be initialized and the user running the procedure must be authorized. This section describes how to initialize the CLI for use by a user and authorize the CLI as a user to run the procedures on any given node. The procedures will need to be repeated in both stages of the validation procedure.\nDiscontinue Use of the CRAY_CREDENTIALS Service Account Token Installation procedures leading up to production mode on Shasta use the CLI with a Kubernetes managed service account normally used for internal operations. There is a procedure for extracting the OAUTH token for this service account and assigning it to the CRAY_CREDENTIALS environment variable to permit simple CLI operations. The UAS / UAI validation procedure runs as a post-installation procedure and requires an actual user with Linux credentials, not this service account. Prior to running any of the steps below you must unset the CRAY_CREDENTIALS environment variable.\nncn-m002# unset CRAY_CREDENTIALS Initialize the CLI Configuration The CLI needs to know what host to use to obtain authorization and what user is requesting authorization so it can obtain an OAUTH token to talk to the API Gateway. This is accomplished by initializing the CLI configuration. This example uses the vers username. In practice, vers and the response to the password: prompt should be replaced with the username and password of the administrator running the validation procedure.\nTo check whether the CLI needs initialization, run the following command.\nncn-m002# cray config describe If the output appears as follows, the CLI requires initialization.\nUsage: cray config describe [OPTIONS] Error: No configuration exists. Run `cray init` If the output appears more like the following, then the CLI is initialized and logged in as vers. If that is the incorrect username, authorize the correct username and password in the next section. If vers is the correct user, proceed to the validation procedure on that node.\nIf the CLI must be initialized again, use the following command and include the correct username, password, and the password response.\nncn-m002# cray init Cray Hostname: api-gw-service-nmn.local Username: vers Password: Success! Initialization complete. Authorize the Correct CLI User If the CLI is initialized but authorized for a user different, run the following command and substitute the correct username and password.\nncn-m002# cray auth login Username: vers Password: Success! Authorization Is Local to a Host: whenever you are using the CLI (cray command) on a host (e.g. a workstation or NCN) where it has not been used before, it is necessary to authenticate on that host using cray auth login. There is no mechanism to distribute CLI authorization amongst hosts.\nTroubleshoot CLI Initialization or Authorization Issues If initialization or authorization fails in any of the preceding steps, there are several common causes.\n DNS failure looking up api-gw-service-nmn.local may be preventing the CLI from reaching the API Gateway and Keycloak for authorization Network connectivity issues with the NMN may be preventing the CLI from reaching the API Gateway and Keycloak for authorization Certificate mismatch or trust issues may be preventing a secure connection to the API Gateway Istio failures may be preventing traffic from reaching Keycloak Keycloak may not yet be set up to authorize the current user  While resolving these issues is beyond the scope of this section, adding -vvvvv to the cray auth or cray init commands may offer clues as to why the initialization or authorization is failing.\nValidate the Basic UAS Installation This procedure and the following procedures run on separate nodes on the system and validate the basic UAS installation. Ensure this runs on the LiveCD node and that the CLI is authorized for the user.\nncn-m002# cray uas mgr-info list Example output:\nservice_name = \u0026#34;cray-uas-mgr\u0026#34; version = \u0026#34;1.11.5\u0026#34; ncn-m001-pit# cray uas list Example output:\nresults = [] This shows that UAS is installed and running version 1.11.5 and that no UAIs are running. If another user has been using the UAS, it is possible to see UAIs in the list. That is acceptable from a validation standpoint.\nTo verify that the pre-made UAI images are registered with UAS, run the following command.\nncn-m002# cray uas images list Example output:\ndefault_image = \u0026#34;dtr.dev.cray.com/cray/cray-uai-sles15sp1:latest\u0026#34; image_list = [ \u0026#34;dtr.dev.cray.com/cray/cray-uai-sles15sp1:latest\u0026#34;,] The output shows that the pre-made End-User UAI image, cray/cray-uai-sles15sp1:latest, is registered with UAS. This does not necessarily mean this image is installed in the container image registry, but it is configured for use. If other UAI images have been created and registered, they may also appear in the output.\nValidate UAI Creation The following are needed for this procedure:\n Must run on a master or worker node (and not ncn-w001) Must run on the HPE Cray EX system (or from an external host, but the procedure for that is not covered here) Requires that the CLI be initialized and authorized as for the current user    Verify that the user account can create a UAI.\nncn-w003# cray uas create --publickey ~/.ssh/id_rsa.pub Example output:\nuai_connect_string = \u0026#34;ssh vers@10.16.234.10\u0026#34; uai_host = \u0026#34;ncn-w001\u0026#34; uai_img = \u0026#34;registry.local/cray/cray-uai-sles15sp1:latest\u0026#34; uai_ip = \u0026#34;10.16.234.10\u0026#34; uai_msg = \u0026#34;\u0026#34; uai_name = \u0026#34;uai-vers-a00fb46b\u0026#34; uai_status = \u0026#34;Pending\u0026#34; username = \u0026#34;vers\u0026#34; [uai_portmap] The UAI is now created and in the process of initializing and running.\n  View the state of the UAI.\nThe following can be repeated as many times as desired. If the results appear like the following, the UAI is ready for use.\nncn-w003# cray uas list Example output:\n[[results]] uai_age = \u0026#34;0m\u0026#34; uai_connect_string = \u0026#34;ssh vers@10.16.234.10\u0026#34; uai_host = \u0026#34;ncn-w001\u0026#34; uai_img = \u0026#34;registry.local/cray/cray-uai-sles15sp1:latest\u0026#34; uai_ip = \u0026#34;10.16.234.10\u0026#34; uai_msg = \u0026#34;\u0026#34; uai_name = \u0026#34;uai-vers-a00fb46b\u0026#34; uai_status = \u0026#34;Running: Ready\u0026#34; username = \u0026#34;vers\u0026#34;   Log into the UAI (without a password) as follows:\n  SSH to the UAI.\nncn-w003# ssh vers@10.16.234.10 Example output:\nThe authenticity of host \u0026#39;10.16.234.10 (10.16.234.10)\u0026#39; can\u0026#39;t be established. ECDSA key fingerprint is SHA256:BifA2Axg5O0Q9wqESkLqK4z/b9e1usiDUZ/puGIFiyk. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added \u0026#39;10.16.234.10\u0026#39; (ECDSA) to the list of known hosts.   List the processes.\nvers@uai-vers-a00fb46b-6889b666db-4dfvn:~\u0026gt; ps -afe Example output:\nUID PID PPID C STIME TTY TIME CMD root 1 0 0 18:51 ? 00:00:00 /bin/bash /usr/bin/uai-ssh.sh munge 36 1 0 18:51 ? 00:00:00 /usr/sbin/munged root 54 1 0 18:51 ? 00:00:00 su vers -c /usr/sbin/sshd -e -f /etc/uas/ssh/sshd_config -D vers 55 54 0 18:51 ? 00:00:00 /usr/sbin/sshd -e -f /etc/uas/ssh/sshd_config -D vers 62 55 0 18:51 ? 00:00:00 sshd: vers [priv] vers 67 62 0 18:51 ? 00:00:00 sshd: vers@pts/0 vers 68 67 0 18:51 pts/0 00:00:00 -bash vers 120 68 0 18:52 pts/0 00:00:00 ps -afe   Exit the connection.\nvers@uai-vers-a00fb46b-6889b666db-4dfvn:~\u0026gt; exit     Clean up the UAI and note that the UAI name used is the same as the name in the output from cray uas create above.\nncn-w003# cray uas delete --uai-list uai-vers-a00fb46b In this example, results = [ \u0026quot;Successfully deleted uai-vers-a00fb46b\u0026quot;,] will be returned if successful.\n  Troubleshoot UAS and UAI Operations Issues Authorization Issues:\nIf the user is not logged in as a valid Keycloak user or is inadvertently using the CRAY_CREDENTIALS environment variable (i.e. the variable is set if the user is logged in with the their username or another username), the output of running the cray uas list command will produce output like the following.\nncn-w003# cray uas list Usage: cray uas list [OPTIONS] Try \u0026#39;cray uas list --help\u0026#39; for help. Error: Bad Request: Token not valid for UAS. Attributes missing: [\u0026#39;gidNumber\u0026#39;, \u0026#39;loginShell\u0026#39;, \u0026#39;homeDirectory\u0026#39;, \u0026#39;uidNumber\u0026#39;, \u0026#39;name\u0026#39;] Fix this by logging in as a \u0026ldquo;real user\u0026rdquo; (a user with Linux credentials) and ensure that CRAY_CREDENTIALS is unset.\nUAS Cannot Access Keycloak If the output of the cray uas list command appears similar to the following, the wrong hostname to reach the API gateway may be in use. In that case, run the CLI initialization steps again.\nncn-w003# cray uas list Usage: cray uas list [OPTIONS] Try \u0026#39;cray uas list --help\u0026#39; for help. Error: Internal Server Error: An error was encountered while accessing Keycloak There also may be a problem with the Istio service mesh inside of the Shasta system. Troubleshooting this is beyond the scope of this section, but viewing the UAS pod logs in Kubernetes may provide useful information.\nThere are typically two UAS pods. View logs from both pods to identify the specific failure. The logs have a very large number of GET events listed as part of the aliveness checking. The following shows an example of viewing UAS logs (the example shows only one UAS manage, normally there would be two).\nncn-w003# kubectl get po -n services | grep uas-mgr | grep -v etcd Example output:\ncray-uas-mgr-6bbd584ccb-zg8vx 2/2 Running 0 12d ncn-w003# kubectl logs -n services cray-uas-mgr-6bbd584ccb-zg8vx cray-uas-mgr | grep -v \u0026#39;GET \u0026#39; | tail -25 2021-02-08 15:32:41,211 - uas_mgr - INFO - getting deployment uai-vers-87a0ff6e in namespace user 2021-02-08 15:32:41,225 - uas_mgr - INFO - creating deployment uai-vers-87a0ff6e in namespace user 2021-02-08 15:32:41,241 - uas_mgr - INFO - creating the UAI service uai-vers-87a0ff6e-ssh 2021-02-08 15:32:41,241 - uas_mgr - INFO - getting service uai-vers-87a0ff6e-ssh in namespace user 2021-02-08 15:32:41,252 - uas_mgr - INFO - creating service uai-vers-87a0ff6e-ssh in namespace user 2021-02-08 15:32:41,267 - uas_mgr - INFO - getting pod info uai-vers-87a0ff6e 2021-02-08 15:32:41,360 - uas_mgr - INFO - No start time provided from pod 2021-02-08 15:32:41,361 - uas_mgr - INFO - getting service info for uai-vers-87a0ff6e-ssh in namespace user 127.0.0.1 - - [08/Feb/2021 15:32:41] \u0026#34;POST /v1/uas?imagename=registry.local%2Fcray%2Fno-image-registered%3Alatest HTTP/1.1\u0026#34; 200 - 2021-02-08 15:32:54,455 - uas_auth - INFO - UasAuth lookup complete for user vers 2021-02-08 15:32:54,455 - uas_mgr - INFO - UAS request for: vers 2021-02-08 15:32:54,455 - uas_mgr - INFO - listing deployments matching: host None, labels uas=managed,user=vers 2021-02-08 15:32:54,484 - uas_mgr - INFO - getting pod info uai-vers-87a0ff6e 2021-02-08 15:32:54,596 - uas_mgr - INFO - getting service info for uai-vers-87a0ff6e-ssh in namespace user 2021-02-08 15:40:25,053 - uas_auth - INFO - UasAuth lookup complete for user vers 2021-02-08 15:40:25,054 - uas_mgr - INFO - UAS request for: vers 2021-02-08 15:40:25,054 - uas_mgr - INFO - listing deployments matching: host None, labels uas=managed,user=vers 2021-02-08 15:40:25,085 - uas_mgr - INFO - getting pod info uai-vers-87a0ff6e 2021-02-08 15:40:25,212 - uas_mgr - INFO - getting service info for uai-vers-87a0ff6e-ssh in namespace user 2021-02-08 15:40:51,210 - uas_auth - INFO - UasAuth lookup complete for user vers 2021-02-08 15:40:51,210 - uas_mgr - INFO - UAS request for: vers 2021-02-08 15:40:51,210 - uas_mgr - INFO - listing deployments matching: host None, labels uas=managed,user=vers 2021-02-08 15:40:51,261 - uas_mgr - INFO - deleting service uai-vers-87a0ff6e-ssh in namespace user 2021-02-08 15:40:51,291 - uas_mgr - INFO - delete deployment uai-vers-87a0ff6e in namespace user 127.0.0.1 - - [08/Feb/2021 15:40:51] \u0026#34;DELETE /v1/uas?uai_list=uai-vers-87a0ff6e HTTP/1.1\u0026#34; 200 - UAI Images not in Registry If output is similar to the following, the pre-made End-User UAI image is not in the user\u0026rsquo;s local registry (or whatever registry it is being pulled from, see the uai_img value for details). Locate and the image and push / import it to the registry.\nncn-w003# cray uas list Example output:\n[[results]] uai_age = \u0026#34;0m\u0026#34; uai_connect_string = \u0026#34;ssh vers@10.103.13.172\u0026#34; uai_host = \u0026#34;ncn-w001\u0026#34; uai_img = \u0026#34;registry.local/cray/cray-uai-sles15sp1:latest\u0026#34; uai_ip = \u0026#34;10.103.13.172\u0026#34; uai_msg = \u0026#34;ErrImagePull\u0026#34; uai_name = \u0026#34;uai-vers-87a0ff6e\u0026#34; uai_status = \u0026#34;Waiting\u0026#34; username = \u0026#34;vers\u0026#34; Missing Volumes and Other Container Startup Issues Various packages install volumes in the UAS configuration. All of those volumes must also have the underlying resources available, sometimes on the host node where the UAI is running and sometimes from within Kubernetes. If the UAI gets stuck with a ContainerCreating uai_msg field for an extended time, this is a likely cause. UAIs run in the user Kubernetes namespace and are pods that can be examined using kubectl describe.\nRun the following command to locate the pod.\nncn-w003# kubectl get po -n user | grep \u0026lt;uai-name\u0026gt; Run the following command to investigate the problem.\nncn-w003# kubectl describe -n user \u0026lt;pod-name\u0026gt; If volumes are missing, they will be in the Events:section of the output. Other problems may show up there as well. The names of the missing volumes or other issues should indicate what needs to be fixed to enable the UAI.\nTop: User Access Service (UAS)\nNext Topic: Troubleshoot UAS Issues\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/uas_limitations/",
	"title": "UAS Limitations",
	"tags": [],
	"description": "",
	"content": "UAS Limitations Functionality that is currently not supported while using UAS.\nFunctionality Not Currently Supported by the User Access Service  Lustre (lfs) commands within the UAS service pod Executing Singularity containers within the UAS service Building Docker containers within the UAS environment Building containerd containers within the UAS environment dmesg cannot run inside a UAI because of container security limitations Users cannot SSH from ncn-w001 to a UAI because UAIs use LoadBalancer IP addresses on the Customer Access Network (CAN) instead of NodePorts and the LoadBalancer IP addresses are not accessible from ncn-w001  Other Limitations  There is a known issue where X11 traffic may not forward DISPLAY correctly if the user logs into an NCN node before logging into a UAI The cray uas uais commands are not restricted to operating on UAIs owned by the user authenticated with cray auth login  Limitations Related To Restarts Changes made to a running UAI will be lost if the UAI is restarted or deleted. The only changes in a UAI that will persist are those written to an externally mounted file system (such as Lustre or NFS). To make changes to the base image for a UAI, see Customize End-User UAI Images.\nA UAI may restart because of an issue on the physical node, scheduled node maintenance, or intentional restarts by a site administrator. In this case, any running processes (such as compiles), Slurm interactive jobs, or changes made to the UAI (such as package installations) are lost. A UAI may also terminate and have to be restarted if its hard timeout is reached while a user is logged in or if its soft timeout is reached while it is idle \u0026ndash; defined as having no logged in user sessions \u0026ndash; or before it becomes idle.\nIf a UAI restarts on a node that was recently rebooted, some of the configured volumes may not be ready and it could appear that content in the UAI is missing. In this case, restart the UAI.\nTop: User Access Service (UAS)\nNext Topic: List UAS Version Information\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/troubleshoot_duplicate_mount_paths_in_a_uai/",
	"title": "Troubleshoot Duplicate Mount Paths In A UAI",
	"tags": [],
	"description": "",
	"content": "Troubleshoot Duplicate Mount Paths in a UAI If a user attempts to create a UAI in the legacy mode and cannot create the UAI at all, a good place to look is at volumes. Duplicate mount_path specifications in the list of volumes in a UAI will cause a failure that looks like this:\nncn-m001-pit# cray uas create --publickey ~/.ssh/id_rsa.pub Example output:\nUsage: cray uas create [OPTIONS] Try \u0026#39;cray uas create --help\u0026#39; for help. Error: Unprocessable Entity: Failed to create deployment uai-erl-543cdbbc: Unprocessable Entity Currently, there is not a lot of UAS log information available from this error (this is a known problem), but a likely cause is duplicate mount_path specifications in volumes. Looking through the configured volumes for duplicates can be helpful.\nncn-m001-pit# cray uas admin config volumes list | grep -e mount_path -e volumename -e volume_id Example output:\nmount_path = \u0026#34;/app/broker\u0026#34; volume_id = \u0026#34;1f3bde56-b2e7-4596-ab3a-6aa4327d29c7\u0026#34; volumename = \u0026#34;broker-entrypoint\u0026#34; mount_path = \u0026#34;/etc/sssd\u0026#34; volume_id = \u0026#34;4dc6691e-e7d9-4af3-acde-fc6d308dd7b4\u0026#34; volumename = \u0026#34;broker-sssd-config\u0026#34; mount_path = \u0026#34;/etc/localtime\u0026#34; volume_id = \u0026#34;55a02475-5770-4a77-b621-f92c5082475c\u0026#34; volumename = \u0026#34;timezone\u0026#34; mount_path = \u0026#34;/root/slurm_config/munge\u0026#34; volume_id = \u0026#34;7aeaf158-ad8d-4f0d-bae6-47f8fffbd1ad\u0026#34; volumename = \u0026#34;munge-key\u0026#34; mount_path = \u0026#34;/opt/forge\u0026#34; volume_id = \u0026#34;7b924270-c9e9-4b0e-85f5-5bc62c02457e\u0026#34; volumename = \u0026#34;delete-me\u0026#34; mount_path = \u0026#34;/lus\u0026#34; volume_id = \u0026#34;9fff2d24-77d9-467f-869a-235ddcd37ad7\u0026#34; volumename = \u0026#34;lustre\u0026#34; mount_path = \u0026#34;/etc/switchboard\u0026#34; volume_id = \u0026#34;d5058121-c1b6-4360-824d-3c712371f042\u0026#34; volumename = \u0026#34;broker-sshd-config\u0026#34; mount_path = \u0026#34;/etc/slurm\u0026#34; volume_id = \u0026#34;ea97325c-2b1d-418a-b3b5-3f6488f4a9e2\u0026#34; volumename = \u0026#34;slurm-config\u0026#34; mount_path = \u0026#34;/opt/forge_license\u0026#34; volume_id = \u0026#34;ecfae4b2-d530-4c06-b757-49b30061c90a\u0026#34; volumename = \u0026#34;optforgelicense\u0026#34; mount_path = \u0026#34;/opt/forge\u0026#34; volume_id = \u0026#34;fc95d0da-6296-4d0b-8f26-2d4338604991\u0026#34; volumename = \u0026#34;optforge\u0026#34; Looking through this list, the mount path for the volume named delete-me and the mount path for the volume named optforge are the same. The obvious candidate for deletion in this case is delete-me, so it can be deleted.\nncn-m001-pit# cray uas admin config volumes delete 7b924270-c9e9-4b0e-85f5-5bc62c02457e Example output:\nmount_path = \u0026#34;/opt/forge\u0026#34; volume_id = \u0026#34;7b924270-c9e9-4b0e-85f5-5bc62c02457e\u0026#34; volumename = \u0026#34;delete-me\u0026#34; [volume_description.host_path] path = \u0026#34;/tmp/foo\u0026#34; type = \u0026#34;DirectoryOrCreate\u0026#34; Top: User Access Service (UAS)\nNext Topic: Troubleshoot Missing or Incorrect UAI Images\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/troubleshoot_missing_or_incorrect_uai_images/",
	"title": "Troubleshoot Missing Or Incorrect UAI Images",
	"tags": [],
	"description": "",
	"content": "Troubleshoot Missing or Incorrect UAI Images If a UAI shows a uai_status of Waiting and a uai_msg of ImagePullBackOff, that indicates that the UAI or the UAI class is configured to use an image that is not in the image registry.\nEither obtaining and pushing the image to the image registry, or correcting the name or version of the image in the UAS configuration will usually resolve this.\nTop: User Access Service (UAS)\nNext Topic: Troubleshoot UAIs with Administrative Access\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/troubleshoot_stale_brokered_uais/",
	"title": "Troubleshoot Stale Brokered UAIs",
	"tags": [],
	"description": "",
	"content": "Troubleshoot Stale Brokered UAIs When a Broker UAI terminates and restarts, the SSH key used to forward SSH sessions to End-User UAIs changes (this is a known problem) and subsequent Broker UAIs are unable to forward sessions to End-User UAIs. The symptom of this is that a user logging into a Broker UAI will receive a password prompt from the End-User UAI and be unable to log in even if providing the correct password. To fix this, remove the stale End-User UAIs and allow the Broker UAI to recreate them. The easy way to do this is to use the command specifying the uai-creation-class identifier from the Broker\u0026rsquo;s UAI class.\ncray uas admin uais delete --class-id \u0026lt;creation-class-id\u0026gt; For example:\nncn-m001-pit# cray uas admin config classes list | grep -e class_id -e comment class_id = \u0026#34;74970cdc-9f94-4d51-8f20-96326212b468\u0026#34; comment = \u0026#34;UAI broker class\u0026#34; class_id = \u0026#34;a623a04a-8ff0-425e-94cc-4409bdd49d9c\u0026#34; comment = \u0026#34;UAI User Class\u0026#34; class_id = \u0026#34;bb28a35a-6cbc-4c30-84b0-6050314af76b\u0026#34; comment = \u0026#34;Non-Brokered UAI User Class\u0026#34; ncn-m001-pit# cray uas admin config classes describe 74970cdc-9f94-4d51-8f20-96326212b468 | grep uai_creation_class uai_creation_class = \u0026#34;a623a04a-8ff0-425e-94cc-4409bdd49d9c\u0026#34; ncn-m001-pit# cray uas admin uais delete --class-id a623a04a-8ff0-425e-94cc-4409bdd49d9c results = [ \u0026#34;Successfully deleted uai-vers-6da50e7a\u0026#34;,] After that, users should be able to log into the Broker UAI and be directed to an End-User UAI as before.\nTop: User Access Service (UAS)\nNext Topic: Troubleshoot UAI Stuck in ContainerCreating\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/troubleshoot_uai_stuck_in_containercreating/",
	"title": "Troubleshoot UAI Stuck In Containercreating",
	"tags": [],
	"description": "",
	"content": "Troubleshoot UAI Stuck in ContainerCreating Resolve an issue causing UAIs to show a uai_status field of Waiting, and a uai_msg field of ContainerCreating. It is possible that this is just a matter of starting the UAI taking longer than normal, perhaps as it pulls in a new UAI image from a registry. If the issue persists for a long time, it is worth investigating.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command) The administrator must be on an NCN or host that has Kubernetes (kubectl command) access to the HPE Cray EX System  Symptoms The UAI has been in the ContainerCreating status for several minutes.\nProcedure   Find the UAI.\nncn-m001-pit# cray uas admin uais list --owner ctuser Example output:\n[[results]] uai_age = \u0026#34;1m\u0026#34; uai_connect_string = \u0026#34;ssh ctuser@10.103.13.159\u0026#34; uai_host = \u0026#34;ncn-w001\u0026#34; uai_img = \u0026#34;dtr.dev.cray.com/cray/cray-uai-sles15sp1:latest\u0026#34; uai_ip = \u0026#34;10.103.13.159\u0026#34; uai_msg = \u0026#34;ContainerCreating\u0026#34; uai_name = \u0026#34;uai-ctuser-bcd1ff74\u0026#34; uai_status = \u0026#34;Waiting\u0026#34; username = \u0026#34;ctuser\u0026#34;   Look up the UAI\u0026rsquo;s pod in Kubernetes.\nncn-m001-pit# kubectl get po -n user | grep uai-ctuser-bcd1ff74 Example output:\nuai-ctuser-bcd1ff74-7d94967bdc-4vm66 0/1 ContainerCreating 0 2m58s   Describe the pod in Kubernetes.\nncn-m001-pit# kubectl describe pod -n user uai-ctuser-bcd1ff74-7d94967bdc-4vm66 Example output:\nName: uai-ctuser-bcd1ff74-7d94967bdc-4vm66 Namespace: user Priority: -100 Priority Class Name: uai-priority Node: ncn-w001/10.252.1.12 Start Time: Wed, 03 Feb 2021 18:33:00 -0600 [...] Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Scheduled \u0026lt;unknown\u0026gt; default-scheduler Successfully assigned user/uai-ctuser-bcd1ff74-7d94967bdc-4vm66 to ncn-w001 Warning FailedMount 2m53s (x8 over 3m57s) kubelet, ncn-w001 MountVolume.SetUp failed for volume \u0026#34;broker-sssd-config\u0026#34; : secret \u0026#34;broker-sssd-conf\u0026#34; not found Warning FailedMount 2m53s (x8 over 3m57s) kubelet, ncn-w001 MountVolume.SetUp failed for volume \u0026#34;broker-sshd-config\u0026#34; : configmap \u0026#34;broker-sshd-conf\u0026#34; not found Warning FailedMount 2m53s (x8 over 3m57s) kubelet, ncn-w001 MountVolume.SetUp failed for volume \u0026#34;broker-entrypoint\u0026#34; : configmap \u0026#34;broker-entrypoint\u0026#34; not found Warning FailedMount 114s kubelet, ncn-w001 Unable to attach or mount volumes: unmounted volumes=[broker-sssd-config broker-entrypoint broker-sshd-config], unattached volumes=[optcraype optlmod etcprofiled optr optforgelicense broker-sssd-config lustre timezone optintel optmodulefiles usrsharelmod default-token-58t5p optarmlicenceserver optcraycrayucx slurm-config opttoolworks optnvidiahpcsdk munge-key optamd opttotalview optgcc opttotalviewlicense broker-entrypoint broker-sshd-config etccrayped opttotalviewsupport optcraymodulefilescrayucx optforge usrlocalmodules varoptcraypepeimages]: timed out waiting for the condition This produces a lot of output, all of which can be useful for diagnosis. A good place to start is in the Events section at the bottom. Notice the warnings here about volumes whose secrets and ConfigMaps are not found. In this case, that means the UAI cannot start because it was started in legacy mode without a default UAI class, and some of the volumes configured in the UAS are in the uas namespace to support localization of Broker UAIs and cannot be found in the user namespace. To solve this particular problem, configure a default UAI class with the correct volume list in it, delete the UAI, and allow the user to try creating it again using the default class.\nOther problems can usually be quickly identified using this and other information found in the output from the kubectl describe pod command.\n  Top: User Access Service (UAS)\nNext Topic: Troubleshoot Duplicate Mount Paths in a UAI\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/troubleshoot_uais_by_viewing_log_output/",
	"title": "Troubleshoot UAIs By Viewing Log Output",
	"tags": [],
	"description": "",
	"content": "Troubleshoot UAIs by Viewing Log Output Sometimes a UAI will come up and run but will not work correctly. It is possible to see errors reported by elements of the UAI entrypoint script using the kubectl logs command.\nProcedure   Find the UAI of interest.\nThis starts by identifying the UAI name using the CLI:\nncn-m001-pit# cray uas admin uais list Example output:\n[[results]] uai_age = \u0026#34;4h30m\u0026#34; uai_connect_string = \u0026#34;ssh broker@10.103.13.162\u0026#34; uai_host = \u0026#34;ncn-w001\u0026#34; uai_img = \u0026#34;dtr.dev.cray.com/cray/cray-uai-broker:latest\u0026#34; uai_ip = \u0026#34;10.103.13.162\u0026#34; uai_msg = \u0026#34;\u0026#34; uai_name = \u0026#34;uai-broker-2e6ce6b7\u0026#34; uai_status = \u0026#34;Running: Ready\u0026#34; username = \u0026#34;broker\u0026#34; [[results]] uai_age = \u0026#34;1h12m\u0026#34; uai_connect_string = \u0026#34;ssh vers@10.20.49.135\u0026#34; uai_host = \u0026#34;ncn-w001\u0026#34; uai_img = \u0026#34;dtr.dev.cray.com/cray/cray-uai-sles15sp1:latest\u0026#34; uai_ip = \u0026#34;10.20.49.135\u0026#34; uai_msg = \u0026#34;\u0026#34; uai_name = \u0026#34;uai-vers-6da50e7a\u0026#34; uai_status = \u0026#34;Running: Ready\u0026#34; username = \u0026#34;vers\u0026#34;   Find the UAI in question, remembering that End-User UAIs run in the user Kubernetes namespace and Broker UAIs run in the uas Kubernetes namespace.\n  End-User:\nncn-m001-pit# kubectl get po -n user | grep uai-vers-6da50e7a Example output:\nuai-vers-6da50e7a-54dbc99fdd-csxmk 1/1 Running 0 76m   Broker:\nncn-m001-pit# kubectl get po -n uas | grep uai-broker-2e6ce6b7 Example output:\nuai-broker-2e6ce6b7-68d78c6c95-s28dh 2/2 Running 0 4h34m     Use the pod name and the namespace to get the logs.\n  End-User UAI pod name and the user namespace:\nncn-m001-pit# kubectl logs -n user uai-vers-6da50e7a-54dbc99fdd-csxmk uai-vers-6da50e7a Example output:\nSetting up passwd and group entries for vers Setting profile for vers Adding vers to groups Disabling password based login passwd: password expiry information changed. Checking to see if /home/users/vers exists If this hangs, please ensure that /home/users/vers is properly mounted/working on the host of this pod No home directory exists, creating one Checking for munge.key Setting up munge.key Check for pbs.conf Generating ssh keys and sshd_config ssh-keygen: generating new host keys: RSA DSA ECDSA ED25519 [...]   Broker UAI pod name and the uas namespace:\nncn-m001-pit# kubectl logs -n uas uai-broker-2e6ce6b7-68d78c6c95-s28dh uai-broker-2e6ce6b7 Example output:\n/bin/bash: warning: setlocale: LC_ALL: cannot change locale (C.UTF-8) Configure PAM to use sssd... Generating broker host keys... ssh-keygen: generating new host keys: RSA DSA ECDSA ED25519 Checking for UAI_CREATION_CLASS... Starting sshd... Starting sssd... (Wed Feb 3 18:34:41:792821 2021) [sssd] [sss_ini_get_config] (0x0020): Config merge error: Directory /etc/sssd/conf.d does not exist. The above is from a successful Broker starting and running.\n    Top: User Access Service (UAS)\nNext Topic: Troubleshoot Stale Brokered UAIs\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/troubleshoot_uais_with_administrative_access/",
	"title": "Troubleshoot UAIs With Administrative Access",
	"tags": [],
	"description": "",
	"content": "Troubleshoot UAIs with Administrative Access Sometimes there is no better way to figure out a problem with a UAI than to get inside it and look around as an administrator. This is done using kubectl exec to start a shell inside the running container as root (in the container). With this an administrator can diagnose problems, make changes to the running UAI, and find solutions. It is important to remember that any change made inside a UAI is transitory. These changes only last as long as the UAI is running. To make a permanent change, either the UAI image has to be changed or external customizations must be applied.\nSummary The high-level steps of the procedure are the following:\n Find the name of the UAI in question. Use that name with kubectl to find the pod containing that UAI. Use that pod name, the UAI name (as the container name), and the user namespace to open an interactive shell in the container with kubectl exec. From this shell, look around the UAI as needed.  Example Here is an example session showing a ps command inside the container of a UAI by an administrator.\n  List the UAIs.\nncn# cray uas admin uais list Example output:\n[[results]] uai_age = \u0026#34;1d4h\u0026#34; uai_connect_string = \u0026#34;ssh broker@10.103.13.162\u0026#34; uai_host = \u0026#34;ncn-w001\u0026#34; uai_img = \u0026#34;dtr.dev.cray.com/cray/cray-uai-broker:latest\u0026#34; uai_ip = \u0026#34;10.103.13.162\u0026#34; uai_msg = \u0026#34;\u0026#34; uai_name = \u0026#34;uai-broker-2e6ce6b7\u0026#34; uai_status = \u0026#34;Running: Ready\u0026#34; username = \u0026#34;broker\u0026#34; [[results]] uai_age = \u0026#34;0m\u0026#34; uai_connect_string = \u0026#34;ssh vers@10.29.162.104\u0026#34; uai_host = \u0026#34;ncn-w001\u0026#34; uai_img = \u0026#34;dtr.dev.cray.com/cray/cray-uai-sles15sp1:latest\u0026#34; uai_ip = \u0026#34;10.29.162.104\u0026#34; uai_msg = \u0026#34;\u0026#34; uai_name = \u0026#34;uai-vers-4ebe1966\u0026#34; uai_status = \u0026#34;Running: Ready\u0026#34; username = \u0026#34;vers\u0026#34;   Find the pod name.\nncn# kubectl get po -n user | grep uai-vers-4ebe1966 Example output:\nuai-vers-4ebe1966-77b7c9c84f-xgqm4 1/1 Running 0 77s   Open an interactive shell in the pod.\nncn# kubectl exec -it -n user uai-vers-4ebe1966-77b7c9c84f-xgqm4 -c uai-vers-4ebe1966 -- /bin/sh   Run the ps command inside the container of a UAI.\nsh-4.4# ps -afe Example output:\nUID PID PPID C STIME TTY TIME CMD root 1 0 0 22:56 ? 00:00:00 /bin/bash /usr/bin/uai-ssh.sh munge 36 1 0 22:56 ? 00:00:00 /usr/sbin/munged root 54 1 0 22:56 ? 00:00:00 su vers -c /usr/sbin/sshd -e -f /etc/uas/ssh/sshd_config -D vers 55 54 0 22:56 ? 00:00:00 /usr/sbin/sshd -e -f /etc/uas/ssh/sshd_config -D root 90 0 0 22:58 pts/0 00:00:00 /bin/sh root 97 90 0 22:58 pts/0 00:00:00 ps -afe sh-4.4#   Next Topic Next Topic: Troubleshoot Common Mistakes when Creating a Custom End-User UAI Image\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/troubleshoot_uai_authentication_issues/",
	"title": "Troubleshoot UAS / Cli Authentication Issues",
	"tags": [],
	"description": "",
	"content": "Troubleshoot UAS / CLI Authentication Issues Several troubleshooting steps related to authentication in a UAI.\nInternal Server Error An error was encountered while accessing Keycloak because of an invalid token.\n# cray uas create --publickey ~/.ssh/id_rsa.pub Usage: cray uas create [OPTIONS] Try \u0026#34;cray uas create --help\u0026#34; for help. Error: Internal Server Error: An error was encountered while accessing Keycloak The uas-mgr logs show:\n2020-03-06 18:52:07,642 - uas_auth - ERROR - \u0026lt;class \u0026#39;requests.exceptions.HTTPError\u0026#39;\u0026gt; HTTPError(\u0026#39;401 Client Error: Unauthorized for url: https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/userinfo\u0026#39;) 2020-03-06 18:52:07,643 - uas_auth - ERROR - UasAuth HTTPError:401 Client Error: Unauthorized for url: https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/userinfo The Keycloak pod logs shows:\n18:53:19,617 WARN [org.keycloak.events] (default task-1) type=USER_INFO_REQUEST_ERROR, realmId=028be52c-ceca-4dbd-b765-0386b42b1866, clientId=cray, userId=null, ipAddress=10.40.0.0, error=user_session_not_found, auth_method=validate_access_token This is caused by the authentication token being invalid. This can happen for many reasons, such as the token expiring after its lifetime has ended or the Keycloak server restarting because of a failure or being moved to a different node.\nTo resolve this issue, run cray auth login to refresh the access token.\nAuthorization is Local to a Host: whenever you are using the CLI (cray command) on a host (e.g. a workstation or NCN) where it has not been used before, it is necessary to authenticate on that host using cray auth login. There is no mechanism to distribute CLI authorization amongst hosts.\nInvalid Token # cray uas create --publickey ~/.ssh/id_rsa.pub Usage: cray uas create [OPTIONS] Try \u0026#34;cray uas create --help\u0026#34; for help. Error: Bad Request: Token not valid for UAS. Attributes missing: [\u0026#39;name\u0026#39;, \u0026#39;uidNumber\u0026#39;, \u0026#39;preferred_username\u0026#39;, \u0026#39;gidNumber\u0026#39;, \u0026#39;loginShell\u0026#39;, \u0026#39;homeDirectory\u0026#39;] To resolve this issue, make sure the cray command is configured to use one of the following URLs for an API gateway (excluding the /keycloak/realms/shastaendpoint).\n# kubectl exec -c api-gateway api-gateway-544d5c676f-682m2 -- curl -s http://localhost:8001/consumers/remote-admin/jwt | python -mjson.tool | grep \u0026#34;\u0026#34;key\u0026#34;\u0026#34; \u0026#34;key\u0026#34;: \u0026#34;https://api-gateway.default.svc.cluster.local/keycloak/realms/shasta\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/keycloak/realms/shasta\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;https://mgmt-plane-cmn.local/keycloak/realms/shasta\u0026#34;, # cray config describe | grep hostname \u0026#34;hostname\u0026#34;: \u0026#34;https://172.30.51.127:30443\u0026#34; \u0026lt;---- 172.30.51.127:30443 will not work # Change to \u0026#34;https://api-gw-service-nmn.local\u0026#34; cray init --hostname \u0026#34;https://api-gw-service-nmn.local\u0026#34; Overwrite configuration file at: /root/.config/cray/configurations/default ? [y/N]: y Username: user Password: Success! Initialization complete. Invalid Credentials # cray auth login --username \u0026lt;user\u0026gt; --password \u0026lt;wrongpassword\u0026gt; Usage: cray auth login [OPTIONS] Try \u0026#34;cray auth login --help\u0026#34; for help. Error: Invalid Credentials To resolve this issue:\n Log in to Keycloak and verify the user exists. Make sure the username and password are correct.  cray uas describe \u0026lt;user\u0026gt; Does Not Work The cray uas describe \u0026lt;user\u0026gt; is no longer a valid command.\n# cray uas describe \u0026lt;user\u0026gt; Usage: cray uas [OPTIONS] COMMAND [ARGS]... Try \u0026#34;cray uas --help\u0026#34; for help. Error: No such command \u0026#34;describe\u0026#34;. Use cray uas list instead.\n# cray uas list Example output:\n[[results]] username = \u0026#34;\u0026#34; uai_host = \u0026#34;\u0026#34; uai_status = \u0026#34;Running: Ready\u0026#34; uai_connect_string = \u0026#34;\u0026#34; uai_img = \u0026#34;\u0026#34; uai_age = \u0026#34;11m\u0026#34; uai_name = \u0026#34;\u0026#34; Top: User Access Service (UAS)\nNext Topic: Troubleshoot Broker UAI SSSD Cannot Use /etc/sssd/sssd.conf\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/troubleshoot_uas_by_viewing_log_output/",
	"title": "Troubleshoot UAS By Viewing Log Output",
	"tags": [],
	"description": "",
	"content": "Troubleshoot UAS by Viewing Log Output At times there will be problems with UAS. Usually this takes the form of errors showing up on CLI commands that are not immediately interpretable as some sort of input error. It is sometimes useful to examine the UAS service logs to find out what is wrong.\nProcedure   Find the names of the Kubernetes pods running UAS:\nncn-m001-pit# kubectl get po -n services | grep uas | grep -v etcd Example output:\ncray-uas-mgr-6bbd584ccb-zg8vx 2/2 Running 0 7d7h cray-uas-mgr-6bbd584ccb-acg7y 2/2 Running 0 7d7h   View the logs for the pods running UAS.\nThe logs are collected in the pods, and can be seen using the kubectl logs command on each of the pods. The pods produce a lot of debug logging in the form:\n127.0.0.1 - - [02/Feb/2021 22:57:18] \u0026#34;GET /v1/mgr-info HTTP/1.1\u0026#34; 200 - Because of that, it is a good idea to filter this out unless the problem lies in specifically in the area of GET operations or aliveness checks. The following is an example where the last 25 lines of useful log output are retrieved from the pod cray-uas-mgr-6bbd584ccb-zg8vx:\nncn-m001-pit# kubectl logs -n services cray-uas-mgr-6bbd584ccb-zg8vx cray-uas-mgr | grep -v \u0026#39;\u0026#34;GET \u0026#39; | tail -25 Example output:\n2021-02-03 22:02:01,576 - uas_mgr - INFO - UAS request for: vers 2021-02-03 22:02:01,628 - uas_mgr - INFO - opt_ports: [] 2021-02-03 22:02:01,702 - uas_mgr - INFO - cfg_ports: [30123] 2021-02-03 22:02:01,702 - uas_mgr - INFO - UAI Name: uai-vers-32079250; Container ports: [{\u0026#39;container_port\u0026#39;: 30123, \u0026#39;host_ip\u0026#39;: None, \u0026#39;host_port\u0026#39;: None, \u0026#39;name\u0026#39;: \u0026#39;port30123\u0026#39;, \u0026#39;protocol\u0026#39;: \u0026#39;TCP\u0026#39;}]; Optional ports: [] 2021-02-03 22:02:02,211 - uas_mgr - INFO - opt_ports: [] 2021-02-03 22:02:02,566 - uas_mgr - INFO - cfg_ports: [30123] 2021-02-03 22:02:02,703 - uas_mgr - INFO - getting deployment uai-vers-32079250 in namespace user 2021-02-03 22:02:02,718 - uas_mgr - INFO - creating deployment uai-vers-32079250 in namespace user 2021-02-03 22:02:02,734 - uas_mgr - INFO - creating the UAI service uai-vers-32079250-ssh 2021-02-03 22:02:02,734 - uas_mgr - INFO - getting service uai-vers-32079250-ssh in namespace user 2021-02-03 22:02:02,746 - uas_mgr - INFO - creating service uai-vers-32079250-ssh in namespace user 2021-02-03 22:02:02,757 - uas_mgr - INFO - getting pod info uai-vers-32079250 2021-02-03 22:02:02,841 - uas_mgr - INFO - No start time provided from pod 2021-02-03 22:02:02,841 - uas_mgr - INFO - getting service info for uai-vers-32079250-ssh in namespace user 127.0.0.1 - - [03/Feb/2021 22:02:02] \u0026#34;POST /v1/uas HTTP/1.1\u0026#34; 200 - 2021-02-03 22:15:32,697 - uas_auth - INFO - UasAuth lookup complete for user vers 2021-02-03 22:15:32,698 - uas_mgr - INFO - UAS request for: vers 2021-02-03 22:15:32,698 - uas_mgr - INFO - listing deployments matching: host None, labels uas=managed,user=vers 2021-02-03 22:15:32,770 - uas_mgr - INFO - deleting service uai-vers-32079250-ssh in namespace user 2021-02-03 22:15:32,802 - uas_mgr - INFO - delete deployment uai-vers-32079250 in namespace user 127.0.0.1 - - [03/Feb/2021 22:15:32] \u0026#34;DELETE /v1/uas?uai_list=uai-vers-32079250 HTTP/1.1\u0026#34; 200 -   If an error had occurred in UAS that error would likely show up here. Because there are two replicas of cray-uas-mgr running, the logging of interest may be in the other pod, so apply the same command to the other pod if the information is not here.\nTop: User Access Service (UAS)\nNext Topic: Troubleshoot UAIs by Viewing Log Output\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/troubleshoot_uas_issues/",
	"title": "Troubleshoot UAS Issues",
	"tags": [],
	"description": "",
	"content": "Troubleshoot UAS Issues This section provides examples of some commands that can be used to troubleshoot UAS-related issues.\nTroubleshoot Connection Issues packet_write_wait: Connection to 203.0.113.0 port 30841: Broken pipe If an error message related to broken pipes returns, enable keep-alives on the client side. The admin should update the /etc/ssh/sshd_config and /etc/ssh/ssh_config files to add the following:\nTCPKeepAlive yes ServerAliveInterval 120 ServerAliveCountMax 720 Invalid Credentials ncn-w001 # cray auth login --username USER --password WRONGPASSWORD Example output:\nUsage: cray auth login [OPTIONS] Try \u0026#34;cray auth login --help\u0026#34; for help. Error: Invalid Credentials To resolve this issue:\n Log in to Keycloak and verify the user exists. Make sure the username and password are correct.  Retrieve UAS Logs The system administrator can execute the following commands to retrieve UAS and the remote execution service logs:\nncn-w001# kubectl logs -n services -c cray-uas-mgr -l \u0026#34;app=cray-uas-mgr\u0026#34; Ensure that Slurm is Running and Configured Correctly Check if Slurm is running:\n[user@uai-user-be3a6770-6876c88676-2p2lk ~] $ sinfo The system returns a message similar to the following if Slurm is not running:\nslurm_load_partitions: Unable to contact slurm controller (connect failure) If this error is returned, it is likely that Slurm is not running. The system administrator can use the following commands to debug the issue:\nncn-w001# kubectl logs -n user -l app=slurmdb -c slurmdb --tail=-1 ncn-w001# kubectl logs -n user -l app=slurmdbd -c slurmdbd --tail=-1 ncn-w001# kubectl logs -n user -l app=slurmctld -c slurmctld --tail=-1 Troubleshoot Default Images Issues when Using the CLI If the image name provided while creating a new UAI is not registered for use by the system, the system returns an error message similar to the following:\nncn-w001# cray uas create --publickey ~/.ssh/id_rsa.pub --imagename fred Usage: cray uas create [OPTIONS] Try \u0026#34;cray uas create --help\u0026#34; for help. Error: Bad Request: Invalid image (fred). Valid images: [\u0026#39;dtr.dev.cray.com:443/cray/cray-uas-sles15sp1:latest\u0026#39;]. Default: dtr.dev.cray.com:443/cray/cray-uas-sles15sp1:latest Retry creating the UAI using the list of images and the name of the default image provided in the error message.\nVerify that the User Access Instances (UAIs) are Running The system administrator can use the kubectl command to check the status of the UAI.\nncn-w001# kubectl get pod -n user -l uas=managed -o wide Example output:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES uai-user-603d55f1-85d5ddb4b7-zk6nl 0/1 ContainerCreating 0 109s \u0026lt;none\u0026gt; sms-2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; uai-user-d7f8d2e7-6dbdc64d98-7h5t5 0/1 ContainerCreating 0 116s \u0026lt;none\u0026gt; sms-2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; uai-user-f6b72c9f-5dccd879bd-grbjw 0/1 ContainerCreating 0 113s \u0026lt;none\u0026gt; sms-2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; If UAS pods are stuck in the Pending state, the admin needs to ensure the Kubernetes cluster has nodes available for running UAIs. Check that nodes are labeled with uas=True and are in the Ready state.\nncn-w001# kubectl get nodes -l uas Example output:\nNAME STATUS ROLES AGE VERSION ncn-w001 Ready \u0026lt;none\u0026gt; 11d v1.20.13 If none of the nodes are found or if the nodes listed are marked as NotReady, the UAI pods will not be scheduled and will not start.\nTroubleshoot kubectl Certificate Issues While kubectl is supported in a UAI, kubeconfig file to access a Kubernetes cluster is not provided. To use kubectl to interface with a Kubernetes cluster, the user must supply their own kubeconfig.\n[user@uai-user-be3a6770-6876c88676-2p2lk ~]# kubectl get nodes The connection to the server localhost:8080 was refused - did you specify the right host or port? Specify the location of the Kubernetes certificate with KUBECONFIG.\n[user@uai-user-be3a6770-6876c88676-2p2lk ~]# KUBECONFIG=/tmp/CONFIG kubectl get nodes Example output:\nNAME STATUS ROLES AGE VERSION ncn-m001 Ready control-plane,master 16d v1.20.13 ncn-m002 Ready control-plane,master 16d v1.20.13 Users must specify KUBECONFIG with every kubectl command or specify the kubeconfig file location for the life of the UAI. To do this, either set the KUBECONFIG environment variable or set the --kubeconfig flag.\nTroubleshoot X11 Issues The system may return the following error if the user attempts to use an application that requires an X window (such as xeyes):\n# ssh user@203.0.113.0 -i ~/.ssh/id_rsa Example output:\n______ ____ ___ __ __ __ __ ___ ____ / ____// __ \\ / |\\ \\/ / / / / // | / _/ / / / /_/ // /| | \\  / / / / // /| | / / / /___ / _, _// ___ | / / / /_/ // ___ | _/ / \\____//_/ |_|/_/ |_|/_/ \\____//_/ |_|/___/ [user@uai-user-be3a6770-6876c88676-2p2lk ~]$ xeyes Error: Can\u0026#39;t open display: To resolve this issue, pass the -X option with the ssh command as shown below:\n# ssh UAI_USERNAME@UAI_IP_ADDRESS -i ~/.ssh/id_rsa -X Example output:\n______ ____ ___ __ __ __ __ ___ ____ / ____// __ \\ / |\\ \\/ / / / / // | / _/ / / / /_/ // /| | \\  / / / / // /| | / / / /___ / _, _// ___ | / / / /_/ // ___ | _/ / \\____//_/ |_|/_/ |_|/_/ \\____//_/ |_|/___/ /usr/bin/xauth: file /home/users/user/.Xauthority does not exist [user@uai-user-be3a6770-6876c88676-2p2lk ~]$ echo $DISPLAY 203.0.113.0 The warning stating \u0026quot;Xauthority does not exist\u0026quot; will disappear with subsequent logins.\nTroubleshoot SSH Host Key Issues If strict host key checking enabled is enabled on the user\u0026rsquo;s client, the below error may appear when connecting to a UAI over SSH.\nWARNING: REMOTE HOST IDENTIFICATION HAS CHANGED This can occur in a few circumstances, but is most likely to occur after the UAI container is restarted. If this occurs, remove the offending ssh host key from the local known_hosts file and try to connect again. The error message from ssh will contain the correct path to the known_hosts file and the line number of the problematic key.\nDelete UAS Objects with kubectl If Kubernetes resources used to create a UAI are not cleaned up during the normal deletion process, resources can be deleted with the following commands.\nDelete anything created by the User Access Service (uas-mgr):\nWARNING: This command will delete all UAS resources for the entire system, it is not for targeted cleanup of a single UAI.\nncn-w001# kubectl delete all -n user -l uas=managed Delete all objects associated with a particular UAI:\nncn-w001# kubectl delete all -n user -l app=UAI-NAME Delete all objects for a single user:\nncn-w001# kubectl delete all -n user -l user=USERNAME Hard limits on UAI Creation Each Kubernetes worker node has limits on how many pods it can run. Nodes are installed by default with a hard limit of 110 pods per node, but the number of pods may be further limited by memory and CPU utilization constraints. For a standard node the maximum number of UAIs per node is 110; if other pods are co-scheduled on the node, the number will be reduced.\nDetermine the hard limit on Kubernetes pods with kubectl describe node and look for the Capacity section.\n# kubectl describe node NODE_NAME -o yaml Example output:\n[...] capacity: cpu: \u0026#34;16\u0026#34; ephemeral-storage: 1921298528Ki hugepages-1Gi: \u0026#34;0\u0026#34; hugepages-2Mi: \u0026#34;0\u0026#34; memory: 181009640Ki pods: \u0026#34;110\u0026#34; [...] When UAIs are created, some UAIs might left in the Pending state. The Kubernetes scheduler is unable to schedule them to a node, because of CPU, memory, or pod limit constraints. Use kubectl describe pod to check why the pod is Pending. For example, this pod is Pending because the node has reached the hard limit of 110 pods.\n# kubectl describe pod UAI-POD Example output:\nWarning Failed Scheduling 21s (x20 over 4m31s) default-scheduler 0/4 nodes are available: 1 Insufficient pods, 3 node(s) didn\u0026#39;t match node selector. Top: User Access Service (UAS)\nNext Topic: Troubleshoot UAS by Viewing Log Output\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/uai_classes/",
	"title": "UAI Classes",
	"tags": [],
	"description": "",
	"content": "UAI Classes UAI Classes provide templates for the creation of UAIs. They permit precise configuration of the behavior, volumes, resources, and other elements of the UAI. When a UAI is created using a UAI Class, it is configured to use exactly what that UAI Class has in it at the time the UAI was created. UIA Classes permit Broker UAIs to create different kinds of UAIs based on the UAI Creation Class setting of the Broker UAI. UAI Classes also provide the foundation on which Broker UAIs are built, defining specific configuration options without which it would not be possible to construct a Broker UAI.\nIn the Legacy UAI Creation mode, default UAI classes allow the precise configuration of user-created UAIs. This is particularly useful with regard to volumes, since, without a default UAI Class, all user-created UAIs would simply try to attach all configured volumes. Finally, default UAI Classes enable the Legacy UAI Creation mode to access Resource Specifications and other configuration not normally available to user-created UAIs.\nThis topic describes the content and purpose of the the fields in a UAI Class and gives guidance on setting those when creating UAI classes or various kinds.\nExample Listing and Overview The following is JSON-formatted example output from the cray uas admin config classes list command (see List Available UAI Classes).\nThis output contains examples of three UAI classes:\n A brokered End-User UAI class A UAI broker class A non-brokered End-User UAI class  ncn-m001-pit# cray uas admin config classes list --format json Example output:\n[ { \u0026#34;class_id\u0026#34;: \u0026#34;bdb4988b-c061-48fa-a005-34f8571b88b4\u0026#34;, \u0026#34;comment\u0026#34;: \u0026#34;UAI Class to Create Brokered End-User UAIs\u0026#34;, \u0026#34;default\u0026#34;: false, \u0026#34;image_id\u0026#34;: \u0026#34;1996c7f7-ca45-4588-bc41-0422fe2a1c3d\u0026#34;, \u0026#34;namespace\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;opt_ports\u0026#34;: [], \u0026#34;priority_class_name\u0026#34;: \u0026#34;uai-priority\u0026#34;, \u0026#34;public_ip\u0026#34;: false, \u0026#34;replicas\u0026#34;: 1, \u0026#34;resource_config\u0026#34;: { \u0026#34;comment\u0026#34;: \u0026#34;Resource Specification to use with Brokered End-User UAIs\u0026#34;, \u0026#34;limit\u0026#34;: \u0026#34;{\\\u0026#34;cpu\\\u0026#34;: \\\u0026#34;1\\\u0026#34;, \\\u0026#34;memory\\\u0026#34;: \\\u0026#34;1Gi\\\u0026#34;}\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;{\\\u0026#34;cpu\\\u0026#34;: \\\u0026#34;1\\\u0026#34;, \\\u0026#34;memory\\\u0026#34;: \\\u0026#34;1Gi\\\u0026#34;}\u0026#34;, \u0026#34;resource_id\u0026#34;: \u0026#34;f26ee12c-6215-4ad1-a15e-efe4232f45e6\u0026#34; }, \u0026#34;resource_id\u0026#34;: \u0026#34;f26ee12c-6215-4ad1-a15e-efe4232f45e6\u0026#34;, \u0026#34;service_account\u0026#34;: null, \u0026#34;timeout\u0026#34;: { \u0026#34;hard\u0026#34;: \u0026#34;86400\u0026#34;, \u0026#34;soft\u0026#34;: \u0026#34;1800\u0026#34;, \u0026#34;warning\u0026#34;: \u0026#34;60\u0026#34; }, \u0026#34;tolerations\u0026#34;: null, \u0026#34;uai_compute_network\u0026#34;: true, \u0026#34;uai_creation_class\u0026#34;: null, \u0026#34;uai_image\u0026#34;: { \u0026#34;default\u0026#34;: true, \u0026#34;image_id\u0026#34;: \u0026#34;1996c7f7-ca45-4588-bc41-0422fe2a1c3d\u0026#34;, \u0026#34;imagename\u0026#34;: \u0026#34;registry.local/cray/cray-uai-sles15sp2:1.2.4\u0026#34; }, \u0026#34;volume_list\u0026#34;: [ \u0026#34;11a4a22a-9644-4529-9434-d296eef2dc48\u0026#34;, \u0026#34;a3b149fd-c477-41f0-8f8d-bfcee87fdd0a\u0026#34; ], \u0026#34;volume_mounts\u0026#34;: [ { \u0026#34;mount_path\u0026#34;: \u0026#34;/etc/localtime\u0026#34;, \u0026#34;volume_description\u0026#34;: { \u0026#34;host_path\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/etc/localtime\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;FileOrCreate\u0026#34; } }, \u0026#34;volume_id\u0026#34;: \u0026#34;11a4a22a-9644-4529-9434-d296eef2dc48\u0026#34;, \u0026#34;volumename\u0026#34;: \u0026#34;timezone\u0026#34; }, { \u0026#34;mount_path\u0026#34;: \u0026#34;/lus\u0026#34;, \u0026#34;volume_description\u0026#34;: { \u0026#34;host_path\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/lus\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;DirectoryOrCreate\u0026#34; } }, \u0026#34;volume_id\u0026#34;: \u0026#34;a3b149fd-c477-41f0-8f8d-bfcee87fdd0a\u0026#34;, \u0026#34;volumename\u0026#34;: \u0026#34;lustre\u0026#34; } ] }, { \u0026#34;class_id\u0026#34;: \u0026#34;d764c880-41b8-41e8-bacc-f94f7c5b053d\u0026#34;, \u0026#34;comment\u0026#34;: \u0026#34;UAI broker class\u0026#34;, \u0026#34;default\u0026#34;: false, \u0026#34;image_id\u0026#34;: \u0026#34;8f180ddc-37e5-4ead-b261-2b401914a79f\u0026#34;, \u0026#34;namespace\u0026#34;: \u0026#34;uas\u0026#34;, \u0026#34;opt_ports\u0026#34;: [], \u0026#34;priority_class_name\u0026#34;: \u0026#34;uai-priority\u0026#34;, \u0026#34;public_ip\u0026#34;: true, \u0026#34;replicas\u0026#34;: 3, \u0026#34;resource_config\u0026#34;: null, \u0026#34;resource_id\u0026#34;: null, \u0026#34;service_account\u0026#34;: null, \u0026#34;timeout\u0026#34;: null, \u0026#34;tolerations\u0026#34;: null, \u0026#34;uai_compute_network\u0026#34;: false, \u0026#34;uai_creation_class\u0026#34;: \u0026#34;bdb4988b-c061-48fa-a005-34f8571b88b4\u0026#34;, \u0026#34;uai_image\u0026#34;: { \u0026#34;default\u0026#34;: false, \u0026#34;image_id\u0026#34;: \u0026#34;8f180ddc-37e5-4ead-b261-2b401914a79f\u0026#34;, \u0026#34;imagename\u0026#34;: \u0026#34;registry.local/cray/cray-uai-broker:1.2.4\u0026#34; }, \u0026#34;volume_list\u0026#34;: [ \u0026#34;11a4a22a-9644-4529-9434-d296eef2dc48\u0026#34;, \u0026#34;1ec36af0-d5b6-4ad9-b3e8-755729765d76\u0026#34;, \u0026#34;a3b149fd-c477-41f0-8f8d-bfcee87fdd0a\u0026#34; ], \u0026#34;volume_mounts\u0026#34;: [ { \u0026#34;mount_path\u0026#34;: \u0026#34;/etc/localtime\u0026#34;, \u0026#34;volume_description\u0026#34;: { \u0026#34;host_path\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/etc/localtime\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;FileOrCreate\u0026#34; } }, \u0026#34;volume_id\u0026#34;: \u0026#34;11a4a22a-9644-4529-9434-d296eef2dc48\u0026#34;, \u0026#34;volumename\u0026#34;: \u0026#34;timezone\u0026#34; }, { \u0026#34;mount_path\u0026#34;: \u0026#34;/etc/sssd\u0026#34;, \u0026#34;volume_description\u0026#34;: { \u0026#34;secret\u0026#34;: { \u0026#34;default_mode\u0026#34;: 384, \u0026#34;secret_name\u0026#34;: \u0026#34;broker-sssd-conf\u0026#34; } }, \u0026#34;volume_id\u0026#34;: \u0026#34;1ec36af0-d5b6-4ad9-b3e8-755729765d76\u0026#34;, \u0026#34;volumename\u0026#34;: \u0026#34;broker-sssd-config\u0026#34; }, { \u0026#34;mount_path\u0026#34;: \u0026#34;/lus\u0026#34;, \u0026#34;volume_description\u0026#34;: { \u0026#34;host_path\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/lus\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;DirectoryOrCreate\u0026#34; } }, \u0026#34;volume_id\u0026#34;: \u0026#34;a3b149fd-c477-41f0-8f8d-bfcee87fdd0a\u0026#34;, \u0026#34;volumename\u0026#34;: \u0026#34;lustre\u0026#34; } ] }, { \u0026#34;class_id\u0026#34;: \u0026#34;5eb523ba-a3b7-4a39-ba19-4cfe7d19d296\u0026#34;, \u0026#34;comment\u0026#34;: \u0026#34;UAI Class to Create Non-Brokered End-User UAIs\u0026#34;, \u0026#34;default\u0026#34;: true, \u0026#34;image_id\u0026#34;: \u0026#34;1996c7f7-ca45-4588-bc41-0422fe2a1c3d\u0026#34;, \u0026#34;namespace\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;opt_ports\u0026#34;: [], \u0026#34;priority_class_name\u0026#34;: \u0026#34;uai-priority\u0026#34;, \u0026#34;public_ip\u0026#34;: true, \u0026#34;replicas\u0026#34;: 1, \u0026#34;resource_config\u0026#34;: null, \u0026#34;resource_id\u0026#34;: null, \u0026#34;service_account\u0026#34;: null, \u0026#34;timeout\u0026#34;: { \u0026#34;hard\u0026#34;: \u0026#34;86400\u0026#34;, \u0026#34;soft\u0026#34;: \u0026#34;1800\u0026#34;, \u0026#34;warning\u0026#34;: \u0026#34;60\u0026#34; }, \u0026#34;tolerations\u0026#34;: null, \u0026#34;uai_compute_network\u0026#34;: true, \u0026#34;uai_creation_class\u0026#34;: null, \u0026#34;uai_image\u0026#34;: { \u0026#34;default\u0026#34;: true, \u0026#34;image_id\u0026#34;: \u0026#34;1996c7f7-ca45-4588-bc41-0422fe2a1c3d\u0026#34;, \u0026#34;imagename\u0026#34;: \u0026#34;registry.local/cray/cray-uai-sles15sp2:1.2.4\u0026#34; }, \u0026#34;volume_list\u0026#34;: [ \u0026#34;11a4a22a-9644-4529-9434-d296eef2dc48\u0026#34;, \u0026#34;a3b149fd-c477-41f0-8f8d-bfcee87fdd0a\u0026#34; ], \u0026#34;volume_mounts\u0026#34;: [ { \u0026#34;mount_path\u0026#34;: \u0026#34;/etc/localtime\u0026#34;, \u0026#34;volume_description\u0026#34;: { \u0026#34;host_path\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/etc/localtime\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;FileOrCreate\u0026#34; } }, \u0026#34;volume_id\u0026#34;: \u0026#34;11a4a22a-9644-4529-9434-d296eef2dc48\u0026#34;, \u0026#34;volumename\u0026#34;: \u0026#34;timezone\u0026#34; }, { \u0026#34;mount_path\u0026#34;: \u0026#34;/lus\u0026#34;, \u0026#34;volume_description\u0026#34;: { \u0026#34;host_path\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/lus\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;DirectoryOrCreate\u0026#34; } }, \u0026#34;volume_id\u0026#34;: \u0026#34;a3b149fd-c477-41f0-8f8d-bfcee87fdd0a\u0026#34;, \u0026#34;volumename\u0026#34;: \u0026#34;lustre\u0026#34; } ] } ] UAI Class Parameters The following selection is the core of a UAI Class configuration:\n\u0026#34;class_id\u0026#34;: \u0026#34;bdb4988b-c061-48fa-a005-34f8571b88b4\u0026#34;, \u0026#34;comment\u0026#34;: \u0026#34;UAI Class to Create Brokered End-User UAIs\u0026#34;, \u0026#34;default\u0026#34;: false, \u0026#34;image_id\u0026#34;: \u0026#34;1996c7f7-ca45-4588-bc41-0422fe2a1c3d\u0026#34;, \u0026#34;namespace\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;opt_ports\u0026#34;: [], \u0026#34;priority_class_name\u0026#34;: \u0026#34;uai-priority\u0026#34;, \u0026#34;public_ip\u0026#34;: false, \u0026#34;replicas\u0026#34;: 1, \u0026#34;resource_id\u0026#34;: \u0026#34;f26ee12c-6215-4ad1-a15e-efe4232f45e6\u0026#34;, \u0026#34;service_account\u0026#34;: null, \u0026#34;timeout\u0026#34;: { \u0026#34;hard\u0026#34;: \u0026#34;86400\u0026#34;, \u0026#34;soft\u0026#34;: \u0026#34;1800\u0026#34;, \u0026#34;warning\u0026#34;: \u0026#34;60\u0026#34; }, \u0026#34;tolerations\u0026#34;: null, \u0026#34;uai_compute_network\u0026#34;: true, \u0026#34;uai_creation_class\u0026#34;: null, The following table explains each of these fields.\n   Field Description Notes     class_id The identifier used for this class when examining, updating, and deleting the class. This identifier is also used to create UAIs using this class with the cray uas admin uais create command, and by Broker UAI Classes to specify what kind of End-User UAIs to create using the uai_creation_class field of the Broker UAI Class   comment A free-form string describing the UAI class    default A boolean value (flag) indicating whether this class is the default class. When this field is set to true, this class overrides both the default UAI image and any specified image name when the cray uas create command is used to create an End-User UAI for a user. Setting a class to \u0026quot;default\u0026quot;: true, gives the administrator fine-grained control over the behavior of End-User UAIs that are created by authorized users in legacy mode.   namespace The Kubernetes namespace in which this UAI will run. The default setting is user. Broker UAIs should be configured to run in the uas namespace   opt_ports An optional list of TCP port numbers that will be opened on the external IP address of the UAI when it runs. This field controls whether services other than SSH can be run and reached publicly on the UAI. If this list is empty (as in this example), only SSH will be externally accessible. In order for any service other than SSH to be publicly reachable the public_ip field must be set to true   priority_class_name The Kubernetes priority class of the UAI. uai_priority is the default. Using other values affects both Kubernetes default resource limit and request assignments and the Kubernetes scheduling priority for the UAI.   public_ip A boolean value that indicates whether the UAI will be given an external IP address from the LoadBalancer service. Such an address enables clients outside the Kubernetes cluster to reach the UAI. This field controls whether the UAI is reachable by SSH from external clients, but it also controls whether the ports in opt_ports are reachable. If this field is set to false, the UAI will have only an internal IP address, reachable from within the Kubernetes cluster.   replicas The number of replica UAI pods to be created when a UAI of this class is created. This defaults to 1 and should not be set or should be set to 1 on End-User UAI Classes, since replica UAI pods for End-User UAIs only consume resources and potentially confuse the Broker UAI mechanism. For Broker UAI Classes, however, setting replicas to a larger value establishes both a degree of Broker UAI resiliency and a degree of load balancing, both for the purpose increasing network throughput on End-User UAI connections and for the purpose of avoiding overload of a single Broker UAI\u0026rsquo;s resources.   resource\\id The ID of the Resource Specification used by this UAI Class By configuring a Resource Specification in a UAI Class the default resource requests and limits can be overridden when creating a UAI from that UAI Class   service_account An optional Kubernetes Service Account name to be granted to UAIs using this class This is normally not set on End-User UAIs or Broker UAIs. It can be used to confer specific Kubernetes Role Based Access Control (RBAC) permissions on UAIs created using a UAI Class   timeout An optional specification of hard and soft timeouts used to control the life-cycle of UAIs created using this UAI Class If either timeout setting is omitted that timeout will never expire. When a soft timeout, expires, the UAI terminates and is removed if it is or becomes idle, defined as having no logged in user sessions. When a hard timeout expires the UAI is terminated and removed immediately regardless of logged in user sessions. A warning may also be configured, specifying the number of seconds before a hard timeout that a warning will be sent to logged in users telling them of impending termination. The example here sets a hard timeout of 24 hours, a soft timeout of 30 minutes and a warning 60 seconds prior to arriving at the hard timeout.   tolerations An optional list of Kubernetes tolerations that can be used in combination with \u0026ldquo;taints\u0026rdquo; on Kubernetes worker nodes to permit only UAIs of this class to run on those nodes. Tolerations and Taints can be used to designate certain Kubernetes Worker NCNs as hosts for UAIs and not for general management plane activities. They can also be used to specify that UAIs of a given class run only on nodes with specific resources. By default, all UAIs receive a toleration of uai_only op=Exists meaning that all UAIs can run on nodes that are tainted with a uai_only setting.   uai_compute_network A flag that indicates whether this UAI uses the macvlan mechanism to gain access to the HPE Cray EX compute node network. This field must be true to support workload management from UAIs created by this class. It should be set to false on Broker UAIs.   uai_creation_class A field used in Broker UAI Classes to tell the Broker UAI what kind of UAI to create when automatically creating a UAI. This field is not set in the preceding example.    UAI Image Descriptions, Resource Descriptions, and Volume Descriptions in UAI Classes The following image description is provided as a convenience to allow the user to see the image information used when creating UAIs of this class:\n\u0026#34;uai_image\u0026#34;: { \u0026#34;default\u0026#34;: true, \u0026#34;image_id\u0026#34;: \u0026#34;1996c7f7-ca45-4588-bc41-0422fe2a1c3d\u0026#34;, \u0026#34;imagename\u0026#34;: \u0026#34;registry.local/cray/cray-uai-sles15sp2:1.2.4\u0026#34; }, The following Resource Specification description is provided as a convenience to allow the user to see the resource configuration used when creating UAIs of this UAI Class:\n\u0026#34;resource_config\u0026#34;: { \u0026#34;comment\u0026#34;: \u0026#34;Resource Specification to use with Brokered End-User UAIs\u0026#34;, \u0026#34;limit\u0026#34;: \u0026#34;{\\\u0026#34;cpu\\\u0026#34;: \\\u0026#34;1\\\u0026#34;, \\\u0026#34;memory\\\u0026#34;: \\\u0026#34;1Gi\\\u0026#34;}\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;{\\\u0026#34;cpu\\\u0026#34;: \\\u0026#34;1\\\u0026#34;, \\\u0026#34;memory\\\u0026#34;: \\\u0026#34;1Gi\\\u0026#34;}\u0026#34;, \u0026#34;resource_id\u0026#34;: \u0026#34;f26ee12c-6215-4ad1-a15e-efe4232f45e6\u0026#34; }, The following list of volume descriptions is provided as a convenience to allow the user to see the specific volume configuration used when creating UAIs of this class:\n\u0026#34;volume_mounts\u0026#34;: [ { \u0026#34;mount_path\u0026#34;: \u0026#34;/etc/localtime\u0026#34;, \u0026#34;volume_description\u0026#34;: { \u0026#34;host_path\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/etc/localtime\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;FileOrCreate\u0026#34; } }, \u0026#34;volume_id\u0026#34;: \u0026#34;11a4a22a-9644-4529-9434-d296eef2dc48\u0026#34;, \u0026#34;volumename\u0026#34;: \u0026#34;timezone\u0026#34; }, { \u0026#34;mount_path\u0026#34;: \u0026#34;/lus\u0026#34;, \u0026#34;volume_description\u0026#34;: { \u0026#34;host_path\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/lus\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;DirectoryOrCreate\u0026#34; } }, \u0026#34;volume_id\u0026#34;: \u0026#34;a3b149fd-c477-41f0-8f8d-bfcee87fdd0a\u0026#34;, \u0026#34;volumename\u0026#34;: \u0026#34;lustre\u0026#34; } ] Refer to Elements of a UAI for a full explanation of UAI images, Resource Specifications and volumes.\nIn the preceding section of output, the End-User UAI inherits the timezone from the host node by importing /etc/localtime. This UAI also gains access to the Lustre file system mounted on the host node. On the host node, the file system is mounted at /lus and the UAI mounts the file system at the same mount point as the host node.\nSpecifics of a Broker UAI Class Notice the following settings in the Broker UAI class example above:\n\u0026#34;default\u0026#34;: false, ... \u0026#34;image_id\u0026#34;: \u0026#34;8f180ddc-37e5-4ead-b261-2b401914a79f\u0026#34;, \u0026#34;namespace\u0026#34;: \u0026#34;uas\u0026#34;, ... \u0026#34;public_ip\u0026#34;: true, \u0026#34;replicas\u0026#34;: 3, ... \u0026#34;timeout\u0026#34;: null, ... \u0026#34;uai_compute_network\u0026#34;: false, \u0026#34;uai_creation_class\u0026#34;: \u0026#34;bdb4988b-c061-48fa-a005-34f8571b88b4\u0026#34;, \u0026#34;uai_image\u0026#34;: { \u0026#34;default\u0026#34;: false, \u0026#34;image_id\u0026#34;: \u0026#34;8f180ddc-37e5-4ead-b261-2b401914a79f\u0026#34;, \u0026#34;imagename\u0026#34;: \u0026#34;registry.local/cray/cray-uai-broker:1.2.4\u0026#34; }, Default is False Usually a site will not want or need to set a Broker UAI\u0026rsquo;s default flag to true because Broker UAIs will be administratively launched, not launched through the legacy mode UAI management procedure.\nImage ID specifies the HPE Supplied Broker UAI Image A Broker UAI runs in a special image that knows how to authenticate multiple users, find or create End-User UAIs on behalf of those users, and forward SSH connections to those End-User UAIs. HPE provides a Broker UAI image with this logic built into it.\nNamespace is uas Broker UAIs run in the uas namespace which is configured to set up pods with access to the API gateway. This is needed by Broker UAIs so that they can call UAS APIs to create, find and manage End-User UAIs.\nPublic IP is True Broker UAIs accept incoming SSH connections from external hosts, so they need to have a presence on an external network. Setting public_ip to true makes this work.\nReplicas is greater than 1 While it is not required to make the number of replicas for a Broker UAI greater than 1, setting a larger number makes the Broker UAI more resilient to node outages, resource starvation, and other possible issues. A larger replica count also reduces the networking and computational load on individual Broker UAI pods by permitting connections to be load balanced across the replicas. The replica count should not exceed the number of Kubernetes Worker Nodes permitted to host Broker UAIs.\nNo Timeout is Specified Broker UAIs cannot time out (there is no timeout mechanism in them) so setting a timeout on Broker UAIs is meaningless. Furthermore, since Broker UAIs are resources that should remain in place on a running system, putting a timeout on a Broker UAI would be counterproductive. Broker UAIs should have either no timeout specified or an empty timeout.\nUAI Compute Network is False Broker UAIs do not need access to workload management services, so they should not run with UAI Compute Network access. Setting this to true would consume IP addresses on the UAI Compute Network unnecessarily and reduce the number of End-User UAIs available on the system.\nSpecifics of a Brokered End-User UAI Class Notice the following settings in the Brokered End-User UAI Class:\n\u0026#34;default\u0026#34;: false, \u0026#34;image_id\u0026#34;: \u0026#34;8f180ddc-37e5-4ead-b261-2b401914a79f\u0026#34;, \u0026#34;namespace\u0026#34;: \u0026#34;user\u0026#34;, ... \u0026#34;public_ip\u0026#34;: false, \u0026#34;replicas\u0026#34;: 1, ... \u0026#34;timeout\u0026#34;: { \u0026#34;hard\u0026#34;: \u0026#34;86400\u0026#34;, \u0026#34;soft\u0026#34;: \u0026#34;1800\u0026#34;, \u0026#34;warning\u0026#34;: \u0026#34;60\u0026#34; }, \u0026#34;uai_compute_network\u0026#34;: true, \u0026#34;uai_creation_class\u0026#34;: null, \u0026#34;uai_image\u0026#34;: { \u0026#34;default\u0026#34;: false, \u0026#34;image_id\u0026#34;: \u0026#34;8f180ddc-37e5-4ead-b261-2b401914a79f\u0026#34;, \u0026#34;imagename\u0026#34;: \u0026#34;registry.local/cray/cray-uai-broker:1.2.4\u0026#34; }, default is False The UAI Class used for Brokered End-User UAIs has characteristics that do not make it suitable for use as a Non-Brokered UAI, so a Brokered UAI Class should never be the default UAI Class.\nUAI Image is an End-User UAI Image In this example, the UAI image used is the HPE provided basic End-User UAI image. This could also be a custom End-User UAI image. The important thing for any End-User UAI Class is that the image is an End-User UAI image of some kind.\nNamespace is user In this example the namespace setting is user. This is the default setting and causes UAIs created by this UAI Class to run in the user namespace. The user namespace is isolated from Kubernetes resources in other namespaces and does not set up a connection to the API Gateway for pods running inside it. This, or a similarly isolated namespace should always be used for End-User UAIs since it keeps End-User UAIs isolated from management plane activities even though they are running inside the Kubernetes cluster.\nPublic IP Is False Brokered UAIs are always reached through Broker UAIs, so they do not need to and should not expose public IP access.\nReplicas is 1 or Not Specified Using replica pods in an End-User UAI simply wastes UAI Compute Network IP addresses, thereby limiting the number of End-User UAIs that can be created. The default value of 1 should be used for replicas in all End-User UAI Classes.\nTimeout is Provided While setting a timeout on End-User UAIs is not required, it is a good idea. Stale and idle UAIs consume resources that could be used by active fresh UAIs. By setting, at least, a soft timeout on End-User UAI Classes, the administrator can ensure that resources are released to the system when a user\u0026rsquo;s UAI becomes idle for an extended time. The above timeout specification will terminate the UAI, even if it is not idle, after 24 hours, with a 60 second warning. It will terminate an idle UAI after 30 minutes.\nUAI Compute Network is True End-User UAIs generally require access to workload management, so they require access the compute node network. Setting uai_compute_network to true makes this work.\nUAI Creation Class is not specified UAI Creation Class is only meaningful to UAIs that create other UAIs (specifically Broker UAIs).\nSpecifics of a Non-Brokered End-User UAI Class Non-Brokered End-User UAIs are very similar to Brokered End-User UAIs, but Non-Brokered End-User UAIs have some special traits. Notice the specific settings in the Non-Brokered End-User UAI Class that are different from those in the Brokered End-User UAI Class:\n\u0026#34;default\u0026#34;: true, \u0026#34;public_ip\u0026#34;: true, Default is True The UAI Class used for Non-Brokered End-User UAIs must be the default UAI Class. There is no way to create a UAI from a class in the Legacy Mode UAI Creation procedures.\nPublic IP Is True Manually created UAIs must be reached by direct SSH from external hosts, so they need to have a presence on an external network. Setting public_ip to true makes this work.\nTop: User Access Service (UAS)\nNext Topic: List Available UAI Classes\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/setting_up_multi-replica_brokers/",
	"title": "Broker UAI Resiliency And Load Balancing",
	"tags": [],
	"description": "",
	"content": "Broker UAI Resiliency and Load Balancing Broker UAI resiliency and load balancing is achieved through the use of Multi-Replica Broker UAIs. The procedures and data involved in configuring a UAI Class to create Multi-Replica Broker UAIs can be found in UAI Classes. This page describes some of the reasons to use Multi-Replica Broker UAIs and some of the implications of doing so.\nWhen a Broker UAI runs with multiple replicas, access to the broker remains channeled through a single external IP address, but the connections are load balanced and dispatched to multiple Kubernetes pods where the Broker UAI functionality is running. This has two beneficial effects:\n SSH Connections to Broker UAIs are load balanced so that no single broker carries all of the weight of users logged into or copying data to UAIs of a given class Individual Broker UAI pods can be evicted or restarted by Kubernetes without interrupting access to End-User UAIs  NOTE: When a Broker UAI pod terminates for any reason, all SSH sessions going through that pod are dropped. This is because the Broker UAI pods forward SSH sessions to the End-User UAIs, so they are always an active part of the connection.\nThe number of replicas a Multi-Replica UAI Broker should have is dictated primarily by the number of host nodes on which Broker UAIs can be deployed. From a load-balancing perspective, it makes sense to make the number of replicas equal to the number of available host nodes. From a resiliency perspective, that number could be considerably smaller (3 for example) on the assumption that multi-node failures or evictions are unlikely, and brokers that are evicted or restarted will start up relatively quickly elsewhere. It does not make sense from either perspective, however, to over-subscribe the available number of host nodes (except, perhaps during a temporary outage) since that will result in no additional resiliency and the potential for network traffic and resource consumption hot spots.\nTop: User Access Service (UAS)\nNext Topic: Broker Mode UAI Management\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/resource_specifications/",
	"title": "Resource Specifications",
	"tags": [],
	"description": "",
	"content": "Resource Specifications Kubernetes uses resource limits and resource requests, to manage the system resources available to pods. Because UAIs run as pods under Kubernetes, UAS takes advantage of Kubernetes to manage the system resources available to UAIs.\nIn the UAS configuration, resource specifications contain that configuration. A UAI that is assigned a resource specification will use that instead of the default resource limits or requests on the Kubernetes namespace containing the UAI. This can be used to fine-tune resources assigned to UAIs.\nTop: User Access Service (UAS)\nNext Topic: List UAI Resource Specifications\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/retrieve_resource_specification_details/",
	"title": "Retrieve Resource Specification Details",
	"tags": [],
	"description": "",
	"content": "Retrieve Resource Specification Details Display a specific resource specification using the resource_id of that specification.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command) The administrator must know the Resource ID of the resource specification to be retrieved: List Resource Specifications  Procedure Retrieve a resource specification.\nTo examine a particular resource specification, use a command of the following form:\nncn-m001-pit# cray uas admin config resources describe RESOURCE_ID For example:\nncn-m001-pit# cray uas admin config resources describe f26ee12c-6215-4ad1-a15e-efe4232f45e6 comment = \u0026#34;Resource Specification to use with Brokered End-User UAIs\u0026#34; limit = \u0026#34;{\\\u0026#34;cpu\\\u0026#34;: \\\u0026#34;300m\\\u0026#34;, \\\u0026#34;memory\\\u0026#34;: \\\u0026#34;1Gi\\\u0026#34;}\u0026#34; request = \u0026#34;{\\\u0026#34;cpu\\\u0026#34;: \\\u0026#34;300m\\\u0026#34;, \\\u0026#34;memory\\\u0026#34;: \\\u0026#34;1Gi\\\u0026#34;}\u0026#34; resource_id = \u0026#34;f26ee12c-6215-4ad1-a15e-efe4232f45e6\u0026#34; Top: User Access Service (UAS)\nNext Topic: Update a Resource Specification\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/retrieve_uai_image_registration_information/",
	"title": "Retrieve UAI Image Registration Information",
	"tags": [],
	"description": "",
	"content": "Retrieve UAI Image Registration Information Use this procedure to obtain the default and imagename values for a registered UAI image. This procedure can also be used to confirm that a specific image ID is still registered with UAS.\nThis procedure returns the same information as List Registered UAI Images, but only for one image.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command) The administrator must know the Image ID of the UAI Image Registration to be retrieved: List UAI Images  Procedure   Obtain the image ID for a UAI that has been registered with UAS.\n  Query UAS for the registration details for a specific registered UAI.\nncn-m001-pit# cray uas admin config images describe 8fdf5d4a-c190-24c1-2b96-74ab98c7ec07 Example output:\n[[results]] default = false image_id = \u0026#34;8fdf5d4a-c190-24c1-2b96-74ab98c7ec07\u0026#34; imagename = \u0026#34;registry.local/cray/custom-end-user-uai:latest\u0026#34;   Top: User Access Service (UAS)\nNext Topic: Update a UAI Image Registration\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/setting_uai_timeouts/",
	"title": "Setting UAI Timeouts",
	"tags": [],
	"description": "",
	"content": "Setting UAI Timeouts The procedures and specific values used for setting UAI timeouts are explained in the UAI Classes section. Please refer to that section.\nOn systems where UAIs are used as part of normal user activities, the number of UAIs can grow large. Stale UAIs (i.e. UAIs that sit idle for long periods of time) can prevent creation of fresh UAIs for users who are actually active on the system. To address this without constant administrative monitoring, UAS permits the administrator to place both hard and soft timeouts on UAI Classes, which then constrain the amount of time a UAI can exist before it will terminate and need to be recreated. UAI timeouts are particularly useful in the Brokered UAI Management mode because automatic creation of UAIs makes the coming and going of UAIs seamless, and also tends to cause the creation of many UAIs. UAI timeouts are also useful in the Legacy UAI Management mode, however, since, in that mode, it is common for users to create a UAI for a task and forget to remove it when the task is done. This can be compounded by the user forgetting that a UAI already exists and making another.\nThe choice of what kind of timeouts and the duration of the timeouts is likely to be very site specific, however some general guidelines apply, especially when it comes to choosing what kinds of timeouts to use.\nIf a Class of UAI has users who tend to remain logged in and actively using their UAIs for long periods of time, it can make sense to set a soft timeout without setting a hard timeout on that UAI Class. In this case, a reasonably aggressive (30 minutes, for example) soft timeout can keep idle UAIs to a minimum while not impeding users who need to remain logged into their UAIs for days or weeks.\nNOTE: Consider moving users with workflows like the above onto UANs instead of UAIs if the site provides UANs due to the inherent impermanence of End-User UAIs.\nIf a UAI Class is intended to provide UAIs for occasional launching or checking the status of workload management jobs and not for extended login sessions, it may make sense to set a fairly aggressive hard timeout (10 minutes, for example) and a very aggressive (30 seconds, for example) soft timeout. This will make sure that users do not overstay their welcome in this class of UAI, and will generally cause the UAI to terminate as soon as the user logs out.\nIf a UAI Class creates more general purpose UAIs that are neither especially disruptive when they time out nor intended for especially short term work, a somewhat generous (24 hours, for example) hard timeout combined with a fairly aggressive (30 minutes, for example) soft timeout will keep idle UAIs of that class under control while permitting longer term users to stay logged in without giving them unlimited login durations.\nIf hard timeouts are used, a warning should usually be added to the timeout specification in the UAI Class. This will give users a chance to finish up any in-progress work and log out prior to termination of the UAI as a result of the hard timeout.\nTop: User Access Service (UAS)\nNext Topic: Broker UAI Resiliency and Load Balancing\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/special_purpose_uais/",
	"title": "Special Purpose UAIs",
	"tags": [],
	"description": "",
	"content": "Special Purpose UAIs Even though most UAIs are End-User UAIs, UAI classes make it possible to construct UAIs to serve special purposes that are not strictly end-user oriented.\nOne kind of special purpose UAI is the Broker UAI, which provides on demand End-User UAI launch and management. While no other specialty UAI types currently exist, other applications are expected to arise and sites are encouraged to innovate as needed.\nTop: User Access Service (UAS)\nNext Topic: Elements of a UAI\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/start_a_broker_uai/",
	"title": "Start A Broker UAI",
	"tags": [],
	"description": "",
	"content": "Start a Broker UAI Create a Broker UAI after a Broker UAI class has been created.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command) There must be an appropriate Broker UAI Class defined: Configure a Broker UAI Class The administrator must know the Class ID of the desired Broker UAI Class: List UAI Classes  Optional: the administrator may choose a site defined name for the Broker UAI to be used in conjunction with the HPE Cray EX System External DNS mechanism.\nProcedure Use the following command to create a Broker UAI:\nncn-m001-pit# cray uas admin uais create --class-id \u0026lt;class-id\u0026gt; [--owner \u0026lt;name\u0026gt;] To make the broker obvious in the list of UAIs, giving it an owner name of broker is handy. The owner name on a broker is used for naming and filtering (for listing or deleting), but nothing else, so this is a convenient convention. Alternatively, giving it a descriptive owner to make it easy to tell the differences between brokers of different kinds can be useful. Keep in mind that the owner here can only be lower-case alphanumeric or - (dash) characters.\nThe following is an example using the class created above:\nncn-m001-pit# cray uas admin uais create --class-id d764c880-41b8-41e8-bacc-f94f7c5b053d --owner broker Example output:\nuai_age = \u0026#34;0m\u0026#34; uai_connect_string = \u0026#34;ssh broker@35.226.246.154\u0026#34; uai_host = \u0026#34;ncn-w003\u0026#34; uai_img = \u0026#34;registry.local/cray/cray-uai-broker:1.2.4\u0026#34; uai_ip = \u0026#34;35.226.246.154\u0026#34; uai_msg = \u0026#34;\u0026#34; uai_name = \u0026#34;uai-broker-70512bbb\u0026#34; uai_status = \u0026#34;Running: Ready\u0026#34; username = \u0026#34;broker\u0026#34; [uai_portmap] When a UAI is created on an external IP address (as is always the case with Broker UAIs) the UAI name (uai_name field above) is given to the HPE Cray EX System External DNS mechanism to be advertised to the site DNS. Unless a site defined name is used, a unique name like the one shown above is calculated and used. If a site defined DNS name for the Broker UAI is desired, the UAI name may be added to the command that creates the Broker UAI as follows:\nncn-m001-pit# cray uas admin uais create --class-id d764c880-41b8-41e8-bacc-f94f7c5b053d --owner broker --uai-name my-broker-uai Example output:\nuai_age = \u0026#34;0m\u0026#34; uai_connect_string = \u0026#34;ssh broker@35.226.246.154\u0026#34; uai_host = \u0026#34;ncn-w003\u0026#34; uai_img = \u0026#34;registry.local/cray/cray-uai-broker:1.2.4\u0026#34; uai_ip = \u0026#34;35.226.246.154\u0026#34; uai_msg = \u0026#34;\u0026#34; uai_name = \u0026#34;my-broker-uai\u0026#34; uai_status = \u0026#34;Running: Ready\u0026#34; username = \u0026#34;broker\u0026#34; [uai_portmap] If a UAI name is specified for creation that matches that of an already created UAI, no new UAI will be created, but the creation operation will appear to succeed and will return the status of the already existing UAI.\nTop: User Access Service (UAS)\nNext Topic: Log in to a Broker UAI\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/troubleshoot_broker_sssd_cant_use_sssd_conf/",
	"title": "Troubleshoot Broker UAI Sssd CANnot Use /etc/sssd/sssd.conf",
	"tags": [],
	"description": "",
	"content": "Troubleshoot Broker UAI SSSD Cannot Use /etc/sssd/sssd.conf Symptom A Broker UAI has been created using an SSSD configuration in a secret and volume as described in Configure a Broker UAI Class, but logging into the Broker UAI does not work.\nDiagnose the problem as follows:\n  Find the UAI name of the Broker UAI in a list of existing UAIs:\nncn-m001# cray uas admin uais list --format yaml   Find the Broker UAI pod name by looking for a pod with the UAI name as the first part of its name in the list of Broker UAI pods:\nncn-m001# kubectl get po -n uas   Obtain logs from the Broker UAI:\nncn-m001# kubectl logs -n uas \u0026lt;pod-name\u0026gt; -c \u0026lt;uai-name\u0026gt;   See if the the following errors appear in the log output:\n(2022-01-28 17:46:44:642510): [sssd] [confdb_ldif_from_ini_file] (0x0020): Permission check on config file failed. (2022-01-28 17:46:44:642549): [sssd] [confdb_init_db] (0x0020): Cannot convert INI to LDIF [1]: [Operation not permitted] (2022-01-28 17:46:44:642568): [sssd] [confdb_setup] (0x0010): ConfDB initialization has failed [1]: Operation not permitted (2022-01-28 17:46:44:642644): [sssd] [load_configuration] (0x0010): Unable to setup ConfDB [1]: Operation not permitted (2022-01-28 17:46:44:642764): [sssd] [main] (0x0020): Cannot read config file /etc/sssd/sssd.conf. Please check that the file is accessible only by the owner and owned by root.root.   Problem Explanation In the current release of UAS, the default Service Account on the uas namespace in Kubernetes is bound to a Cluster Role that uses a Pod Security Policy that defines a specific fsGroup range and a MustRunAs rule instead of simply using the RunAsAny rule. Because of the way Kubernetes handles volumes, when a volume containing a Secret or a ConfigMap is mounted on a Kubernetes pod with an fsGroup rule that is not RunAsAny in the Pod Security Policy, the requested mode of the volume is adjusted to something Kubernetes deems more appropriate. In this case, the requested mode (decimal 384 or octal 600) becomes octal 640 instead in the mounted volume. Unfortunately, SSSD requires that this mode be octal 600 or it will refuse to use the configuration file.\nWorkaround While this problem will be resolved in an upcoming release of UAS, if this behavior occurs, it is necessary to create a new Pod Security Policy and a Cluster Role using that Pod Security Policy, then change the existing Cluster Role Binding to bind the new Cluster Role instead of the one it currently uses. The following procedure does that.\n  Verify that the system is set up the same way as the system on which this workaround was prepared. To do that, list the Cluster Role Binding named uas-default-psp and determine what Cluster Role it is bound to:\nncn-m001# kubectl get clusterrolebindings uas-default-psp -o yaml Example output:\napiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: [...] roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: restricted-transition-net-raw-psp subjects: - kind: ServiceAccount name: default namespace: uas Notice the roleRef setting binds the restricted-transition-net-raw-psp Cluster Role. That Cluster Role uses the restricted-transition-net-raw-psp Pod Security Policy, which is used by several CSM services, but does not work for Broker UAIs.\nAssuming the system is configured as shown above, the following steps will\n Remove the existing incorrect ClusterRoleBinding so that it can be replaced later Create a new Pod Security Policy called uas-default-psp. Create a Cluster Role called uas-default-psp that uses the new Pod Security Policy Replace the Cluster Role Binding called uas-default-psp with a new one that binds the new Cluster Role to the default Service Account in the uas namespace  If the system is configured differently, it may be necessary to investigate further, which is largely beyond the scope of this section. The important thing here is that the default Service Account in the uas namespace must not be bound to a Pod Security Policy with an fsGroup or supplementalGroups configured with anything but the RunAsAny rule.\n  Remove the existing Cluster Role Binding:\nncn-m001# kubectl delete clusterrolebindings uas-default-psp   Prepare a YAML file containing the new Kubernetes objects:\nncn-m001# cat \u0026lt;\u0026lt; EOF \u0026gt; /tmp/uas-default-psp.yaml apiVersion: policy/v1beta1 kind: PodSecurityPolicy metadata: name: uas-default-psp spec: allowPrivilegeEscalation: true allowedCapabilities: - NET_ADMIN - NET_RAW allowedHostPaths: - pathPrefix: /lustre - pathPrefix: /root/registry - pathPrefix: /lib/modules - pathPrefix: / - pathPrefix: /var/lib/nfsroot/nmd - pathPrefix: /lus - pathPrefix: /var/tmp/cps-local fsGroup: rule: RunAsAny hostNetwork: true privileged: true runAsUser: rule: RunAsAny seLinux: rule: RunAsAny supplementalGroups: rule: RunAsAny volumes: - configMap - emptyDir - projected - secret - downwardAPI - persistentVolumeClaim - hostPath - flexVolume --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: uas-default-psp rules: - apiGroups: - policy resourceNames: - uas-default-psp resources: - podsecuritypolicies verbs: - use --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: uas-default-psp roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: uas-default-psp subjects: - kind: ServiceAccount name: default namespace: uas EOF   Apply this new configuration to Kubernetes:\nncn-m001# kubectl apply -f /tmp/uas-default-psp.yaml   Delete and re-create the offending Broker UAI(s) and they should come up and SSSD should run properly.\nncn-m001# cray uas admin uais delete OPTIONS ncn-m001# cray uas admin uais create OPTIONS   Top: User Access Service (UAS)\nNext Topic: Clear UAS Configuration\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/troubleshoot_common_mistakes_when_creating_a_custom_end-user_uai_image/",
	"title": "Troubleshoot Common Mistakes When Creating A Custom End-user UAI Image",
	"tags": [],
	"description": "",
	"content": "Troubleshoot Common Mistakes when Creating a Custom End-User UAI Image There a several problems that may occur while making or working with a custom End-User UAI images. The following are some basic troubleshooting questions to ask:\n Does SESSION_NAME match an actual entry in cray bos sessiontemplate list? Is the SESSION_ID set to an appropriate uuid format? Did the awk command not parse the uuid correctly? Did the file /etc/security/limits.d/99-slingshot-network.conf get removed from the tarball correctly? Does the ENTRYPOINT /usr/bin/uai-ssh.sh exist? Did the container image get pushed and registered with UAS? Did the creation process run from a real worker or master node as opposed to a LiveCD node?  Top: User Access Service (UAS)\nNext Topic: Troubleshoot UAS / CLI Authentication Issues\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/reset_the_uas_configuration_to_original_installed_settings/",
	"title": "Clear UAS Configuration",
	"tags": [],
	"description": "",
	"content": "Clear UAS Configuration WARNING: The procedure described here will remove all UAS configuration including some configuration that is installed upon installation / upgrade of the HPE Cray EX system. If this procedure is used, the update-uas Helm chart must be removed and re-deployed to restore the full HPE provided configuration. This procedure should only be used in an extreme situation where the UAS configuration has become corrupted to the point where it can no longer be managed. All UAS configuration can normally be managed through the cray uas admin config ... commands.\nWARNING: Configuration lost using this procedure is not recoverable.\nHow to remove a customized UAS configuration and restore the base installed configuration.\nThe configuration set up using the Cray CLI to interact with UAS persists as long as UAS remains installed and survives upgrades. This is called the running configuration and it is both persistent and malleable. During installation and localization, however, the installer creates a base installed configuration. It may be necessary to return to this base configuration. To do this, delete the running configuration, which will cause the UAS to reset to the base installed configuration.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command)  Procedure   Delete the running configuration.\nncn-w001 # cray uas admin config delete This will delete all locally applied configuration, Are you sure? [y/N]:   Confirm the command. This will delete the running configuration and cannot be undone.\nncn-w001 # cray uas admin config delete This will delete all locally applied configuration, Are you sure? [y/N]: y Alternatively, note that the interactive prompt can be bypassed by supplying the -y option.\nncn-w001 # cray uas admin config delete -y   Top: User Access Service (UAS)\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/list_uai_resource_specifications/",
	"title": "List UAI Resource Specifications",
	"tags": [],
	"description": "",
	"content": "List UAI Resource Specifications Obtain a list of all the UAI resource specifications registered with UAS.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command)  Procedure List all the resource specifications registered in UAS.\nThe resource specifications returned by the following command are available for UAIs to use:\nncn-m001-pit# cray uas admin config resources list Example output:\n[[results]] comment = \u0026#34;Resource Specification to use with Brokered End-User UAIs\u0026#34; limit = \u0026#34;{\\\u0026#34;cpu\\\u0026#34;: \\\u0026#34;300m\\\u0026#34;, \\\u0026#34;memory\\\u0026#34;: \\\u0026#34;1Gi\\\u0026#34;}\u0026#34; request = \u0026#34;{\\\u0026#34;cpu\\\u0026#34;: \\\u0026#34;300m\\\u0026#34;, \\\u0026#34;memory\\\u0026#34;: \\\u0026#34;1Gi\\\u0026#34;}\u0026#34; resource_id = \u0026#34;f26ee12c-6215-4ad1-a15e-efe4232f45e6\u0026#34; The following are the configurable parts of a resource specification:\n limit - A JSON string describing a Kubernetes resource limit request - A JSON string describing a Kubernetes resource request comment - An optional free form string containing any information an administrator might find useful about the resource specification resource-id - Used for examining, updating or deleting the resource specification as well as linking the resource specification into a UAI class  Refer to Elements of a UAI for more information.\nTop: User Access Service (UAS)\nNext Topic: Create a UAI Resource Specification\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/list_uais/",
	"title": "List UAIs",
	"tags": [],
	"description": "",
	"content": "List UAIs There are two ways to list UAIs in UAS. One of these is an administrative action and provides access to all currently running UAIs. The other is associated with the Legacy UAI Management mode and provides authorized users access to their own UAIs. Both of these are shown here.\nView the details of every UAI that is running by using a direct UAS administrative command.\nPrerequisites For administrative procedures:\n The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command)  For Legacy Mode user procedures:\n The user must be logged into a host that has user access to the HPE Cray EX System API Gateway The user must have an installed initialized cray CLI and network access to the API Gateway The user must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The user must be logged in as to the HPE Cray EX System CLI (cray auth login command)  Procedure   List the existing UAIs as an administrator.\nUse a command of the following form:\nncn-m001-pit# cray uas admin uais list OPTIONS OPTIONS includes includes the following selection options:\n --owner '\u0026lt;user-name\u0026gt;' show only UAIs owned by the named user --class-id '\u0026lt;class-id' show only UAIs of the specified UAI class  The following lists Broker UAIs on a system where administrators follow a convention that a Broker UAI is created with an owner called broker:\nncn-m001-pit# cray uas admin uais list --owner broker Example output:\n[[results]] uai_age = \u0026#34;5h3m\u0026#34; uai_connect_string = \u0026#34;ssh broker@34.136.140.107\u0026#34; uai_host = \u0026#34;ncn-w003\u0026#34; uai_img = \u0026#34;registry.local/cray/cray-uai-broker:1.2.4\u0026#34; uai_ip = \u0026#34;34.136.140.107\u0026#34; uai_msg = \u0026#34;\u0026#34; uai_name = \u0026#34;uai-broker-07624d65\u0026#34; uai_status = \u0026#34;Running: Ready\u0026#34; username = \u0026#34;broker\u0026#34;   List the UAIs owned by an authorized user named vers in the Legacy Mode of UAI management.\nvers\u0026gt; cray uas list Example output:\n[[results]] uai_age = \u0026#34;3m\u0026#34; uai_connect_string = \u0026#34;ssh vers@35.188.16.85\u0026#34; uai_host = \u0026#34;ncn-w003\u0026#34; uai_img = \u0026#34;registry.local/cray/cray-uai-sles15sp2:1.2.4\u0026#34; uai_ip = \u0026#34;35.188.16.85\u0026#34; uai_msg = \u0026#34;\u0026#34; uai_name = \u0026#34;uai-vers-4a38a807\u0026#34; uai_status = \u0026#34;Running: Ready\u0026#34; username = \u0026#34;vers\u0026#34;   Top: User Access Service (UAS)\nNext Topic: Creating a UAI\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/list_uas_information/",
	"title": "List UAS Version Information",
	"tags": [],
	"description": "",
	"content": "List UAS Version Information Use the cray uas mgr-info list command to determine the version and service name of UAS.\nList UAS Version with cray uas mgr-info list ncn-w001# cray uas mgr-info list Example output:\nservice_name = \u0026#34;cray-uas-mgr\u0026#34; version = \u0026#34;1.16.1\u0026#34; Top: User Access Service (UAS)\nNext-Topic: End-User UAIs\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/list_volumes_registered_in_uas/",
	"title": "List Volumes Registered In UAS",
	"tags": [],
	"description": "",
	"content": "List Volumes Registered in UAS List the details of all volumes registered in UAS with the cray uas admin config volumes list command. Use this command to obtain the volume_id value of volume, which is required for other UAS administrative commands.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command)  Procedure The volume registrations in the UAS configuration can be quite extensive and sometimes difficult to read in the default TOML format used by the cray administrative CLI. The following shows the --format option to the cray CLI being used to switch to various output formats that may be easier to read or more useful for certain tasks. Feel free to use that option with any cray CLI command to select a more comfortable output style.\nList the details of all the volumes registered in UAS.\n  Retrieve the list in TOML.\nncn-m001-pit# cray uas admin config volumes list Example output:\n[[results]] mount_path = \u0026#34;/etc/localtime\u0026#34; volume_id = \u0026#34;11a4a22a-9644-4529-9434-d296eef2dc48\u0026#34; volumename = \u0026#34;timezone\u0026#34; [results.volume_description.host_path] path = \u0026#34;/etc/localtime\u0026#34; type = \u0026#34;FileOrCreate\u0026#34; [[results]] mount_path = \u0026#34;/etc/sssd\u0026#34; volume_id = \u0026#34;1ec36af0-d5b6-4ad9-b3e8-755729765d76\u0026#34; volumename = \u0026#34;broker-sssd-config\u0026#34; [results.volume_description.secret] default_mode = 384 secret_name = \u0026#34;broker-sssd-conf\u0026#34; [[results]] mount_path = \u0026#34;/lus\u0026#34; volume_id = \u0026#34;a3b149fd-c477-41f0-8f8d-bfcee87fdd0a\u0026#34; volumename = \u0026#34;lustre\u0026#34; [results.volume_description.host_path] path = \u0026#34;/lus\u0026#34; type = \u0026#34;DirectoryOrCreate\u0026#34;   Retrieve the list in YAML format.\nncn-m001-pit# cray uas admin config volumes list --format yaml Example output:\n- mount_path: /etc/localtime volume_description: host_path: path: /etc/localtime type: FileOrCreate volume_id: 11a4a22a-9644-4529-9434-d296eef2dc48 volumename: timezone - mount_path: /etc/sssd volume_description: secret: default_mode: 384 secret_name: broker-sssd-conf volume_id: 1ec36af0-d5b6-4ad9-b3e8-755729765d76 volumename: broker-sssd-config - mount_path: /lus volume_description: host_path: path: /lus type: DirectoryOrCreate volume_id: a3b149fd-c477-41f0-8f8d-bfcee87fdd0a volumename: lustre   Retrieve the list in JSON format.\nncn-m001-pit# cray uas admin config volumes list --format json Example output:\n[ { \u0026#34;mount_path\u0026#34;: \u0026#34;/etc/localtime\u0026#34;, \u0026#34;volume_description\u0026#34;: { \u0026#34;host_path\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/etc/localtime\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;FileOrCreate\u0026#34; } }, \u0026#34;volume_id\u0026#34;: \u0026#34;11a4a22a-9644-4529-9434-d296eef2dc48\u0026#34;, \u0026#34;volumename\u0026#34;: \u0026#34;timezone\u0026#34; }, { \u0026#34;mount_path\u0026#34;: \u0026#34;/etc/sssd\u0026#34;, \u0026#34;volume_description\u0026#34;: { \u0026#34;secret\u0026#34;: { \u0026#34;default_mode\u0026#34;: 384, \u0026#34;secret_name\u0026#34;: \u0026#34;broker-sssd-conf\u0026#34; } }, \u0026#34;volume_id\u0026#34;: \u0026#34;1ec36af0-d5b6-4ad9-b3e8-755729765d76\u0026#34;, \u0026#34;volumename\u0026#34;: \u0026#34;broker-sssd-config\u0026#34; }, { \u0026#34;mount_path\u0026#34;: \u0026#34;/lus\u0026#34;, \u0026#34;volume_description\u0026#34;: { \u0026#34;host_path\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/lus\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;DirectoryOrCreate\u0026#34; } }, \u0026#34;volume_id\u0026#34;: \u0026#34;a3b149fd-c477-41f0-8f8d-bfcee87fdd0a\u0026#34;, \u0026#34;volumename\u0026#34;: \u0026#34;lustre\u0026#34; } ]   The JSON formatted output can help guide administrators in constructing new volume descriptions required to add or update a volume description in UAS. JSON is the required input format for volume descriptions in UAS.\nLooking at the above output, each volume has a mount_path, volume_description, volume_name and volume_id entry.\nThe mount_path specifies where in the UAI the volume will be mounted.\nNOTE: While it is acceptable to have multiple volumes configured in UAS with the same mount_path, any given UAI will fail creation if it has more than one volume specified for a given mount path. If multiple volumes with the same mount path exist in the UAS configuration, all UAIs must be created using UAI classes that specify a workable subset of volumes. A UAI created without a UAI Class under such a UAS configuration will try to use all configured volumes and creation will fail.\nThe volume_description is the JSON description of the volume, specified as a dictionary with one entry, whose key identifies the kind of Kubernetes volume is described (i.e. host_path, configmap, secret, etc.) whose value is another dictionary containing the Kubernetes volume description itself. See Kubernetes documentation for details on what goes in various kinds of volume descriptions.\nThe volumename is a string the creator of the volume may chose to describe or name the volume. It must be comprised of only lower case alphanumeric characters and dashes ('-') and must begin and end with an alphanumeric character. It is used inside the UAI pod specification to identify the volume that is mounted in a given location in a container. The name is required and administrators are free to use any name that meets the above requirements. Volume names do need to be unique within any given UAI and are far more useful when searching for a volume if they are unique across the entire UAS configuration.\nThe volume_id is a unique identifier used to identify the UAS volume when examining, updating or deleting a volume and when linking a volume to a UAI class. It is assigned automatically by UAS.\nTop: User Access Service (UAS)\nNext Topic: Add a Volume to UAS\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/log_in_to_a_broker_uai/",
	"title": "Log In To A Broker UAI",
	"tags": [],
	"description": "",
	"content": "Log in to a Broker UAI SSH to log into a Broker UAI and reach the End-User UAIs on demand.\nPrerequisites  The user must be logged into a host that can reach the external IP address of the Broker UAI The user must know the external IP address or DNS host name of the Broker UAI  Procedure   Log in to the Broker UAI.\nThe following example is the first login for the vers user:\nvers\u0026gt; ssh vers@35.226.246.154 The authenticity of host \u0026#39;35.226.246.154 (35.226.246.154)\u0026#39; can\u0026#39;t be established. ECDSA key fingerprint is SHA256:k4ef6vTtJ1Dtb6H17cAFh5ljZYTl4IXtezR3fPVUKZI. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added \u0026#39;35.226.246.154\u0026#39; (ECDSA) to the list of known hosts. Password: Creating a new UAI... The authenticity of host \u0026#39;10.21.138.52 (10.21.138.52)\u0026#39; can\u0026#39;t be established. ECDSA key fingerprint is SHA256:TX5DMAMQ8yQuL4YHo9qFEJWpKaaiqfeSs4ndYXOTjkU. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added \u0026#39;10.21.138.52\u0026#39; (ECDSA) to the list of known hosts. There are several things to notice here:\n The first time the user logs in the Broker UAI\u0026rsquo;s SSH host key is unknown, as is normal for SSH. The user is asked for a password in this example. If the user\u0026rsquo;s home directory, as defined in LDAP had been mounted in the Broker UAI and a .ssh/authorized_keys entry had been present, there would not have been a password prompt. Home directory trees can be mounted as volumes just as any other directory can. The broker mechanism in the Broker UAI creates a new UAI because vers has never logged into this Broker UAI before. There is a second prompt to acknowledge an unknown host which is, in this case, the End-User UAI itself. The Broker UAI constructs a public/private key pair for the hidden SSH connection between the broker and the End-User UAI shown in the image in Broker Mode UAI Management.    Log out of the Broker UAI.\n  Log in to the Broker UAI again.\nThe next time vers logs in, it will look similar to the following:\nvers\u0026gt; ssh vers@35.226.246.154 Password: vers@uai-vers-ee6f427e-6c7468cdb8-2rqtv\u0026gt; Only the password prompt appears now, because the hosts are all known and the End-User UAI exists but there is no .ssh/authorized_keys known yet by the Broker UAI for vers.\n  Top: User Access Service (UAS)\nNext Topic: UAI Image Customization\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/modify_a_uai_class/",
	"title": "Modify A UAI Class",
	"tags": [],
	"description": "",
	"content": "Modify a UAI Class Update a UAI class with a modified configuration.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command) The administrator must know the Class ID of the UAI Class to be modified: List UAI Classes  Limitations The ID of the UAI class cannot be modified.\nProcedure To update an existing UAI class, use a command of the following form:\ncray uas admin config classes update OPTIONS UAI_CLASS_ID OPTIONS are the same options supported for UAI class creation. They can be seen by using the command. UAI_CLASS_ID is the Class ID of the UAI class to be modified.\ncray uas admin config classes update --help   Modify a UAI class.\nThe following example changes the comment on the UAI class with an ID of bb28a35a-6cbc-4c30-84b0-6050314af76b.\nncn-m001-pit#cray uas admin config classes update \\  --replicas 3 \\  bdb4988b-c061-48fa-a005-34f8571b88b4 Any change made using this command affects only UAIs that are both created using the modified class and are created after the modification. Existing UAIs using the class will not change.\n  Optional: Update currently running UAIs by deleting and recreating them, or deleting them and allowing them to be re-created through a Broker UAI. See Delete a UAI for more details.\n  Top: User Access Service (UAS)\nNext Topic: Delete a UAI Class\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/obtain_configuration_of_a_uas_volume/",
	"title": "Obtain The Configuration Of A UAS Volume",
	"tags": [],
	"description": "",
	"content": "Obtain the Configuration of a UAS Volume View the configuration information of a specific UAS volume. This procedure requires the volume_ID of that volume.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command) The administrator must know the Volume ID of the volume to be retrieved: List Volumes Registered in UAS  Procedure View the configuration of a specific UAS volume.\nThis command returns output in TOML format by default. JSON or YAML formatted output can be obtained by using the --format json or --format yaml options respectively.\nncn-m001-pit# cray uas admin config volumes describe 11a4a22a-9644-4529-9434-d296eef2dc48 --format json Example output:\n{ \u0026#34;mount_path\u0026#34;: \u0026#34;/etc/localtime\u0026#34;, \u0026#34;volume_description\u0026#34;: { \u0026#34;host_path\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/etc/localtime\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;FileOrCreate\u0026#34; } }, \u0026#34;volume_id\u0026#34;: \u0026#34;11a4a22a-9644-4529-9434-d296eef2dc48\u0026#34;, \u0026#34;volumename\u0026#34;: \u0026#34;timezone\u0026#34; } Top: User Access Service (UAS)\nNext Topic: Update a UAS Volume\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/register_a_uai_image/",
	"title": "Register A UAI Image",
	"tags": [],
	"description": "",
	"content": "Register a UAI Image Register a UAI image with UAS. Registration tells UAS where to locate the image and whether to use the image as the default for UAIs.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command) The UAI image must be created and uploaded to the container registry: Customize End-User UAI Images  Procedure Register a UAI image with UAS.\nThe following is the minimum required CLI command form:\nncn-m001-pit# cray uas admin config images create --imagename IMAGE_NAME In this example, IMAGE_NAME is the full name of the image, including registry host and version tag, to be registered.\nThe following example registers a UAI image stored in the registry.local registry as registry.local/cray/custom-end-user-uai:latest. This example also explicitly sets the default attribute to true because the --default yes option is used in the command.\nncn-m001-pit# cray uas admin config images create --imagename registry.local/cray/custom-end-user-uai:latest --default yes To register the image explicitly as non-default:\nncn-m001-pit# cray uas admin config images create --imagename registry.local/cray/custom-end-user-uai:latest --default no Registering an image with the --default no option is usually unnecessary. Omitting the --default option causes UAS to set the default attribute as false. So, the following command would be equivalent to the previous command:\nncn-m001-pit# cray uas admin config images create --imagename registry.local/cray/custom-end-user-uai:latest Top: User Access Service (UAS)\nNext Topic: Retrieve UAI Image Registration Information\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/login_to_a_users_uai_to_troubleshoot_issues/",
	"title": "This Page Has Moved",
	"tags": [],
	"description": "",
	"content": "This Page Has Moved The information on this page has moved to Troubleshoot UAIs with Administrative Access. Refer to that page for these procedures.\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/delete_a_uai_resource_specification/",
	"title": "Delete A UAI Resource Specification",
	"tags": [],
	"description": "",
	"content": "Delete a UAI Resource Specification Delete a specific UAI resource specification using the resource_id of that specification. Once deleted, UAIs will no longer be able to use that specification for creation. Existing UAIs are not affected by the change.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command) The administrator must know the Resource ID of the resource specification to be deleted: List Resource Specifications  Procedure To delete a particular resource specification, use a command of the following form:\nncn-m001-pit# cray uas admin config resources delete RESOURCE_ID Remove a UAI resource specification from UAS.\nncn-m001-pit# cray uas admin config resources delete 7c78f5cf-ccf3-4d69-ae0b-a75648e5cddb Top: User Access Service (UAS)\nNext Topic: UAI Classes\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/delete_a_volume_configuration/",
	"title": "Delete A Volume Configuration",
	"tags": [],
	"description": "",
	"content": "Delete a Volume Configuration Delete an existing volume configuration. This procedure does not delete the underlying object referred to by the UAS volume configuration.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command) The administrator must know the Volume ID of the UAS volume to be deleted: List Volumes Registered in UAS  Procedure Delete the target volume configuration.\nTo delete a UAS Volume, use a command of the following form:\nncn-m001-pit# cray uas admin config volumes delete \u0026lt;volume-id\u0026gt; For example:\nncn-m001-pit# cray uas admin config volumes delete a0066f48-9867-4155-9268-d001a4430f5c If wanted, perform List Volumes Registered in UAS to confirm that the UAS volume has been deleted.\nTop: User Access Service (UAS)\nNext Topic: Resource Specifications\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/elements_of_a_uai/",
	"title": "Elements Of A UAI",
	"tags": [],
	"description": "",
	"content": "Elements of a UAI All UAIs can have the following attributes associated with them:\n A required container image An optional set of volumes An optional resource specification An optional collection of other configuration items  This topic explains each of these attributes.\nUAI container image The container image for a UAI (UAI image) defines and provides the basic environment available to the user. This environment includes, among other things:\n The operating system (including version) Pre-installed packages  A site can customize UAI images and add those images to UAS, allowing them to be used for UAI creation. Any number of UAI images can be configured in UAS, though only one will be used by any given UAI.\nUAS provides two UAI images by default. These images enable HPE Cray EX administrators to set up UAIs and run many common tasks. The first image is a standard End-User UAI image that has the software necessary to support a basic Linux login experience. This is primarily intended to give administrators a way to get started with UAIs and experiment with their configuration. The second image is a Broker UAI image. Broker UAIs present a single SSH endpoint that every user of a given class of UAIs logs into. The Broker UAI then locates or creates a suitable End-User UAI and redirects the SSH session to that End-User UAI.\nUAI Volumes The volumes defined for a UAI provide external access to data provided by the host node. Anything that can be defined as a volume in a Kubernetes pod specification can be configured in UAS as a volume and used within a UAI. Examples include:\n Kubernetes ConfigMaps and Secrets External file systems used for persistent storage or external data access Host node files and directories  When UAIs are created they mount a list of volumes inside their containers to give them access to various data provided either by Kubernetes resources or through Kubernetes by the host node where the UAI runs. Which volumes are in that list depends on how the UAI is created:\n UAIs created without using a UAI class mount all volumes configured in UAS UAIs created using a UAI Class mount only the volumes listed in the UAI Class and configured in UAS  The following are some example use cases for UAI volumes:\n Connecting UAIs to configuration files like /etc/localtime maintained by the host node Connect End-User UAIs to Slurm or PBS Professional Workload Manager configuration shared through Kubernetes Connecting End-User UAIs to Programming Environment libraries and tools hosted on the UAI host nodes Connecting End-User UAIs to Lustre or other external storage for user data Connecting Broker UAIs to a directory service or SSH configuration to authenticate and redirect user sessions  Every UAS volume includes the following values in its registration information:\n mount_path: Specifies where in the UAI the volume will be mounted. volume_description: A dictionary with one entry, whose key identifies the kind of Kubernetes volume is described (for example, host_path, configmap, secret). The value associated with that key is another dictionary containing the Kubernetes volume description itself. volumename: A required string chosen by the creator of the volume. This may describe or name the volume. It is used inside the UAI pod specification to identify the volume that is mounted in a given location in a container. A volumename is unique within any given UAI, but not necessarily within UAS. These are useful when searching for a volume if they are unique across the UAS configuration. volume_id: Used to identify the UAS volume when examining, updating, or deleting a volume and when linking a volume to a UAI class. The volume_id is generated by and unique within UAS.  Refer to Kubernetes Documentation describing Volumes for more information about Kubernetes volumes.\nResource Specifications A resource request tells Kubernetes the minimum amount of a given host node resource to give to each UAI. A resource limit sets the maximum amount of a given host node resource that Kubernetes can give to any UAI. Kubernetes uses resource limits and requests to manage the system resources available to pods. Because UAIs run as pods under Kubernetes, UAS takes advantage of Kubernetes to manage the system resources available to UAIs. In UAS, resource specifications contain that configuration. A UAI that is assigned a resource specification will use the resource requests and limits found there instead of the default resource limits or requests on the Kubernetes namespace containing the UAI. This way, resource specifications can be used to fine-tune resources assigned to UAIs of different classes.\nUAI resource specifications have three configurable parameters:\n A set of limits which is a JSON string describing Kubernetes resource limits A set of requests which is a JSON string describing Kubernetes resource requests An optional comment which is a free-form string containing any information an administrator might find useful about the resource specification  Resource specifications also contain a resource-id that is used for examining, updating, or deleting the resource specification as well as linking the resource specification into a UAI class. Resource-ids are generated by UAS and unique to each resource specification.\nResource specifications configured in UAS contain resource requests, limits, or both, that can be associated with a UAI. Any resource request or limit that can be set up on a Kubernetes pod can be set up as a resource specification under UAS.\nOther Configuration Items There are also smaller configuration items that control things such as:\n Whether the UAI can talk to compute nodes over the high-speed network (needed for workload management) Whether the UAI presents a public facing or private facing IP address for SSH Kubernetes scheduling priority Timeout values for limiting the lifespan of active or idle UAIs  These items are configured in UAI Classes so only UAIs created from UAI Classes can have these settings.\nUAI Configuration and UAI Classes All of the above described UAI configuration and more can be encapsulated into a UAI Class, which can then be used to create UAIs with greater precision and efficiency. UAI Classes are especially important when using Broker UAIs because Broker UAIs use a UAI Creation Class configured into the Broker UAI\u0026rsquo;s class to determine what kind of End-User UAI to create when a user logs into the Broker.\nTop: User Access Service (UAS)\nNext Topic: UAI Host Nodes\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/end_user_uais/",
	"title": "End-user UAIs",
	"tags": [],
	"description": "",
	"content": "End-User UAIs UAIs used for interactive logins are called End-User UAIs. End-User UAIs can be seen as lightweight User Access Nodes (UANs), but there are important differences between UAIs and UANs.\nEnd-User UAIs are not dedicated hardware like UANs. They are implemented as containers orchestrated by Kubernetes, which makes them subject to Kubernetes scheduling and resource management rules. One key element of Kubernetes orchestration is impermanence. While End-User UAIs are often long running, Kubernetes can reschedule or recreate them as needed to meet resource and node availability constraints. UAIs can also be removed administratively.\nEnd-User UAIs can also be configured with soft and hard timeout values. Reaching a soft timeout causes the UAI to be removed automatically when it is or becomes idle \u0026ndash; defined as having no logged in user sessions. Reaching a hard timeout causes the UAI to be removed immediately regardless of logged in user sessions.\nWhen any of these things cause a UAI to terminate, a new UAI may be created, but that new UAI reverts to its initial state, discarding any internal changes that might have been made in its previous incarnation. State residing on external storage is, of course, preserved and available in the new End-User UAI.\nAn administratively removed End-User UAI or an End-User UAI terminated by a timeout may or may not ever be re-created. An End-User UAI that is preempted because of resource pressure or other Kubernetes scheduling reasons may become unavailable for an extended time until the pressure is relieved, but will usually return to service once the underlying issue is resolved.\nThe impermanence of End-User UAIs makes them suitable for tasks that are immediate and interactive over relatively short time frames, such as building and testing software or launching workloads. This impermanence makes them unsuitable for unattended activities like executing cron jobs or continuous monitoring of workload progress from a logged-in shell. These kinds of activities are more suited to UANs, which are more permanent and, unless they are re-installed, retain modified state through reboots and other interruptions.\nAnother way End-User UAIs differ from UANs is that any given End-User UAI is restricted to serving a single user. This protects users from interfering with each other within UAIs and means that any user who wants to use a UAI has to arrange for the UAI to be created and assigned. The Brokered UAI Management mode simplifies this process by providing automatic creation of and connection to UAIs using SSH logins. Once a user has an End-User UAI assigned, the user may initiate any number of SSH sessions to that UAI (or, in the case of Broker UAIs the broker serving that UAI), but no other user will be recognized by the UAI when attempting to connect. In case of Broker UAIs each unique user will be assigned a unique End-User UAI upon successful login. Multiple sessions of the same user will be will be forwarded by the Broker UAI to the same End-User UAI.\nTop: User Access Service (UAS)\nNext Topic: Special Purpose UAIs\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/examine_a_uai_using_a_direct_administrative_command/",
	"title": "Examine A UAI Using A Direct Administrative Command",
	"tags": [],
	"description": "",
	"content": "Examine a UAI Using a Direct Administrative Command Print out information about a UAI.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway. The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host. The HPE Cray EX System CLI must be configured (initialized with cray init command) to reach the HPE Cray EX System API Gateway. The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command). The administrator must know the UAI Name of the target UAI; See List UAIs.  Procedure Print out information about a UAI.\nTo examine an existing UAI use a command of the following form:\nlinux# cray uas admin uais describe \u0026lt;uai-name\u0026gt; For example:\nncn-m001-pit# cray uas admin uais describe uai-broker-07624d65 Example output:\nuai_age = \u0026#34;5h33m\u0026#34; uai_connect_string = \u0026#34;ssh broker@34.136.140.107\u0026#34; uai_host = \u0026#34;ncn-w003\u0026#34; uai_img = \u0026#34;registry.local/cray/cray-uai-broker:1.2.4\u0026#34; uai_ip = \u0026#34;34.136.140.107\u0026#34; uai_msg = \u0026#34;\u0026#34; uai_name = \u0026#34;uai-broker-07624d65\u0026#34; uai_status = \u0026#34;Running: Ready\u0026#34; username = \u0026#34;broker\u0026#34; [uai_portmap] Top: User Access Service (UAS)\nNext Topic: Deleting a UAI\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/legacy_mode_user-driven_uai_management/",
	"title": "Legacy Mode User-driven UAI Management",
	"tags": [],
	"description": "",
	"content": "Legacy Mode User-Driven UAI Management In the legacy mode, users create and manage their own UAIs through the Cray CLI. A user may create, list, and delete only UAIs owned by the user. The user may not create a UAI for another user, nor may the user see or delete UAIs owned by another user. Once created, the information describing the UAI gives the user the information needed to reach the UAI using SSH and log into it.\nThe following diagram illustrates a system running with UAIs created in the legacy mode by four users, each of whom has created at least one End-User UAI. Notice that the example user Pat has created two End-User UAIs:\nIn the simplest UAS configuration, there is some number of UAI images available for use in legacy mode and there is a set of volumes defined. In this configuration, when a UAI is created, the user may specify the UAI image to use as an option when creating the UAI, or may allow a default UAI image, if one is assigned, to be used. Every volume defined at the time the UAI is created will be mounted unconditionally in every newly created UAI if this approach is used. This can lead to problems with conflicting volume mount points (see Troubleshoot Duplicate Mount Paths in a UAI) and unresolvable volumes (see Troubleshoot UAI Stuck in ContainerCreating) in some configurations of UAS. Unless UAI classes are used to make UAIs, care must be taken to ensure all volumes have unique mount-path settings and are accessible in the user Kubernetes namespace.\nThe Benefits of Using UAI Classes with Legacy Mode A slightly more sophisticated configuration approach defines a default UAI Class that is always used by legacy mode UAI creation. When this approach is taken, the user can no longer specify the image to use, as it will be supplied by the UAI class, and the volumes mounted in any UAI created in legacy mode will be based on the specified UAI class. As long as volumes do not conflict within the list of volumes in a given UAI class, there is no need to avoid duplicate mount-path settings in the global list of volumes when this approach is used. All other configuration in the default UAI Class will also be applied to all new legacy mode UAIs, so, for example, a site can place timeouts or resource specifications on UAIs by defining them in the default UAI Class.\nThe UAI Classes section provides information on what might go in an End-User UAI Class and what should specifically go in the Non-Brokered UAI Class used in legacy mode.\nTop: User Access Service (UAS)\nNext Topic: Configure A Default UAI Class for Legacy Mode\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/list_available_uai_classes/",
	"title": "List Available UAI Classes",
	"tags": [],
	"description": "",
	"content": "List Available UAI Classes View all the details of every available UAI class. Use this information to select a class to apply to one or more UAIs.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command)  Procedure List all available UAI classes.\nTo list available UAI classes, use the following command:\nncn-m001-pit# cray uas admin config classes list The cray uas admin config classes list command supports the same --format options as the cray uas admin config volumes list command. See List Volumes Registered in UAS for details.\nFor example:\nncn-m001-pit# cray uas admin config classes list --format json \u0026lt;output not shown\u0026gt; See UAI Classes and Elements of a UAI for more details on the output.\nTop: User Access Service (UAS)\nNext Topic: Create a UAI Class\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/list_available_uai_images_in_legacy_mode/",
	"title": "List Available UAI Images In Legacy Mode",
	"tags": [],
	"description": "",
	"content": "List Available UAI Images in Legacy Mode A user can list the UAI images available for creating a UAI with a command of the form:\nuser\u0026gt; cray uas images list For example:\nvers\u0026gt; cray uas images list default_image = \u0026#34;registry.local/cray/cray-uai-sles15sp2:1.2.4\u0026#34; image_list = [ \u0026#34;registry.local/cray/cray-uai-sles15sp2:1.2.4\u0026#34;, \u0026#34;registry.local/cray/cray-uai-sanity-test:1.2.4\u0026#34;, \u0026#34;registry.local/cray/cray-uai-broker:1.2.4\u0026#34;,] Top: User Access Service (UAS)\nNext Topic: Create UAIs From Specific UAI Images in Legacy Mode\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/list_registered_uai_images/",
	"title": "List Registered UAI Images",
	"tags": [],
	"description": "",
	"content": "List Registered UAI Images Administrators can use the cray uas admin config images list command to see the list of registered images. This command also displays the UAS registration information about each image.\nWhile Registering a UAI image name with UAS is necessary for UAIs to use the image, simply registering the image is not sufficient. The registered image must also be created and stored appropriately in its container registry. The basic HPE supplied UAI image is both installed and registered at UAS installation or upgrade time by the update-uas Kubernetes job when the update-uas Helm chart is deployed, upgraded or downgraded. Custom images are created, installed and registered as part of the Customize End-User UAI Images procedure.\nThis procedure describes how to list the currently registered UAI images.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command)  Procedure Obtain the list of UAI images that are currently registered with UAS.\nncn-m001-pit# cray uas admin config images list Example output:\n[[results]] default = true image_id = \u0026#34;08a04462-195a-4e66-aa31-08076072c9b3\u0026#34; imagename = \u0026#34;registry.local/cray/cray-uas-sles15:latest\u0026#34; [[results]] default = false image_id = \u0026#34;f8d5f4da-c910-421c-92b6-794ab8cc7e70\u0026#34; imagename = \u0026#34;registry.local/cray/cray-uai-broker:latest\u0026#34; [[results]] default = false image_id = \u0026#34;8fdf5d4a-c190-24c1-2b96-74ab98c7ec07\u0026#34; imagename = \u0026#34;registry.local/cray/custom-end-user-uai:latest\u0026#34; The output shown above shows three image registrations. Each has an imagename indicating the name of the image from the image registry to be used to construct a UAI.\nNOTE: Simply registering a UAI image name does not make the image available. The image must also be created and stored in the container registry. See Customize End-User UAI Images.\nThere is also a default flag. If this flag is true, the image will be used, in the absence of a default UAI Class, whenever a UAI is created without specifying an image or UAI Class as part of the creation. Finally, there is an image_id, which identifies this image registration for later inspection, update, or deletion and for linking the image to a UAI Class.\nTop: User Access Service (UAS)\nNext Topic: Register a UAI Image\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/create_a_uai_class/",
	"title": "Create A UAI Class",
	"tags": [],
	"description": "",
	"content": "Create a UAI Class Add a new User Access Instance (UAI) class to the User Access Service (UAS) so that the class can be used to configure UAIs.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command)  Procedure Add a UAI class by using the command in the following example.\nncn# cray uas admin config classes create --image-id \u0026lt;image-id\u0026gt; [options] The only required option is --image-id IMAGE_ID which sets the container image that will be used to create a UAI from this UAI class.\nOther options and arguments can be discovered using the following command:\nncn# cray uas admin config classes create --help See UAI Classes for more information on what the settings in a UAI class mean and how to use them.\nTop: User Access Service (UAS)\nNext Topic: View a UAI Class\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/create_a_uai_resource_specification/",
	"title": "Create A UAI Resource Specification",
	"tags": [],
	"description": "",
	"content": "Create a UAI Resource Specification Add a resource specification to UAS. Once added, a resource specification can be used to request or limit specific resource consumption on a host node or gain access to host node features managed by Kubernetes resources. The examples in this documentation focus on memory and CPU usage, but Kubernetes does use resources in some configurations to manage access to other kinds of resources.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command)  Procedure Add a resource specification.\nUse a command of the following form:\nncn# cray uas admin config resources create [--limit \u0026lt;k8s-resource-limit\u0026gt;] [--request \u0026lt;k8s-resource-request\u0026gt;] [--comment \u0026#39;\u0026lt;string\u0026gt;\u0026#39;] For example:\nncn# cray uas admin config resources create --request \u0026#39;{\u0026#34;cpu\u0026#34;: \u0026#34;300m\u0026#34;, \u0026#34;memory\u0026#34;: \u0026#34;1Gi\u0026#34;}\u0026#39; \\  --limit \u0026#39;{\u0026#34;cpu\u0026#34;: \u0026#34;300m\u0026#34;, \u0026#34;memory\u0026#34;: \u0026#34;1Gi\u0026#34;}\u0026#39; \\  --comment \u0026#34;Resource Specification to use with Brokered End-User UAIs\u0026#34; See Elements of a UAI for an explanation of UAI resource specifications.\nThe example above specifies a request / limit pair that requests and is constrained to 300 milli-CPUs (0.3 CPUs) and 1 GiB of memory (1 * 1024 * 1024 * 1024 bytes) for any UAI created with this limit specification. By keeping the request and the limit the same, this ensures that a host node will not be oversubscribed by UAIs. It is also legitimate to request less than the limit, though that risks over-subscription and is not recommended in most cases. If the request is greater than the limit, UAIs created with the request specification will never be scheduled because their pods will not be able to provide the requested resources.\nAll of the configurable parts are optional when adding a resource specification. If none are provided, an empty resource specification with only a resource_id will be created.\nTop: User Access Service (UAS)\nNext Topic: Retrieve Resource Specification Details\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/create_a_uai_with_additional_ports/",
	"title": "Create A UAI With Additional Ports",
	"tags": [],
	"description": "",
	"content": "Create a UAI with Additional Ports In legacy mode UAI creation, an option is available to expose UAI ports to the customer user network in addition to the the port used for SSH access. These ports are restricted to ports 80, 443, and 8888. This procedure allows a user or administrator to create a new UAI with these additional ports.\nPrerequisites  The user must be logged into a host that has user access to the HPE Cray EX System API Gateway The user must have an installed initialized cray CLI and network access to the API Gateway The user must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The user must be logged in as to the HPE Cray EX System CLI (cray auth login command) The user must have a public SSH key configured on the host from which SSH connections to the UAI will take place The user must have access to a file containing the above public SSH key  Limitations Only ports 80, 443, and 8888 can be exposed. Attempting to open any other ports will result in an error.\nProcedure   Create a new UAI with the --ports option.\nvers\u0026gt; cray uas create --publickey PUBLIC_SSH_KEY_FILE --ports PORT_LIST When these ports are exposed in the UAI, they will be mapped from the port number on the externally visible IP address of the UAI to the port number used to reach the UAI pod. The mapping of these ports is displayed in the uai_portmap element of the returned output from cray uas create, and cray uas list. The mapping is shown as a dictionary where the key is the externally served port and the value is the internally routed port. Applications running on the UAI should listen on the internally routed port. Usually these will be the same value.\nvers\u0026gt; cray uas create --publickey ~/.ssh/id_rsa.pub --ports 80,443,8888 Example output:\nuai_age = \u0026#34;0m\u0026#34; uai_connect_string = \u0026#34;ssh vers@34.68.41.239\u0026#34; uai_host = \u0026#34;ncn-w002\u0026#34; uai_img = \u0026#34;registry.local/cray/cray-uai-sles15sp2:1.2.4\u0026#34; uai_ip = \u0026#34;34.68.41.239\u0026#34; uai_msg = \u0026#34;\u0026#34; uai_name = \u0026#34;uai-vers-42de2eeb\u0026#34; uai_status = \u0026#34;Running: Ready\u0026#34; username = \u0026#34;vers\u0026#34; [uai_portmap] 80 = 80 443 = 443 8888 = 8888   Log in to the UAI with the connection string.\nlinux# ssh USERNAME@UAI_IP_ADDRESS -i ~/.ssh/id_rsa   Top: User Access Service (UAS)\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/create_and_use_default_uais_in_legacy_mode/",
	"title": "Create And Use Default UAIs In Legacy Mode",
	"tags": [],
	"description": "",
	"content": "Create and Use Default UAIs in Legacy Mode Create a UAI using the default UAI image or the default UAI class in legacy mode.\nProcedure   Create a UAI with a command of the following form:\nuser\u0026gt; cray uas create --public-key \u0026#39;\u0026lt;path\u0026gt;\u0026#39; \u0026lt;path\u0026gt; is the path to a file containing an SSH public-key matched to the SSH private key belonging to the user.\n  Watch the UAI and see when it is ready for logins.\nuser\u0026gt; cray uas list   Log into the UAI using the ssh command.\n  Delete the UAI when finished working with it.\nuser\u0026gt; cray uas delete --uai-list \u0026#39;\u0026lt;uai-list\u0026gt;\u0026#39;   Example UAI Lifecycle In the following example, the user logs into the CLI using cray auth login with a user name and password matching that user\u0026rsquo;s credentials in Keycloak.\nvers\u0026gt; cray auth login Username: vers Password: Success! vers\u0026gt; cray uas list results = [] From there the user creates a UAI. The UAI starts out in a Pending or Waiting state as Kubernetes constructs its pod and starts its container running.\nvers\u0026gt; cray uas create --publickey ~/.ssh/id_rsa.pub uai_age = \u0026#34;0m\u0026#34; uai_connect_string = \u0026#34;ssh vers@34.136.140.107\u0026#34; uai_host = \u0026#34;ncn-w002\u0026#34; uai_img = \u0026#34;registry.local/cray/cray-uai-sles15sp2:1.2.4\u0026#34; uai_ip = \u0026#34;34.136.140.107\u0026#34; uai_msg = \u0026#34;\u0026#34; uai_name = \u0026#34;uai-vers-01b26dd1\u0026#34; uai_status = \u0026#34;Running: Ready\u0026#34; username = \u0026#34;vers\u0026#34; [uai_portmap] vers\u0026gt; cray uas list cray uas list [[results]] uai_age = \u0026#34;1m\u0026#34; uai_connect_string = \u0026#34;ssh vers@34.136.140.107\u0026#34; uai_host = \u0026#34;ncn-w002\u0026#34; uai_img = \u0026#34;registry.local/cray/cray-uai-sles15sp2:1.2.4\u0026#34; uai_ip = \u0026#34;34.136.140.107\u0026#34; uai_msg = \u0026#34;\u0026#34; uai_name = \u0026#34;uai-vers-01b26dd1\u0026#34; uai_status = \u0026#34;Running: Ready\u0026#34; username = \u0026#34;vers\u0026#34; Using cray uas list, the user watches the UAI until it reaches a Running: Ready state. The UAI is now ready to accept SSH logins from the user, and the user then logs into the UAI to run a simple Slurm job, and logs out.\nvers\u0026gt; ssh vers@34.136.140.107 The authenticity of host \u0026#39;34.136.140.107 (34.136.140.107)\u0026#39; can\u0026#39;t be established. ECDSA key fingerprint is SHA256:5gU4SPiw8UvcX7s+xJfVMKULaUi3e0E3i+XA6AklEJA. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added \u0026#39;34.136.140.107\u0026#39; (ECDSA) to the list of known hosts. vers@uai-vers-01b26dd1-45tpc:~\u0026gt; ps -afe UID PID PPID C STIME TTY TIME CMD root 1 0 0 14:50 ? 00:00:00 /bin/bash /usr/bin/uai-ssh.sh root 45 1 0 14:50 ? 00:00:00 su vers -c /usr/sbin/sshd -e -f /etc/uas/ssh/sshd_config -D vers 46 45 0 14:50 ? 00:00:00 /usr/sbin/sshd -e -f /etc/uas/ssh/sshd_config -D vers 107 46 0 14:53 ? 00:00:00 sshd: vers [priv] vers 110 107 0 14:53 ? 00:00:00 sshd: vers@pts/0 vers 111 110 0 14:53 pts/0 00:00:00 -bash vers 148 111 0 14:53 pts/0 00:00:00 ps -afe vers@uai-vers-01b26dd1-45tpc:~\u0026gt; exit logout Connection to 34.136.140.107 closed. Now finished with the UAI, the user deletes it with cray uas delete. If the user has more than one UAI to delete, the argument to the --uai-list option can be a comma-separated list of UAI names.\nvers\u0026gt; cray uas delete --uai-list uai-vers-01b26dd1 results = [ \u0026#34;Successfully deleted uai-vers-01b26dd1\u0026#34;,] Top: User Access Service (UAS)\nNext Topic: List Available UAI Images in Legacy Mode\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/customize_end-user_uai_images/",
	"title": "Customize End-user UAI Images",
	"tags": [],
	"description": "",
	"content": "Customize End-User UAI Images The provided end-user UAI image is a basic UAI image that includes an up-to-date version of the SLES Linux distribution. It provides an entry point to using UAIs and an easy way for administrators to experiment with UAS configurations. To support building software to be run in compute nodes, or other HPC and Analytics workflows, it is necessary to create a custom end-user UAI image and use that.\nA custom end-user UAI image can be any container image set up with the end-user UAI entrypoint.sh script. Experimentation with the wide range of possible UAI images is beyond the scope of this document, but the example given here should offer a starting point for that kind of experimentation.\nThe example provided here covers the most common use-case, which is building a UAI image from the SquashFS image used on compute nodes on the host system to support application development, workload management and analytics workflows. Some of the steps are specific to that activity, others would be common to or similar to steps needed to create special purpose UAIs.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command)  See Configure the Cray CLI.\nNOTE: This procedure cannot be run from a PIT node or an external host, it must be run from a Kubernetes worker or master node.\nProcedure   Choose a name for the custom image.\nThis example names the custom end-user UAI image called registry.local/cray/cray-uai-compute:latest, and places that name in an environment variable for convenience. Alter the name as appropriate for the image to be created:\nncn-mw# UAI_IMAGE_NAME=registry.local/cray/cray-uai-compute:latest   Query BOS for a sessiontemplate ID.\nIdentify the sessiontemplate name to use. A full list may be found with the following command:\nncn-mw# cray bos sessiontemplate list --format yaml Example output:\n- boot_sets: compute: boot_ordinal: 2 etag: d54782b3853a2d8713a597d80286b93e kernel_parameters: ip=dhcp quiet spire_join_token=${SPIRE_JOIN_TOKEN} network: nmn node_roles_groups: - Compute path: s3://boot-images/0c0d4081-2e8b-433f-b6f7-e1ef0b907be3/manifest.json rootfs_provider: cpss3 rootfs_provider_passthrough: dvs:api-gw-service-nmn.local:300:nmn0 type: s3 cfs: configuration: wlm-config-0.1.0 enable_cfs: true name: wlm-sessiontemplate-0.1.0 Alternatively, collect the sessiontemplate name used during the Cray Operating System (COS) install. Refer to the \u0026ldquo;Boot COS\u0026rdquo; procedure in the COS product stream documentation. Near the end of that procedure, the step to create a BOS session to boot the compute nodes should contain the name.\n  Record the sessiontemplate name.\nncn-mw# ST_NAME=wlm-sessiontemplate-0.1.0   Download a compute node SquashFS.\nUse the sessiontemplate name to download a compute node SquashFS from a BOS sessiontemplate name:\nncn-mw# ST_ID=$(cray bos sessiontemplate describe $ST_NAME --format json | jq -r \u0026#39;.boot_sets.compute.path\u0026#39; | awk -F/ \u0026#39;{print $4}\u0026#39;) ncn-mw# cray artifacts get boot-images $ST_ID/rootfs rootfs.squashfs   Mount the SquashFS and create a tarball.\n  Create a directory and mount the SquashFS on the directory.\nncn-w001# mkdir -v mount ncn-mw# mount -v -o loop,ro rootfs.squashfs `pwd`/mount   Create the tarball.\nIMPORTANT: 99-slingshot-network.conf is omitted from the tarball, because that prevents the UAI from running sshd as the UAI user with the su command.\nncn-mw# (cd `pwd`/mount; tar --xattrs --xattrs-include=\u0026#39;*\u0026#39; --exclude=\u0026#34;99-slingshot-network.conf\u0026#34; -cf \u0026#34;../$ST_ID.tar\u0026#34; .) 2\u0026gt; /dev/null This may take several minutes. Notice that this does not create a compressed tarball. Using an uncompressed format makes it possible to add files if needed once the tarball is made. It also makes the procedure run slightly faster. Warnings related to xattr can be ignored; the resulting tarball should still result in a functioning UAI container image.\n  Check that the tarball contains ./usr/bin/uai-ssh.sh.\nncn-mw# tar tf $ST_ID.tar | grep \u0026#39;[.]/usr/bin/uai-ssh[.]sh\u0026#39; Example output:\n./usr/bin/uai-ssh.sh If this script is not present, the easiest place to get a copy of the script is from a UAI built from the end-user UAI image provided with UAS. After getting a copy of the script, it can be appended to the tarball.\n  Create a directory for the script.\nncn-mw# mkdir -pv ./usr/bin   Create a UAI.\nncn-mw# cray uas create --format toml --publickey ~/.ssh/id_rsa.pub Example output:\nuai_connect_string = \u0026#34;ssh vers@10.26.23.123\u0026#34; uai_host = \u0026#34;ncn-w001\u0026#34; uai_img = \u0026#34;dtr.dev.cray.com/cray/cray-uai-sles15sp1:latest\u0026#34; uai_ip = \u0026#34;10.26.23.123\u0026#34; uai_msg = \u0026#34;\u0026#34; uai_name = \u0026#34;uai-vers-32079250\u0026#34; uai_status = \u0026#34;Pending\u0026#34; username = \u0026#34;vers\u0026#34; [uai_portmap]   Copy the script from the UAI.\nncn-mw# scp vers@10.26.23.123:/usr/bin/uai-ssh.sh ./usr/bin/uai-ssh.sh Example output:\nThe authenticity of host \u0026#39;10.26.23.123 (10.26.23.123)\u0026#39; can\u0026#39;t be established. ECDSA key fingerprint is SHA256:voQUCKDG4C9FGkmUcHZVrYJBXVKVYqcJ4kmTpe4tvOA. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added \u0026#39;10.26.23.123\u0026#39; (ECDSA) to the list of known hosts. uai-ssh.sh 100% 5035 3.0MB/s 00:00   Delete the UAI.\nncn-mw# cray uas delete --uai-list uai-vers-32079250 --format toml Example output:\nresults = [ \u0026#34;Successfully deleted uai-vers-32079250\u0026#34;,]   Append the script to the tarball.\nncn-mw# tar rvf 0c0d4081-2e8b-433f-b6f7-e1ef0b907be3.tar ./usr/bin/uai-ssh.sh       Create and push the container image.\nCreate a container image using Podman or Docker and push it to the site container registry. Any container-specific modifications may also be done here with a Dockerfile. The ENTRYPOINT layer must be /usr/bin/uai-ssh.sh as that starts sshd for the user in the UAI container started by UAS.\nncn-mw# UAI_IMAGE_NAME=registry.local/cray/cray-uai-compute:latest ncn-mw# podman import --change \u0026#34;ENTRYPOINT /usr/bin/uai-ssh.sh\u0026#34; $ST_ID.tar $UAI_IMAGE_NAME ncn-mw# PODMAN_USER=$(kubectl get secret -n nexus nexus-admin-credential -o json | jq -r \u0026#39;.data.username\u0026#39; | base64 -d) ncn-mw# PODMAN_PASSWD=$(kubectl get secret -n nexus nexus-admin-credential -o json | jq -r \u0026#39;.data.password\u0026#39; | base64 -d) ncn-mw# podman push --creds \u0026#34;$PODMAN_USER:$PODMAN_PASSWD\u0026#34; $UAI_IMAGE_NAME   Register the new container image with UAS.\nncn-mw# cray uas admin config images create --imagename $UAI_IMAGE_NAME   Cleanup the mount directory and tarball.\nncn-mw# umount -v mount; rmdir -v mount ncn-mw# rm -v $ST_ID.tar rootfs.squashfs # NOTE: The next step could be done as an `rm -rf` but, because the user # is `root` and the path is very similar to an important system # path a more cautious approach is taken. ncn-mw# rm -fv ./usr/bin/uai-ssh.sh \u0026amp;\u0026amp; rmdir ./usr/bin ./usr   Top: User Access Service (UAS)\nNext Topic: Legacy Mode User-Driven UAI Management\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/customize_the_broker_uai_image/",
	"title": "Customize The Broker UAI Image",
	"tags": [],
	"description": "",
	"content": "Customize the Broker UAI Image The Broker UAI image that comes with UAS is the image used to construct Broker UAIs.\nThe key pieces of the Broker UAI image are:\n An entrypoint shell script that initializes the container and starts the SSH daemon running. An SSH configuration that forces logged in users into the switchboard command which creates / selects End-User UAIs and redirects connections.  The primary way to customize the Broker UAI image is by defining volumes and connecting them to the Broker UAI class for a given broker. Some customizations may require action that cannot be covered simply by using volumes to override configuration. Those cases generally require changing the Broker UAI behavior in some way. Those cases can be covered either by volume mounting a customized entrypoint script, or volume mounting a customized SSH configuration. Both of these cases are shown in the following examples.\nCustomize the Broker UAI entrypoint Script The Broker UAI entrypoint script runs once every time the Broker UAI starts. It resides at /app/broker/entrypoint.sh in the Broker UAI image. The entrypoint script is the only file in that directory, so it can be overridden by creating a Kubernetes ConfigMap in the uas namespace containing the modified script and creating a volume using that ConfigMap with a mount point of /app/broker. There is critical content in the entrypoint script that should not be modified.\nThe following shows the contents of an unmodified script:\n#!/bin/bash  # MIT License # # (C) Copyright [2020] Hewlett Packard Enterprise Development LP # # Permission is hereby granted, free of charge, to any person obtaining a # copy of this software and associated documentation files (the \u0026#34;Software\u0026#34;), # to deal in the Software without restriction, including without limitation # the rights to use, copy, modify, merge, publish, distribute, sublicense, # and/or sell copies of the Software, and to permit persons to whom the # Software is furnished to do so, subject to the following conditions: # # The above copyright notice and this permission notice shall be included # in all copies or substantial portions of the Software. # # THE SOFTWARE IS PROVIDED \u0026#34;AS IS\u0026#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL # THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR # OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, # ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR # OTHER DEALINGS IN THE SOFTWARE. echo \u0026#34;Configure PAM to use sssd...\u0026#34; pam-config -a --sss --mkhomedir echo \u0026#34;Generating broker host keys...\u0026#34; ssh-keygen -A echo \u0026#34;Checking for UAI_CREATION_CLASS...\u0026#34; if ! [ -z $UAI_CREATION_CLASS ]; then echo UAI_CREATION_CLASS=$UAI_CREATION_CLASS \u0026gt;\u0026gt; /etc/environment fi echo \u0026#34;Starting sshd...\u0026#34; /usr/sbin/sshd -f /etc/switchboard/sshd_config echo \u0026#34;Starting sssd...\u0026#34; sssd sleep infinity Starting at the top:\n pam_config ... can be customized to set up PAM as needed. The configuration here assumes the broker is using SSSD to reach a directory server for authentication and that, if a home directory is not present for a user at login, one should be made on the broker. The ssh-keygen... part is needed to set up the SSH host key for the broker and should be left alone. The UAI_CREATION_CLASS code should be left alone, as it sets up information used by switchboard to create End-User UAIs. The /usr/sbin/sshd... part starts the SSH server on the broker and should be left alone. Configuration of SSH is covered in the next section and is done by replacing /etc/switchboard/sshd_config not by modifying this line. The sssd part assumes the broker is using SSSD to reach a directory server, it can be changed as needed. The sleep infinity prevents the script from exiting which keeps the Broker UAI running. It should not be removed or altered.  As long as the basic flow and contents described here are honored, other changes to this script should work without compromising the Broker UAI\u0026rsquo;s function.\nThe following is an example of replacing the entrypoint script with a new entrypoint script that changes the SSSD invocation to explicitly specify the sssd.conf file path (the standard path is used here, but a different path might make customizing SSSD for a given site simpler under some set of circumstances):\n  Create a new entrypoint script.\nNOTE: A special \u0026ldquo;here document\u0026rdquo; form is used to prevent variable substitution in the file.\nncn-m001-pit# cat \u0026lt;\u0026lt;-\u0026#34;EOF\u0026#34; \u0026gt; entrypoint.sh #!/bin/bash # MIT License # # (C) Copyright [2020] Hewlett Packard Enterprise Development LP # # Permission is hereby granted, free of charge, to any person obtaining a # copy of this software and associated documentation files (the \u0026#34;Software\u0026#34;), # to deal in the Software without restriction, including without limitation # the rights to use, copy, modify, merge, publish, distribute, sublicense, # and/or sell copies of the Software, and to permit persons to whom the # Software is furnished to do so, subject to the following conditions: # # The above copyright notice and this permission notice shall be included # in all copies or substantial portions of the Software. # # THE SOFTWARE IS PROVIDED \u0026#34;AS IS\u0026#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL # THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR # OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, # ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR # OTHER DEALINGS IN THE SOFTWARE. echo \u0026#34;Configure PAM to use sssd...\u0026#34; pam-config -a --sss --mkhomedir echo \u0026#34;Generating broker host keys...\u0026#34; ssh-keygen -A echo \u0026#34;Checking for UAI_CREATION_CLASS...\u0026#34; if ! [ -z $UAI_CREATION_CLASS ]; then echo UAI_CREATION_CLASS=$UAI_CREATION_CLASS \u0026gt;\u0026gt; /etc/environment fi echo \u0026#34;Starting sshd...\u0026#34; /usr/sbin/sshd -f /etc/switchboard/sshd_config echo \u0026#34;Starting sssd...\u0026#34; # LOCAL MODIFICATION # change the normal SSSD invocation # sssd # to specify the config file path sssd --config /etc/sssd/sssd.conf # END OF LOCAL MODIFICATION sleep infinity EOF   Create a new ConfigMap with the content from the script.\nncn-m001-pit# kubectl create configmap -n uas broker-entrypoint --from-file=entrypoint.sh   Create a new volume.\nNOTE: The default_mode setting, which will set the mode on the file /app/broker/entrypoint.sh is decimal 493 here instead of octal 0755. The octal notation is not permitted in a JSON specification. Decimal numbers have to be used.\nncn-m001-pit# cray uas admin config volumes create --mount-path /app/broker --volume-description \u0026#39;{\u0026#34;config_map\u0026#34;: {\u0026#34;name\u0026#34;: \u0026#34;broker-entrypoint\u0026#34;, \u0026#34;default_mode\u0026#34;: 493}}\u0026#39; --volumename broker-entrypoint Example output:\nmount_path = \u0026#34;/app/broker\u0026#34; volume_id = \u0026#34;2246bbb1-4006-4b11-ba57-6588a7b7c02f\u0026#34; volumename = \u0026#34;broker-entrypoint\u0026#34; [volume_description.config_map] default_mode = 493 name = \u0026#34;broker-entrypoint\u0026#34;   List the UAI classes.\nncn-m001-pit# cray uas admin config classes list | grep -e class_id -e comment Example output:\nclass_id = \u0026#34;5eb523ba-a3b7-4a39-ba19-4cfe7d19d296\u0026#34; comment = \u0026#34;UAI Class to Create Non-Brokered End-User UAIs\u0026#34; class_id = \u0026#34;bdb4988b-c061-48fa-a005-34f8571b88b4\u0026#34; comment = \u0026#34;UAI Class to Create Brokered End-User UAIs\u0026#34; comment = \u0026#34;Resource Specification to use with Brokered End-User UAIs\u0026#34; class_id = \u0026#34;d764c880-41b8-41e8-bacc-f94f7c5b053d\u0026#34; comment = \u0026#34;UAI broker class\u0026#34;   Describe the desired UAI class.\nncn-m001-pit# cray uas admin config classes describe d764c880-41b8-41e8-bacc-f94f7c5b053d --format yaml Example output:\nclass_id: d764c880-41b8-41e8-bacc-f94f7c5b053d comment: UAI broker class default: false image_id: 8f180ddc-37e5-4ead-b261-2b401914a79f namespace: uas opt_ports: [] priority_class_name: uai-priority public_ip: true replicas: 1 resource_config: resource_id: service_account: timeout: tolerations: uai_compute_network: false uai_creation_class: bdb4988b-c061-48fa-a005-34f8571b88b4 uai_image: default: false image_id: 8f180ddc-37e5-4ead-b261-2b401914a79f imagename: registry.local/cray/cray-uai-broker:1.2.4 volume_list: - 11a4a22a-9644-4529-9434-d296eef2dc48 - 1ec36af0-d5b6-4ad9-b3e8-755729765d76 - a3b149fd-c477-41f0-8f8d-bfcee87fdd0a volume_mounts: - mount_path: /etc/localtime volume_description: host_path: path: /etc/localtime type: FileOrCreate volume_id: 11a4a22a-9644-4529-9434-d296eef2dc48 volumename: timezone - mount_path: /etc/sssd volume_description: secret: default_mode: 384 secret_name: broker-sssd-conf volume_id: 1ec36af0-d5b6-4ad9-b3e8-755729765d76 volumename: broker-sssd-config - mount_path: /lus volume_description: host_path: path: /lus type: DirectoryOrCreate volume_id: a3b149fd-c477-41f0-8f8d-bfcee87fdd0a volumename: lustre   Update the UAI class.\nncn-m001-pit# cray uas admin config classes update \\ --volume-list \u0026#39;11a4a22a-9644-4529-9434-d296eef2dc48,1ec36af0-d5b6-4ad9-b3e8-755729765d76,2246bbb1-4006-4b11-ba57-6588a7b7c02f,a3b149fd-c477-41f0-8f8d-bfcee87fdd0a\u0026#39; \\ d764c880-41b8-41e8-bacc-f94f7c5b053d --format yaml Example output:\nclass_id: d764c880-41b8-41e8-bacc-f94f7c5b053d comment: UAI broker class default: false image_id: 8f180ddc-37e5-4ead-b261-2b401914a79f namespace: uas opt_ports: [] priority_class_name: uai-priority public_ip: true replicas: 1 resource_config: resource_id: service_account: timeout: tolerations: uai_compute_network: false uai_creation_class: bdb4988b-c061-48fa-a005-34f8571b88b4 uai_image: default: false image_id: 8f180ddc-37e5-4ead-b261-2b401914a79f imagename: registry.local/cray/cray-uai-broker:1.2.4 volume_list: - 11a4a22a-9644-4529-9434-d296eef2dc48 - 1ec36af0-d5b6-4ad9-b3e8-755729765d76 - 2246bbb1-4006-4b11-ba57-6588a7b7c02f - a3b149fd-c477-41f0-8f8d-bfcee87fdd0a volume_mounts: - mount_path: /etc/localtime volume_description: host_path: path: /etc/localtime type: FileOrCreate volume_id: 11a4a22a-9644-4529-9434-d296eef2dc48 volumename: timezone - mount_path: /etc/sssd volume_description: secret: default_mode: 384 secret_name: broker-sssd-conf volume_id: 1ec36af0-d5b6-4ad9-b3e8-755729765d76 volumename: broker-sssd-config - mount_path: /app/broker volume_description: config_map: default_mode: 493 name: broker-entrypoint volume_id: 2246bbb1-4006-4b11-ba57-6588a7b7c02f volumename: broker-entrypoint - mount_path: /lus volume_description: host_path: path: /lus type: DirectoryOrCreate volume_id: a3b149fd-c477-41f0-8f8d-bfcee87fdd0a volumename: lustre   After the Broker UAI class is updated, all that remains is to clear out any existing End-User UAIs (existing UAIs will not work with the new broker because the new broker will have a new key-pair shared with its UAIs) and the existing Broker UAI (if any) and create a new Broker UAI.\nNOTE: Clearing out existing UAIs will terminate any user activity on those UAIs, make sure that users are warned of the disruption.\n  Clear out the UAIs.\nncn-m001-pit# cray uas admin uais delete --class-id bdb4988b-c061-48fa-a005-34f8571b88b4 ncn-m001-pit# cray uas admin uais delete --class-id d764c880-41b8-41e8-bacc-f94f7c5b053d Output similar to results = [ \u0026quot;Successfully deleted uai-vers-e937b810\u0026quot;,] will be returned for each command.\n  Restart the broker.\nncn-m001-pit# cray uas admin uais create --class-id d764c880-41b8-41e8-bacc-f94f7c5b053d --owner broker Example output:\nuai_age = \u0026#34;0m\u0026#34; uai_connect_string = \u0026#34;ssh broker@34.136.140.107\u0026#34; uai_host = \u0026#34;ncn-w003\u0026#34; uai_img = \u0026#34;registry.local/cray/cray-uai-broker:1.2.4\u0026#34; uai_ip = \u0026#34;34.136.140.107\u0026#34; uai_msg = \u0026#34;\u0026#34; uai_name = \u0026#34;uai-broker-f5bfb28c\u0026#34; uai_status = \u0026#34;Running: Ready\u0026#34; username = \u0026#34;broker\u0026#34; [uai_portmap]     Customize the Broker UAI SSH Configuration The SSH configuration used on Broker UAIs resides in /etc/switchboard/sshd_config and contains the following:\nPort 30123 AuthorizedKeysFile .ssh/authorized_keys UsePAM yes X11Forwarding yes Subsystem sftp /usr/lib/ssh/sftp-server AcceptEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES AcceptEnv LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT AcceptEnv LC_IDENTIFICATION LC_ALL AcceptEnv UAI_ONE_SHOT UseDNS no Match User !root,* PermitTTY yes ForceCommand /usr/bin/switchboard broker --class-id $UAI_CREATION_CLASS The important content here is as follows:\n Port 30123 tells SSHD to listen on a port that can be reached through port forwarding by the publicly visible Kubernetes service. The UseDNS no avoids any DNS issues resulting from the Broker UAI running in the Kubernetes network space. The permitTTY yes setting permits interactive UAI logins. The ForceCommand ... statement ensures that users are always sent on to End-User UAIs or drop out of the Broker UAI on failure, preventing users from directly accessing the Broker UAI. The AcceptEnv UAI_ONE_SHOT setting is not required, but it allows a user to set the UAI_ONE_SHOT variable which instructs the broker to delete any created End-User UAI after the user logs out.  These should be left unchanged. The rest of the configuration can be customized as needed.\nThe following is an example that follows on from the previous section and configures SSH to provide a pre-login banner. Both a new banner file and a new sshd_config are placed in a Kubernetes ConfigMap and mounted over /etc/switchboard:\n  Create a new pre-login banner file.\nNOTE: A special \u0026ldquo;here document\u0026rdquo; form is used to prevent variable substitution in the file.\nncn-m001-pit# cat \u0026lt;\u0026lt;-\u0026#34;EOF\u0026#34; \u0026gt; banner Here is a banner that will be displayed before login on the Broker UAI EOF   Create a new sshd_config.\nNOTE: A special \u0026ldquo;here document\u0026rdquo; form is used to prevent variable substitution in the file.\nncn-m001-pit# cat \u0026lt;\u0026lt;-\u0026#34;EOF\u0026#34; \u0026gt; sshd_config Port 30123 AuthorizedKeysFile .ssh/authorized_keys UsePAM yes X11Forwarding yes Subsystem sftp /usr/lib/ssh/sftp-server AcceptEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES AcceptEnv LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT AcceptEnv LC_IDENTIFICATION LC_ALL AcceptEnv UAI_ONE_SHOT UseDNS no Banner /etc/switchboard/banner Match User !root,* PermitTTY yes ForceCommand /usr/bin/switchboard broker --class-id $UAI_CREATION_CLASS EOF   Add the new banner file and sshd_config to a Kubernetes ConfigMap.\nncn-m001-pit# kubectl create configmap -n uas broker-sshd-conf --from-file sshd_config --from-file banner   Mount the changes over /etc/switchboard.\nncn-m001-pit# cray uas admin config volumes create \\  --mount-path /etc/switchboard \\  --volume-description \u0026#39;{\u0026#34;config_map\u0026#34;: {\u0026#34;name\u0026#34;: \u0026#34;broker-sshd-conf\u0026#34;, \u0026#34;default_mode\u0026#34;: 384}}\u0026#39; \\  --volumename broker-sshd-config Example output:\nmount_path = \u0026#34;/etc/switchboard\u0026#34; volume_id = \u0026#34;4577eddf-d81e-40c9-9c91-082f3193edd6\u0026#34; volumename = \u0026#34;broker-sshd-config\u0026#34; [volume_description.config_map] default_mode = 384 name = \u0026#34;broker-sshd-conf\u0026#34;   Update the UAI class.\nncn-m001-pit# cray uas admin config classes update \\ --volume-list \u0026#39;4577eddf-d81e-40c9-9c91-082f3193edd6,11a4a22a-9644-4529-9434-d296eef2dc48,1ec36af0-d5b6-4ad9-b3e8-755729765d76,2246bbb1-4006-4b11-ba57-6588a7b7c02f,a3b149fd-c477-41f0-8f8d-bfcee87fdd0a\u0026#39; \\ d764c880-41b8-41e8-bacc-f94f7c5b053d --format yaml Example output:\nclass_id: d764c880-41b8-41e8-bacc-f94f7c5b053d comment: UAI broker class default: false image_id: 8f180ddc-37e5-4ead-b261-2b401914a79f namespace: uas opt_ports: [] priority_class_name: uai-priority public_ip: true replicas: 1 resource_config: resource_id: service_account: timeout: tolerations: uai_compute_network: false uai_creation_class: bdb4988b-c061-48fa-a005-34f8571b88b4 uai_image: default: false image_id: 8f180ddc-37e5-4ead-b261-2b401914a79f imagename: registry.local/cray/cray-uai-broker:1.2.4 volume_list: - 4577eddf-d81e-40c9-9c91-082f3193edd6 - 11a4a22a-9644-4529-9434-d296eef2dc48 - 1ec36af0-d5b6-4ad9-b3e8-755729765d76 - 2246bbb1-4006-4b11-ba57-6588a7b7c02f - a3b149fd-c477-41f0-8f8d-bfcee87fdd0a volume_mounts: - mount_path: /etc/switchboard volume_description: config_map: default_mode: 384 name: broker-sshd-conf volume_id: 4577eddf-d81e-40c9-9c91-082f3193edd6 volumename: broker-sshd-config - mount_path: /etc/localtime volume_description: host_path: path: /etc/localtime type: FileOrCreate volume_id: 11a4a22a-9644-4529-9434-d296eef2dc48 volumename: timezone - mount_path: /etc/sssd volume_description: secret: default_mode: 384 secret_name: broker-sssd-conf volume_id: 1ec36af0-d5b6-4ad9-b3e8-755729765d76 volumename: broker-sssd-config - mount_path: /app/broker volume_description: config_map: default_mode: 493 name: broker-entrypoint volume_id: 2246bbb1-4006-4b11-ba57-6588a7b7c02f volumename: broker-entrypoint - mount_path: /lus volume_description: host_path: path: /lus type: DirectoryOrCreate volume_id: a3b149fd-c477-41f0-8f8d-bfcee87fdd0a volumename: lustre   Once the new configuration is installed, clean out the old UAIs and restart the broker.\nNOTE: Clearing out existing UAIs will terminate any user activity on those UAIs, make sure that users are warned of the disruption.\n  Clean out the old UAIs.\nncn-m001-pit# cray uas admin uais delete --class-id bdb4988b-c061-48fa-a005-34f8571b88b4 ncn-m001-pit# cray uas admin uais delete --class-id d764c880-41b8-41e8-bacc-f94f7c5b053d Output similar to results = [ \u0026quot;Successfully deleted uai-vers-e937b810\u0026quot;,] will be returned for each command.\n  Restart the broker.\nncn-m001-pit# cray uas admin uais create --class-id d764c880-41b8-41e8-bacc-f94f7c5b053d --owner broker Example output:\nuai_age = \u0026#34;0m\u0026#34; uai_connect_string = \u0026#34;ssh broker@104.197.32.33\u0026#34; uai_host = \u0026#34;ncn-w003\u0026#34; uai_img = \u0026#34;registry.local/cray/cray-uai-broker:1.2.4\u0026#34; uai_ip = \u0026#34;104.197.32.33\u0026#34; uai_msg = \u0026#34;PodInitializing\u0026#34; uai_name = \u0026#34;uai-broker-ed144660\u0026#34; uai_status = \u0026#34;Waiting\u0026#34; username = \u0026#34;broker\u0026#34; [uai_portmap]     Connect to the broker to log in:\nvers\u0026gt; ssh vers@104.197.32.33 Here is a banner that will be displayed before login to SSH on Broker UAIs Password:   Top: User Access Service (UAS)\nNext Topic: Customize End-User UAI Images\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/delete_a_uai/",
	"title": "Delete A UAI",
	"tags": [],
	"description": "",
	"content": "Delete a UAI There are two procedures described here. The first shows how an administrator can manually delete arbitrary UAIs or delete UAIs belonging to a given user or created using a given UAI Class. The second shows how an authorized user on can delete UAIs created in the legacy UIA creation mode.\nWhen a UAI is deleted, any running WLM sessions associated with the owner of the UAI are left intact and can be interacted with through future UAIs owned by the same user or from UANs.\nPrerequisites For administrative procedures:\n The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command) The administrator must know or be able to find:  the name(s) of the target UAI(s) or the user name of the owner of the targeted UAI(s) or the class-id of the targeted UAIs    For Legacy Mode user procedures:\n The user must be logged into a host that has user access to the HPE Cray EX System API Gateway The user must have an installed initialized cray CLI and network access to the API Gateway The user must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The user must be logged in as to the HPE Cray EX System CLI (cray auth login command) The user must know the name(s) of the target UAI(s)  Procedures Delete UAIs as an administrator To delete a list of UAIs as an administrator use a command of the following form:\nncn-m001-pit# cray uas admin uais delete --uai-list UAI-NAMES UAI-NAMES is a comma-separated list of UAI Names of targeted UAIs.\nTo deleted all UAIs owned by a given user, use a command of the form:\nncn-m001-pit# cray uas admin uais delete --owner USERNAME USERNAME is the user name of the owner of the targeted UAIs.\nTo delete all UAIs of a given class, use a command of the form:\nncn-m001-pit# cray uas admin uais delete --class-id CLASS-ID CLASS-ID is the class ID of the class used to create the targeted UAIs.\nHere are some examples:\n  Delete a list of UAIs by name:\nncn-m001-pit# cray uas admin uais delete --uai-list uai-vers-5f46dffb,uai-vers-e530f53a results = [ \u0026#34;Successfully deleted uai-vers-5f46dffb\u0026#34;, \u0026#34;Successfully deleted uai-vers-e530f53a\u0026#34;,]   Delete all UAIs belonging to a named user (user name here is vers):\nncn-m001-pit# cray uas admin uais delete --owner vers results = [ \u0026#34;Successfully deleted uai-vers-5ef890be\u0026#34;, \u0026#34;Successfully deleted uai-vers-da65468d\u0026#34;,]   Delete all UAIs belonging to a given UAI Class:\nncn-m001-pit# cray uas admin uais delete --class-id a630cbda-24b4-47eb-a1f7-be1c25965ead results = [ \u0026#34;Successfully deleted uai-vers-5ef890be\u0026#34;, \u0026#34;Successfully deleted uai-vers-da65468d\u0026#34;,]   Delete UAIs as an Authorized User in Legacy Mode An authorized user in Legacy Mode can delete any UAI created by that user using a command of the form:\nvers\u0026gt; cray uas delete --uai-list UAI-NAMES To get a list of UAIs the user can delete:\nvers\u0026gt; cray uas list For example:\nvers\u0026gt; cray uas list [[results]] uai_age = \u0026#34;0m\u0026#34; uai_connect_string = \u0026#34;ssh vers@104.155.164.238\u0026#34; uai_host = \u0026#34;ncn-w003\u0026#34; uai_img = \u0026#34;registry.local/cray/cray-uai-sles15sp2:1.2.4\u0026#34; uai_ip = \u0026#34;104.155.164.238\u0026#34; uai_msg = \u0026#34;\u0026#34; uai_name = \u0026#34;uai-vers-be3e219c\u0026#34; uai_status = \u0026#34;Running: Ready\u0026#34; username = \u0026#34;vers\u0026#34; [[results]] uai_age = \u0026#34;1m\u0026#34; uai_connect_string = \u0026#34;ssh vers@34.70.243.171\u0026#34; uai_host = \u0026#34;ncn-w001\u0026#34; uai_img = \u0026#34;registry.local/cray/cray-uai-sles15sp2:1.2.4\u0026#34; uai_ip = \u0026#34;34.70.243.171\u0026#34; uai_msg = \u0026#34;\u0026#34; uai_name = \u0026#34;uai-vers-ea57eb7b\u0026#34; uai_status = \u0026#34;Running: Ready\u0026#34; username = \u0026#34;vers\u0026#34; To delete the UAI:\nvers\u0026gt; cray uas delete --uai-list uai-vers-be3e219c,uai-vers-ea57eb7b Output similar to the following is expected:\nresults = [ \u0026#34;Successfully deleted uai-vers-be3e219c\u0026#34;, \u0026#34;Successfully deleted uai-vers-ea57eb7b\u0026#34;,] Top: User Access Service (UAS)\nNext Topic: Common UAI Configurations\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/delete_a_uai_class/",
	"title": "Delete A UAI Class",
	"tags": [],
	"description": "",
	"content": "Delete a UAI Class Delete a UAI class. After deletion, the class will no longer be available for creation of UAIs. Existing UAIs are unaffected.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command) The administrator must know the Class ID of the UAI Class to be deleted: List UAI Classes  Procedure Delete a UAI Class by using a command of the following form:\ncray uas admin config classes delete UAI_CLASS_ID UAI_CLASS_ID is the UAI Class ID of the UAI class.\nDelete a UAI class.\nncn-m001-pit# cray uas admin config classes delete bb28a35a-6cbc-4c30-84b0-6050314af76b Top: User Access Service (UAS)\nNext Topic: UAI Management\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/delete_a_uai_image_registration/",
	"title": "Delete A UAI Image Registration",
	"tags": [],
	"description": "",
	"content": "Delete a UAI Image Registration Unregister a UAI image from UAS.\nPrerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command) The administrator must know the name of the UAI Image Registration to be deleted: List Registered UAI Images  Procedure Deleting a UAI image from UAS removes the UAI image registration from UAS. This procedure does not delete the actual UAI image artifact, nor does it affect UAIs currently created using the UAI Image.\nDelete a UAS image registration by using a command of the following form:\nncn-m001-pit# cray uas admin config images delete IMAGE_ID IMAGE_ID is the image ID of the UAI image registration being removed from UAS.\nFor example:\nncn-m001-pit# cray uas admin config images delete 8fdf5d4a-c190-24c1-2b96-74ab98c7ec07 Top: User Access Service (UAS)\nNext Topic: Volumes\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/broker_mode_uai_management/",
	"title": "Broker Mode UAI Management",
	"tags": [],
	"description": "",
	"content": "Broker Mode UAI Management A Broker UAI is a special kind of UAI whose job is not to host users directly but to accept attempts to reach a UAI, locate or create a UAI for the user making the attempt, and then pass the user\u0026rsquo;s connection on to the correct UAI. Multiple Broker UAIs can be created, each serving users with UAIs of a different classes. This makes it possible to set up UAIs for varying workflows and environments as needed. The following illustrates a system using the Broker mode of UAI management:\nUnlike in the Legacy Mode, in the Broker Mode users log into their UAIs through the Broker UAI. The logic in the Broker UAI authenticates the user and assigns the user an End-User UAI. The Broker UAI then forwards the SSH session to the End-User UAI. This is seamless from the user\u0026rsquo;s perspective, as the SSH session is carried through the Broker UAI and into the End-User UAI.\nTo make all of this work, the administrator must define at least one UAI Class containing the configuration for the End-User UAIs to be created by the Broker UAI and one UAI class containing the Broker UAI configuration itself. The Broker UAI should be configured by the site to permit authentication of users. Refer to the example in Configure a Broker UAI Class for more information. The necessary Broker UAI customization can be achieved using volumes to place configuration files as needed in the file system namespace of the Broker UAI. Finally, once all of this is prepared, the administrator launches the Broker UAI, and makes the IP address of the Broker UAI available for users to log into.\nTop: User Access Service (UAS)\nNext Topic: Configure End-User UAI Classes for Broker Mode\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/choosing_uai_resource_settings/",
	"title": "Choosing UAI Resource Settings",
	"tags": [],
	"description": "",
	"content": "Choosing UAI Resource Settings The Resource Specifications and UAI Classes sections describe how to set up resource specifications to be used with UAIs. Refer to those sections for all procedures and specific data structures associated with resources. In this section the question of how and why to configure UAI resources is addressed. While Kubernetes resource requests and limits can be used for other things, this section focuses on memory requests and limits and CPU requests and limits. Other resource types are outside the scope of this discussion.\nBefore discussing why custom resource specifications might be used, it is worthwhile to understand how Kubernetes behaves with respect to resources.\nKubernetes uses resource requests and limits on all of its pods (a UAI is, at its most basic, a Kubernetes pod) to determine where and whether to schedule the pod. Kubernetes will not schedule work on a host node if the pod containing that work requests more CPU or memory (or any other resource) than the host node has available. Once a request for resources has been granted by the scheduler, and the pod (UAI in this case) has been scheduled there, the available resources on the host node are reduced by the requested amount. It is possible for a resource specification to set a high limit and a low request, in which case many pods (UAIS) may be scheduled on the available host nodes. In this case, there is a risk of oversubscription as these pods grow into their limits. When Kubernetes detects resource pressure on a host node, it starts evicting pods from that node. If Kubernetes can find another host node with available space, it will reschedule an evicted pod (UAI) on that node. If not, the pod will remain evicted until a host node with sufficient resources becomes available.\nThe most common reason to set custom resource limits on a class of UAIs is that the workflows within those UAIs are more computationally or memory intensive than the default namespace resources support. In this case, the site should determine what the bottleneck is (memory or CPU) and experiment with larger settings. Note that by increasing a resource request or limit on a UAI Class you decrease the capacity of the UAI host nodes for UAIs of that class. Also note that, while it may be tempting to set low request values and higher limit values, the resulting potential oversubscription of nodes can make UAIs unstable and difficult to use.\nAnother reason for setting custom resource limits on a class of UAIs is that the UAIs are very lightweight and do not need the default namespace resource requests / limits. This can increase the capacity of the pool of available UAI host nodes, for UAIs of that class. The caveat here is that Kubernetes will terminate any pod (UAI) that tries to grow past its resource limits. Making the resource limits on UAI Classes too small can lead to instability of UAIs of that class.\nTop: User Access Service (UAS)\nNext Topic: Setting End-User UAI Timeouts\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/common_uai_config/",
	"title": "Common UAI Configuration",
	"tags": [],
	"description": "",
	"content": "Common UAI Configuration This section provides guidance on common UAI configuration activities. Specific procedures and settings are covered elsewhere, but each topic provides links to the appropriate information as well as guidance on using that particular configuration.\nRefer to the following configuration topics:\n Choosing UAI Resource Settings Setting End-User UAI Timeouts Broker UAI Resiliency and Load Balancing  Top: User Access Service (UAS)\nNext Topic: Choosing UAI Resource Settings\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/configure_a_broker_uai_class/",
	"title": "Configure A Broker UAI Class",
	"tags": [],
	"description": "",
	"content": "Configure a Broker UAI Class Configuring a Broker UAI class consists of the following actions:\n Create volumes to hold any site-specific authentication, SSH, or other configuration required Choose the End-User UAI class for which the Broker UAI will serve instances Create a UAI Class with (at a minimum):  namespace set to uas default set to false volume_mounts set to the list of customization volume-ids created above public_ip set to true uai_compute_network set to false uai_creation_class set to the class-id of the End-User UAI class    The basic contents of a Broker UAI Class is discussed in UAI Classes. Familiarity with that information is assumed in the example below.\nExample of Volumes to Connect Broker UAIs to LDAP Broker UAIs authenticate each user using SSH, and pass the SSH connection on to the selected or created End-User UAI for that user. An authentication source is required to authenticate users. For sites that use LDAP as a directory server for authentication, connecting Broker UAIs to LDAP is simply a matter of replicating the LDAP configuration used by other nodes or systems at the site (UANs can be a good source of this configuration) inside the Broker UAI. This section shows how to do that using volumes, which permits the standard Broker UAI image to be used out of the box and reconfigured at the site without direct modification.\nWhile it would be possible to make the configuration available as files volume mounted from the host node of the Broker UAI, this is difficult to set up and maintain because it means that the configuration files must be present and synchronized across all UAI host nodes. A more practical approach to this is to install the configuration files in Kubernetes as secrets, and then mount them from Kubernetes directly. This ensures that no matter where a Broker UAI runs, it has access to the configuration.\nThis example uses Kubernetes secrets and assumes that the Broker UAIs run in the uas Kubernetes namespace. If a different namespace is used, the creation of the ConfigMaps is different but the contents are the same. Using a namespace other than uas for Broker UAIs has implications beyond secrets and ConfigMaps; it is not recommended and is beyond the scope of this document.\n  Configure LDAP and determine which files need to be changed in the Broker UAI and what their contents should be.\nIn this example, the file is /etc/sssd/sssd.conf and its contents are representative but sanitized. Substitute your own site specific contents:\n[sssd] config_file_version = 2 services = nss, pam domains = My_DC [nss] filter_users = root filter_groups = root [pam] [domain/My_DC] ldap_search_base=dc=datacenter,dc=mydomain,dc=com ldap_uri=ldap://10.1.1.5,ldap://10.1.2.5 id_provider = ldap ldap_tls_reqcert = allow ldap_schema = rfc2307 cache_credentials = True entry_cache_timeout = 60 enumerate = False   Add the content from the previous step to a secret.\n  Create a file with the appropriate content.\nncn-m001-pit# cat \u0026lt;\u0026lt;EOF \u0026gt; sssd.conf [sssd] config_file_version = 2 services = nss, pam domains = My_DC [nss] filter_users = root filter_groups = root [pam] [domain/My_DC] ldap_search_base=dc=datacenter,dc=mydomain,dc=com ldap_uri=ldap://10.1.1.5,ldap://10.1.2.5 id_provider = ldap ldap_tls_reqcert = allow ldap_schema = rfc2307 cache_credentials = True entry_cache_timeout = 60 enumerate = False EOF   Make a secret from the file.\nncn-m001-pit# kubectl create secret generic -n uas broker-sssd-conf --from-file=sssd.conf     Make a volume for the secret in the UAS configuration.\nncn-m001-pit# cray uas admin config volumes create \\  --mount-path /etc/sssd \\  --volume-description \\  \u0026#39;{\u0026#34;secret\u0026#34;: {\u0026#34;secret_name\u0026#34;: \u0026#34;broker-sssd-conf\u0026#34;, \u0026#34;default_mode\u0026#34;: 384}}\u0026#39; \\  --volumename broker-sssd-config Example output:\nmount_path = \u0026#34;/etc/sssd\u0026#34; volume_id = \u0026#34;1ec36af0-d5b6-4ad9-b3e8-755729765d76\u0026#34; volumename = \u0026#34;broker-sssd-config\u0026#34; [volume_description.secret] default_mode = 384 secret_name = \u0026#34;broker-sssd-conf\u0026#34; Two important things to notice here are:\n The secret is mounted on the directory /etc/sssd not the file /etc/sssd/sssd.conf because Kubernetes does not permit the replacement of an existing regular file with a volume but does allow overriding a directory The value 384 is used here for the default mode of the file instead of 0600, which would be easier to read, because JSON does not accept octal numbers in the leading zero form    Make a volume to hold an empty and writable /etc/sssd/conf.d in the Broker UAI:\nncn-m001# cray uas admin config volumes create --mount-path /etc/sssd/conf.d --volume-description \u0026#39;{\u0026#34;empty_dir\u0026#34;: {\u0026#34;medium\u0026#34;: \u0026#34;Memory\u0026#34;}}\u0026#39; --volumename sssd-conf-d --format yaml Example output:\nmount_path: /etc/sssd/conf.d volume_description: empty_dir: medium: Memory volume_id: 541980f9-fadc-41cd-8222-e2ffdb6421c4 volumename: sssd-conf-d   Obtain the information needed to create a UAI class for the Broker UAI containing the updated configuration in the volume list.\nThe image-id of the Broker UAI image, the volume-ids of the volumes to be added to the broker class, and the class-id of the End-User UAI class managed by the broker are required:\nncn-m001-pit# cray uas admin config images list Example output:\n[[results]] default = true image_id = \u0026#34;1996c7f7-ca45-4588-bc41-0422fe2a1c3d\u0026#34; imagename = \u0026#34;registry.local/cray/cray-uai-sles15sp2:1.2.4\u0026#34; [[results]] default = false image_id = \u0026#34;5d2dd6a3-e9d3-43f1-aa3e-b9bf1589217d\u0026#34; imagename = \u0026#34;registry.local/cray/cray-uai-sanity-test:1.2.4\u0026#34; [[results]] default = false image_id = \u0026#34;8f180ddc-37e5-4ead-b261-2b401914a79f\u0026#34; imagename = \u0026#34;registry.local/cray/cray-uai-broker:1.2.4\u0026#34; ncn-m001-pit# cray uas admin config volumes list [[results]] mount_path = \u0026#34;/etc/localtime\u0026#34; volume_id = \u0026#34;11a4a22a-9644-4529-9434-d296eef2dc48\u0026#34; volumename = \u0026#34;timezone\u0026#34; [results.volume_description.host_path] path = \u0026#34;/etc/localtime\u0026#34; type = \u0026#34;FileOrCreate\u0026#34; [[results]] mount_path = \u0026#34;/etc/sssd\u0026#34; volume_id = \u0026#34;1ec36af0-d5b6-4ad9-b3e8-755729765d76\u0026#34; volumename = \u0026#34;broker-sssd-config\u0026#34; [results.volume_description.secret] default_mode = 384 secret_name = \u0026#34;broker-sssd-conf\u0026#34; [[results]] mount_path = \u0026#34;/lus\u0026#34; volume_id = \u0026#34;a3b149fd-c477-41f0-8f8d-bfcee87fdd0a\u0026#34; volumename = \u0026#34;lustre\u0026#34; [results.volume_description.host_path] path = \u0026#34;/lus\u0026#34; type = \u0026#34;DirectoryOrCreate\u0026#34; [[results]] mount_path = \u0026#34;/etc/sssd/conf.d\u0026#34; volume_id = \u0026#34;541980f9-fadc-41cd-8222-e2ffdb6421c4\u0026#34; volumename = \u0026#34;sssd-conf-d\u0026#34; [results.volume_description.empty_dir] medium = \u0026#34;Memory\u0026#34;   Create the Broker UAI class with the content retrieved in the previous step.\nncn-m001-pit#cray uas admin config classes create \\  --image-id 8f180ddc-37e5-4ead-b261-2b401914a79f \\  --volume-list 11a4a22a-9644-4529-9434-d296eef2dc48,1ec36af0-d5b6-4ad9-b3e8-755729765d76,a3b149fd-c477-41f0-8f8d-bfcee87fdd0a,541980f9-fadc-41cd-8222-e2ffdb6421c4 \\  --replicas 3 \\  --namespace uas \\  --uai-compute-network no \\  --public-ip yes \\  --comment \u0026#34;UAI broker class\u0026#34; \\  --uai-creation-class bdb4988b-c061-48fa-a005-34f8571b88b4 Example output:\nclass_id = \u0026#34;d764c880-41b8-41e8-bacc-f94f7c5b053d\u0026#34; comment = \u0026#34;UAI broker class\u0026#34; default = false image_id = \u0026#34;8f180ddc-37e5-4ead-b261-2b401914a79f\u0026#34; namespace = \u0026#34;uas\u0026#34; opt_ports = [] priority_class_name = \u0026#34;uai-priority\u0026#34; public_ip = true replicas = 3 uai_compute_network = false uai_creation_class = \u0026#34;bdb4988b-c061-48fa-a005-34f8571b88b4\u0026#34; volume_list = [ \u0026#34;11a4a22a-9644-4529-9434-d296eef2dc48\u0026#34;, \u0026#34;1ec36af0-d5b6-4ad9-b3e8-755729765d76\u0026#34;, \u0026#34;a3b149fd-c477-41f0-8f8d-bfcee87fdd0a\u0026#34;,\u0026#34;541980f9-fadc-41cd-8222-e2ffdb6421c4\u0026#34;] [[volume_mounts]] mount_path = \u0026#34;/etc/localtime\u0026#34; volume_id = \u0026#34;11a4a22a-9644-4529-9434-d296eef2dc48\u0026#34; volumename = \u0026#34;timezone\u0026#34; [volume_mounts.volume_description.host_path] path = \u0026#34;/etc/localtime\u0026#34; type = \u0026#34;FileOrCreate\u0026#34; [[volume_mounts]] mount_path = \u0026#34;/etc/sssd\u0026#34; volume_id = \u0026#34;1ec36af0-d5b6-4ad9-b3e8-755729765d76\u0026#34; volumename = \u0026#34;broker-sssd-config\u0026#34; [volume_mounts.volume_description.secret] default_mode = 384 secret_name = \u0026#34;broker-sssd-conf\u0026#34; [[volume_mounts]] mount_path = \u0026#34;/lus\u0026#34; volume_id = \u0026#34;a3b149fd-c477-41f0-8f8d-bfcee87fdd0a\u0026#34; volumename = \u0026#34;lustre\u0026#34; [volume_mounts.volume_description.host_path] path = \u0026#34;/lus\u0026#34; type = \u0026#34;DirectoryOrCreate\u0026#34; [[results.volume_mounts]] mount_path = \u0026#34;/etc/sssd/conf.d\u0026#34; volume_id = \u0026#34;541980f9-fadc-41cd-8222-e2ffdb6421c4\u0026#34; volumename = \u0026#34;sssd-conf-d\u0026#34; [results.volume_mounts.volume_description.empty_dir] medium = \u0026#34;Memory\u0026#34; [uai_image] default = false image_id = \u0026#34;8f180ddc-37e5-4ead-b261-2b401914a79f\u0026#34; imagename = \u0026#34;registry.local/cray/cray-uai-broker:1.2.4\u0026#34; NOTE: In some versions of UAS, SSSD will not start correctly when customized as described above because /etc/sssd/sssd.conf is mounted with the wrong mode in spite of being configured with the right mode. If SSSD is not working in a Broker UAI, refer to this troubleshooting section.\n  Top: User Access Service (UAS)\nNext Topic: Start a Broker UAI\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/configure_a_default_uai_class_for_legacy_mode/",
	"title": "Configure A Default UAI Class For Legacy Mode",
	"tags": [],
	"description": "",
	"content": "Configure a Default UAI Class for Legacy Mode Using a default UAI class is optional but recommended for any site using the legacy UAI management mode that wants to have some control over UAIs created by users. UAI classes used for this purpose need to have certain minimum configuration in them:\n The image_id field set to identify the image used to construct UAIs The volume_list field set to the list of volumes to mount in UAIs The public_ip field set to true The uai_compute_network flag set to true (if workload management will be used) The default flag set to true to make this the default UAI class  To make UAIs useful, there is a minimum set of volumes that should be defined in the UAS configuration:\n /etc/localtime for default timezone information The directory on the host nodes that holds persistent end-user storage, typically /lus  In addition to this, there may be volumes defined to support a workload manager (Slurm or PBS Professional) or the Cray Programming Environment (PE) or other packages the full extent of these volumes is outside the scope of this document, but whatever list of these other volumes is needed to get a suitable End-User UAI should be included in the default UAI class configuration.\nThe UAI Classes section has more information on what goes in End-User UAI classes and, specifically, the Non-Brokered End-User UAI classes used for Legacy mode.\nTop: User Access Service (UAS)\nNext Topic: Create and Use Default UAIs in Legacy Mode\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/configure_end-user_uai_classes_for_broker_mode/",
	"title": "Configure End-user UAI Classes For Broker Mode",
	"tags": [],
	"description": "",
	"content": "Configure End-User UAI Classes for Broker Mode Each UAI broker will create and manage a single class of End-User UAIs. A site using the Broker Mode of UAI management must create a Brokered End-User UAI Class for each distinct type of End-User UAI it wants served by a Broker UAI. Information on what should be configured for a Brokered End-User UAI Class can be found in UAI Classes.\nTop: User Access Service (UAS)\nNext Topic: Configure a Broker UAI class\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/configure_uais_in_uas/",
	"title": "Configure UAIs In UAS",
	"tags": [],
	"description": "",
	"content": "Configure UAIs in UAS The sub-topics in this section cover the four main elements of UAI configuration in UAS, and provide Links to procedures for listing, adding, examining, updating, and deleting each kind of element.\nOptions for the elements of a UAI are maintained in the UAS configuration. The following can be configured in UAS:\n UAI images Volumes Resource Specifications UAI Classes  Only users who are defined as administrators in an HPE Cray EX system and are logged in using the administrative CLI (cray command) can configure UAS. Configure UAS from a LiveCD node or from any system with the administrative CLI installed that can reach the HPE Cray EX API Gateway as an administrator.\nThe following procedures provide instructions for creating, updating, examining, and removing configuration items from UAS:\n UAI Images:  List Registered UAI Images Register a UAI Image Retrieve UAI Image Registration Information Update a UAI Image Registration Delete a UAI Image Registration   UAS Volumes:  List Volumes Registered in UAS Add a Volume to UAS Obtain the Configuration of a UAS Volume Update a UAS Volume Delete a Volume Configuration   UAI Resource Specifications:  List UAI Resource Specifications Retrieve Resource Specification Details Create a UAI Resource Specification Update a Resource Specification Delete a UAI Resource Specification   UAI Classes:  List Available UAI Classes View a UAI Class Create a UAI Class Modify a UAI Class Delete a UAI Class    Top: User Access Service (UAS)\nNext Topic: UAI Images\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/create_a_uai/",
	"title": "Create A UAI",
	"tags": [],
	"description": "",
	"content": "Create a UAI The UAS allows either administrators or authorized users using the Legacy Mode of UAI management to create UAIs. This section shows both methods.\nIt is rare that an an administrator would hand-craft an End-User UAI using this administrative procedure, but it is possible. This is, however, the procedure used to create Broker UAIs for Broker Mode UAI Management.\nPrerequisites For administrative procedures:\n The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command) For the administrative procedure,  the administrator must know at least the UAI Class ID to use in creating the UAI, or A default UAI Class must be defined that creates the desired class of UAI    Optional: the administrator may choose a site defined name for the UAI to be used in conjunction with the HPE Cray EX System External DNS mechanism. This is only meaningful for UAIs presented on a public IP address.\nFor Legacy Mode user procedures:\n The user must be logged into a host that has user access to the HPE Cray EX System API Gateway The user must have an installed initialized cray CLI and network access to the API Gateway The user must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The user must be logged in as to the HPE Cray EX System CLI (cray auth login command) The user must have a public SSH key configured on the host from which SSH connections to the UAI will take place The user must have access to a file containing the above public SSH key  Procedure   Create a UAI administratively.\nUse a command of the following form:\nncn# cray uas admin uais create OPTIONS The following OPTIONS are available for use:\n --class-id \u0026lt;class-id\u0026gt; - The class of the UAI to be created. This option must be specified unless a default UAI class exists, in which case, it can be omitted and the default will be used. --owner '\u0026lt;user-name\u0026gt;' - Create the UAI as owned by the specified user. --passwd str '\u0026lt;passwd-string\u0026gt;' - Specify the /etc/password format string for the user who owns the UAI. This will be used to set up credentials within the UAI for the owner when the owner logs into the UAI. --publickey-str '\u0026lt;public-ssh-key\u0026gt;' - Specify the SSH public key that will be used to authenticate with the UAI. The key should be, for example, the contents of an id_rsa.pub file used by SSH. --uai-name TEXT - Specify an optional name to be assigned to the UAI on creation. If this is not specified, a default name of the form \u0026lt;owner\u0026gt;-uai-\u0026lt;short-uuid\u0026gt; is used. The UAI name is used both as the name of the UAI in the UAS and as the external DNS hostname of a publicly accessible UAI. If the requested UAI name is the same as an already existing UAI, no new UAI is created, but the information about the existing UAI is returned. UAI names may contain up to 63 lower case alphanumeric or - characters, and must start and end with an alphanumeric character.    Create a UAI in the Legacy Mode of UAI Management.\nUse a command of the following form:\nncn# cray uas create OPTIONS The following OPTIONS are available for use:\n --publickey \u0026lt;path\u0026gt; - the path to a file containing the public SSH key to be used to talk to this UAI. This option is required and must specify a valid public key file name. --ports \u0026lt;port-list\u0026gt; - a comma-separated list of TCP port numbers to be opened on the newly created UAI. This option is not required and will be overridden by a default UAI Class if a default UAI Class is configured. --imagename \u0026lt;uai-image-name\u0026gt; - The name of the UAI container image to be used to create the UAI. This option is not required. If omitted the default UAI image will be used. Both the default UAI image and anything specified here will be overridden by a default UAI Class if a default UAI Class is configured.    Top: User Access Service (UAS)\nNext Topic: Examining a UAI Using a Direct Administrative Command\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/create_uais_from_specific_uai_images_in_legacy_mode/",
	"title": "Create UAIs From Specific Uai Images In Legacy Mode",
	"tags": [],
	"description": "",
	"content": "Create UAIs From Specific UAI Images in Legacy Mode A user can create a UAI from a specific UAI image (assuming no default UAI class exists) using a command of the form:\nuser\u0026gt; cray uas create --publickey \u0026lt;path\u0026gt; --imagename \u0026lt;image-name\u0026gt; \u0026lt;image-name\u0026gt; is the name shown above in the list of UAI images.\nFor example:\nvers\u0026gt; cray uas images list default_image = \u0026#34;registry.local/cray/cray-uai-sles15sp2:1.2.4\u0026#34; image_list = [ \u0026#34;registry.local/cray/cray-uai-sles15sp2:1.2.4\u0026#34;, \u0026#34;registry.local/cray/cray-uai-sanity-test:1.2.4\u0026#34;, \u0026#34;registry.local/cray/cray-uai-broker:1.2.4\u0026#34;,] vers\u0026gt; cray uas create --publickey ~/.ssh/id_rsa.pub --imagename registry.local/cray/cray-uai-sles15sp2:1.2.4 uai_age = \u0026#34;0m\u0026#34; uai_connect_string = \u0026#34;ssh vers@34.136.140.107\u0026#34; uai_host = \u0026#34;ncn-w003\u0026#34; uai_img = \u0026#34;registry.local/cray/cray-uai-sles15sp2:1.2.4\u0026#34; uai_ip = \u0026#34;34.136.140.107\u0026#34; uai_msg = \u0026#34;ContainerCreating\u0026#34; uai_name = \u0026#34;uai-vers-1ad83473\u0026#34; uai_status = \u0026#34;Waiting\u0026#34; username = \u0026#34;vers\u0026#34; [uai_portmap] Top: User Access Service (UAS)\nNext Topic: UAS and UAI Legacy Mode Health Checks\n"
},
{
	"uri": "/docs-csm/en-12/operations/uas_user_and_admin_topics/add_a_volume_to_uas/",
	"title": "Add A Volume To UAS",
	"tags": [],
	"description": "",
	"content": "Add a Volume to UAS This procedure registers and configures a volume in UAS so that the volume can be mounted in UAIs.\nSee List Volumes Registered in UAS for examples of valid volume configurations. Refer to Elements of a UAI for descriptions of the volume configuration fields and values.\nNote the following caveats about adding volumes to UAS:\n A volume description may specify an underlying directory that is NFS-mounted on the UAI host nodes. Hard-mounted NFS file systems will stop responding indefinitely on references to their mount points if the NFS server fails or becomes unreachable from the UAI host node. This will cause new UAI creation and migration of existing UAIs to stop responding as well until the NFS issue is remedied. Multiple volumes can be configured in UAS with the same mount_path. UAS cannot create a UAI if that UAI has more than one volume specified for a given mount_path. If multiple volumes with the same mount_path exist in the UAS configuration all UAIs must be created using UAI classes that specify a workable subset of volumes. A UAI created without a UAI Class under such a UAS configuration will try to use all configured volumes and creation will fail. The volumename is a string that can describe or name the volume. It must be composed of only lowercase letters, numbers, and dashes ('-'). The volumename also must begin and end with an alphanumeric character. As with UAI images, registering a volume with UAS creates the configuration that will be used to create a UAI. If the underlying object referred to by the volume does not exist at the time the UAI is created, the UAI will, in most cases, wait until the object becomes available before starting up. This will be visible in the UAI state which will eventually move to and remain in Waiting until the underlying issue is resolved.  Prerequisites  The administrator must be logged into an NCN or a host that has administrative access to the HPE Cray EX System API Gateway The administrator must have the HPE Cray EX System CLI (cray command) installed on the above host The HPE Cray EX System CLI must be configured (initialized - cray init command) to reach the HPE Cray EX System API Gateway The administrator must be logged in as an administrator to the HPE Cray EX System CLI (cray auth login command) The underlying resources for the volume should be available in the Kubernetes namespace where they will be referenced  Procedure To create a volume, follow this procedure.\n  Use the cray CLI to create the volume, specifying volumename, mount_path, and volume_description.\nNote difference between the UAS name for the volume type and the Kubernetes name for that type. Kubernetes uses camelCase for its type names, while UAS uses lower_case_with_underscores.\nncn-m001-pit# cray uas admin config volumes create --mount-path \u0026lt;path in UAI\u0026gt; --volume-description \u0026#39;{\u0026#34;\u0026lt;volume-kind\u0026gt;\u0026#34;: \u0026lt;k8s-volume-description\u0026gt;}\u0026#39; --volumename \u0026#39;\u0026lt;string\u0026gt;\u0026#39; For example:\nncn-m001-pit# cray uas admin config volumes create --mount-path /host_files/host_passwd --volume-description \u0026#39;{\u0026#34;host_path\u0026#34;: {\u0026#34;path\u0026#34;: \u0026#34;/etc/passwd\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;FileOrCreate\u0026#34;}}\u0026#39; --volumename \u0026#39;my-volume-with-passwd-from-the-host-node\u0026#39; The example above will create a directory /host_files in every UAI configured to use this volume and mount the file /etc/passwd from the host node into that directory as a file named host_passwd. Notice the form of the --volume-description argument. It is a JSON string encapsulating an entire volume_description field as shown in the JSON output in the previous section.\n  Perform List Volumes Registered in UAS to verify that the new volume is configured.\nThe new volume appears in the output of the cray uas admin config volumes list command.\n  Top: User Access Service (UAS)\nNext Topic: Obtain Configuration of a UAS Volume\n"
},
{
	"uri": "/docs-csm/en-12/operations/component_names_xnames/",
	"title": "Component Names (xnames)",
	"tags": [],
	"description": "",
	"content": "Component Names (xnames) Component names (xnames) identify the geolocation for hardware components in the HPE Cray EX system. Every component is uniquely identified by these component names. Some, like the system cabinet number or the CDU number, can be changed by site needs. There is no geolocation encoded within the cabinet number, such as an X-Y coordinate system to relate to the floor layout of the cabinets. Other component names refer to the location within a cabinet and go down to the port on a card or switch or the socket holding a processor or a memory DIMM location.\n   Name Pattern Range Description     s0 n/a Wildcard: Specifies all of a given type of component in the system. Can be used for \u0026ldquo;all nodes\u0026rdquo;, or to refer to the management system NCN cluster by a single logical name.   ncnN N: 1-n Non-compute Node (NCN): A management node in the management plane. Management NCNs are located in standard EIA racks.   all n/a Wildcard: Similar to s0 and can be used to specify all components in a system.   all_comp n/a Wildcard: Specifies all compute nodes.   all_svc n/a Wildcard: Specifies all service or management nodes.   pH.S H: 0-n S: 0-n Partition: A hardware or software partition (hard or soft partition). H specifies a hardware partition; HSN cabling, switches, and so on. The S specifies a software partition. A hard partition can have more than 1 soft partition. A soft partition cannot have more than 1 hard partition. Example: p1.2 is soft partition 2 of hard partition 1.   dD D: 0-999 Coolant Distribution Unit (CDU): 1 CDU for up to 6 cabinets. Example: d3 (CDU 3).   dDwW W: 0-31 Management Switch in a CDU: Example: d3w1 is switch 1 in CDU 3.   xX X: 0-9999 Liquid-cooled Cabinet or Standard Rack: Liquid-cooled cabinets include 8 chassis and do not have a cabinet-level controller; only chassis-level controllers. A standard rack is always considered chassis 0. Examples: x3000 is rack number 3000.   xXdD D: 0-1 Rack-mounted CDU: Example: x1000d0 is CDU 0 for cabinet 1000.   xXmM M: 0-3 Rack PDU Controller (BMC): Controller or BMC for one or more rack PDUs. A primary PDU controller many manage other PDUs. Example: x3000m0 is PDU controller 0, cabinet 3000.   xXmMpP P: 0-7 Rack PDU: managed by a controller. Example: x3000m0p0 is PDU 0, PDU controller 0, cabinet 3000.   xXmMpPjJ J: 1-32 Rack PDU Outlet: Example: x3000m0p0j12 is power outlet 12 on PDU 0, PDU controller 0, rack 3000.   xXmMiI I: 1-3 PDU NIC: The NIC associated with the PDU management controller, not a specific PDU. Example: x3000m0i1 is management NIC 1 of PDU controller 0, cabinet 3000.   xXm0pPvV V: 1-64 PDU Power Connector: Power connectors are connected to node cards or enclosures and also control and monitor power. Example: x3000m0p0v32 is power plug/outlet 32 of cabinet PDU 0, under cab PDU controller 0, rack 3000.   xXeE E: 0-1 CEC: There are Cabinet Environmental Controllers (CEC) per liquid-cooled cabinet. CEC 0 (right) and CEC 1 (left). Example: x1016e0 is the CEC on the right side of cabinet 1016.   xXcC C: 0-7 Chassis: An enclosure within a liquid-cooled cabinet. Standard EIA racks are always considered a single chassis (chassis 0). This component name is used as a component group or prefix and not a single component. Example: x1016c3 is chassis 3 of cabinet 1016.   xXcCbB B: 0 Chassis BMC: Liquid-cooled cabinet chassis management module (CMM) controller (cC). A standard EIA rack is always chassis 0. Example: x1016c4b0 is BMC 0 (cC) for chassis 4, cabinet 1016.   xXcCbBiI I: 0 Chassis BMC NIC: CMM BMC Ethernet NIC. Example: x1000c1b0i0 is NIC 0 of BMC 0, chassis 1, cabinet 1000.   xXcCtT T: 0-2 PSU: Power rectifier (PSU) in the a liquid-cooled chassis rectifier shelf. Three PSUs support a chassis (n+1). Example: x1016c3t2 is PSU 2 for chassis 3, cabinet 1016.   xXcCfF F: 0 CMM FPGA: CMM FPGA. Example: x1016c1f0 is FPGA 0 in chassis 1 CMM, cabinet 1016.   xXcCwW W: 1-48 Management Network Switch: Specifies bottom U-position for the switch. Example: x3000c0w47 is management switch in U47, chassis 0, rack 3000.   xXcCwWjJ J: 1-32 Management Network Switch Connector: Cable connector (port) on a management switch. Example: x3000c0w47j31 is cable connector 31 of switch in U47, chassis 0, rack 3000.   xXcChH H: 1-48 High-level Management Switch Enclosure: Typically spine switch. Example: x3000c0h47 is U47, chassis 0, in rack 3000.   xXcChHsS S: 1-4 High-level Management Network Switch: Typically a spine switch. May be a half-width device specified with a rack U position H and a horizontal space number S. Horizontal space numbers are assigned arbitrarily to physical locations. Example: x3000c0h47s1 is space 1 of U47, chassis 0, rack 3000.   xXcCrR R: 0-64 HSN Switch: Liquid-cooled blade switch slot number or ToR switch bottom U position. Switch blades are numbered 0-7 in a chassis. ToR HSN switches are numbered by bottom U position. Example: x1016c3r6 is switch blade 6 in chassis 3, cabinet 1016. Example: x3000c0r31 is ToR switch in U31, chassis 0, rack 3000.   xXcCrRaA A: 0 HSN Switch ASIC: Example: x3000c0r1a0 is ASIC 0 of ToR switch in U1, chassis 0, of rack 3000. Example: x1016c3r7a0 (ASIC 0 of liquid-cooled switch blade 7, chassis 3, cabinet 1016).   xXcCrRaAlL L: 0-N HSN Switch ASIC Link: The decimal number for the maximum number of links is network-dependent. Example: x1016c0r1a0l25 is link 25 of ASIC 0, switch 1, chassis 0, cabinet 1016).   xXcCrReE E: 0 HSN Switch Submodule: Example: x3000c0r2e0 is HSN switch submodule of ToR switch 2, chassis 0, rack 3000.   xXcCrRbB B: 0 HSN Switch Controller (sC) or BMC: A BMC or embedded controller of a switch blade. Example: x1000c3r4b0 is BMC 0 of switch 4, chassis 3, cabinet 1000. Example: x3000c0r1b0 is BMC 0 of ToR switch in U1, chassis 0, rack 3000.   xXcCrRbBiI I: 0-3 HSN Switch Management NIC: Example: x1016c2r3b0i0 is NIC 0 of controller 0, switch 3, of chassis 2, cabinet 1016.   xXcCrRfF F: 0 HSN Switch Card FPGA: Example: x1016c3r2f0 is FPGA 0 of blade switch 2, chassis 3, cabinet 1016.   xXcCrRtT T: 0 ToR component in a ToR Switch. Example: x3000c0r1t0 ToR switch 0 in U1, chassis 0, cabinet 3000.   xXcCrRjJ J: 1-32 HSN Switch Cable Connector: Example: x1016c3r4j7 is HSN connector 7 in, switch 4, chassis 3, cabinet 1016.   xXcCrRjJpP P: 0-1 HSN Switch Cable Connector Port: Example: x1016c3r4j7p0 is port 0 of HSN connector 7, switch blade 4, chassis 3, cabinet 1016.   xXcCsS S: 0-64 Node Slot or U Position: Liquid-cooled blades are numbered 0-7 in each chassis; a rack system U position specifies the bottom-most U number for the enclosure. An EIA rack is always chassis 0. Example: x1016c1s7 is compute blade 7 in chassis 1, cabinet 1016. Example: x3000c0s24 is node enclosure in U24, chassis 0, of rack 3000.   xXcCsSvV V: 1-2 Power Connector for Rack Node Enclosure: Power connector for an air-cooled node enclosure/blade. There may be one or two power connectors per node. Example: x3000c0s4v1 is power connector 1, server in U4, chassis 0, rack 3000.   xXcCrRvV V: 1-2 Power Connector for ToR HSN Switch: There may be one or two power connectors per ToR HSN switch. Example: x3000c0r4v1 is power connector 1 of ToR switch in U4, chassis 0, rack 3000.   xXcCsSbB B: 0-1 Node Controller or BMC: Liquid-cooled compute blade node card controller (nC), or rack node card BMC. Example: x1016c3s1b0 (node card 0 controller (nC) of compute blade 1, chassis 3, cabinet 1016).   xXcCsSbBiI I: 0-3 Node controller or BMC NIC: NIC associated with a node controller or BMC. Liquid-cooled nC NIC numbers start with 0. Standard rack node card BMC NICs are numbered according to the OEM hardware. Example: x1016c2s1b0i0 is NIC 0 of node card 0 controller (nC), compute blade in slot 1, chassis 3, cabinet 16. Example: x3000c0s24b1i1 is NIC 1 of BMC 1, compute node in rack U-position 24, chassis 0, cabinet 3000.   xXcCsSbBnN N: 0-7 Node: Liquid-cooled node or rack server node. Nodes are numbered 0-N and are children of the parent node controller or BMC. Node names have a bB component which specifies the node controller or BMC number. Component names can support one BMC for several nodes, multiple BMCs for one node, or one BMC per node. Example: x1016c2s3b0n1 is node 1 of node card 0, compute blade in slot 3, chassis 2, cabinet 1016.   xXcCsSeE E: 0 Node Enclosure: Liquid-cooled nodes are located on a node card which includes node card controller (nC). The node card is considered an enclosure. There may be 1 or more node cards in a rack system server or liquid-cooled blade. Rack node enclosures can include multiple subslots inside of a multi-U enclosure. Example: x3000c0s16e0 is node enclosure 0, at U16, chassis 0, cabinet 3000.   xXcCsSbBnNpPx P: 0-3 Node Processor Socket: Example: x1016c2s3b0n1p1 is processor socket 1 of node 1, of node card 0, compute blade in slot 3, chassis 2, cabinet 1016.   xXcCsSbBnNdD D: 0-15 Node DIMM Example: x1016c3s0b0n1d3 is DIMM 3 of node 1, node card 0, compute blade 0, chassis 3, cabinet 1016).   xXcCsSbBnNhH H: 0-3 Node HSN NIC: Example: x1016c3s0b0n1h1 is HSN NIC 1, node 1, node card 0, compute blade in slot 0, chassis 3, cabinet 1016.   xXcCsSbBnNiI I: 1-3 Node Management NIC: Example: x1016c3s0b0n1i1 is node management NIC 1 of node 1, node card 0, compute blade in slot 0, chassis 3, of cabinet 1016.   xXcCsSbBfF F: 0-7 Node Controller FPGA: Node card controller FPGA (FPGA). Example: x16c3s4b1f0 is FPGA 0 of node card 1, compute blade in slot 4, chassis 3, cabinet 1016.   xXcCsSbBnNaA A: 0-7 GPU: Accelerator (GPU) associated with a node. Example: x16c3s0b1n0a1 is accelerator 1, node 0, of node card 1, compute blade 0, of chassis 3, of cabinet 1016.   xXcCsSbBnNgG G: 0-63 Storage Group or Group of Disk Drives for a Node: Example: x1016c3s0b0n1g3 is storage group 3 of node 1, node card 0, compute blade in slot 0, chassis 3, cabinet 1016.   xXcCsSbBnNgGkK K: 0-63 Storage Group Disk: Example: x1016c3s0b0n1g3k1 is disk 1 of storage group 3, node 1, node card 0, of compute blade in slot 0, chassis 3, cabinet 1016.    "
},
{
	"uri": "/docs-csm/en-12/operations/csm_product_management/configure_keycloak_account/",
	"title": "Configure Keycloak Account",
	"tags": [],
	"description": "",
	"content": "Configure Keycloak Account Installation of CSM software includes a default account for administrative access to keycloak.\nDepending on choices made during the installation, there may be a federated connection to an external Identity Provider (IdP), such as an LDAP or AD server, which enables the use of external accounts in keycloak.\nHowever, if the external accounts are not available, then an \u0026ldquo;internal user account\u0026rdquo; could be created in keycloak. Having a usable account in keycloak with administrative authorization enables the use of the cray CLI for many administrative commands, such as those used to Validate CSM Health and general operation of the management services via the API gateway.\nIn Security and Authentication see the \u0026ldquo;Default Keycloak Realms, Accounts, and Clients\u0026rdquo; section for more information about these topics:\n Certificate Types Change the Keycloak Admin Password Create a Service Account in Keycloak Retrieve the Client Secret for Service Accounts Get a Long-Lived Token for a Service Account Access the Keycloak user Management UI Create Internal User Accounts in the Keycloak Shasta Realm Delete Internal User Accounts in the Keycloak Shasta Realm Remove the Email Mapper from the LDAP User Federation Re-Sync Keycloak Users to Compute Nodes Configure Keycloak for LDAP/AD Authentication Configure the RSA Plugin in Keycloak Preserve Username Capitalization for Users Exported from Keycloak Change the LDAP Server IP Address for Existing LDAP Server Content Change the LDAP Server IP Address for New LDAP Server Content Remove the LDAP User Federation from Keycloak Add LDAP User Federation  "
},
{
	"uri": "/docs-csm/en-12/operations/csm_product_management/configure_non-compute_nodes_with_cfs/",
	"title": "Configure Non-compute Nodes With CFS",
	"tags": [],
	"description": "",
	"content": "Configure Non-Compute Nodes with CFS Non-compute node (NCN) personalization applies post-boot configuration to the HPE Cray EX management nodes. Several HPE Cray EX product environments outside of CSM require NCN personalization to function. Consult the manual for each product to configure them on NCNs by referring to the HPE Cray EX System Software Getting Started Guide (S-8000) 22.07 on the HPE Customer Support Center.\nThis procedure defines the NCN personalization process for the CSM product using the Configuration Framework Service (CFS).\nDuring a fresh install, carry out these procedures in order. Later, individual procedures may be re-run as needed.\n Set up passwordless SSH  Option 1: Use the CSM-provided SSH keys Option 2: Provide custom SSH keys Option 3: Disable CSM-provided passwordless SSH Restore CSM-provided SSH keys   Configure the root password and SSH keys in Vault  Option 1: Automated default Option 2: Manual   Perform NCN personalization  Option 1: Automatically apply CSM configuration  Automatic CSM configuration steps Automatic CSM Configuration overrides   Option 2: Manually apply CSM configuration    1. Set up passwordless SSH This procedure should be run during CSM installation and any later time when the SSH keys need to be changed per site requirements.\nThe goal of passwordless SSH is to enable an easy way for interactive passwordless SSH from and between CSM product environments (management nodes) to downstream managed product environments (COS, UAN, etc), without requiring each downstream environment to create and apply individual changes to NCNs, and as a primary way to manage passwordless SSH configuration between management nodes. Passwordless SSH from downstream nodes into CSM management nodes is not intended or supported.\nPasswordless SSH keypairs for the Cray System Management (CSM) are created automatically and maintained with a Kubernetes deployment and staged into Kubernetes secrets (csm-private-key) and ConfigMaps (csm-public-key) in the services namespace. Administrators can use these provided keys, provide their own keys, or use their own solution for authentication.\nThe management of keys on NCNs is achieved by the trust-csm-ssh-keys and passwordless-ssh Ansible roles in the CSM configuration management repository. The SSH keypair is applied to management nodes using NCN personalization.\nOption 1: Use the CSM-provided SSH keys The default CSM Ansible plays are already configured to enable Passwordless SSH by default. No further action is necessary before proceeding to Configure the root password and SSH keys in Vault.\nOption 2: Provide custom SSH keys Administrators may elect to replace the CSM-provided keys with their own custom keys.\n  Set variables to the locations of the public and private SSH key files.\n Replace the values in the examples below with the paths to the desired key files on the system.\n ncn# PUBLIC_KEY_FILE=/path/to/id_rsa-csm.pub ncn# PRIVATE_KEY_FILE=/path/to/id_rsa-csm   Provide the custom keys by script or manually.\nThere are two options for providing the keys.\n  Provide custom SSH keys by script.\nThe replace_ssh_keys.sh script can be used to replace the keys from files.\n The docs-csm RPM must be installed in order to use this script. See Check for Latest Documentation\n ncn# /usr/share/doc/csm/scripts/operations/configuration/replace_ssh_keys.sh \\  --public-key-file \u0026#34;${PUBLIC_KEY_FILE}\u0026#34; --private-key-file \u0026#34;${PRIVATE_KEY_FILE}\u0026#34;   Manually provide custom SSH keys\nThe keys stored in Kubernetes can be updated directly.\n  Replace the private key half:\nncn# KEY64=$(cat \u0026#34;${PRIVATE_KEY_FILE}\u0026#34; | base64) \u0026amp;\u0026amp; kubectl get secret -n services csm-private-key -o json | \\  jq --arg value \u0026#34;$KEY64\u0026#34; \u0026#39;.data[\u0026#34;value\u0026#34;]=$value\u0026#39; | kubectl apply -f - \u0026amp;\u0026amp; unset KEY64   Replace the public key half:\nncn# kubectl delete configmap -n services csm-public-key \u0026amp;\u0026amp; cat \u0026#34;${PUBLIC_KEY_FILE}\u0026#34; | base64 \u0026gt; ./value \u0026amp;\u0026amp; kubectl create configmap --from-file value csm-public-key --namespace services \u0026amp;\u0026amp; rm ./value       Passwordless SSH with the provided keys will be set up once NCN personalization runs on the NCNs.\nNOTE: This keypair may be the same keypair used for the NCN root user, but it is not required to be the same. Either option is valid.\nProceed Configure the root password and SSH keys in Vault.\nOption 3: Disable CSM-provided passwordless SSH Local site security requirements may preclude use of passwordless SSH access between management nodes. A variable has been added to the associated Ansible roles that allows disabling of passwordless SSH setup to any or all nodes. From the cloned csm-config-management repository directory:\nncn# grep csm_passwordless_ssh_enabled roles/trust-csm-ssh-keys/defaults/main.yaml Example output:\ncsm_passwordless_ssh_enabled: \u0026#39;false\u0026#39; This variable can be overwritten using either a host-specific setting or global to affect all nodes where the playbook is run. See Customize Configuration Values for more detailed information. Do not modify the value in the roles/trust-csm-ssh-keys/defaults/main.yaml file.\nPublished roles within product configuration repositories can contain more comprehensive information regarding these role-specific flags. Reference any role-specific associated Readme.md documents for additional information, because role documentation is updated more frequently as changes are introduced.\nConsult the manual for each product in order to change the default configuration by referring to the HPE Cray EX System Software Getting Started Guide (S-8000) 22.07 on the HPE Customer Support Center. Similar configuration values for disabling the role will be required in these product-specific configuration repositories.\nModifying Ansible plays in a configuration repository will require a new commit and subsequent update of the configuration layer associated with the product.\n NOTE: CFS itself does not use the CSM-provided (or user-supplied) SSH keys to make connections between nodes. CFS will continue to function if passwordless SSH is disabled between CSM and other product environments.\n Proceed Configure the root password and SSH keys in Vault.\nRestore CSM-provided SSH keys  Use this procedure if switching from custom keys to the default CSM SSH keys only; otherwise it should be skipped.\n In order to restore the default CSM keys, there are two options:\n  Restore by script.\n The docs-csm RPM must be installed in order to use this script. See Check for Latest Documentation\n ncn# /usr/share/doc/csm/scripts/operations/configuration/restore_ssh_keys.sh   Restore manually.\nThe keys can be deleted from Kubernetes directly. The csm-ssh-keys Kubernetes deployment provided by CSM periodically checks the ConfigMap and secret containing the key information. If these entries do not exist, it will recreate them from the default CSM keys. Therefore, in order to manually restore the keys, delete the associated ConfigMap and secret. The default CSM-provided keys will be republished.\n  Delete the csm-private-key Kubernetes secret.\nncn# kubectl delete secret -n services csm-private-key   Delete the csm-public-key Kubernetes ConfigMap.\nncn# kubectl delete configmap -n services csm-public-key     2. Configure the root password and SSH keys in Vault The root user password and SSH keys are managed on NCNs by using the csm.password and csm.ssh_keys Ansible roles, respectively, located in the CSM configuration management repository. root user passwords and SSH keys are set and managed in Vault.\nThere are two options for setting the root password and SSH keys in Vault: automated default or manual.\nAfter these have been set in Vault, they will automatically be applied to NCNs during NCN personalization. For more information on how to configure and run NCN personalization, see the Perform NCN personalization procedure later in this page.\nOption 1: Automated default The automated default method uses the write_root_secrets_to_vault.py script to read in the current root user password and SSH keys from the NCN where it is run, and write those to Vault. All of the NCNs are booted from images which already had their root passwords and SSH keys customized during the Deploy Management Nodes procedure of the CSM install. In most cases, these are the same password and keys that should be written to Vault, and this script provides an easy way to do that.\nSpecifically, the write_root_secrets_to_vault.py script reads the following from the NCN where it is run:\n The root user password hash from the /etc/shadows file. The private SSH key from /root/.ssh/id_rsa. The public SSH key from /root/.ssh/id_rsa.pub.  This script can be run on any NCN which is configured to access the Kubernetes cluster.\n The docs-csm RPM must be installed in order to use this script. See Check for Latest Documentation\n Run the script with the following command:\nncn# /usr/share/doc/csm/scripts/operations/configuration/write_root_secrets_to_vault.py A successful execution will exit with return code 0 and will have output similar to the following:\nReading in file \u0026#39;/root/.ssh/id_rsa\u0026#39; Reading in file \u0026#39;/root/.ssh/id_rsa.pub\u0026#39; Reading in file \u0026#39;/etc/shadow\u0026#39; Found root user line in /etc/shadow Initializing Kubernetes client Getting Vault token from vault/cray-vault-unseal-keys Kubernetes secret Examining Kubernetes cray-vault service to determine URL for Vault API endpoint of secret/csm/users/root Writing SSH keys and root password hash to secret/csm/users/root in Vault Making POST request to http://10.18.232.40:8200/v1/secret/csm/users/root Response status code = 204 Read back secrets from Vault to verify that the values were correctly saved Making GET request to http://10.18.232.40:8200/v1/secret/csm/users/root Response status code = 200 Validating that Vault contents match what was written to it All secrets successfully written to Vault SUCCESS Proceed to Perform NCN personalization.\nOption 2: Manual  NOTE: Information on writing the root user password and the SSH keys to Vault is documented in two separate procedures. However, if both the password and the SSH keys are to be stored in Vault (the standard case), then the two procedures must be combined. Specifically, only a single write command must be made to Vault, containing both the password and the SSH keys. If multiple write commands are performed, only the information from the final command will persist.\n Set the root user password and SSH keys in Vault by combining the following two procedures:\n The Configure Root Password in Vault procedure in Update NCN User Passwords. The Configure Root SSH Keys in Vault procedure in Update NCN User SSH Keys.  Proceed to Perform NCN personalization.\n3. Perform NCN personalization After completing the previous procedures, apply the configuration to the NCNs by running NCN personalization with CFS. This can be accomplished by running the apply_csm_configuration.sh script, or by running the steps manually.\nOption 1: Automatically apply CSM configuration  The docs-csm RPM must be installed in order to use this script. See Check for Latest Documentation\n By default the script will select the latest available CSM release. However, for clarity providing the CSM release version using the --csm-release parameter is recommended.\nncn# /usr/share/doc/csm/scripts/operations/configuration/apply_csm_configuration.sh --csm-release \u0026lt;version e.g. 1.0.11\u0026gt; Automatic CSM configuration steps By default, the script will perform the following steps:\n Finds the latest installed release version of the CSM product stream. Finds the CSM configuration version associated with the given release. Finds the latest commit on the release branch of the csm-config-management repository. Creates or updates the ncn-personalization.json configuration file. Finds all nodes in HSM with the Management role. Disables configuration for all NCNs. Updates the ncn-personalization configuration in CFS from the ncn-personalization.json file. Enables configuration for all NCN nodes, and sets their desired configuration to ncn-personalization. Monitors CFS until all NCN nodes have successfully completed or failed configuration.  Automatic CSM configuration overrides The script also supports several flags to override these behaviors:\n  --csm-release: Overrides the version of the CSM release that is used. Defaults to the latest version. Available versions can be found in the cray-product-catalog.\nncn-m001# kubectl -n services get cm cray-product-catalog   --csm-config-version: Overrides the version of the CSM configuration. This corresponds to the version of a branch starting with cray/csm/ in the csm repository in VCS.\n  --git-commit: Overrides the Git commit cloned for the configuration content. Defaults to the latest commit on the csm-release branch.\n  --git-clone-url: Overrides the source of the configuration content. Defaults to https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git.\n  --ncn-config-file: Sets a file other than ncn-personalization.json to be used for the configuration.\n  --xnames: A comma-separated list of component names (xnames) to deploy to. Defaults to all Management nodes in HSM.\n  --clear-state: Clears existing state from components to ensure that CFS runs. This can be used if configuration needs to be re-run on successful nodes with no change to the Git content since the previous run; for example, if the SSH keys have changed.\n  Option 2: Manually apply CSM configuration In order to manually run NCN personalization, first gather the following information:\n HTTP clone URL for the configuration repository in VCS. Path to the Ansible play to run in the repository. Git commit ID in the repository for CFS to pull and run on the nodes.     Field Value Description     cloneUrl https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git CSM configuration repository   commit Example: 5081c1ecea56002df41218ee39f6030c3eebdf27 CSM configuration commit hash   name Example: csm-1.9.21 CSM configuration layer name   playbook site.yml Default site-wide Ansible playbook for CSM      Retrieve the commit in the repository to use for configuration. If changes have been made to the default branch that was imported during a CSM installation or upgrade, use the commit containing the changes.\n  If no changes have been made, then the latest commit on the default branch for this version of CSM should be used. Find the commit in the cray-product-catalog for the current version of CSM. For example:\nncn# kubectl -n services get cm cray-product-catalog -o jsonpath=\u0026#39;{.data.csm}\u0026#39; Look for something similar to the following in the output:\n1.2.0: configuration: clone_url: https://vcs.cmn.SYSTEM_DOMAIN_NAME/vcs/cray/csm-config-management.git commit: 43ecfa8236bed625b54325ebb70916f55884b3a4 import_branch: cray/csm/1.9.24 import_date: 2021-07-28 03:26:01.869501 ssh_url: git@vcs.cmn.SYSTEM_DOMAIN_NAME:cray/csm-config-management.git The commit will be different for each system and version of CSM. For this example, it is 43ecfa8236bed625b54325ebb70916f55884b3a4.\n  Craft a new configuration layer entry for the new CSM:\n{ \u0026#34;name\u0026#34;: \u0026#34;csm-\u0026lt;version\u0026gt;\u0026#34;, \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;site.yml\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;\u0026lt;retrieved git commit ID\u0026gt;\u0026#34; }   (Install Only) Follow the procedure in Perform NCN Personalization, adding a CSM configuration layer to the NCN personalization using the JSON from step 3.\n  (Upgrade Only) Follow the procedure in Perform NCN Personalization, replacing the existing CSM configuration layer to the NCN personalization using the JSON from step 3.\n   NOTE: The CSM configuration layer MUST be the first layer in the NCN personalization CFS configuration.\n "
},
{
	"uri": "/docs-csm/en-12/operations/csm_product_management/configure_csm_packages_with_cfs/",
	"title": "Configure Packages With CFS",
	"tags": [],
	"description": "",
	"content": "Configure CSM packages with CFS Note: This section applies only to the 1.2.6 CSM release. Earlier versions of 1.2 do not include this playbook.\nCSM includes a playbook that should be applied to Compute and Application node images. The csm_packages.yml playbook installs the packages for both the CFS and BOS reporters. These packages are necessary for CFS and BOS to run, so a configuration layer containing the playbook must be included in the image customization for any nodes that are expected to be managed with CFS and BOS.\nSetting up the CSM configuration layer To setup the compute configuration layer, first gather the following information:\n HTTP clone URL for the configuration repository in VCS. Path to the Ansible play to run in the repository. Commit ID in the repository for CFS to pull and run on the nodes.     Field Value Description     cloneUrl https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git CSM configuration repository   commit Example: 5081c1ecea56002df41218ee39f6030c3eebdf27 CSM configuration commit hash   name Example: csm-\u0026lt;version\u0026gt; CSM configuration layer name   playbook compute_nodes.yml Default Ansible playbook for CSM configuration of compute nodes      Retrieve the commit in the repository to use for configuration.\n  If changes have been made to the default branch that was imported during a CSM installation or upgrade, use the commit containing the changes.\n  If no changes have been made, the latest commit on the default branch for this version of CSM should be used. Find the commit in the cray-product-catalog for the current version of CSM. For example:\nncn-mw# kubectl -n services get cm cray-product-catalog -o jsonpath=\u0026#39;{.data.csm}\u0026#39; Part of the output will be a section resembling the following:\n1.2.0: configuration: clone_url: https://vcs.cmn.SYSTEM_DOMAIN_NAME/vcs/cray/csm-config-management.git commit: 43ecfa8236bed625b54325ebb70916f55884b3a4 import_branch: cray/csm/1.9.24 import_date: 2021-07-28 03:26:01.869501 ssh_url: git@vcs.cmn.SYSTEM_DOMAIN_NAME:cray/csm-config-management.git The commit will be different for each system and version of CSM. In the above example it is 43ecfa8236bed625b54325ebb70916f55884b3a4.\n    Craft a new configuration layer entry for CSM using the procedure in Update a CFS Configuration:\n  The following is an example entry for the JSON configuration file:\n{ \u0026#34;name\u0026#34;: \u0026#34;csm-\u0026lt;version\u0026gt;\u0026#34;, \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/csm-config-management.git\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;csm_packages.yml\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;\u0026lt;retrieved git commit\u0026gt;\u0026#34; } "
},
{
	"uri": "/docs-csm/en-12/operations/csm_product_management/perform_ncn_personalization/",
	"title": "Perform NCN Personalization",
	"tags": [],
	"description": "",
	"content": "Perform NCN Personalization NCN personalization is the process of applying product-specific configuration to NCNs post-boot.\nPrerequisites Prior to running this procedure, gather the following information required by CFS to create a configuration layer:\n HTTP clone URL for the configuration repository in VCS Path to the Ansible play to run in the repository Commit ID in the repository for CFS to pull and run on the nodes  Products may supply multiple plays to run, in which case multiple configuration layers must be created. Consult the manual for each product to configure them on NCNs by referring to the HPE Cray EX System Software Getting Started Guide (S-8000) 22.07 on the HPE Customer Support Center.\nProcedure: Perform NCN Personalization Determine if NCN Personalization CFS Configuration Exists If upgrading a product to a new version, an NCN personalization configuration in CFS should already exist. By default, the configuration is named ncn-personalization. If the default name is not used, substitute that name in the steps below.\n  Determine if a configuration already exists.\nncn# cray cfs configurations describe ncn-personalization --format json \u0026gt; ncn-personalization.json   If the configuration exists, the ncn-personalization.json file will be created and populated with previously defined configuration layers. If it does not exist, the file will be created empty and the command will respond with an error. This error can be ignored.\nAdd Layer(s) to the CFS Configuration CFS executes configuration layers in order. Refer to the HPE Cray EX System Software Getting Started Guide (S-8000) 22.07 on the HPE Customer Support Center to determine if the configuration layer requires special placement in the layer list.\n NOTE: The CSM configuration layer MUST be the first layer in the NCN personalization CFS configuration.\n  Add a configuration layer to the ncn-personalization.json file. Follow the appropriate step based on if an NCN personalization CFS configuration exists:   If the ncn-personalization.json file is empty, overwrite the file with the configuration layer(s) information gathered from the product that is configuring the NCNs. Use the sample file with a single layer as a template.\n  If a CFS configuration exists with one or more layers, add (or replace) the corresponding layer entry/entries with the configuration layer information gathered for this specific product. For example:\nncn# cat ncn-personalization.json Example configuration:\n{ \u0026#34;layers\u0026#34;: [ # ... { \u0026#34;name\u0026#34;: \u0026#34;\u0026lt;product-release-etc\u0026gt;\u0026#34;, \u0026#34;cloneUrl\u0026#34;: \u0026#34;https://api-gw-service-nmn.local/vcs/cray/\u0026lt;product\u0026gt;-config-management.git\u0026#34;, \u0026#34;playbook\u0026#34;: \u0026#34;site.yml\u0026#34;, \u0026#34;commit\u0026#34;: \u0026#34;\u0026lt;git commit\u0026gt;\u0026#34; }, # ... ] }     Create/Update the NCN Personalization CFS Configuration Layer   Upload the configuration file to CFS to update or create the ncn-personalization CFS configuration.\nncn# cray cfs configurations update ncn-personalization --file ncn-personalization.json --format json Example output:\n{ \u0026#34;lastUpdated\u0026#34;: \u0026#34;2021-07-28T03:26:01Z\u0026#34;, \u0026#34;layers\u0026#34;: [ { ... layer information here ... }, ], \u0026#34;name\u0026#34;: \u0026#34;ncn-personalization\u0026#34; }   Set the Desired Configuration on NCNs   Update the desired configuration for all NCNs.\nncn# for xname in $(cray hsm state components list --role Management --type node --format json | jq -r .Components[].ID) do cray cfs components update --desired-config ncn-personalization --enabled true --format json $xname done After this command is issued, the CFS Batcher service will dispatch a CFS session to configure the NCNs. Since the NCN is now managed by CFS by setting a desired configuration, the same will happen every time the NCN boots.\n  Query the status of the NCN Personalization process. The status will be pending while the node is being configured by CFS, and will change to configured when the configuration has completed.\nncn# for xname in $(cray hsm state components list \\  --role Management --type node \\  --format json | jq -r .Components[].ID) do cray cfs components describe --format json $xname | jq -r \u0026#39; .id+\u0026#34; status=\u0026#34;+.configurationStatus\u0026#39; done Example output:\nx3000c0s17b0n0 status=configured x3000c0s19b0n0 status=pending x3000c0s21b0n0 status=configured [...] The NCN personalization step is complete and the NCNs are now configured as specified in the ncn-personalization configuration layers when each node\u0026rsquo;s status is configured.\nSee Configuration Management of System Components for more information on setting desired configuration on specific nodes using CFS.\n  Procedure: Re-Run NCN Personalization If no changes have been made to the configuration layers (such as a new layer, different playbook, or new commit made), but NCN personalization needs to be run again, CFS can re-run NCN personalization on specific nodes.\nRe-run the configuration for an NCN by clearing the state of the node. Clearing the node state will cause CFS to reconfigure the node, so long as the desired configuration was set previously.\n  Clear the state and error count of the node using CFS.\nReplace the \u0026lt;XNAME\u0026gt; string in the following command with the xname of the node being reconfigured.\nncn# cray cfs components update --error-count 0 --state \u0026#39;[]\u0026#39; --format json \u0026lt;XNAME\u0026gt;   (Optional) To re-run NCN personalization on all NCNs at once, use the following loop:\nncn# for xname in $(cray hsm state components list \\  --role Management --type node \\  --format json | jq -r .Components[].ID) do cray cfs components update --error-count 0 --state \u0026#39;[]\u0026#39; --format json $xname done   "
},
{
	"uri": "/docs-csm/en-12/operations/csm_product_management/post_install_customizations/",
	"title": "Post-install Customizations",
	"tags": [],
	"description": "",
	"content": "Post-Install Customizations Post-install customizations may be needed as systems scale. These customizations also need to persist across future installs or upgrades. Not all resources can be customized post-install; common scenarios are documented in the following sections.\nThe following is a guide for determining where issues may exist, how to adjust the resources, and how to ensure the changes will persist. Different values may be be needed for systems as they scale.\nkubectl events OOMKilled Check to see if there are any recent out of memory events.\n  Check kubectl events to see if there are any recent out of memory events.\nncn# kubectl get event -A | grep OOM   Log in to Grafana.\nhttps://grafana.cmn.SYSTEM_DOMAIN_NAME/   Search for the \u0026ldquo;Kubernetes / Compute Resources / Pod\u0026rdquo; dashboard to view the memory utilization graphs over time for any pod that has been OOMKilled.\n  Prometheus CPUThrottlingHigh alerts Check Prometheus for recent CPUThrottlingHigh alerts.\n  Log in to Prometheus.\nhttps://prometheus.cmn.SYSTEM_DOMAIN_NAME/   Select the Alert tab.\n  Scroll down to the alert for CPUThrottlingHigh.\n    Log in to Grafana.\nhttps://grafana.cmn.SYSTEM_DOMAIN_NAME/   Search for the \u0026ldquo;Kubernetes / Compute Resources / Pod\u0026rdquo; dashboard to view the throttling graphs over time for any pod that is alerting.\n  Grafana \u0026ldquo;Kubernetes / Compute Resources / Pod\u0026rdquo; dashboard Use Grafana to investigate and analyze CPU throttling and memory usage.\n  Log in to Grafana.\nhttps://grafana.cmn.SYSTEM_DOMAIN_NAME/   Search for the \u0026ldquo;Kubernetes / Compute Resources / Pod\u0026rdquo; dashboard.\n  Select the datasource, namespace, and pod based on the pod being examined.\nFor example:\ndatasource: default namespace: sysmgmt-health pod: prometheus-cray-sysmgmt-health-promet-prometheus-0   CPU throttling   Select the CPU Throttling drop-down to see the CPU Throttling graph for the pod during the selected time (from the top right).\n  Select the container (from the legends under the x axis).\n  Review the graph and adjust the resources.limits.cpu value as needed.\nThe presence of CPU throttling does not always indicate a problem, but if a service is being slow or experiencing latency issues, adjusting resources.limits.cpu may be beneficial.\nFor example:\n If the pod is being throttled at or near 100% for any period of time, then adjustments are likely needed. If the service\u0026rsquo;s response time is critical, then adjusting the pod\u0026rsquo;s resources to greatly reduce or eliminate any CPU throttling may be required.   NOTE: The resources.requests.cpu values are used by the Kubernetes scheduler to decide which node to place the pod on and do not impact CPU throttling. The value of resources.limits.cpu can never be lower than the value of resources.requests.cpu.\n   Memory usage   Select the Memory Usage drop-down to see the memory usage graph for the pod during the selected time (from the top right).\n  Select the container (from the legends under the x axis).\n  Determine the steady state memory usage by looking at the memory usage graph for the container.\nThis is where the resources.requests.memory value should be minimally set. But more importantly, determine the spike usage for the container and set the resources.limits.memory value based on the spike values with some additional headroom.\n  Common customization scenarios  Prerequisites Prometheus pod is OOMKilled or CPU throttled Postgres pods are OOMKilled or CPU throttled Scale cray-bss service Postgres PVC resize  Prerequisites In order to apply post-install customizations to a system, the affected Helm chart must exist on the system so that the same chart version can be redeployed with the desired customizations.\nThis example unpacks the the csm-1.0.0 tarball under /root and lists the Helm charts that are now on the system. Set PATH_TO_RELEASE to the release directory where the helm directory exists. PATH_TO_RELEASE will be used below when deploying a customization.\nThese unpacked files can be safely removed after the customizations are deployed through loftsman ship in the examples below.\n## This example assumes the csm-1.0.0 release is currently running and the csm-1.0.0.tar.gz has been pulled down under /root ncn# cd /root ncn# tar -xzf csm-1.0.0.tar.gz ncn# rm csm-1.0.0.tar.gz ncn# PATH_TO_RELEASE=/root/csm-1.0.0 ncn# ls $PATH_TO_RELEASE/helm Prometheus pod is OOMKilled or CPU throttled Update resources associated with Prometheus in the sysmgmt-health namespace. This example is based on what was needed for a system with 4000 compute nodes. Trial and error may be needed to determine what is best for a given system at scale.\n  Get the current cached customizations.\nncn# kubectl get secrets -n loftsman site-init -o jsonpath=\u0026#39;{.data.customizations\\.yaml}\u0026#39; | base64 -d \u0026gt; customizations.yaml   Get the current cached platform manifest.\nncn# kubectl get cm -n loftsman loftsman-platform -o jsonpath=\u0026#39;{.data.manifest\\.yaml}\u0026#39; \u0026gt; platform.yaml   Edit the customizations as desired by adding or updating spec.kubernetes.services.cray-sysmgmt-health.prometheus-operator.prometheus.prometheusSpec.resources.\nncn# yq write -i customizations.yaml \u0026#39;spec.kubernetes.services.cray-sysmgmt-health.prometheus-operator.prometheus.prometheusSpec.resources.requests.cpu\u0026#39; --style=double \u0026#39;2\u0026#39; ncn# yq write -i customizations.yaml \u0026#39;spec.kubernetes.services.cray-sysmgmt-health.prometheus-operator.prometheus.prometheusSpec.resources.requests.memory\u0026#39; \u0026#39;15Gi\u0026#39; ncn# yq write -i customizations.yaml \u0026#39;spec.kubernetes.services.cray-sysmgmt-health.prometheus-operator.prometheus.prometheusSpec.resources.limits.cpu\u0026#39; --style=double \u0026#39;6\u0026#39; ncn# yq write -i customizations.yaml \u0026#39;spec.kubernetes.services.cray-sysmgmt-health.prometheus-operator.prometheus.prometheusSpec.resources.limits.memory\u0026#39; \u0026#39;30Gi\u0026#39;   Check that the customization file has been updated.\nncn# yq read customizations.yaml \u0026#39;spec.kubernetes.services.cray-sysmgmt-health.prometheus-operator.prometheus.prometheusSpec.resources\u0026#39; Example output:\nrequests: cpu: \u0026#34;3\u0026#34; memory: 15Gi limits: cpu: \u0026#34;6\u0026#34; memory: 30Gi   Edit the platform.yaml to only include the cray-sysmgmt-health chart and all its current data.\nThe resources specified above will be updated in the next step. The version may differ, because this is an example.\napiVersion: manifests/v1beta1 metadata: name: platform spec: charts: - name: cray-sysmgmt-health namespace: sysmgmt-health values: . . . version: 0.12.0   Generate the manifest that will be used to redeploy the chart with the modified resources.\nncn# manifestgen -c customizations.yaml -i platform.yaml -o manifest.yaml   Check that the manifest file contains the desired resource settings.\nncn# yq read manifest.yaml \u0026#39;spec.charts.(name==cray-sysmgmt-health).values.prometheus-operator.prometheus.prometheusSpec.resources\u0026#39; Example output:\nrequests: cpu: \u0026#34;3\u0026#34; memory: 15Gi limits: cpu: \u0026#34;6\u0026#34; memory: 30Gi   Redeploy the same chart version but with the desired resource settings.\nncn# loftsman ship charts-path ${PATH_TO_RELEASE}/helm --manifest-path ${PWD}/manifest.yaml   Verify that the pod restarts and that the desired resources have been applied.\n  Watch the prometheus-cray-sysmgmt-health-promet-prometheus-0 pod restart.\nncn# watch \u0026#34;kubectl get pods -n sysmgmt-health -l prometheus=cray-sysmgmt-health-promet-prometheus\u0026#34; It may take about 10 minutes for the prometheus-cray-sysmgmt-health-promet-prometheus-0 pod to terminate. It can be forced deleted if it remains in the terminating state:\nncn# kubectl delete pod prometheus-cray-sysmgmt-health-promet-prometheus-0 --force --grace-period=0 -n sysmgmt-health   Verify that the resource changes are in place.\nncn# kubectl get pod prometheus-cray-sysmgmt-health-promet-prometheus-0 -n sysmgmt-health -o json | jq -r \u0026#39;.spec.containers[] | select(.name == \u0026#34;prometheus\u0026#34;).resources\u0026#39;     This step is critical. Store the modified customizations.yaml file in the site-init repository in the customer-managed location.\nIf this is not done, these changes will not persist in future installs or upgrades.\nncn# kubectl delete secret -n loftsman site-init ncn# kubectl create secret -n loftsman generic site-init --from-file=customizations.yaml   Postgres pods are OOMKilled or CPU throttled Update resources associated with spire-postgres in the spire namespace. This example is based on what was needed for a system with 4000 compute nodes. Trial and error may be needed to determine what is best for a given system at scale.\nA similar flow can be used to update the resources for cray-sls-postgres, cray-smd-postgres, or gitea-vcs-postgres. Refer to the note at the end of this section for more details.\n  Get the current cached customizations.\nncn# kubectl get secrets -n loftsman site-init -o jsonpath=\u0026#39;{.data.customizations\\.yaml}\u0026#39; | base64 -d \u0026gt; customizations.yaml   Get the current cached sysmgmt manifest.\nncn# kubectl get cm -n loftsman loftsman-sysmgmt -o jsonpath=\u0026#39;{.data.manifest\\.yaml}\u0026#39; \u0026gt; sysmgmt.yaml   Edit the customizations as desired by adding or updating spec.kubernetes.services.spire.cray-service.sqlCluster.resources.\nncn# yq write -i customizations.yaml \u0026#39;spec.kubernetes.services.spire.cray-service.sqlCluster.resources.requests.cpu\u0026#39; --style=double \u0026#39;4\u0026#39; ncn# yq write -i customizations.yaml \u0026#39;spec.kubernetes.services.spire.cray-service.sqlCluster.resources.requests.memory\u0026#39; \u0026#39;4Gi\u0026#39; ncn# yq write -i customizations.yaml \u0026#39;spec.kubernetes.services.spire.cray-service.sqlCluster.resources.limits.cpu\u0026#39; --style=double \u0026#39;8\u0026#39; ncn# yq write -i customizations.yaml \u0026#39;spec.kubernetes.services.spire.cray-service.sqlCluster.resources.limits.memory\u0026#39; \u0026#39;8Gi\u0026#39;   Check that the customization file has been updated.\nncn# yq read customizations.yaml \u0026#39;spec.kubernetes.services.spire.cray-service.sqlCluster.resources\u0026#39; Example output:\nrequests: cpu: \u0026#34;4\u0026#34; memory: 4Gi limits: cpu: \u0026#34;8\u0026#34; memory: 8Gi   Edit the sysmgmt.yaml to only include the spire chart and all its current data.\nThe resources specified above will be updated in the next step. The version may differ, because this is an example.\napiVersion: manifests/v1beta1 metadata: name: platform spec: charts: - name: spire namespace: spire values: . . . version: 0.9.1   Generate the manifest that will be used to redeploy the chart with the modified resources.\nncn# manifestgen -c customizations.yaml -i sysmgmt.yaml -o manifest.yaml   Check that the manifest file contains the desired resource settings.\nncn# yq read manifest.yaml \u0026#39;spec.charts.(name==spire).values.cray-service.sqlCluster.resources\u0026#39; Example output:\nrequests: cpu: \u0026#34;4\u0026#34; memory: 4Gi limits: cpu: \u0026#34;8\u0026#34; memory: 8Gi   Redeploy the same chart version but with the desired resource settings.\nncn# loftsman ship charts-path ${PATH_TO_RELEASE}/helm --manifest-path ${PWD}/manifest.yaml   Verify the pods restart and that the desired resources have been applied.\n  Watch the pod restart.\nncn# watch \u0026#34;kubectl get pods -n spire -l application=spilo,cluster-name=spire-postgres\u0026#34;   Verify that the desired resources have been applied.\nncn# kubectl get pod spire-postgres-0 -n spire -o json | jq -r \u0026#39;.spec.containers[] | select(.name == \u0026#34;postgres\u0026#34;).resources\u0026#39; Example output:\n{ \u0026#34;limits\u0026#34;: { \u0026#34;cpu\u0026#34;: \u0026#34;8\u0026#34;, \u0026#34;memory\u0026#34;: \u0026#34;8Gi\u0026#34; }, \u0026#34;requests\u0026#34;: { \u0026#34;cpu\u0026#34;: \u0026#34;4\u0026#34;, \u0026#34;memory\u0026#34;: \u0026#34;4Gi\u0026#34; } }     This step is critical. Store the modified customizations.yaml file in the site-init repository in the customer-managed location.\nIf this is not done, these changes will not persist in future installs or upgrades.\nncn# kubectl delete secret -n loftsman site-init ncn# kubectl create secret -n loftsman generic site-init --from-file=customizations.yaml   IMPORTANT: If cray-sls-postgres, cray-smd-postgres, or gitea-vcs-postgres resources need to be adjusted, the same procedure as above can be used with the following changes:\n  cray-sls-postgres\n Get the current cached manifest ConfigMap from: loftsman-core-services Resource path: spec.kubernetes.services.cray-hms-sls.cray-service.sqlCluster.resources    cray-smd-postgres\n Get the current cached manifest ConfigMap from: loftsman-core-services Resource path: spec.kubernetes.services.cray-hms-smd.cray-service.sqlCluster.resources    gitea-vcs-postgres\n Get the current cached manifest ConfigMap from: loftsman-sysmgmt Resource path: spec.kubernetes.services.gitea.cray-service.sqlCluster.resources    Scale cray-bss service Scale the replica count associated with the cray-bss service in the services namespace. This example is based on what was needed for a system with 4000 compute nodes. Trial and error may be needed to determine what is best for a given system at scale.\n  Get the current cached customizations.\nncn# kubectl get secrets -n loftsman site-init -o jsonpath=\u0026#39;{.data.customizations\\.yaml}\u0026#39; | base64 -d \u0026gt; customizations.yaml   Get the current cached sysmgmt manifest.\nncn# kubectl get cm -n loftsman loftsman-sysmgmt -o jsonpath=\u0026#39;{.data.manifest\\.yaml}\u0026#39; \u0026gt; sysmgmt.yaml   Edit the customizations as desired by adding or updating spec.kubernetes.services.cray-hms-bss.cray-service.replicaCount.\nncn# yq write -i customizations.yaml \u0026#39;spec.kubernetes.services.cray-hms-bss.cray-service.replicaCount\u0026#39; \u0026#39;5\u0026#39;   Check that the customization file has been updated.\nncn# yq read customizations.yaml \u0026#39;spec.kubernetes.services.cray-hms-bss.cray-service.replicaCount\u0026#39; 5   Edit the sysmgmt.yaml to only include the cray-hms-bss chart and all its current data.\nThe replicaCount specified above will be updated in the next step. The version may differ, because this is an example.\napiVersion: manifests/v1beta1 metadata: name: sysmgmt spec: charts: - name: cray-hms-bss namespace: services values: . . . version: 1.5.8   Generate the manifest that will be used to redeploy the chart with the modified resources.\nncn# manifestgen -c customizations.yaml -i sysmgmt.yaml -o manifest.yaml   Check that the manifest file contains the desired resource settings.\nncn# yq read manifest.yaml \u0026#39;spec.charts.(name==cray-hms-bss).values.cray-service.replicaCount\u0026#39; 5   Redeploy the same chart version but with the desired resource settings.\nncn# loftsman ship charts-path ${PATH_TO_RELEASE}/helm --manifest-path ${PWD}/manifest.yaml   Verify the cray-bss pods scale.\n  Watch the cray-bss pods scale to 5, with each pod reaching a 2/2 ready state.\nncn# watch \u0026#34;kubectl get pods -l app.kubernetes.io/instance=cray-hms-bss -n services\u0026#34; Example output:\nNAME READY STATUS RESTARTS AGE cray-bss-fccbc9f7d-7jw2q 2/2 Running 0 82m cray-bss-fccbc9f7d-l524g 2/2 Running 0 93s cray-bss-fccbc9f7d-qwzst 2/2 Running 0 93s cray-bss-fccbc9f7d-sw48b 2/2 Running 0 82m cray-bss-fccbc9f7d-xr26l 2/2 Running 0 82m   Verify that the replicas change is present in the Kubernetes cray-bss deployment.\nncn# kubectl get deployment cray-bss -n services -o json | jq -r \u0026#39;.spec.replicas\u0026#39; In this example, 5 will be the returned value.\n    This step is critical. Store the modified customizations.yaml in the site-init repository in the customer-managed location.\nIf this is not done, these changes will not persist in future installs or upgrades.\nncn# kubectl delete secret -n loftsman site-init ncn# kubectl create secret -n loftsman generic site-init --from-file=customizations.yaml   Postgres PVC resize Increase the PVC volume size associated with cray-smd-postgres cluster in the services namespace. This example is based on what was needed for a system with 4000 compute nodes. Trial and error may be needed to determine what is best for a given system at scale. The PVC size can only ever be increased.\nA similar flow can be used to update the volume size for cray-sls-postgres, gitea-vcs-postgres, or spire-postgres. Refer to the note at the end of this section for more details.\n  Get the current cached customizations.\nncn# kubectl get secrets -n loftsman site-init -o jsonpath=\u0026#39;{.data.customizations\\.yaml}\u0026#39; | base64 -d \u0026gt; customizations.yaml   Get the current cached core-services manifest.\nncn# kubectl get cm -n loftsman loftsman-core-services -o jsonpath=\u0026#39;{.data.manifest\\.yaml}\u0026#39; \u0026gt; core-services.yaml   Edit the customizations as desired by adding or updating spec.kubernetes.services.cray-hms-smd.cray-service.sqlCluster.volumeSize.\nncn# yq write -i customizations.yaml \u0026#39;spec.kubernetes.services.cray-hms-smd.cray-service.sqlCluster.volumeSize\u0026#39; \u0026#39;100Gi\u0026#39;   Check that the customization file has been updated.\nncn# yq read customizations.yaml \u0026#39;spec.kubernetes.services.cray-hms-smd.cray-service.sqlCluster.volumeSize\u0026#39; 100Gi   Edit the core-services.yaml to only include the cray-hms-smd chart and all its current data.\nThe volumeSize specified above will be updated in the next step. The version may differ, because this is an example.\napiVersion: manifests/v1beta1 metadata: name: core-services spec: charts: - name: cray-hms-smd namespace: service values: . . . version: 1.26.20   Generate the manifest that will be used to redeploy the chart with the modified volume size.\nncn# manifestgen -c customizations.yaml -i core-services.yaml -o manifest.yaml   Check that the manifest file contains the desired volume size setting.\nncn# yq read manifest.yaml \u0026#39;spec.charts.(name==cray-hms-smd).values.cray-service.sqlCluster.volumeSize\u0026#39; 100Gi   Redeploy the same chart version but with the desired volume size setting.\nncn# loftsman ship charts-path ${PATH_TO_RELEASE}/helm --manifest-path ${PWD}/manifest.yaml   Verify that the increased volume size has been applied.\nncn# watch \u0026#34;kubectl get postgresql cray-smd-postgres -n services\u0026#34; Example output:\nNAME TEAM VERSION PODS VOLUME CPU-REQUEST MEMORY-REQUEST AGE STATUS cray-smd-postgres cray-smd 11 3 100Gi 500m 8Gi 45m Running   If the status on the above command is SyncFailed instead of Running, refer to Case 1 in the SyncFailed section of Troubleshoot Postgres Database.\nAt this point the Postgres cluster is healthy, but additional steps are required to complete the resize of the Postgres PVCs.\n  This step is critical. Store the modified customizations.yaml in the site-init repository in the customer-managed location.\nIf this is not done, these changes will not persist in future installs or upgrades.\nncn# kubectl delete secret -n loftsman site-init ncn# kubectl create secret -n loftsman generic site-init --from-file=customizations.yaml   IMPORTANT: If the volume sizes of cray-sls-postgres, gitea-vcs-postgres, or spire-postgres need to be adjusted, the same procedure as above can be used with the following changes:\n  cray-sls-postgres\n Get the current cached manifest ConfigMap from: loftsman-core-services Resource path: spec.kubernetes.services.cray-hms-sls.cray-service.sqlCluster.volumeSize    gitea-vcs-postgres\n Get the current cached manifest ConfigMap from: loftsman-sysmgmt Resource path: spec.kubernetes.services.gitea.cray-service.sqlCluster.volumeSize    spire-postgres\n Get the current cached manifest ConfigMap from: loftsman-sysmgmt Resource path: spec.kubernetes.services.spire.cray-service.sqlCluster.volumeSize    References To make changes that will not persist across installs or upgrades, see the following references. These procedures will also help to verify and eliminate any issues in the short term. As other resource customizations are needed, contact support to request the feature.\n Determine if Pods are Hitting Resource Limits Increase Pod Resource Limits  "
},
{
	"uri": "/docs-csm/en-12/operations/csm_product_management/remove_artifacts_from_product_installations/",
	"title": "Remove Artifacts From Product Installations",
	"tags": [],
	"description": "",
	"content": "Remove Artifacts from Product Installations Remove product artifacts that were imported from various Cray products. These instructions provide guidance for removing Image Management Service (IMS) images, IMS recipes, and Git repositories present in the Cray Product Catalog from the system.\nThe examples in this procedure show how to remove the product artifacts for the Cray System Management (CSM) product.\nWARNING: If individual Cray products have removal procedures, those instructions supersede this procedure.\nProcedure   View the imported artifacts by printing them from the Cray Product Catalog ConfigMap.\nncn-m001# kubectl get cm cray-product-catalog -n services -o json | jq -r .data.csm Example output:\n1.0.0: configuration: clone_url: https://vcs.cmn.SYSTEM_DOMAIN_NAME/vcs/cray/csm-config-management.git commit: 123264ba75c809c0db7742ea83ff57f713bc1562 import_branch: cray/csm/1.4.5 import_date: 2021-03-12 15:12:49.938936 ssh_url: git@vcs.cmn.SYSTEM_DOMAIN_NAME:cray/csm-config-management.git images: cray-shasta-csm-sles15sp1-barebones.x86_64-shasta-1.4: id: 4871cb4a-e055-4131-a228-c0a26f0903cd recipes: cray-shasta-csm-sles15sp1-barebones.x86_64-shasta-1.4: id: 5f5a74e0-108e-4159-9699-47dd2a952205   Remove the imported IMS images using the ID of each image in the images mapping.\nThe example in step 1 includes one image with the id = 4871cb4a-e055-4131-a228-c0a26f0903cd value. Remove the image with the following command:\nncn-m001# cray ims images delete 4871cb4a-e055-4131-a228-c0a26f0903cd   Remove the imported IMS recipes using the ID of each recipe in the recipes mapping.\nThe example in step 1 includes one recipe with the id = 5f5a74e0-108e-4159-9699-47dd2a952205 value. Remove the image with the following command:\nncn-m001# cray ims recipes delete 5f5a74e0-108e-4159-9699-47dd2a952205   Remove the Gitea repositories or branches.\nTo delete a Git branch as specified in the product catalog, follow the external instructions to delete Git remote branches. The branch name is located in the import_branch field.\nIf only one version of the product exists (as in the CSM example), the user can remove the entire repository instead of a single branch. Gitea repositories can be removed via the Gitea web interface or via the Gitea REST API.\nGitea web interface:\n1. Log in to Gitea as the *crayvcs* user. 1. From the dashboard, select the repository to delete based on the name of the repository in the *clone_url* field of the product catalog. 2. Click on \u0026quot;Settings\u0026quot; and scroll to the bottom of the page to the \u0026quot;Danger Zone\u0026quot; section. Follow the instructions to delete the repository.  Gitea REST API:\nRun the following commands on a CSM Kubernetes master or worker node, replacing the name of the repository in the second command.\nncn-m001# VCSPWD=$(kubectl get secret -n services vcs-user-credentials \\ --template={{.data.vcs_password}} | base64 --decode) ncn-m001# curl -X DELETE -u crayvcs:${VCSPWD} \\ https://api-gw-service-nmn.local/vcs/api/v1/repos/cray/{name of repository}   Update the product catalog.\nOnce the images, recipes, and repositories/branches have been removed from the system, update the product catalog to remove the references to them. This is done by editing the cray-product-catalog Kubernetes ConfigMap.\nncn-m001# kubectl edit configmap -n services cray-product-catalog In the editor, delete the entries for the artifacts that were deleted on the system for the specific version of the product. In this example, all artifacts were deleted and only a single product version exists, so the entire entry in the product catalog for the CSM product can be deleted. Save the changes and exit the editor to persist the changes in the ConfigMap.\n  "
},
{
	"uri": "/docs-csm/en-12/operations/csm_product_management/validate_signed_rpms/",
	"title": "Validate Signed Rpms",
	"tags": [],
	"description": "",
	"content": "Validate Signed RPMs The HPE Cray EX system signs RPMs to provide an extra level of security. Use the following procedure to import a key from either My HPE Software Center or a Kubernetes Secret, and then use that key to validate the RPM package signatures on each node type.\nThe RPMs will vary on compute, application, worker, master, and storage nodes. Check each node type to ensure the RPMs are correctly signed.\nProcedure   Retrieve the signing key required to validate the RPMs.\nUse either the My HPE Software Center or Kubernetes Secret method to find the signing key.\n  My HPE Software Center:\nDownload the signing key.\nncn-mw# curl LINK_TO_KEY_IN_My_HPE_Software_Center   Kubernetes Secret:\nFind the key and write it to a file.\nncn-mw# kubectl -n services get secrets hpe-signing-key -o jsonpath=\u0026#39;{.data.gpg-pubkey}\u0026#39; | base64 -d | tee hpe-signing-key.asc Example output:\n-----BEGIN PGP PUBLIC KEY BLOCK----- Version: GnuPG v2.0.22 (GNU/Linux) mQENBFZp0YMBCADNNhdrR/K7jk6iFh/D/ExEumPSdriJwDUlHY70bkEUChLyRACI QfLEmh0dGoUfFu2Uk8M/RgeGPayJUeO3jeJw/y7JJHvZENJwYjquZKTOza7GLXf6 HyCRanHrEeXeyRffhJlXLf6GvCqYVl9nSvxwSX9raotqMznLY5E1JXIqtfHLrVhJ qHQLiKulpEAHL9pOWamwZKeGbL9M/N6O3LINbHqisiC0EIcV6GIFCLSfCFMODO6C PgkJ/ECVLZEjGDFnSTT0mn5+DveqRUid/+YQejcraKlc3xRUF+qlg4ey+uz0kFzC SFUbKY68Pw6W/dFGrEhfau8A0TnMnIQ4qgLPABEBAAG0P0hld2xldHQgUGFja2Fy ZCBFbnRlcnByaXNlIENvbXBhbnkgUlNBLTIwNDgtMzAgPHNpZ25ocEBocGUuY29t PokBPQQTAQIAJwUCVmnRgwIbLwUJEswDAAYLCQgHAwIGFQgCCQoLAxYCAQIeAQIX gAAKCRDU2uHjnaOfRK5XCACRJLoMQ/nBa7Gna/96inbAHoKM6DUbNramBa1XCTeh KiTxA0bPE3kp7y143jpfOiSGAOTcU0RaCOKk6JMnJJMt60nR4UohVG2lLVtLxT0G H75jCu0nuZQJrKlMh04fJ3zHnqVuOduyUstgmMQ0qVg2lwPTV+KZeY5/eNPHzkcK 75pfos/svDRQNN2LX6qzsVWfAkEN/WdnlZJE76exvA9JsVmNtU3h3PKQTT86W4bb 1MdeDMkX9lDwMCEhClxLVU/sUfj10Kb8CO5+TFimmdqgXXY4BJJsE8STowy67t7Q zECkM4UFVpgcXFrapWW7IniC1OP0c4I+11mnHKCN15DFuQINBFZp0YMQCADo0UHN pIORPOLtaVI2W/aBpOWVlO74HZvMlWKOk+isf8pIKOujivncNZeeVPu2MTT7kOZ6 3Iwuj6B/dBz0hFXkqfzww+ibkhV1NWUx8Gk3FnGm6Ye6VZq2MbYHFMjSMbH3gJNd l76n4wOdwzC8TbLSmfIVxRyf+Uo5GhMrFy/+G28m/WO5nmH/AxKZxOp//NUVxE47 p6Dd2Rqg2IgBfQ99gudh75F/s6RHDYtV+87CsyFyKD7nJW54l/7r9jvvwhO0d89T s37j+bv81AEPYtu17uaRCcfF2B6RtPEdDslZ+J0G14TBsjp53ARh43HmH6BwQ3+4 pyB7QYWwN2ybFCqTAAMFCAC+1JtxaR7TEZsRDNy6ViHH+fHENl7+SB8GTQL7BZXB YgFEtsti+NZpkAAiJ+HXZihgcjCrHPejnlj5Su7dSkveRLHKZbVehvIbiM+LxfNv 7CdxfhLUVPkgPEpiCHGpCHjG/bKyKCL48SDPB5ClUtVu7v05dq/yu4AYaWwU1iix uH9dYQWC1J8pkZX/igHdbD/RYnPMuiil41guTNSWgjzxbOnxEVueaYFKnHdFlqz7 JpzJa10Lm9gEcGmzePVbJH0j8/+1ViwqLhbITq7Gv1S+RkNnewjLM9Vu2R/Fvpzh AUAinTEi5bYPtmVtddZQ94cOFLvh+LrETAC7v4zxvW/ciQElBBgBAgAPBQJWadGD AhsMBQkSzAMAAAoJENTa4eOdo59E6kAIAMC60HIPrr7ztUAF1vmuIdgSMDAjD7y0 UOzCm1L9fuHqeXNc/JQkKbqAv0tMjnRtrt1R13N3qy1qBeUTnG0qxwdHR0jsknHW S/1T24x03XioypowQObeh15PTD/TTAiLherzAWRNqqtf2Yh9Dy2zWLo204FQjK// Apw4IbO28hgYWvIbpFsyPG4WED3uJ7uTnkqdRkNWQl3M3J1GhEycgoXe703hllBP j2iOwecHkFHN2GJjAL67IH2amnp0JqrVy6FwN1fL47lOUfe3AgkjBmBUXT+r0y+e L+aILxdSiFNXn3sqpW2jQnT3r+UOCw5QdOYE8QC2VnJcm0p3bJ+OMVQ= =pzE0 -----END PGP PUBLIC KEY BLOCK-----     Verify that HPE is the issuer of the signed packages.\nReplace the PATH-TO-KEY value in the following command with the path to the signing key.\nncn-mw# rpm -qpi PATH-TO-KEY/hpe-signing-key.asc Example output:\nName : gpg-pubkey Version : 9da39f44 Release : 5669d183 Architecture: (none) Install Date: Thu 25 Feb 2021 08:58:19 AM CST Group : Public Keys Size : 0 License : pubkey Signature : (none) Source RPM : (none) Build Date : Thu 10 Dec 2015 01:24:51 PM CST Build Host : localhost Relocations : (not relocatable) Packager : Hewlett Packard Enterprise Company RSA-2048-30 \u0026lt;signhp@hpe.com\u0026gt; Summary : gpg(Hewlett Packard Enterprise Company RSA-2048-30 \u0026lt;signhp@hpe.com\u0026gt;) Description : -----BEGIN PGP PUBLIC KEY BLOCK----- Version: rpm-4.11.3 (NSS-3) mQENBFZp0YMBCADNNhdrR/K7jk6iFh/D/ExEumPSdriJwDUlHY70bkEUChLyRACI QfLEmh0dGoUfFu2Uk8M/RgeGPayJUeO3jeJw/y7JJHvZENJwYjquZKTOza7GLXf6 HyCRanHrEeXeyRffhJlXLf6GvCqYVl9nSvxwSX9raotqMznLY5E1JXIqtfHLrVhJ qHQLiKulpEAHL9pOWamwZKeGbL9M/N6O3LINbHqisiC0EIcV6GIFCLSfCFMODO6C PgkJ/ECVLZEjGDFnSTT0mn5+DveqRUid/+YQejcraKlc3xRUF+qlg4ey+uz0kFzC SFUbKY68Pw6W/dFGrEhfau8A0TnMnIQ4qgLPABEBAAG0P0hld2xldHQgUGFja2Fy ZCBFbnRlcnByaXNlIENvbXBhbnkgUlNBLTIwNDgtMzAgPHNpZ25ocEBocGUuY29t PokBPQQTAQIAJwUCVmnRgwIbLwUJEswDAAYLCQgHAwIGFQgCCQoLAxYCAQIeAQIX gAAKCRDU2uHjnaOfRK5XCACRJLoMQ/nBa7Gna/96inbAHoKM6DUbNramBa1XCTeh KiTxA0bPE3kp7y143jpfOiSGAOTcU0RaCOKk6JMnJJMt60nR4UohVG2lLVtLxT0G H75jCu0nuZQJrKlMh04fJ3zHnqVuOduyUstgmMQ0qVg2lwPTV+KZeY5/eNPHzkcK 75pfos/svDRQNN2LX6qzsVWfAkEN/WdnlZJE76exvA9JsVmNtU3h3PKQTT86W4bb 1MdeDMkX9lDwMCEhClxLVU/sUfj10Kb8CO5+TFimmdqgXXY4BJJsE8STowy67t7Q zECkM4UFVpgcXFrapWW7IniC1OP0c4I+11mnHKCN15DFuQINBFZp0YMQCADo0UHN pIORPOLtaVI2W/aBpOWVlO74HZvMlWKOk+isf8pIKOujivncNZeeVPu2MTT7kOZ6 3Iwuj6B/dBz0hFXkqfzww+ibkhV1NWUx8Gk3FnGm6Ye6VZq2MbYHFMjSMbH3gJNd l76n4wOdwzC8TbLSmfIVxRyf+Uo5GhMrFy/+G28m/WO5nmH/AxKZxOp//NUVxE47 p6Dd2Rqg2IgBfQ99gudh75F/s6RHDYtV+87CsyFyKD7nJW54l/7r9jvvwhO0d89T s37j+bv81AEPYtu17uaRCcfF2B6RtPEdDslZ+J0G14TBsjp53ARh43HmH6BwQ3+4 pyB7QYWwN2ybFCqTAAMFCAC+1JtxaR7TEZsRDNy6ViHH+fHENl7+SB8GTQL7BZXB YgFEtsti+NZpkAAiJ+HXZihgcjCrHPejnlj5Su7dSkveRLHKZbVehvIbiM+LxfNv 7CdxfhLUVPkgPEpiCHGpCHjG/bKyKCL48SDPB5ClUtVu7v05dq/yu4AYaWwU1iix uH9dYQWC1J8pkZX/igHdbD/RYnPMuiil41guTNSWgjzxbOnxEVueaYFKnHdFlqz7 JpzJa10Lm9gEcGmzePVbJH0j8/+1ViwqLhbITq7Gv1S+RkNnewjLM9Vu2R/Fvpzh AUAinTEi5bYPtmVtddZQ94cOFLvh+LrETAC7v4zxvW/ciQElBBgBAgAPBQJWadGD AhsMBQkSzAMAAAoJENTa4eOdo59E6kAIAMC60HIPrr7ztUAF1vmuIdgSMDAjD7y0 UOzCm1L9fuHqeXNc/JQkKbqAv0tMjnRtrt1R13N3qy1qBeUTnG0qxwdHR0jsknHW S/1T24x03XioypowQObeh15PTD/TTAiLherzAWRNqqtf2Yh9Dy2zWLo204FQjK// Apw4IbO28hgYWvIbpFsyPG4WED3uJ7uTnkqdRkNWQl3M3J1GhEycgoXe703hllBP j2iOwecHkFHN2GJjAL67IH2amnp0JqrVy6FwN1fL47lOUfe3AgkjBmBUXT+r0y+e L+aILxdSiFNXn3sqpW2jQnT3r+UOCw5QdOYE8QC2VnJcm0p3bJ+OMVQ= =pzE0 -----END PGP PUBLIC KEY BLOCK-----   Import the signing key.\nncn-mw# rpm --import hpe-singing-key.asc   Search for the signed packages using the version number from the previous step.\nncn-mw# rpm -qa --qf \u0026#39;%{NAME}-%{VERSION}-%{RELEASE} %{SIGGPG:pgpsig}\\n\u0026#39; | grep \u0026#39;9da39f44\u0026#39;   Validate the signature on an RPM.\nThe RPM in this example is csm-install-workarounds-0.1.11-20210504151148_bf748be.src.rpm.\nncn-mw# rpm -Kvv csm-install-workarounds-0.1.11-20210504151148_bf748be.src.rpm Example output:\nD: loading keyring from pubkeys in /var/lib/rpm/pubkeys/*.key D: couldn\u0026#39;t find any keys in /var/lib/rpm/pubkeys/*.key D: loading keyring from rpmdb D: opening db environment /var/lib/rpm cdb:0x401 D: opening db index /var/lib/rpm/Packages 0x400 mode=0x0 D: locked db index /var/lib/rpm/Packages D: opening db index /var/lib/rpm/Name 0x400 mode=0x0 D: read h# 442 Header SHA1 digest: OK (489efff35e604042709daf46fb78611fe90a75aa) D: added key gpg-pubkey-f4a80eb5-53a7ff4b to keyring D: read h# 493 Header SHA1 digest: OK (29ff3649c04c90eb654c1b3b8938e4940ff1fbbd) D: added key gpg-pubkey-4255bf0c-5ec2e252 to keyring D: read h# 494 Header SHA1 digest: OK (e934d6983ae30a7e12c9c1fb6e86abb1c76c69d3) D: added key gpg-pubkey-9da39f44-5669d183 to keyring D: read h# 496 Header SHA1 digest: OK (a93ccf43d5479ff84dc896a576d6f329fd7d723a) D: added key gpg-pubkey-e09422b3-57744e9e to keyring D: read h# 497 Header SHA1 digest: OK (019de42112ea85bfa979968273aafeca8d457936) D: added key gpg-pubkey-fd4bf915-5f573efe to keyring D: Using legacy gpg-pubkey(s) from rpmdb D: Expected size: 36575 = lead(96)+sigs(5012)+pad(4)+data(31463) D: Actual size: 36575 csm-install-workarounds-0.1.11-20210504151148_bf748be.src.rpm: Header V4 RSA/SHA256 Signature, key ID 9da39f44: OK Header SHA1 digest: OK (87c62923c905424eaddac56c5dda7f3b6421d30d) V4 RSA/SHA256 Signature, key ID 9da39f44: OK MD5 digest: OK (130e13f11aaca834408665a93b61a8e4) D: closed db index /var/lib/rpm/Name D: closed db index /var/lib/rpm/Packages D: closed db environment /var/lib/rpm   "
},
{
	"uri": "/docs-csm/en-12/operations/access_livecd_usb_device_after_reboot/",
	"title": "Accessing Livecd Usb Device After Reboot",
	"tags": [],
	"description": "",
	"content": "Accessing LiveCD USB Device After Reboot This is a procedure that only applies to the LiveCD USB device after the PIT node has been rebooted.\n USB ONLY If the installation above was done from a Remote ISO.\n After deploying the LiveCD\u0026rsquo;s NCN, the LiveCD USB itself is unharmed and available to an administrator.\nProcedure   Mount and view the USB device.\nncn-m001# mkdir -pv /mnt/{cow,pitdata} ncn-m001# mount -vL cow /mnt/cow ncn-m001# mount -vL PITDATA /mnt/pitdata ncn-m001# ls -ld /mnt/cow/rw/* Example output:\ndrwxr-xr-x 2 root root 4096 Jan 28 15:47 /mnt/cow/rw/boot drwxr-xr-x 8 root root 4096 Jan 29 07:25 /mnt/cow/rw/etc drwxr-xr-x 3 root root 4096 Feb 5 04:02 /mnt/cow/rw/mnt drwxr-xr-x 3 root root 4096 Jan 28 15:49 /mnt/cow/rw/opt drwx------ 10 root root 4096 Feb 5 03:59 /mnt/cow/rw/root drwxrwxrwt 13 root root 4096 Feb 5 04:03 /mnt/cow/rw/tmp drwxr-xr-x 7 root root 4096 Jan 28 15:40 /mnt/cow/rw/usr drwxr-xr-x 7 root root 4096 Jan 28 15:47 /mnt/cow/rw/var   Look at the contents of /mnt/pitdata.\nncn-m001# ls -ld /mnt/pitdata/* Example output:\ndrwxr-xr-x 2 root root 4096 Feb 3 04:32 /mnt/pitdata/configs drwxr-xr-x 14 root root 4096 Feb 3 07:26 /mnt/pitdata/csm-0.7.29 -rw-r--r-- 1 root root 22159328586 Feb 2 22:18 /mnt/pitdata/csm-0.7.29.tar.gz drwxr-xr-x 4 root root 4096 Feb 3 04:25 /mnt/pitdata/data drwx------ 2 root root 16384 Jan 28 15:41 /mnt/pitdata/lost+found drwxr-xr-x 5 root root 4096 Feb 3 04:20 /mnt/pitdata/prep drwxr-xr-x 2 root root 4096 Jan 28 16:07 /mnt/pitdata/static   Unmount the USB device to avoid corruption.\nThe corruption risk is low, but varies if large data use was done to or on the USB.\nncn-m001# umount -v /mnt/cow /mnt/pitdata   Remove the USB device after it has been unmounted.\n  "
},
{
	"uri": "/docs-csm/en-12/introduction/capmc_deprecation/",
	"title": "CAPMC Deprecation Notice Many Capmc V1 Features Are Being Partially Deprecated",
	"tags": [],
	"description": "",
	"content": "CAPMC Deprecation Notice: many CAPMC v1 features are being partially deprecated Deprecated Features in CSM 1.0 Many CAPMC v1 REST API and CLI features are being deprecated as part of CSM version 1.0; Full removal of the following deprecated CAPMC features will happen in CSM version 1.3. Further development of CAPMC service or CLI has stopped. CAPMC has entered end-of-life but will still be generally available. CAPMC is going to be replaced with the Power Control Service (PCS) in a future release. The current API/CLI portfolio for CAPMC are being pruned to better align with the future direction of PCS. More information about PCS and the CAPMC transition will be released as part of subsequent CSM releases.\nThe API endpoints that remain un-deprecated will remain supported until their \u0026lsquo;phased transition\u0026rsquo; into PCS (e.g. Power Capping is not \u0026lsquo;deprecated\u0026rsquo; and will be supported in PCS; As PCS is developed, CAPMC\u0026rsquo;s Powercapping and PCS\u0026rsquo;s Powercapping will both function, eventually callers of the CAPMC power capping API/CLI will need to will need transition to call PCS as the API will be different.)\nHere is a list of deprecated API (CLI) endpoints:\n node control  /get_node_rules /get_node_status /node_on /node_off /node_reinit   group control  /group_reinit /get_group_status /group_on /group_off   node energy  /get_node_energy /get_node_energy_stats /get_node_energy_counter   system monitor  /get_system_parameters /get_system_power /get_system_power_details   EPO  /emergency_power_off   utilities  /get_nid_map    "
},
{
	"uri": "/docs-csm/en-12/operations/csm_product_management/change_passwords_and_credentials/",
	"title": "Change Passwords And Credentials",
	"tags": [],
	"description": "",
	"content": "Change Passwords and Credentials This is an overarching procedure to change all credentials managed by Cray System Management (CSM) in HPE Cray EX system to new values.\nThere are many passwords and credentials used in different contexts to manage the system. These can be changed as needed. Their initial settings are documented, so it is recommended to change them during or soon after a CSM software installation.\nPrerequisites  Review procedures in Manage System Passwords.  Procedure 1. Change Hardware Credentials   Perform procedures in Change Cray EX Liquid-Cooled Cabinet Global Default Password.\n  Perform procedures in Update Default Air-Cooled BMC and Leaf-BMC Switch SNMP Credentials.\n  Perform procedures in Change Air-Cooled Node BMC Credentials.\n  Perform procedures in Change SNMP Credentials on Leaf BMC Switches.\n  Perform procedures in Update Default ServerTech PDU Credentials used by the Redfish Translation Service (RTS).\n  Perform procedures in Change Credentials on ServerTech PDUs.\n  2. Change Node Credentials   Perform procedures in Update NCN Passwords.\n  Perform procedures in Change Root Passwords for Compute Nodes.\n  3. Change Service Credentials  Perform procedures in Change the Keycloak Admin Password.  "
},
{
	"uri": "/docs-csm/en-12/introduction/differences/",
	"title": "Differences From Previous Release",
	"tags": [],
	"description": "",
	"content": "Differences from Previous Release The most noteworthy changes since the previous release are described here.\n New features Deprecated features Removed features Other changes  New features The following features are new in this release:\n Scaling improvements for larger systems to the following services:  BOS CAPMC FAS   New hardware supported in this release:  Compute nodes  Milan-Based Grizzly Peak with A100 40 GB GPU Milan-Based Windom Liquid Cooled System Rome-Based HPE Apollo 6500 XL675d Gen10+ with A100 40 GB GPU Rome-Based HPE Apollo 6500 XL645d Gen10+ with A100 40 GB GPU   User Access Nodes (UANs)  Milan-Based HPE DL 385(v2) Gen10+ Rome-Based HPE DL 385(v1) Gen10     Node consoles are now managed by cray-console-node which is based on ConMan HSM now has a v2 REST API NCN user password and SSH key management is available for both root and non-root users via NCN personalization. See Configure Non-Compute Nodes with CFS.  Deprecated features The following features are no longer supported and are planned to be removed in a future release:\n HSM v1 REST API has been deprecated as of CSM version 0.9.3. The v1 HSM APIs will be removed in the CSM version 1.3 release. Many CAPMC v1 REST API and CLI features were deprecated as part of CSM version 1.0; Full removal of the deprecated CAPMC features will happen in CSM version 1.3. Further development of CAPMC service or CLI has stopped. CAPMC has entered end-of-life but will still be generally available. CAPMC is going to be replaced with the Power Control Service (PCS) in a future release. The current API/CLI portfolio for CAPMC is being pruned to better align with the future direction of PCS. More information about PCS and the CAPMC transition will be released as part of subsequent CSM releases.  For more information on what features have been deprecated, see the CAPMC deprecation notice.   HMNFD v1 REST API has been deprecated as of CSM version 1.2. The v1 HMNFD APIs will be removed in the CSM version 1.5 release. The Boot Orchestration Service (BOS) API is changing in the CSM V1.2.0 release:  The --template-body option for the Cray CLI bos command is deprecated. Prior to CSM V1.2.0, performing a successful GET on the session status for a boot set (i.e. /v1/session/{session_id}/status/{boot_set_name}) incorrectly returned a status code of 201. It now correctly returns a status code of 200.   The Compute Rolling Upgrade Service (CRUS) is deprecated in CSM 1.2.0 and will be removed in a future CSM release. Enhanced BOS functionality will replace CRUS. This includes the ability to stage changes to nodes that can be acted upon later when the node reboots. It also includes the ability to reboot nodes without specifying any boot artifacts. This latter ability relies on the artifacts already having been staged.  Removed features The following features have been completely removed:\n cray-conman pod. This has been replaced by cray-console-node. CFS v1 API and CLI. The v2 API and CLI have been the default since CSM 0.9 (Shasta 1.4).  Other changes "
},
{
	"uri": "/docs-csm/en-12/introduction/documentation_conventions/",
	"title": "Documentation Conventions",
	"tags": [],
	"description": "",
	"content": "Documentation Conventions Several conventions have been used in the preparation of this documentation.\n Markdown Format File Formats Typographic Conventions Command Prompt Conventions which describe the context for user, host, directory, chroot environment, or container environment  Markdown Format This documentation is in Markdown format. Although much of it can be viewed with any text editor, a richer experience will come from using a tool which can render the Markdown to show different font sizes, the use of bold and italics formatting, inclusion of diagrams and screen shots as image files, and to follow navigational links within a topic file and to other files.\nThere are many tools which render the Markdown format and provide these advantages. Any Internet search for Markdown tools will provide a long list of these tools. Some of the tools are better than others at displaying the images and allowing you to follow the navigational links.\nFile Formats Some of the installation instructions require updating files in JSON, YAML, or TOML format. These files should be updated with care because some file formats do not accept tab characters for indentation of lines. Only space characters are supported. Refer to online documentation to learn more about the syntax of JSON, YAML, and TOML files. YAML does not support tab characters. The JSON convention is to use four spaces rather than a tab character.\nTypographic Conventions This style indicates program code, reserved words, library functions, command-line prompts, screen output, file/path names, and other software constructs.\n\\ (backslash) At the end of a command line, indicates the Linux shell line continuation character (lines joined by a backslash are parsed as a single line).\nCommand Prompt Conventions Host name and account in command prompts The host name in a command prompt indicates where the command must be run. The account that must run the command is also indicated in the prompt.\n The root or super-user account always has the # character at the end of the prompt Any non-root account is indicated with account@hostname. A non-privileged account is referred to as user.  Node abbreviations The following list contains abbreviations for nodes used below\n CN - compute Node NCN - Non-Compute Node AN - Application Node (special type of NCN) UAN - User Access Node (special type of AN) PIT - Pre-Install Toolkit (initial node used as the inception node during software installation booted from the LiveCD)     Prompt Description     ncn# Run the command as root on any NCN, except an NCN which is functioning as an Application Node (AN), such as a UAN.   ncn-m# Run the command as root on any NCN-M (NCN which is a Kubernetes master node).   ncn-m002# Run the command as root on the specific NCN-M (NCN which is a Kubernetes master node) which has this hostname (ncn-m002).   ncn-w# Run the command as root on any NCN-W (NCN which is a Kubernetes worker node).   ncn-w001# Run the command as root on the specific NCN-W (NCN which is a Kubernetes master node) which has this hostname (ncn-w001).   ncn-s# Run the command as root on any NCN-S (NCN which is a Utility Storage node).   ncn-s003# Run the command as root on the specific NCN-S (NCN which is a Utility Storage node) which has this hostname (ncn-s003).   pit# Run the command as root on the PIT node.   linux# Run the command as root on a Linux host.   uan# Run the command as root on any UAN.   uan01# Run the command as root on hostname uan01.   user@uan\u0026gt; Run the command as any non-root user on any UAN.   cn# Run the command as root on any CN. Note that a CN will have a hostname of the form nid124356, that is \u0026ldquo;nid\u0026rdquo; and a six digit, zero padded number.   hostname# Run the command as root on the specified hostname.   user@hostname\u0026gt; Run the command as any non-root user on the specified hostname.    Command prompt inside chroot If the chroot command is used, the prompt changes to indicate that it is inside a chroot environment on the system.\nhostname# chroot /path/to/chroot chroot-hostname# Command prompt inside Kubernetes pod If executing a shell inside a container of a Kubernetes pod where the pod name is $podName, the prompt changes to indicate that it is inside the pod. Not all shells are available within every pod, this is an example using a commonly available shell.\nncn# kubectl exec -it $podName /bin/sh pod# Command prompt inside image customization session If using SSH to access the image customization environment (pod) during an image customization session, the prompt changes to indicate that it is inside this environment. This example uses $PORT and $HOST as environment variables with specific settings. When using chroot in this context, the prompt will be different than the above chroot example.\nhostname# ssh -p $PORT root@$HOST root@POD# chroot /mnt/image/image-root :/# Directory path in command prompt Example prompts do not include the directory path, because long paths can reduce the clarity of examples. Most of the time, the command can be executed from any directory. When it matters which directory the command is invoked within, the cd command is used to change into the directory, and the directory is referenced with a period (.) to indicate the current directory\nExamples of prompts as they appear on the system:\nhostname:~ # cd /etc hostname:/etc# cd /var/tmp hostname:/var/tmp# ls ./file hostname:/var/tmp# su - user user@hostname:~\u0026gt; cd /usr/bin user hostname:/usr/bin\u0026gt; ./command Examples of prompts as they appear in this publication:\nhostname # cd /etc hostname # cd /var/tmp hostname # ls ./file hostname # su - user user@hostname \u0026gt; cd /usr/bin user@hostname \u0026gt; ./command Command prompts for network switch configuration The prompts when doing network switch configuration can vary widely depending on which vendor switch is being configured and the context of the item being configured on that switch. There may be two levels of user privilege which have different commands available and a special command to enter configuration mode.\nExample of prompts as they appear in this publication:\nEnter \u0026ldquo;setup\u0026rdquo; mode for the switch make and model, for example:\nremote# ssh admin@sw-leaf-001 sw-leaf-001\u0026gt; enable sw-leaf-001# configure terminal sw-leaf-001(conf)# Refer to the switch vendor OEM documentation for more information about configuring a specific switch.\n"
},
{
	"uri": "/docs-csm/en-12/introduction/",
	"title": "Introduction To Installation",
	"tags": [],
	"description": "",
	"content": "Introduction to CSM Installation This document provides an introduction to the Cray System Management (CSM) installation documentation for an HPE Cray EX system.\nTopics:  CSM Overview Scenarios for Shasta v1.5 CSM Product Stream Updates CSM Operational Activities Differences from Previous Release Documentation Conventions  Details CSM Overview The CSM installation prepares and deploys a distributed system across a group of management nodes organized into a Kubernetes cluster which uses Ceph for utility storage. These nodes perform their function as Kubernetes master nodes, Kubernetes worker nodes, or utility storage nodes with the Ceph storage.\nSystem services on these nodes are provided as containerized micro-services packaged for deployment via Helm charts. Kubernetes orchestrates these services and schedules them on Kubernetes worker nodes with horizontal scaling. Horizontal scaling increases or decreases the number of services' instances as demand for them varies, such as when booting many compute nodes or application nodes.\nThere is much more information available in the CSM Overview about the hardware, software, network, and access to these services and components.\nSee CSM Overview\nScenarios for Shasta v1.5 These scenarios for how to get CSM software onto a system are described in Scenarios for Shasta v1.5.\n Installation of CSM software  First time installation of CSM software Reinstall of CSM software   Upgrade from a previous version of CSM software  Note: A migration from Shasta v1.3.x software to Shasta v1.5 software is not supported as a direct action, but is a two step process of first migrating from Shasta v1.3.x to Shasta v1.4 and then following the Upgrade procedure from v1.4 to v1.5.\nSee Scenarios for Shasta v1.5\nCSM Product Stream Updates The software included in the CSM product stream is released in more than one way. The initial product release may be augmented with late-breaking documentation updates or hotfixes after the release.\nSee CSM Product Stream Updates\nCSM Operational Activities Procedures which are used during either installation, upgrading or general operation of the system reside here. They are referenced in the context of the specific workflow. For example, updating firmware with FAS or running the CSM health checks.\nSee CSM Operational Activities\nDifferences from Previous Release Significant changes from the previous release of CSM are described.\n New Features Deprecating Features Deprecated Features Other Changes  See Differences from Previous Release\nDocumentation Conventions Several conventions have been used in the preparation of this documentation.\n File Formats Typographic Conventions Command Prompt Conventions which indicate the context for user, host, directory, chroot environment, or container environment  See Documentation Conventions\n"
},
{
	"uri": "/docs-csm/en-12/introduction/csm_overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": "CSM Overview This CSM Overview describes the Cray System Management ecosystem with its hardware, software, and network. It describes how to access these services and components.\nThe CSM installation prepares and deploys a distributed system across a group of management nodes organized into a Kubernetes cluster which uses Ceph for utility storage. These nodes perform their function as Kubernetes master nodes, Kubernetes worker nodes, or utility storage nodes with the Ceph storage.\nSystem services on these nodes are provided as containerized micro-services packaged for deployment via Helm charts. Kubernetes orchestrates these services and schedules them on Kubernetes worker nodes with horizontal scaling. Horizontal scaling increases or decreases the number of services' instances as demand for them varies, such as when booting many compute nodes or application nodes.\nTopics  System Nodes and Networks Default IP Address Ranges Resilience of System Management Services Access to System Management Services  Details 1. System Nodes and Networks The HPE Cray EX system has two types of nodes:\n Compute Nodes, where high performance computing applications are run, have hostnames in the form of nidXXXXXX, that is, nid followed by six digits. These six digits will be padded with zeroes at the beginning. All other nodes provide supporting functions to these compute nodes. Non-Compute Nodes (NCNs), which carry out system functions and come in many types:  Management nodes in a Kubernetes cluster which host system services.  Kubernetes master nodes, with names in the form of ncn-mXXX. Every system has three or more master nodes. Kubernetes worker nodes, with names in the form of ncn-wXXX. Every system has three or more worker nodes. Utility Storage nodes providing Ceph storage to Kubernetes nodes, with names in the form of ncn-sXXX. Every system has three or more storage nodes.   Application nodes (ANs) which are not part of the Kubernetes management cluster  User Access Nodes (UANs), known by some as login or front-end nodes Other site-defined types:  Gateway nodes Data Mover nodes Visualization nodes        The following system networks connect the devices listed:\n Networks external to the system:  Customer Network (Data Center)  ncn-m001 BMC is connected by the customer network switch to the customer management network ClusterStor System Management Unit (SMU) interfaces User Access Nodes (UANs)     System networks:  Hardware Management Network (HMN)  BMCs for Admin tasks Power distribution units (PDU) Keyboard/video/mouse (KVM)   Node Management Network (NMN)  All NCNs and compute nodes   ClusterStor Management Network  ClusterStor controller management interfaces of all ClusterStor components (SMU, Metadata Management Unit (MMU), and Scalable Storage Unit (SSU))   High-Speed Network (HSN), which connects the following devices:  Kubernetes worker nodes UANs ClusterStor controller data interfaces of all ClusterStor components (SMU, MMU, and SSU)      During initial installation, several of those networks are created with default IP address ranges. See Default IP Address Ranges\nThe network management system (NMS) data model and REST API enable customer sites to construct their own \u0026ldquo;networks\u0026rdquo; of nodes within the high-speed fabric, where a \u0026ldquo;network\u0026rdquo; is a collection of nodes that share a VLAN and an IP subnet.\nThe low-level network management components (switch, DHCP service, ARP service) of the management nodes and ClusterStor interfaces are configured to serve one particular network (the \u0026ldquo;supported network\u0026rdquo;) on the high-speed fabric. As part of the initial installation, the supported network is created to include all of the compute nodes, thereby enabling those compute nodes to access the gateway, user access services, and ClusterStor devices.\nA site may create other networks as well, but it is only the supported network that is served by those devices.\n2. Default IP Address Ranges The initial installation of the system creates default networks with default settings and with no external exposure. These IP address default ranges ensure that no nodes in the system attempt to use the same IP address as a Kubernetes service or pod, which would result in undefined behavior that is extremely difficult to reproduce or debug.\nThe following table shows the default IP address ranges\n   Network IP Address Range     Kubernetes service network 10.16.0.0/12   Kubernetes pod network 10.32.0.0/12   Install Network (MTL) 10.1.0.0/16   Node Management Network (NMN) 10.252.0.0/17   High Speed Network (HSN) 10.253.0.0/16   Hardware Management Network (HMN) 10.254.0.0/17   Mountain NMN (see note below table) 10.100.0.0/17   Mountain HMN (see note below table) 10.104.0.0/17   River NMN 10.106.0.0/17   River HMN 10.107.0.0/17   Load Balanced NMN 10.92.100.0/24   Load Balanced HMN 10.94.100.0/24    For the Mountain NMN:\nAllocate a /22 from this range per liquid-cooled cabinet. For example, the following cabinets would be given the following IP addresses in the allocated ranges:\n cabinet 1 = 10.100.0.0/22 cabinet 2 = 10.100.4.0/22 cabinet 3 = 10.100.8.0/22 \u0026hellip;  For the Mountain HMN:\nAllocate a /22 from this range per liquid-cooled cabinet. For example, the following cabinets would be given the following IP addresses in the allocated ranges:\n cabinet 1 = 10.104.0.0/22 cabinet 2 = 10.104.4.0/22 cabinet 3 = 10.104.8.0/22 \u0026hellip;  The above values could be modified prior to install if there is a need to ensure that there are no conflicts with customer resources, such as LDAP or license servers. If a customer has more than one HPE Cray EX system, these values can be safely reused across them all. Contact customer support for this site if it is required to change the IP address range for Kubernetes services or pods; for example, if the IP addresses within those ranges must be used for something else. The cluster must be fully reinstalled if either of those ranges are changed.\nThere are several network values and other pieces of system information that are unique to the customer system.\n  IP addresses and the network(s) for ncn-m001 and the BMC on ncn-m001.\n  The main Customer Management Network (CMN) subnet. The two address pools mentioned below need to be part of this subnet.\nFor more information on the CMN, see Customer Accessible Networks.\n Subnet for the MetalLB static address pool (cmn-static-pool), which is used for services that need to be pinned to the same IP address, such as the system DNS service. Subnet for the MetalLB dynamic address pool (cmn-dynamic-pool), which is used for services such as Prometheus and Nexus that can be reached by DNS.    HPE Cray EX Domain: The value of the subdomain that is used to access externally exposed services. For example, if the system is named TestSystem, and the site is example.com, the HPE Cray EX domain would be testsystem.example.com. Central DNS would need to be configured to delegate requests for addresses in this domain to the HPE Cray EX DNS IP address for resolution.\n  HPE Cray EX DNS IP: The IP address used for the HPE Cray EX DNS service. Central DNS delegates the resolution for addresses in the HPE Cray EX Domain to this server. The IP address will be in the cmn-static-pool subnet.\n  CMN gateway IP address: The IP address assigned to a specific port on the spine switch, which will act as the gateway between the CMN and the rest of the customer\u0026rsquo;s internal networks. This address would be the last hop route to the CMN network.\n  The User Network subnet which will be either the Customer Access Network (CAN) or Customer High-speed Network (CHN). The address pool mentioned below needs to be part of this subnet.\nFor more information on the CAN and CHN, see Customer Accessible Networks.\n Subnet for the MetalLB dynamic address pool (can-dynamic-pool) or (chn-dynamic-pool), which is used for services such as User Access Instances (UAIs) that can be reached by DNS.    3. Resilience of System Management Services HPE Cray EX systems are designed so that system management services (SMS) are fully resilient and that there is no single point of failure. The design of the system allows for resiliency in the following ways:\n Three management nodes are configured as Kubernetes master nodes. When one master goes down, operations (such as jobs running across compute nodes) are expected to continue. At least three utility storage nodes provide persistent storage for the services running on the Kubernetes management nodes. When one of the utility storage nodes goes down, operations (such as jobs running across compute nodes) are expected to continue. At least three management nodes are configured as Kubernetes worker nodes. If one of only three Kubernetes worker nodes were to go down, it would be much more difficult for the remaining two worker nodes to handle the total balance of pods. It is less significant to lose one of the worker nodes if the system has more than three worker nodes because there are more worker nodes able to handle the pod load. The state and configuration of the Kubernetes cluster are stored in an etcd cluster distributed across the Kubernetes master nodes. This cluster is also backed up on an interval, and backups are pushed to the local cluster\u0026rsquo;s Ceph Rados Gateway (S3). A micro-service can run on any node that meets the requirements for that micro-service, such as appropriate hardware attributes, which are indicated by Kubernetes labels and taints. All micro-services have shared persistent storage so that they can be restarted on any worker node in the Kubernetes management cluster without losing state.  Kubernetes is designed to ensure that the desired number of deployments of a micro-service are always running on one or more worker nodes. In addition, it ensures that if one worker node becomes unresponsive, the micro-services that were running on it are migrated to another worker node that is up and meets the requirements of those micro-services.\nFor more information about resiliency topics see Resilience of System Management Services.\n4. Access to System Management Services The standard configuration for System Management Services (SMS) is the containerized REST micro-service with a public API. All of the micro-services provide an HTTP interface and are collectively exposed through a single gateway URL. The API gateway for the system is available at a well known URL based on the domain name of the system. It acts as a single HTTPS endpoint for terminating Transport Layer Security (TLS) using the configured certificate authority. All services and the API gateway are not dependent on any single node. This resilient arrangement ensures that services remain available during possible underlying hardware and network failures.\nAccess to individual APIs through the gateway is controlled by a policy-driven access control system. Administrators and users must retrieve a token for authentication before attempting to access APIs through the gateway and present a valid token with each API call. The authentication and authorization decisions are made at the gateway level which prevent unauthorized API calls from reaching the underlying micro-services. For more detail on the process of obtaining tokens and user management, see System Security and Authentication.\nReview the API documentation in the supplied container before attempting to use the API services. This container is generated with the release using the most current API descriptions in OpenAPI 2.0 format. Because this file serves as both an internal definition of the API contract and the external documentation of the API function, it is the most up-to-date reference available.\nThe API Gateway URL for accessing the APIs on a site-specific system is https://api.NETWORK.SYSTEM-NAME.DOMAIN-NAME/apis/.\n"
},
{
	"uri": "/docs-csm/en-12/introduction/scenarios/",
	"title": "Scenarios For Shasta V1.5",
	"tags": [],
	"description": "",
	"content": "Scenarios for Shasta v1.5 There are multiple scenarios for installing CSM software which are described in this documentation with many supporting procedures.\n Scenarios for Shasta v1.5  Installation Upgrade Migration    Installation There are two ways to install the CSM software. There are some differences between a first time install which must create the initial configuration payload and configure the management network switches, whereas a reinstall can reuse a previous configuration payload and skip the configuration of management network switches. The first time install will check and then may update firmware for various components whereas the reinstall will check and indicate that no firmware update is required. There are two different ways to use the LiveCD, either from a RemoteISO or a USB device, which are described in Bootstrap PIT Node. There are a few places where a comment will be made in a procedure for how one of the scenarios needs to do something differently.\n  First time Install\n Prepare Configuration Payload creates the initial configuration payload. Bootstrap PIT Node Configure Management Network Switches    Reinstall\n Prepare Configuration Payload can reuse a previous configuration payload. There may be additional steps to manually wipe disks on the management nodes and do other actions to prepare the management node hardware for the reinstall. Bootstrap PIT Node Can skip the procedure to Configure Management Network Switches    The two paths merge together after configuration of the management network switches to do later actions the same regardless of the starting point in the workflow.\n Deploy Management Nodes Install CSM Services Validate CSM Health Before Final NCN Deployment Deploy Final NCN Configure Administrative Access Validate CSM Health Update Firmware with FAS Prepare Compute Nodes  After completion of the firmware update with FAS and the preparation of compute nodes, the CSM product stream has been fully installed and configured. Refer to the HPE Cray EX System Software Getting Started Guide (S-8000) 22.07 for more information on other product streams to be installed and configured after CSM.\nSee Install CSM for the details on the installation process for either a first time install or a reinstall.\nUpgrade The upgrade from Shasta v1.4.2 (including CSM 0.9.3) to Shasta v1.5 (including CSM 1.0) is supported. This process will upgrade the Ceph storage software, then the storage nodes, then the Kubernetes master nodes and worker nodes, and finally the CSM services. The management nodes are upgraded using a rolling upgrade approach which enables management services to continue to function even as one or a few nodes are being upgraded.\nSee Upgrade CSM.\nMigration There is no direct migration from Shasta v1.3.x releases to Shasta v1.5. However, there is a supported path.\n  Migration from v1.3.x to v1.4.0\nThe migration from v1.3.x to v1.4.0 is described in the Shasta v1.4 documentation. Refer to \u0026ldquo;1.3 to 1.4 Install Prerequisites\u0026rdquo; and \u0026ldquo;Collect Data From Healthy Shasta 1.3 System for EX 1.4 Installation\u0026rdquo; in the HPE Cray EX System Installation and Configuration Guide (S-8000) 1.4.\n  Upgrade v1.4.x to v1.5\nAn upgrade from the previous release (Shasta v1.4.x) is supported with this release.\nSee Upgrade from v1.4.x to v1.5.\n  "
},
{
	"uri": "/docs-csm/en-12/install/wipe_ncn_disks_for_reinstallation/",
	"title": "Wipe NCN Disks For Reinstallation",
	"tags": [],
	"description": "",
	"content": "Wipe NCN Disks for Reinstallation This page details how to wipe NCN disks.\n Everything in this section should be considered DESTRUCTIVE.\n After following these procedures, an NCN can be rebooted and redeployed.\nAll types of disk wipe can be run from Linux or from an initramFS/initrd emergency shell.\n The following are potential use cases for wiping disks:\n Adding a node that is not bare. Adopting new disks that are not bare. Doing a fresh install.  Topics  Basic Wipe Advanced Wipe Full Wipe  Basic Wipe A basic wipe includes wiping the disks and all of the RAIDs. These basic wipe instructions can be executed on any type of management node (master, storage, or worker).\n  List the disks for verification.\nncn# ls -1 /dev/sd* /dev/disk/by-label/*   Wipe the disks and the RAIDs.\nncn# wipefs --all --force /dev/sd* /dev/disk/by-label/* If any disks had labels present, then the output looks similar to the following:\n/dev/sda: 8 bytes were erased at offset 0x00000200 (gpt): 45 46 49 20 50 41 52 54 /dev/sda: 8 bytes were erased at offset 0x6fc86d5e00 (gpt): 45 46 49 20 50 41 52 54 /dev/sda: 2 bytes were erased at offset 0x000001fe (PMBR): 55 aa /dev/sdb: 6 bytes were erased at offset 0x00000000 (crypto_LUKS): 4c 55 4b 53 ba be /dev/sdb: 6 bytes were erased at offset 0x00004000 (crypto_LUKS): 53 4b 55 4c ba be /dev/sdc: 8 bytes were erased at offset 0x00000200 (gpt): 45 46 49 20 50 41 52 54 /dev/sdc: 8 bytes were erased at offset 0x6fc86d5e00 (gpt): 45 46 49 20 50 41 52 54 /dev/sdc: 2 bytes were erased at offset 0x000001fe (PMBR): 55 aa Verify that there are no error messages in the output.\nThe wipefs command may fail if no labeled disks are found, which is an indication of a larger problem.\n  Advanced Wipe This section is specific to utility storage nodes. An advanced wipe includes stopping Ceph, deleting the Ceph volumes, and then wiping the disks and RAIDs.\n  Stop Ceph.\n  CSM 0.9 or earlier\nncn-s# systemctl stop ceph-osd.target   CSM 1.0 or later\nncn-s# cephadm rm-cluster --fsid $(cephadm ls|jq -r \u0026#39;.[0].fsid\u0026#39;) --force     Make sure the OSDs (if any) are not running.\n  CSM 0.9 or earlier\nncn-s# ps -ef|grep ceph-osd   CSM 1.0 or later\nncn-s# podman ps   Examine the output. There should be no running ceph-osd processes or containers.\n  Remove the Ceph volume groups.\nncn-s# vgremove -f -v --select \u0026#39;vg_name=~ceph*\u0026#39;   Perform the Basic Wipe procedure.\n  Full-Wipe This section is the preferred method for all nodes. A full wipe includes deleting the Ceph volumes (where applicable), stopping the RAIDs, zeroing the disks, and then wiping the disks and RAIDs.\nIMPORTANT: For each step, pay attention to whether the command is to be run on a master node, storage node, or worker node. If wiping a different type of node than what a step specifies, then skip that step.\n  Reset Kubernetes on worker nodes ONLY.\nThis will stop kubelet, underlying containers, and remove the contents of /var/lib/kubelet.\n  Reset Kubernetes.\nncn-w# kubeadm reset --force   List any containers running in containerd.\nncn-w# crictl ps CONTAINER IMAGE CREATED STATE NAME ATTEMPT POD ID 66a78adf6b4c2 18b6035f5a9ce About a minute ago Running spire-bundle 1212 6d89f7dee8ab6 7680e4050386d c8344c866fa55 24 hours ago Running speaker 0 5460d2bffb4d7 b6467c907f063 8e6730a2b718c 3 days ago Running request-ncn-join-token 0 a3a9ca9e1ca78 e8ce2d1a8379f 64d4c06dc3fb4 3 days ago Running istio-proxy 0 6d89f7dee8ab6 c3d4811fc3cd0 0215a709bdd9b 3 days ago Running weave-npc 0 f5e25c12e617e   If there are any running containers from the output of the crictl ps command, stop them.\nncn-w# crictl stop \u0026lt;container id from the CONTAINER column\u0026gt;     Reset Kubernetes on master nodes ONLY.\nThis will stop kubelet, underlying containers, and remove the contents of /var/lib/kubelet.\n  Reset Kubernetes.\nncn-m# kubeadm reset --force   List any containers running in containerd.\nncn-m# crictl ps CONTAINER IMAGE CREATED STATE NAME ATTEMPT POD ID 66a78adf6b4c2 18b6035f5a9ce About a minute ago Running spire-bundle 1212 6d89f7dee8ab6 7680e4050386d c8344c866fa55 24 hours ago Running speaker 0 5460d2bffb4d7 b6467c907f063 8e6730a2b718c 3 days ago Running request-ncn-join-token 0 a3a9ca9e1ca78 e8ce2d1a8379f 64d4c06dc3fb4 3 days ago Running istio-proxy 0 6d89f7dee8ab6 c3d4811fc3cd0 0215a709bdd9b 3 days ago Running weave-npc 0 f5e25c12e617e   If there are any running containers from the output of the crictl ps command, stop them.\nncn-m# crictl stop \u0026lt;container id from the CONTAINER column\u0026gt;     Delete Ceph Volumes on utility storage nodes ONLY.\nFor each storage node, perform the following steps:\n  Stop Ceph.\n  CSM 0.9 or earlier\nncn-s# systemctl stop ceph-osd.target   CSM 1.0 or later\nncn-s# cephadm rm-cluster --fsid $(cephadm ls|jq -r \u0026#39;.[0].fsid\u0026#39;) --force     Make sure the OSDs (if any) are not running.\n  CSM 0.9 or earlier\nncn-s# ps -ef|grep ceph-osd   CSM 1.0 or later\nncn-s# podman ps   Examine the output. There should be no running ceph-osd processes or containers.\n  Remove the Ceph volume groups.\nncn-s# vgremove -f -v --select \u0026#39;vg_name=~ceph*\u0026#39;     Unmount volumes.\n NOTE: Some of the following umount commands may fail or have warnings depending on the state of the NCN. Failures in this section can be ignored and will not inhibit the wipe process.\nNOTE: There is an edge case where the overlay may keep the drive from being unmounted. If this is a rebuild, ignore this.\n The exact commands used depends on the node type:\n  Master nodes\nStop the etcd service on the master node before unmounting /var/lib/etcd and other mounts.\nncn-m# systemctl stop etcd.service ncn-m# umount -v /run/lib-etcd /var/lib/etcd /var/lib/sdu /var/opt/cray/sdu/collection-mount /var/lib/admin-tools /var/lib/s3fs_cache /var/lib/containerd   Storage nodes\nncn-s# umount -vf /var/lib/ceph /var/lib/containers /etc/ceph /var/opt/cray/sdu/collection-mount /var/lib/admin-tools /var/lib/s3fs_cache /var/lib/containerd If the umount command is responding with target is busy on the storage node, then try the following:\n  Look for containers mounts:\nncn-s# mount | grep \u0026#34;containers\u0026#34; /dev/mapper/metalvg0-CONTAIN on /var/lib/containers type xfs (rw,noatime,swalloc,attr2,largeio,inode64,allocsize=131072k,logbufs=8,logbsize=32k,noquota) /dev/mapper/metalvg0-CONTAIN on /var/lib/containers/storage/overlay type xfs (rw,noatime,swalloc,attr2,largeio,inode64,allocsize=131072k,logbufs=8,logbsize=32k,noquota)   Unmount /var/lib/containers/storage/overlay.\nncn-s# umount -v /var/lib/containers/storage/overlay umount: /var/lib/containers/storage/overlay unmounted   Unmount /var/lib/containers.\nncn-s# umount -v /var/lib/containers umount: /var/lib/containers unmounted     Worker nodes\nncn-w# umount -v /var/lib/kubelet /var/lib/sdu /run/containerd /var/lib/containerd /run/lib-containerd /var/opt/cray/sdu/collection-mount /var/lib/admin-tools /var/lib/s3fs_cache /var/lib/containerd     Stop cray-sdu-rda on all node types (master, storage, or worker).\n  See if any cray-sdu-rda containers are running.\nncn# podman ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 7741d5096625 registry.local/sdu-docker-stable-local/cray-sdu-rda:1.1.1 /bin/sh -c /usr/s... 6 weeks ago Up 6 weeks ago cray-sdu-rda   If there is a running cray-sdu-rda container in the above output, then stop it using the container ID:\nncn# podman stop 7741d5096625 7741d50966259410298bb4c3210e6665cdbd57a82e34e467d239f519ae3f17d4     Remove etcd device on master nodes ONLY.\n  Determine whether or not an etcd volume is present.\nncn-m# dmsetup ls Expected output when the etcd volume is present will show ETCDLVM, but the numbers might be different.\nETCDLVM (254:1)   Remove the etcd device mapper.\nncn-m# dmsetup remove $(dmsetup ls | grep -i etcd | awk \u0026#39;{print $1}\u0026#39;)  NOTE: The following output means the etcd volume mapper is not present. This is okay.\n No device specified. Command failed.     Remove etcd volumes on master nodes ONLY.\nncn-m# vgremove etcdvg0   Remove metal LVM on all node types (master, storage, or worker).\nncn# vgremove -f -v --select \u0026#39;vg_name=~metal*\u0026#39;  NOTE: Optionally, run the pvs command. If any drives are still listed, then remove them with pvremove, but this is rarely needed. Also, if the above command fails or returns a warning about the filesystem being in use, ignore the error and proceed to the next step. This will not inhibit the wipe process.\n   Wipe the disks and RAIDs on all node types (master, storage, or worker).\nIf wiping multiple nodes, this group of commands should be done in succession on one node before moving to do the same set of commands on the next node. The nodes should be addressed in descending order for each type of node. Start with the utility storage nodes, then the worker nodes, then ncn-m003, and finally ncn-m002.\n WARNING: Do not run these commands on ncn-m001\n   List the disks for verification.\nncn# ls -1 /dev/sd* /dev/disk/by-label/*   Wipe the disks and RAIDs.\nncn# wipefs --all --force /dev/sd* /dev/disk/by-label/* If any disks had labels present, then output from wipefs looks similar to the following:\n/dev/sda: 8 bytes were erased at offset 0x00000200 (gpt): 45 46 49 20 50 41 52 54 /dev/sda: 8 bytes were erased at offset 0x6fc86d5e00 (gpt): 45 46 49 20 50 41 52 54 /dev/sda: 2 bytes were erased at offset 0x000001fe (PMBR): 55 aa /dev/sdb: 6 bytes were erased at offset 0x00000000 (crypto_LUKS): 4c 55 4b 53 ba be /dev/sdb: 6 bytes were erased at offset 0x00004000 (crypto_LUKS): 53 4b 55 4c ba be /dev/sdc: 8 bytes were erased at offset 0x00000200 (gpt): 45 46 49 20 50 41 52 54 /dev/sdc: 8 bytes were erased at offset 0x6fc86d5e00 (gpt): 45 46 49 20 50 41 52 54 /dev/sdc: 2 bytes were erased at offset 0x000001fe (PMBR): 55 aa Verify that there are no error messages in the output.\nThe wipefs command may fail if no labeled disks are found, which is an indication of a larger problem.\n    "
},
{
	"uri": "/docs-csm/en-12/install/reset_root_password_on_livecd/",
	"title": "Reset Root Password On Livecd",
	"tags": [],
	"description": "",
	"content": "Reset root Password on LiveCD It may become desirable to clear the password on the LiveCD.\nThe root password is preserved within the COW partition at cow:rw/etc/shadow. This is the modified copy of the /etc/shadow file used by the operating system.\nIf a site/user needs to reset/clear the password for root, they can mount their USB on another machine and remove this file from the COW partition. When next booting from the USB it will reinitialize to an empty password for root, and again at next login it will require the password to be changed.\nClear the password (macOS or Linux):\nmypc:~ \u0026gt; mount -vL cow /mnt mypc:~ \u0026gt; sudo rm -fv /mnt/rw/etc/shadow mypc:~ \u0026gt; umount -v /mnt "
},
{
	"uri": "/docs-csm/en-12/install/restart_network_services_and_interfaces_on_ncns/",
	"title": "Restart Network Services And Interfaces On NCNs",
	"tags": [],
	"description": "",
	"content": "Restart Network Services and Interfaces on NCNs Interfaces within the network stack can be reloaded or reset to fix wedged interfaces. The NCNs have network device names set during first boot. The names vary based on the available hardware. For more information, see NCN Networking. Any process covered on this page will be covered by the installer.\nThe use cases for resetting services:\n Interfaces not showing up IP Addresses not applying Member/children interfaces not being included  Topics  Restart Network Services and Interfaces))) Command Reference  Check interface status (up/down/broken) Show routing and status for all devices Print real devices ( ignore no-device ) Show the currently enabled network service (Wicked or Network Manager)    Restart Network Services There are a few daemons that make up the SUSE network stack. The following are sorted by safest to touch relative to keeping an SSH connection up.\n  wickedd.service: The daemons handling each interface. Resetting this clears stale configuration. This command restarts the wickedd service without reconfiguring the network interfaces.\nncn# systemctl restart wickedd   wicked.service: The overarching service for spawning daemons and manipulating interface configuration. Resetting this reloads daemons and configuration. This command restarts the wicked service which will respawns daemons and reconfigure the network.\nncn# systemctl restart wicked   network.service: Responsible for network configuration per interface; This does not reload wicked. This command restarts the network interface configuration, but leaves wicked daemons alone.\n NOTE: Commonly the problem exists within wicked. This is a last resort in the event the configuration is so bad wicked cannot handle it.\n # Restart the network interface configuration, but leaves wicked daemons alone. ncn# systemctl restart network   Command Reference   Check interface status (up/down/broken):\nncn# wicked ifstatus   Show routing and status for all devices:\nncn# wicked ifstatus --verbose all lo up link: #1, state up type: loopback control: persistent config: compat:suse:/etc/sysconfig/network/ifcfg-lo, uuid: 6ad37e59-72d7-5988-9675-93b8df96d9f6 leases: ipv4 static granted leases: ipv6 static granted addr: ipv4 127.0.0.1/8 scope host label lo [static] addr: ipv6 ::1/128 scope host [static] route: ipv6 ::1/128 type unicast table main scope universe protocol kernel priority 256 em1 device-unconfigured link: #2, state down, mtu 1500 type: ethernet, hwaddr a4:bf:01:48:1f:dc config: none em2 device-unconfigured link: #3, state down, mtu 1500 type: ethernet, hwaddr a4:bf:01:48:1f:dd config: none mgmt0 enslaved link: #4, state up, mtu 9000, master bond0 type: ethernet, hwaddr b8:59:9f:f9:1c:8e control: none config: compat:suse:/etc/sysconfig/network/ifcfg-mgmt0, uuid: 7175c041-ee2b-5ce2-a4d7-67fa6cb94a17 mgmt1 device-unconfigured link: #5, state up, mtu 9000, master bond0 type: ethernet, hwaddr b8:59:9f:f9:1c:8e config: none bond0 device-unconfigured link: #6, state up, mtu 9000 type: bond, mode ieee802-3ad, hwaddr b8:59:9f:f9:1c:8e config: none addr: ipv6 fe80::ba59:9fff:fef9:1c8e/64 scope link route: ipv6 fe80::/64 type unicast table main scope universe protocol kernel priority 256 bond0.nmn0 device-unconfigured link: #7, state up, mtu 9000 type: vlan bond0[2], hwaddr b8:59:9f:f9:1c:8e config: none addr: ipv4 10.252.2.2/17 brd 10.252.2.2 scope universe label bond0.nmn0 addr: ipv6 fe80::ba59:9fff:fef9:1c8e/64 scope link route: ipv4 0.0.0.0/0 via 10.252.1.1 dev bond0.nmn0 type unicast table main scope universe protocol boot route: ipv4 10.252.0.0/17 type unicast table main scope link protocol kernel pref-src 10.252.2.2 route: ipv6 fe80::/64 type unicast table main scope universe protocol kernel priority 256 bond0.hmn0 device-unconfigured link: #8, state up, mtu 9000 type: vlan bond0[4], hwaddr b8:59:9f:f9:1c:8e config: none addr: ipv4 10.254.2.2/17 brd 10.254.2.2 scope universe label bond0.hmn0 addr: ipv6 fe80::ba59:9fff:fef9:1c8e/64 scope link route: ipv4 10.254.0.0/17 type unicast table main scope link protocol kernel pref-src 10.254.2.2 route: ipv6 fe80::/64 type unicast table main scope universe protocol kernel priority 256 bond0.can0 device-unconfigured link: #9, state up, mtu 9000 type: vlan bond0[7], hwaddr b8:59:9f:f9:1c:8e config: none addr: ipv4 10.102.9.12/24 brd 10.102.9.12 scope universe label bond0.can0 addr: ipv6 fe80::ba59:9fff:fef9:1c8e/64 scope link route: ipv4 10.102.9.0/24 type unicast table main scope link protocol kernel pref-src 10.102.9.12 route: ipv6 fe80::/64 type unicast table main scope universe protocol kernel priority 256 eth0 no-device   Print real devices (ignore no-device):\nncn# wicked show --verbose all   Show the currently enabled network service (Wicked or Network Manager):\nncn# systemctl show -p Id network.service Id=wicked.service   "
},
{
	"uri": "/docs-csm/en-12/install/safeguards_for_csm_ncn_upgrades/",
	"title": "Safeguards For",
	"tags": [],
	"description": "",
	"content": "Safeguards for CSM This page covers safe-guards for preventing destructive behaviors on management nodes.\nIf reinstalling or upgrading, run through these safe-guards on a by-case basis:\n Whether or not CEPH should be preserved. Whether or not the RAIDs should be protected.  Safeguard CEPH OSDs   Edit /var/www/ephemeral/configs/data.json and align the following options:\n{ .. // Disables Ceph wipe: \u0026#34;wipe-ceph-osds\u0026#34;: \u0026#34;no\u0026#34; .. } { .. // Restores default behavior: \u0026#34;wipe-ceph-osds\u0026#34;: \u0026#34;yes\u0026#34; .. } pit# vi /var/www/ephemeral/configs/data.json   Quickly toggle yes or no to the file:\n# set wipe-ceph-osds=no pit# sed -i \u0026#39;s/wipe-ceph-osds\u0026#34;: \u0026#34;yes\u0026#34;/wipe-ceph-osds\u0026#34;: \u0026#34;no\u0026#34;/g\u0026#39; /var/www/ephemeral/configs/data.json # set wipe-ceph-osds=yes pit# sed -i \u0026#39;s/wipe-ceph-osds\u0026#34;: \u0026#34;no\u0026#34;/wipe-ceph-osds\u0026#34;: \u0026#34;yes\u0026#34;/g\u0026#39; /var/www/ephemeral/configs/data.json   Activate the new setting:\npit# systemctl restart basecamp   Safeguard RAIDS / BOOTLOADERS / SquashFS / OverlayFS  Edit /var/www/boot/script.ipxe and align the following options as follows:    rd.live.overlay.reset=0 will prevent any overlayFS files from being cleared.\n  metal.no-wipe=1 will guard against touching RAIDs, disks, and partitions.\npit# vi /var/www/boot/script.ipxe   "
},
{
	"uri": "/docs-csm/en-12/install/set_gigabyte_node_bmc_to_factory_defaults/",
	"title": "Set Gigabyte Node BMC To Factory Defaults",
	"tags": [],
	"description": "",
	"content": "Set Gigabyte Node BMC to Factory Defaults There are cases when a Gigabyte node BMC must be reset to its factory default settings. This page describes when this reset is appropriate, and how to use management scripts and text files to do the reset.\nSet the BMC to the factory default settings in the following cases:\n There are problems using the ipmitool command and Redfish does not respond. There are problems using the ipmitool command and Redfish is running. When BIOS or BMC flash procedures fail using Redfish.  Procedure This section refers to scripts that exist only in the PIT environment. If necessary, copy the LiveCD data from a different machine to get these scripts.\nNote: When BIOS or BMC flash procedures fail using Redfish:\n Run the do_bmc_factory_default.sh script Run ipmitool -I lanplus -U admin -P password -H BMC_or_CMC_IP mc reset cold and flash it again after five minutes.  If booted from the PIT node:\n The firmware packages are located in the HPE Cray EX HPC Firmware Pack (HFP) provided with the Shasta release. The required scripts are located in /var/www/fw/river/sh-svr-scripts    Create a node.txt file and add the target node information as shown:\nExample node.txt file with two nodes:\n10.254.1.11 x3000c0s9b0 ncn-w002 10.254.1.21 x3000c0s27b0 uan01 Example node.txt file with one node:\n10.254.1.11 x3000c0s9b0 ncn-w002   Use Redfish to reset the BMC to factory default.\n  Option 1: If the BMC is running version 12.84.01 or later, then run:\nncn# sh do_Redfish_BMC_Factory.sh   Option 2: Use ipmitool to reset the BMC to factory defaults:\nncn# sh do_bmc_factory_default.sh   Option 3: Use the power control script:\nncn# sh do_bmc_power_control.sh raw 0x32 0x66 (raw 0x32 0x66 are Gigabyte/AMI vendor-specific IPMI commands to reset to factory defaults.)\n    Wait five minutes (300 seconds) for the BMC and Redfish to initialize.\nncn# sleep 300   Add the default login and password to the BMC.\nncn# sh do_bmc_root_account.sh   Add the default login and password to Redfish.\nIMPORTANT: If the BMC is version 12.84.01 or later, then skip this step.\nncn# sh do_Redfish_credentials.sh   Make sure the BMC is not in failover mode.\nRun the script with the read option to check the BMC status:\nncn# sh do_bmc_change_mode_to_manual.sh read --------------------------------------------------- [ BMC: 172.30.48.33 ] =\u0026gt; Manual mode (O) The BMC is in failover mode if the previous command includes output similar to the following:\n[ BMC: 172.30.48.33 ] ==\u0026gt; Failover mode (X) \u0026lt;== If the BMC is in failover mode, then change the BMC back to manual mode:\nncn# sh do_bmc_change_mode_to_manual.sh change   If the BMC is in a booted management NCN running Shasta v1.3 or later, then reapply the static IP address and clear the DHCP address from HSM/KEA.\nDetermine the MAC address in HSM for the DHCP address for the BMC, delete it from HSM, and restart KEA.\n  Reboot or power cycle the target nodes.\n  After the BMC is reset to factory defaults, wait 300 seconds for BMC and Redfish initialization.\nncn# sleep 300   Add the default login and password to the BMC:\nncn# sh do_bmc_root_account.sh   "
},
{
	"uri": "/docs-csm/en-12/install/shcd_hmn_connections_rules/",
	"title": "Shcd Hmn Tab/hmn Connections Rules",
	"tags": [],
	"description": "",
	"content": "SHCD HMN Tab/HMN Connections Rules Table of Contents  Introduction Compute node  Dense four node chassis - Gigabyte or Intel chassis Single node chassis - Apollo 6500 XL675D Dual node chassis - Apollo 6500 XL645D   Chassis Management Controller (CMC) Management node  Master Worker Storage   Application node  Single node chassis  Building component names (xnames) for nodes in a single application node chassis   Dual node chassis  Building component names (xnames) for nodes in a dual application node chassis     Columbia Slingshot switch PDU cabinet controller Cooling door Management switches  Introduction The HMN tab of the SHCD describes the air-cooled hardware present in the system and how these devices are connected to the Hardware Management Network (HMN). This information is required by CSM to perform hardware discovery and geolocation of air-cooled hardware in the system. The HMN tab may contain other hardware that is not managed by CSM, but is connected to the HMN.\nThe hmn_connections.json file is derived from the HMN tab of a system SHCD, and is one of the seed files required by the Cray Site Init (CSI) tool to generate configuration files required to install CSM. The hmn_connections.json file is almost a one-to-one copy of the right-hand table in the HMN tab of the SHCD. It is an array of JSON objects, and each object represents a row from the HMN tab. Any row that is not understood by CSI will be ignored; this includes any additional devices connected to the HMN that are not managed by CSM.\nThe System Layout Service (SLS) contains data about what hardware is in the system and how it is connected to the HMN network. This data is generated when the CSI tool generates configurations files for system. For air-cooled hardware, SLS will contain the SLS representation of the device and a Management Switch Connector object that describes what device is plugged into a particular management switch port.\nColumn mapping from SHCD to hmn_connections.json:\n   SHCD Column SHCD Column Name hmn_connections Field Description     J20 Source Source Name of the device connected to the HMN network   K20 Rack SourceRack Source rack; matches regular expression x\\d+   L20 Location SourceLocation For nodes (management, compute, application), this is bottom rack slot that the node occupies, and can be extracted by [a-zA-Z]*(\\d+)([a-zA-Z]*). For other device types, this is ignored.   M20  SourceSubLocation For compute nodes, this can be L, l, R, r, or blank. For other device types, this is ignored.   N20 Parent SourceParent    O20  not used    P20 Port not used    Q20 Destination not used    R20 Rack DestinationRack Rack of the management switch   S20 Location DestinationLocation Rack slot of the management switch   T20  not used    U20 Port DestinationPort Switch port on the management switch     Only J20 needs to have the column name of Source. There are no requirements on what the other columns should be named.\n Some conventions for this document:\n All Source names from the SHCD are converted to lowercase before being processed by the CSI tool. Throughout this document, the field names from the hmn_connections.json file will be used to referenced values from the SHCD. Each device type has an example of how it is represented in the HMN tab of the SHCD, the hmn_connections.json file, and in SLS.  Compute node The Source field needs to match these conditions in order to be considered a compute node:\n  Has one of the following prefixes:\n nid cn    Ends with an integer that matches this regular expression: (\\d+$)\n This integer is the Node ID (NID) for the node Each node should have a unique NID value    For example, the following are valid Source field values for compute nodes:\n nid000001 cn1 cn-01  Depending on the type of compute node, additional rules may apply. Compute nodes in the follow sections will use the nid prefix.\nDense four node chassis - Gigabyte or Intel chassis  Apollo 2000 compute nodes are not currently supported by CSM.\n Air-cooled compute nodes are typically in a 2U chassis that contains four compute nodes. Each of the compute nodes in the chassis gets its own row in the HMN tab, plus a parent row.\n The value of the SourceParent field is used to group together the 4 nodes that are contained within the same chassis, and it is used to reference another row in the SHCD HMN tab. The referenced SourceParent row is used to determine the rack slot that the compute nodes occupy. The SourceParent row can be a Chassis Management Controller, which can be used to control devices underneath it. This device typically will have a connection to the HMN. A Gigabyte CMC is an example of a CMC. If a CMC is not connected to the HMN network, this will prevent CSM services from managing that device. The SourceParent row can be a virtual parent that is used to group the compute nodes together symbolically into a chassis. It does not need to not have a connection to the HMN.  The rack slot that a compute node occupies is determined by the rack slot of the SourceParent. The SourceLocation of the parent is the bottom unit number of the chassis. All four nodes in the same chassis receive a component name (xname) with the bottom unit number of the chassis.\nThe BMC ordinal for a node\u0026rsquo;s BMC is derived from the NID of the node by applying a modulo of four and then adding one. For example, a node with NID 17 will have a BMC ordinal of (17 modulo 4) + 1 == 1 + 1 == 2. Therefore a node with NID 17 in slot 10 in cabinet 3000 will have the component name (xname) of x3000s10b2n0.\nCompute: Four node chassis: SHCD Example: Four compute nodes in the same chassis with a CMC connected to the network. The compute node chassis is located in slot 17 of cabinet 3000, and the compute node BMCs are connected to ports 33-36 in the management leaf-bmc-bmc switch in slot 14 of cabinet 3000. Port 32 on the leaf-bmc-bmc switch is for the CMC in the chassis. Refer to Chassis Management Controller section for additional details.\n   Source Rack Location  Parent  Port Destination Rack Location  Port     nid000001 x3000 u17 R SubRack-001-CMC - j3 sw-smn01 x3000 u14 - j36   nid000002 x3000 u18 R SubRack-001-CMC - j3 sw-smn01 x3000 u14 - j35   nid000003 x3000 u18 L SubRack-001-CMC - j3 sw-smn01 x3000 u14 - j34   nid000004 x3000 u17 L SubRack-001-CMC - j3 sw-smn01 x3000 u14 - j33   SubRack-001-CMC x3000 u17   - cmc sw-smn01 x3000 u14 - j32     Note: Source names like cn1 and cn-01 are equivalent to the value nid000001.\n Example: Four compute nodes in the same chassis without a CMC connected to the HMN network.\n   Source Rack Location  Parent  Port Destination Rack Location  Port     nid000001 x3000 u17 R SubRack-001-CMC - j3 sw-smn01 x3000 u14 - j36   nid000002 x3000 u18 R SubRack-001-CMC - j3 sw-smn01 x3000 u14 - j35   nid000003 x3000 u18 L SubRack-001-CMC - j3 sw-smn01 x3000 u14 - j34   nid000004 x3000 u17 L SubRack-001-CMC - j3 sw-smn01 x3000 u14 - j33   SubRack-001-CMC x3000 u17   -           Note: Source names like cn1 and cn-01 are equivalent to the value nid000001.\n Compute: Four node chassis: HMN connections Example Four compute nodes in the same chassis with the a CMC connected to the network. The compute node chassis is located in slot 17 of cabinet 3000, and the compute node BMCs are connected to ports 33-36 in the management leaf-bmc-bmc switch in slot 14 of cabinet 3000. The SourceParent for the compute nodes SubRack-001-CMC is connected to the port 32 on the leaf-bmc-bmc switch.\n{\u0026#34;Source\u0026#34;:\u0026#34;nid000001\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u17\u0026#34;,\u0026#34;SourceSubLocation\u0026#34;:\u0026#34;R\u0026#34;,\u0026#34;SourceParent\u0026#34;:\u0026#34;SubRack-001-CMC\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u14\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j36\u0026#34;} {\u0026#34;Source\u0026#34;:\u0026#34;nid000002\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u18\u0026#34;,\u0026#34;SourceSubLocation\u0026#34;:\u0026#34;R\u0026#34;,\u0026#34;SourceParent\u0026#34;:\u0026#34;SubRack-001-CMC\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u14\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j35\u0026#34;} {\u0026#34;Source\u0026#34;:\u0026#34;nid000003\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u18\u0026#34;,\u0026#34;SourceSubLocation\u0026#34;:\u0026#34;L\u0026#34;,\u0026#34;SourceParent\u0026#34;:\u0026#34;SubRack-001-CMC\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u14\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j34\u0026#34;} {\u0026#34;Source\u0026#34;:\u0026#34;nid000004\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u17\u0026#34;,\u0026#34;SourceSubLocation\u0026#34;:\u0026#34;L\u0026#34;,\u0026#34;SourceParent\u0026#34;:\u0026#34;SubRack-001-CMC\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u14\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j33\u0026#34;} {\u0026#34;Source\u0026#34;:\u0026#34;SubRack-001-CMC\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u17\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u14\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j32\u0026#34;}  Note: Source values like cn1 and cn-01 are equivalent to the value nid000001.\n Example: Four compute nodes in the same chassis without a CMC connected to the HMN network.\n The SourceParent for the compute nodes SubRack-001-CMC is not connected the HMN network.\n {\u0026#34;Source\u0026#34;:\u0026#34;nid000001\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u17\u0026#34;,\u0026#34;SourceSubLocation\u0026#34;:\u0026#34;R\u0026#34;,\u0026#34;SourceParent\u0026#34;:\u0026#34;SubRack-001-CMC\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u14\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j36\u0026#34;} {\u0026#34;Source\u0026#34;:\u0026#34;nid000002\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u18\u0026#34;,\u0026#34;SourceSubLocation\u0026#34;:\u0026#34;R\u0026#34;,\u0026#34;SourceParent\u0026#34;:\u0026#34;SubRack-001-CMC\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u14\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j35\u0026#34;} {\u0026#34;Source\u0026#34;:\u0026#34;nid000003\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u18\u0026#34;,\u0026#34;SourceSubLocation\u0026#34;:\u0026#34;L\u0026#34;,\u0026#34;SourceParent\u0026#34;:\u0026#34;SubRack-001-CMC\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u14\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j34\u0026#34;} {\u0026#34;Source\u0026#34;:\u0026#34;nid000004\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u17\u0026#34;,\u0026#34;SourceSubLocation\u0026#34;:\u0026#34;L\u0026#34;,\u0026#34;SourceParent\u0026#34;:\u0026#34;SubRack-001-CMC\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u14\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j33\u0026#34;} {\u0026#34;Source\u0026#34;:\u0026#34;SubRack-001-CMC\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u17\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34; \u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34; \u0026#34;}  Note: Source values like cn1 and cn-01 are equivalent to the value nid000001.\n Compute: Four node chassis: SLS The CSI tool will generate the following SLS representations for compute nodes and their BMC connections to the HMN network.\nCompute: Four node chassis: SLS: Compute node with NID 1   Node\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0s17b1\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0s17b1n0\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_node\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;Node\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NID\u0026#34;: 1, \u0026#34;Role\u0026#34;: \u0026#34;Compute\u0026#34;, \u0026#34;Aliases\u0026#34;: [ \u0026#34;nid000001\u0026#34; ] } }   Management switch connector\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0w14\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0w14j36\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_mgmt_switch_connector\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;MgmtSwitchConnector\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NodeNics\u0026#34;: [ \u0026#34;x3000c0s17b1\u0026#34; ], \u0026#34;VendorName\u0026#34;: \u0026#34;1/1/36\u0026#34; } }  For Aruba leaf-bmc switches, the VendorName value will be 1/1/36. Dell leaf-bmc switches will have value ethernet1/1/36.\n   Compute: Four node chassis: SLS: Compute node with NID 2   Node:\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0s17b2\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0s17b2n0\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_node\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;Node\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NID\u0026#34;: 2, \u0026#34;Role\u0026#34;: \u0026#34;Compute\u0026#34;, \u0026#34;Aliases\u0026#34;: [ \u0026#34;nid000002\u0026#34; ] } }   Management switch connector\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0w14\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0w14j35\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_mgmt_switch_connector\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;MgmtSwitchConnector\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NodeNics\u0026#34;: [ \u0026#34;x3000c0s17b2\u0026#34; ], \u0026#34;VendorName\u0026#34;: \u0026#34;1/1/35\u0026#34; } }  For Aruba leaf-bmc switches, the VendorName value will be 1/1/35. Dell leaf-bmc switches will have value ethernet1/1/35.\n   Compute: Four node chassis: SLS: Compute node with NID 3   Node\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0s17b3\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0s17b3n0\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_node\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;Node\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NID\u0026#34;: 3, \u0026#34;Role\u0026#34;: \u0026#34;Compute\u0026#34;, \u0026#34;Aliases\u0026#34;: [ \u0026#34;nid000003\u0026#34; ] } }   Management switch connector\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0w14\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0w14j34\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_mgmt_switch_connector\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;MgmtSwitchConnector\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NodeNics\u0026#34;: [ \u0026#34;x3000c0s17b3\u0026#34; ], \u0026#34;VendorName\u0026#34;: \u0026#34;1/1/34\u0026#34; } }  For Aruba leaf-bmc switches, the VendorName value will be 1/1/34. Dell leaf-bmc switches will have value ethernet1/1/34.\n   Compute: Four node chassis: SLS: Compute node with NID 4   Node\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0s17b4\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0s17b4n0\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_node\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;Node\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NID\u0026#34;: 4, \u0026#34;Role\u0026#34;: \u0026#34;Compute\u0026#34;, \u0026#34;Aliases\u0026#34;: [ \u0026#34;nid000004\u0026#34; ] } }   Management switch connector\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0w14\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0w14j33\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_mgmt_switch_connector\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;MgmtSwitchConnector\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NodeNics\u0026#34;: [ \u0026#34;x3000c0s17b4\u0026#34; ], \u0026#34;VendorName\u0026#34;: \u0026#34;1/1/33\u0026#34; } }  For Aruba leaf-bmc switches, the VendorName value will be 1/1/33. Dell leaf-bmc switches will have value ethernet1/1/33.\n   Single node chassis - Apollo 6500 XL675D A single compute node chassis needs to match these additional conditions:\n No SourceParent defined No SourceSubLocation defined  This convention applies to all compute nodes that have a single node in a chassis, such as the Apollo XL675D.\nCompute: Single node chassis: SHCD Example: A single chassis node with NID 1 located in slot 2 of cabinet 3000. The node\u0026rsquo;s BMC is connected to port 36 of the management leaf-bmc switch in slot 40 of cabinet 3000.\n   Source Rack Location  Parent  Port Destination Rack Location  Port     nid000001 x3000 u02   - j03 sw-smn01 x3000 u40 - j36     Note: Source values like cn1 and cn-01 are equivalent to the value nid000001.\n Compute: Single node chassis: HMN connections The HMN connections representation for the two SHCD table rows above:\n{\u0026#34;Source\u0026#34;:\u0026#34;nid000001\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u02\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u40\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j36\u0026#34;}  Note: Source values like cn1 and cn-01 are equivalent to the value nid000001.\n Compute: Single node chassis: SLS Compute node:\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0s2b0\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0s2b0n0\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_node\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;Node\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NID\u0026#34;: 1, \u0026#34;Role\u0026#34;: \u0026#34;Compute\u0026#34;, \u0026#34;Aliases\u0026#34;: [ \u0026#34;nid000001\u0026#34; ] } } Management switch connector\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0w40\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0w40j36\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_mgmt_switch_connector\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;MgmtSwitchConnector\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NodeNics\u0026#34;: [ \u0026#34;x3000c0s2b0\u0026#34; ], \u0026#34;VendorName\u0026#34;: \u0026#34;1/1/36\u0026#34; } }  For Aruba leaf-bmc switches, the VendorName value will be 1/1/36. Dell leaf-bmc switches will have value ethernet1/1/36.\n Dual node chassis - Apollo 6500 XL645D Additional matching conditions:\n SourceSubLocation field contains one of: L, l, R, r.  In addition to the top-level compute node naming requirements, when there are two nodes in a single chassis, the SourceSubLocation is required. The SourceSubLocation can contain one of the following values: L, l, R, r. These values are used to determine the BMC ordinal for the node.\n L or l translates into the component name (xname) having b1.  For example, x3000c0s10b1b0   R or r translates into the component name (xname) having b2.  For example, x3000c0s10b1b0    This convention applies to all compute nodes that have two nodes in a chassis, such as the Apollo XL645D.\nCompute: Dual node chassis: SHCD Example: A compute node chassis with 2 nodes located in slot 8 of cabinet 3000. NID 1 is on the left side of the chassis, and NID 2 is on the right side. The two node BMCs are connected to ports 37 and 38 of the management leaf-bmc switch in slot 40 of cabinet 3000.\n   Source Rack Location  Parent  Port Destination Rack Location  Port     nid000001 x3000 u08 L  - j03 sw-smn01 x3000 u40 - j38   nid000002 x3000 u08 R  - j03 sw-smn01 x3000 u40 - j37     Note: Source values like cn1 and cn-01 are equivalent to the value nid000001.\n Compute: Dual node chassis: HMN connections The HMN connections representation for the two SHCD table rows above:\n{\u0026#34;Source\u0026#34;:\u0026#34;nid000001\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u08\u0026#34;,\u0026#34;SourceSubLocation\u0026#34;:\u0026#34;L\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u40\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j37\u0026#34;} {\u0026#34;Source\u0026#34;:\u0026#34;nid000002\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u08\u0026#34;,\u0026#34;SourceSubLocation\u0026#34;:\u0026#34;R\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u40\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j38\u0026#34;}  Note: Source values like cn1 and cn-01 are equivalent to the value nid000001.\n Compute: Dual node chassis: SLS Compute: Dual node chassis: SLS: Compute node with NID 1   Node:\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0s8b1\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0s8b1n0\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_node\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;Node\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NID\u0026#34;: 3, \u0026#34;Role\u0026#34;: \u0026#34;Compute\u0026#34;, \u0026#34;Aliases\u0026#34;: [ \u0026#34;nid000003\u0026#34; ] } }   Management switch connector\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0w40\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0w40j38\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_mgmt_switch_connector\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;MgmtSwitchConnector\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NodeNics\u0026#34;: [ \u0026#34;x3000c0s8b1\u0026#34; ], \u0026#34;VendorName\u0026#34;: \u0026#34;1/1/38\u0026#34; } }  For Aruba leaf-bmc switches, the VendorName value will be 1/1/38. Dell leaf-bmc switches will have value ethernet1/1/38.\n   Compute: Dual node chassis: SLS: Compute node with NID 2   Node\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0s8b2\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0s8b2n0\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_node\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;Node\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NID\u0026#34;: 2, \u0026#34;Role\u0026#34;: \u0026#34;Compute\u0026#34;, \u0026#34;Aliases\u0026#34;: [ \u0026#34;nid000002\u0026#34; ] } }   Management switch connector\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0w40\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0w40j37\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_mgmt_switch_connector\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;MgmtSwitchConnector\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NodeNics\u0026#34;: [ \u0026#34;x3000c0s8b2\u0026#34; ], \u0026#34;VendorName\u0026#34;: \u0026#34;1/1/37\u0026#34; } }  For Aruba leaf-bmc switches, the VendorName value will be 1/1/37. Dell leaf-bmc switches will have value ethernet1/1/37.\n   Chassis Management Controller (CMC)  Note: This is not the same as an RCM (Rack Consolidation Module) that is present in Apollo 2000 chassis.\n Matching conditions:\n This row is referenced as a SourceParent of another row Source field contains cmc or CMC  A Chassis Management Controller (CMC) is a device which can be used to control the BMCs underneath it. This device typically has a connection to the HMN. A Gigabyte CMC is an example of a CMC. If a CMC is not connected to the HMN network, this will prevent CSM services from managing that device.\nThese devices will have the BMC ordinal of 999 for their component names (xnames). For example, x3000c0s10b999.\nCMC: SHCD Example: The CMC for the chassis in slot 28 of cabinet 3000 is connected to port 32 of the management leaf-bmc switch in slot 22 of cabinet 3000.\n   Source Rack Location  Parent  Port Destination Rack Location  Port     SubRack-002-cmc x3000 u28   - cmc sw-smn01 x3000 u22 - j42    CMC: HMN Connections The HMN connections representation for the SHCD table row above:\n{\u0026#34;Source\u0026#34;:\u0026#34;SubRack-002-cmc\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u28\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u22\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j42\u0026#34;} CMC: SLS Chassis Management Controller:\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0s17b999\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_chassis_bmc\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;ChassisBMC\u0026#34; } Management switch connector:\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0w14\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0w14j32\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_mgmt_switch_connector\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;MgmtSwitchConnector\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NodeNics\u0026#34;: [ \u0026#34;x3000c0s17b999\u0026#34; ], \u0026#34;VendorName\u0026#34;: \u0026#34;1/1/32\u0026#34; } }  For Aruba leaf-bmc switches, the VendorName value will be 1/1/32. Dell leaf-bmc switches will have value ethernet1/1/32.\n Management node Master The Source field needs to match both of the following conditions:\n mn prefix Integer immediately after the prefix; can be padded with 0 characters  The integer after the prefix is used to determine the hostname of the master node. For example, mn02 corresponds to hostname ncn-m002.\nTypically, the BMC of the first master node is not connected to the HMN, as its BMC is connected to the site network.\nMaster: SHCD Example: master node where its BMC is connected to the HMN. The master node is in slot 2 in cabinet 3000, and its BMC is connected to port 25 in the management leaf-bmc switch in slot 14 of cabinet 3000.\n   Source Rack Location  Parent  Port Destination Rack Location  Port     mn02 x3000 u02 -   j3 sw-smn01 x3000 u14 - j25    Example: master node where its BMC is connected to the site network.\n   Source Rack Location  Parent  Port Destination Rack Location  Port     mn01 x3000 u01 -   j3         Master: HMN Connections Example: master node where its BMC is connected to the HMN\n{\u0026#34;Source\u0026#34;:\u0026#34;mn02\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u02\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u14\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j25\u0026#34;} Example: master node where its BMC is connected to the site network, and no connection to the HMN\n{\u0026#34;Source\u0026#34;:\u0026#34;mn01\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u01\u0026#34;}  The following is also equivalent to a master node with not connection to the HMN. The values DestinationRack, DestinationLocation, and DestinationPort can all contain whitespace and it is still considered to have no connection the HMN.\n{\u0026#34;Source\u0026#34;:\u0026#34;mn01\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u01\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34; \u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34; \u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34; \u0026#34;}  Master: SLS Management master node:\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0s2b0\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0s2b0n0\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_node\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;Node\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NID\u0026#34;: 100008, \u0026#34;Role\u0026#34;: \u0026#34;Management\u0026#34;, \u0026#34;SubRole\u0026#34;: \u0026#34;Master\u0026#34;, \u0026#34;Aliases\u0026#34;: [ \u0026#34;ncn-m002\u0026#34; ] } } Management switch connector:\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0w14\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0w14j25\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_mgmt_switch_connector\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;MgmtSwitchConnector\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NodeNics\u0026#34;: [ \u0026#34;x3000c0s2b0\u0026#34; ], \u0026#34;VendorName\u0026#34;: \u0026#34;1/1/25\u0026#34; } }  For Aruba leaf-bmc switches, the VendorName value will be 1/1/25. Dell leaf-bmc switches will have value ethernet1/1/25.\n Worker The Source field needs to match both of the following conditions:\n wn prefix Integer immediately after the prefix; can be padded with 0 characters  The integer after the prefix is used to determine the hostname of the worker node. For example, wn01 corresponds to hostname ncn-w001.\nWorker: SHCD Example: The worker node is in slot 4 of cabinet 3000, and its BMC is connected to port 48 of management leaf-bmc switch in slot 14 of cabinet 3000.\n   Source Rack Location  Parent  Port Destination Rack Location  Port     wn01 x3000 u04 -   j3 sw-smn01 x3000 u14 - j48    Worker: HMN connections The HMN connections representation for the SHCD table row above:\n{\u0026#34;Source\u0026#34;:\u0026#34;wn01\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u04\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u14\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j48\u0026#34;} Worker: SLS Management worker node:\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0s4b0\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0s4b0n0\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_node\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;Node\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NID\u0026#34;: 100006, \u0026#34;Role\u0026#34;: \u0026#34;Management\u0026#34;, \u0026#34;SubRole\u0026#34;: \u0026#34;Worker\u0026#34;, \u0026#34;Aliases\u0026#34;: [ \u0026#34;ncn-w001\u0026#34; ] } } Management switch connector:\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0w14\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0w14j48\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_mgmt_switch_connector\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;MgmtSwitchConnector\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NodeNics\u0026#34;: [ \u0026#34;x3000c0s4b0\u0026#34; ], \u0026#34;VendorName\u0026#34;: \u0026#34;1/1/48\u0026#34; } }  For Aruba leaf-bmc switches, the VendorName value will be 1/1/48. Dell leaf-bmc switches will have value ethernet1/1/48.\n Storage The Source field needs to match both of the following conditions:\n sn prefix Integer immediately after the prefix; can be padded with 0 characters  The integer after the prefix is used to determine the hostname of the storage node. For example, sn01 corresponds to hostname ncn-s001.\nStorage: SHCD Example: The storage node is in slot 4 of cabinet 3000, and its BMC is connected to port 29 of management leaf-bmc switch in slot 14 of cabinet 3000.\n   Source Rack Location  Parent  Port Destination Rack Location  Port     sn01 x3000 u07 -   j3 sw-smn01 x3000 u14 - j29    Storage: HMN connections The HMN connections representation for the SHCD table row above:\n{\u0026#34;Source\u0026#34;:\u0026#34;sn01\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u07\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u14\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j29\u0026#34;} Storage: SLS Management storage node:\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0s7b0\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0s7b0n0\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_node\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;Node\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NID\u0026#34;: 100003, \u0026#34;Role\u0026#34;: \u0026#34;Management\u0026#34;, \u0026#34;SubRole\u0026#34;: \u0026#34;Storage\u0026#34;, \u0026#34;Aliases\u0026#34;: [ \u0026#34;ncn-s001\u0026#34; ] } } Management switch connector:\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0w14\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0w14j29\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_mgmt_switch_connector\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;MgmtSwitchConnector\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NodeNics\u0026#34;: [ \u0026#34;x3000c0s7b0\u0026#34; ], \u0026#34;VendorName\u0026#34;: \u0026#34;1/1/29\u0026#34; } }  For Aruba leaf-bmc switches, the VendorName value will be 1/1/29. Dell leaf-bmc switches will have value ethernet1/1/29.\n Application node The Source field needs to match these conditions to be considered an application node:\n Has one of the following prefixes:  uan gn ln     Note: The naming conventions for application nodes can be unique to a system. Refer to the Create Application Node Configuration YAML procedure for the process to add additional Source name prefixes for application nodes.\n Single node chassis A single application node chassis needs to match these additional conditions:\n No SourceParent defined No SourceSubLocation defined  This convention applies to all application nodes that have a single node in a chassis.\nApplication node: Single node chassis: SHCD Example: application node is in slot 4 of cabinet 3000, and its BMC is connected to port 25 of management leaf-bmc switch in slot 14 of cabinet 3000.\n   Source Rack Location  Parent  Port Destination Rack Location  Port     uan01 x3000 u04 -   j3 sw-smn01 x3000 u14 - j25    Application node: Single node chassis: HMN connections The HMN connections representation for the SHCD table row above:\n{\u0026#34;Source\u0026#34;:\u0026#34;uan01\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u04\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u14\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j25\u0026#34;} Building component names (xnames) for nodes in a single application node chassis The component name (xname) format for nodes takes the form of xXcCsSbBnN:\n xX: where X is the cabinet or rack identification number. cC: where C is the chassis identification number. This should be 0. sS: where S is the lowest slot the node chassis occupies. bB: where B is the ordinal of the node BMC. This should be 0. nN: where N is the ordinal of the node This should be 0.  For example, if an application node is in slot 4 of cabinet 3000, then it would have x3000c0s4b0n0 as its component name (xname).\nDual node chassis Additional matching conditions:\n SourceSubLocation field contains one of: L, l, R, r.  In addition to the top-level compute node naming requirements, when there are two nodes in a single chassis, the SourceSubLocation is required. The SourceSubLocation can contain one of the following values: L, l, R, r. These values are used to determine the BMC ordinal for the node.\n  L or l translates into the component name (xname) having b1\n For example, x3000c0s10b1b0    R or r translates into the component name (xname) having b2\n For example, x3000c0s10b1b0    This convention applies to all application nodes that have two nodes in a single chassis.\nApplication node: Dual node chassis: SHCD Example: An application node chassis with 2 nodes located in slot 8 of cabinet 3000. uan01 is on the left side of the chassis, and uan02 is on the right side. The two node BMCs are connected to ports 37 and 38 of the management leaf-bmc switch in slot 40 of cabinet 3000.\n   Source Rack Location  Parent  Port Destination Rack Location  Port     uan01 x3000 u08 L  - j03 sw-smn01 x3000 u40 - j38   uan02 x3000 u08 R  - j03 sw-smn01 x3000 u40 - j37     Note: Source values like cn1 and cn-01 are equivalent to the value nid000001.\n Application node: Dual node chassis: HMN connections The HMN connections representation for the two SHCD table rows above:\n{\u0026#34;Source\u0026#34;:\u0026#34;uan01\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u08\u0026#34;,\u0026#34;SourceSubLocation\u0026#34;:\u0026#34;L\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u40\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j37\u0026#34;} {\u0026#34;Source\u0026#34;:\u0026#34;uan02\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u08\u0026#34;,\u0026#34;SourceSubLocation\u0026#34;:\u0026#34;R\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u40\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j38\u0026#34;} Building component names (xnames) for nodes in a dual application node chassis The component name (xname) format for nodes takes the form of xXcCsSbBnN:\n  xX: where X is the Cabinet or Rack identification number.\n  cC: where C is the chassis identification number. This should be 0.\n  sS: where S is the lowest slot the node chassis occupies.\n  bB: where B is the ordinal of the node BMC.\n If the SourceSubLocation is L or l, then this should be 1. If the SourceSubLocation is R or r, then this should be 2.    nN: where N is the ordinal of the node This should be 0.\n  For example:\n If an application node is in slot 8 of cabinet 3000 with a SourceSubLocation of L, then it would have x3000c0s8b1n0 as its component name (xname). If an application node is in slot 8 of cabinet 3000 with a SourceSubLocation of R, then it would have x3000c0s8b2n0 as its component name (xname).  Columbia Slingshot switch The Source field needs to matching one of the following conditions:\n Prefixed with sw-hsn Equal to columbia or Columbia  The following are examples of valid matches:\n sw-hsn01 Columbia columbia  Columbia Slingshot switch: SHCD Example: A Columbia Slingshot switch in slot 42 of cabinet 3000. Its BMC is connected to port 45 of the leaf-bmc switch in slot 38 of cabinet 3000.\n   Source Rack Location  Parent  Port Destination Rack Location  Port     sw-hsn01 x3000 u42 -   j3 sw-smn01 x3000 u38 - j45     Note: Source values like Columbia or columbia are also valid.\n Columbia Slingshot switch: HMN connections The HMN connections representation for the SHCD table row above:\n{\u0026#34;Source\u0026#34;:\u0026#34;sw-hsn01\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u42\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u38\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j45\u0026#34;} Columbia Slingshot switch: SLS Router BMC:\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0r42b0\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_rtr_bmc\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;RouterBMC\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;Username\u0026#34;: \u0026#34;vault://hms-creds/x3000c0r42b0\u0026#34;, \u0026#34;Password\u0026#34;: \u0026#34;vault://hms-creds/x3000c0r42b0\u0026#34; } } Management switch connector:\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0w38\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0w38j45\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_mgmt_switch_connector\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;MgmtSwitchConnector\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NodeNics\u0026#34;: [ \u0026#34;x3000c0r42b0\u0026#34; ], \u0026#34;VendorName\u0026#34;: \u0026#34;1/1/45\u0026#34; } }  For Aruba leaf-bmc switches, the VendorName value will be 1/1/45. Dell leaf-bmc switches will have value ethernet1/1/45.\n PDU cabinet controller A PDU cabinet controller is the device that is connected to the HMN network and manages PDU underneath it.\nThe Source field for a PDU Cabinet Controller needs to match the following regular expression: (x\\d+p|pdu)(\\d+). This regular expression matches the following 2 patterns:\n xXpP where X is the cabinet number and P is the ordinal of the PDU controller in the cabinet pduP where P is the ordinal of the PDU controller in the cabinet  The following are examples of valid matches:\n x3000p0 pdu0  PDU cabinet controller: SHCD Example: PDU controller for cabinet 3000 is connected port 41 of the leaf-bmc switch in slot 38 of cabinet 3000.\n   Source Rack Location  Parent  Port Destination Rack Location  Port     x3000p0 x3000  -   i0 sw-smn01 x3000 u38 - j41    Alternative naming convention for the same HMN connection.\n   Source Rack Location  Parent  Port Destination Rack Location  Port     pdu0 x3000 pdu0 -   i0 sw-smn01 x3000 u38 - j41    PDU cabinet controller: HMN connections The HMN connections representation for the first SHCD table above.\n{\u0026#34;Source\u0026#34;:\u0026#34;x3000p0\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34; \u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u38\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j41\u0026#34;} The HMN connections representation for alternative naming convention.\n{\u0026#34;Source\u0026#34;:\u0026#34;pdu0\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;pdu0\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u38\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j41\u0026#34;} PDU cabinet controller: SLS Cabinet PDU controller:\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000m0\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_cab_pdu_controller\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;CabinetPDUController\u0026#34; } Management switch connector:\n{ \u0026#34;Parent\u0026#34;: \u0026#34;x3000c0w38\u0026#34;, \u0026#34;Xname\u0026#34;: \u0026#34;x3000c0w38j41\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;comptype_mgmt_switch_connector\u0026#34;, \u0026#34;Class\u0026#34;: \u0026#34;River\u0026#34;, \u0026#34;TypeString\u0026#34;: \u0026#34;MgmtSwitchConnector\u0026#34;, \u0026#34;ExtraProperties\u0026#34;: { \u0026#34;NodeNics\u0026#34;: [ \u0026#34;x3000m0\u0026#34; ], \u0026#34;VendorName\u0026#34;: \u0026#34;1/1/41\u0026#34; } }  For Aruba leaf-bmc switches, the VendorName value will be 1/1/41. Dell leaf-bmc switches will have value ethernet1/1/41.\n Cooling door The Source field for a cooling door contains door.\nCooling doors in an air-cooled cabinet are not currently supported by CSM software and are ignored.\nCooling door: SHCD Example: Cooling door for cabinet 3000 is connected to port 27 of the leaf-bmc switch in slot 36 of cabinet 3000.\n   Source Rack Location  Parent  Port Destination Rack Location  Port     x3000door-Motiv x3000  -   j1 sw-smn04 x3000 u36 - j27    Cooling door: HMN connections The HMN connections representation for the SHCD table row above:\n{\u0026#34;Source\u0026#34;:\u0026#34;x3000door-Motiv\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34; \u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u36\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j27\u0026#34;} Cooling door: SLS Cooling doors are not currently supported by HMS services, and are not present in SLS.\nManagement switches The Source field has one of the following prefixes:\n sw-agg sw-25g sw-40g sw-100g sw-smn  Any management switch that is found in the HMN tab of the SHCD will be ignored by CSI.\nManagement switches: SHCD Example: Management switch in slot 12 of cabinet 3000, its management port is connected to port 41 of the leaf-bmc management switch in slot 14 of cabinet 3000.\n   Source Rack Location  Parent  Port Destination Rack Location  Port     sw-25g01 x3000 u12 -   j1 sw-smn01 x3000 u14 - j41    Management switches: HMN connections The HMN connections representation for the SHCD table row above:\n{\u0026#34;Source\u0026#34;:\u0026#34;sw-25g01\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u12\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u14\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j41\u0026#34;} Management switches: SLS The management switches in SLS are not populated by hmn_connections.json, but instead from switch_metadata.csv.\n"
},
{
	"uri": "/docs-csm/en-12/install/switch_pxe_boot_from_onboard_nic_to_pcie/",
	"title": "Switch PXE Boot From Onboard NIC To Pcie",
	"tags": [],
	"description": "",
	"content": "Switch PXE Boot from Onboard NIC to PCIe This section details how to migrate NCNs from using their onboard NICs for PXE booting to booting over the PCIe cards.\n Switch PXE Boot from Onboard NIC to PCIe  Enabling UEFI PXE Mode  Mellanox  Print Current UEFI and SR-IOV State Setting Expected Values High-Speed Network  Obtaining Mellanox Tools     QLogic FastLinq  Kernel Modules     Disabling or Removing On-Board Connections    This applies to Newer systems (Spring 2020 or newer) where onboard NICs are still used.\nThis presents a need for migration for systems still using the legacy, preview topology. Specifically, systems with onboard connections to their leaf-bmc switches and NCNs need to disable/remove that connection.\nThis onboard NCN port came from before spine-switches were added to the shasta-network topology. The onboard connection was responsible for every network (MTL/NMN/HMN/CAN) and was the sole driver of PXE booting for. Now, NCNs use bond interfaces and spine switches for those networks; however, some older systems still have this legacy connection to their leaf-bmc switches and solely use it for PXE booting. This NIC is not used during runtime, and NCNs in this state should enable PXE within their PCIe devices' OpROMs and disable/remove this onboard connection.\nEnabling UEFI PXE Mode Mellanox The Mellanox CLI Tools are required to configure UEFI PXE from the Linux command line.\nOn any NCN (using 0.0.10 k8s, or 0.0.8 Ceph; anything built on ncn-0.0.21 or higher), run the following command to begin interacting with Mellanox cards:\n NOTE: If recovering NCNs with an earlier image without the Mellanox tools, refer to the Obtaining Mellanox Tools section.\n ncn# mst start Now mst status and other commands like mlxfwmanager or mlxconfig will work, and devices required for these commands will be created in /dev/mst.\nPrint Current UEFI and SR-IOV State  UEFI: All boots are UEFI; this needs to be enabled for access to the UEFI OpROM for configuration and for usage of UEFI firmwares. SR_IOV: This is currently DISABLED because it can attribute to longer POSTs on HPE blades (Gen10+, i.e. DL325 or DL385) with Mellanox ConnectX-5 PCIe cards. The technology is not yet enabled for virtualization usage, but may be in the future.\n Use the following snippet to display device name and current UEFI PXE state.\nncn# mst status for MST in $(ls /dev/mst/*); do mlxconfig -d ${MST} q | egrep \u0026#34;(Device|EXP_ROM|SRIOV_EN)\u0026#34; done Setting Expected Values Use the following snippet to enable and dump UEFI PXE state.\nfor MST in $(ls /dev/mst/*); do echo ${MST} mlxconfig -d ${MST} -y set EXP_ROM_UEFI_x86_ENABLE=1 mlxconfig -d ${MST} -y set EXP_ROM_PXE_ENABLE=1 mlxconfig -d ${MST} -y set SRIOV_EN=0 mlxconfig -d ${MST} q | egrep \u0026#34;EXP_ROM\u0026#34; done High-Speed Network For worker nodes with High-Speed network attachments, the PXE and SR-IOV features should be disabled.\n  Run mlxfwmanager to probe and dump the Mellanox PCIe cards.\nncn# mlxfwmanager   Find the device path for the HSN card, assuming it is a ConnectX-5 or other 100GB card, this should be easy to pick out.\n  Run the following commands, swapping the MST variable for the actual card path.\n# Set UEFI to YES ncn# MST=/dev/mst/mt4119_pciconf1 ncn# mlxconfig -d ${MST} -y set EXP_ROM_UEFI_ARM_ENABLE=0 ncn# mlxconfig -d ${MST} -y set EXP_ROM_UEFI_x86_ENABLE=0 ncn# mlxconfig -d ${MST} -y set EXP_ROM_PXE_ENABLE=0 ncn# mlxconfig -d ${MST} -y set SRIOV_EN=0 ncn# mlxconfig -d ${MST} q | egrep \u0026#34;EXP_ROM\u0026#34;   The Mellanox HSN card is now neutralized, and will only be usable in a booted system.\nObtaining Mellanox Tools For 1.4 or later systems, mft is installed in NCN images by default.\nFor 1.3 systems, obtain the Mellanox tools with the following commands:\nlinux# wget https://www.mellanox.com/downloads/MFT/mft-4.15.1-9-x86_64-rpm.tgz linux# tar -xzvf mft-4.15.1-9-x86_64-rpm.tgz linux# cd mft-4.15.1-9-x86_64-rpm/RPMS linux# rpm -ivh ./mft-4.15.1-9.x86_64.rpm linux# cd linux# mst start QLogic FastLinq These should already be configured for PXE booting.\nKernel Modules KMP modules for Qlogic are installed:\n qlgc-fastlinq-kmp-default qlgc-qla2xxx-kmp-default  Disabling or Removing On-Board Connections The onboard connection can be disabled in a few ways; short of removing the physical connection, one may shutdown the switchport as well.\nIf the physical connection can be removed, this is preferred and can be done so after enabling PXE on the PCIe cards.\nIf the connection must be disabled, log in to the respective leaf-bmc switch.\n  Connect to the leaf-bmc switch using serial or SSH connections.\nSelect one of the connection options below. The IP addresses and device names may vary in the commands below.\n# SSH over METAL MANAGEMENT pit# ssh admin@10.1.0.4 # SSH over NODE MANAGEMENT pit# ssh admin@10.252.0.4 # SSH over HARDWARE MANAGEMENT pit# ssh admin@10.254.0.4 # or.. serial (device name will vary). pit# minicom -b 115200 -D /dev/tty.USB1   Enter configuration mode.\nsw-leaf-bmc-001\u0026gt; configure terminal sw-leaf-bmc-001(config)#\u0026gt;   Disable the NCN interfaces.\nCheck the SHCD for reference before continuing so that the interfaces connected to management NCNs are being changed. Ports 2 to 10 are commonly the master, worker, and storage nodes when there are 3 of each. Some systems may have more worker nodes or utility storage nodes, or may be racked and cabled differently.\nsw-leaf-bmc-001(config)#\u0026gt; interface range 1/1/2-1/1/10 sw-leaf-bmc-001(config)#\u0026gt; shutdown sw-leaf-bmc-001(config)#\u0026gt; write memory Enable the interfaces again at anytime by switching the shutdown command out for no shutdown.\n  "
},
{
	"uri": "/docs-csm/en-12/install/troubleshooting_installation/",
	"title": "Troubleshooting Installation Problems",
	"tags": [],
	"description": "",
	"content": "Troubleshooting Installation Problems The installation of the Cray System Management (CSM) product requires knowledge of the various nodes and switches for the HPE Cray EX system. The procedures in this section should be referenced during the CSM install for additional information on system hardware, troubleshooting, and administrative tasks related to CSM.\nTopics  Reset root Password on LiveCD Reinstall LiveCD PXE Boot Troubleshooting Wipe NCN Disks for Reinstallation Restart Network Services and Interfaces on NCNs Utility Storage Node Installation Troubleshooting Ceph CSI Troubleshooting Safeguards for CSM NCN Upgrades Postgres Troubleshooting CSM Services Install Fails Because of Missing Secret  Details \n  Reset root Password on LiveCD\nIf the root password on the LiveCD needs to be changed, then this procedure does the reset.\nSee Reset root Password on LiveCD \n  Reinstall LiveCD\nIf a reinstall of the PIT node is needed, the data from the PIT node can be saved to the LiveCD USB and the LiveCD USB can be rebuilt.\nSee Reinstall LiveCD \n  PXE Boot Troubleshooting\nIf a reinstall of the PIT node is needed, the data from the PIT node can be saved to the LiveCD USB and the LiveCD USB can be rebuilt.\nSee PXE Boot Troubleshooting \n  Wipe NCN Disks for Reinstallation\nIf it has been determined an NCN did not properly configure its storage while trying to Deploy Management Nodes during the install, then the storage should be wiped so the node can be redeployed.\nSee Wipe NCN Disks for Reinstallation \n  Restart Network Services and Interfaces on NCNs\nIf an NCN shows any of these problems, the network services and interfaces on that node might need to be restarted.\n Interfaces not showing up IP Addresses not applying Member/children interfaces not being included  See Restart Network Services and Interfaces on NCNs \n  Utility Storage Node Installation Troubleshooting\nIf there is a failure in the creation of Ceph storage on the utility storage nodes for one of these scenarios, the Ceph storage might need to be reinitialized.\n Sometimes a large OSD can be created which is a concatenation of multiple devices, instead of one OSD per device  See Utility Storage Node Installation Troubleshooting \n  Ceph CSI Troubleshooting\nIf there has been a failure to initialize all Ceph CSI components on ncn-s001, then the storage node cloud-init may need to be rerun.\n Verify Ceph CSI Rerun Storage Node cloud-init  See Ceph CSI Troubleshooting \n  Safeguards for CSM NCN Upgrades\nIf a reinstall or upgrade is being done, there might be a reason to use one of these safeguards.\n Preserve Ceph on Utility Storage Nodes Protect RAID Configuration on Management Nodes  See Safeguards for CSM NCN Upgrades\n  \n  Postgres Troubleshooting\n Timeout on cray-sls-init-load during Install CSM Services due to Postgres cluster in SyncFailed state  See Troubleshoot Postgres Database \n  CSM Services Install Fails Because of Missing Secret\nIf a new installation is failing with a missing admin-client-auth secret, then see CSM Services Install Fails Because of Missing Secret.\n  "
},
{
	"uri": "/docs-csm/en-12/install/utility_storage_node_installation_troubleshooting/",
	"title": "Utility Storage Installation Troubleshooting",
	"tags": [],
	"description": "",
	"content": "Utility Storage Installation Troubleshooting If there is a failure in the creation of Ceph storage on the utility storage nodes for one of these scenarios, the Ceph storage might need to be reinitialized.\nTopics  Scenario 1 (Shasta v1.4 only) Scenario 2 (Shasta v1.5 only)  Details Scenario 1 (Shasta 1.4 only) IMPORTANT (FOR NODE INSTALLS/REINSTALLS ONLY): If the Ceph install failed, check the following:\nncn-s# ceph osd tree ID CLASS WEIGHT TYPE NAME STATUS REWEIGHT PRI-AFF -1 83.83459 root default -5 27.94470 host ncn-s001 0 ssd 3.49309 osd.0 up 1.00000 1.00000 4 ssd 3.49309 osd.4 up 1.00000 1.00000 6 ssd 3.49309 osd.6 up 1.00000 1.00000 8 ssd 3.49309 osd.8 up 1.00000 1.00000 10 ssd 3.49309 osd.10 up 1.00000 1.00000 12 ssd 3.49309 osd.12 up 1.00000 1.00000 14 ssd 3.49309 osd.14 up 1.00000 1.00000 16 ssd 3.49309 osd.16 up 1.00000 1.00000 -3 27.94470 host ncn-s002 1 ssd 3.49309 osd.1 down 1.00000 1.00000 3 ssd 3.49309 osd.3 down 1.00000 1.00000 5 ssd 3.49309 osd.5 down 1.00000 1.00000 7 ssd 3.49309 osd.7 down 1.00000 1.00000 9 ssd 3.49309 osd.9 down 1.00000 1.00000 11 ssd 3.49309 osd.11 down 1.00000 1.00000 13 ssd 3.49309 osd.13 down 1.00000 1.00000 15 ssd 3.49309 osd.15 down 1.00000 1.00000 -7 27.94519 host ncn-s003 \u0026lt;--- node where the issue exists 2 ssd 27.94519 osd.2 down 1.00000 1.00000 \u0026lt;--- the problematic VG   SSH to the node(s) where the issue exists.\n  Run the following commands on the nodes:\nncn-s# systemctl stop ceph-osd.target ncn-s# vgremove -f --select \u0026#39;vg_name=~ceph*\u0026#39; # This will take a little bit of time, so do not panic ncn-s# for i in {g..n}; do sgdisk --zap-all /dev/sd$i; done This will vary node to node. Use lsblk to identify all drives available to Ceph.\n  Manually create OSDs on the problematic nodes.\nncn-s# for i in {g..n}; do ceph-volume lvm create --data /dev/sd$i --bluestore; done  NOTE: The remaining steps must be run from ncn-s001.\n   Verify the /etc/cray/ceph directory is empty. If there are any files there, then delete them.\n  Put in safeguard.\n Edit /srv/cray/scripts/metal/lib.sh Comment out the below lines  22 if [ $wipe == \u0026#39;yes\u0026#39; ]; then 23 ansible osds -m shell -a \u0026#34;vgremove -f --select \u0026#39;vg_name=~ceph*\u0026#39;\u0026#34; 24 fi   Run the cloud init script.\nncn-s001# /srv/cray/scripts/common/storage-ceph-cloudinit.sh   Scenario 2 (Shasta 1.5 only) IMPORTANT (FOR NODE INSTALLS/REINSTALLS ONLY): If the Ceph install failed, check the following:\nncn-s# ceph osd tree ID CLASS WEIGHT TYPE NAME STATUS REWEIGHT PRI-AFF -1 31.43875 root default -3 10.47958 host ncn-s001 2 ssd 1.74660 osd.2 up 1.00000 1.00000 3 ssd 1.74660 osd.3 up 1.00000 1.00000 6 ssd 1.74660 osd.6 up 1.00000 1.00000 9 ssd 1.74660 osd.9 up 1.00000 1.00000 12 ssd 1.74660 osd.12 up 1.00000 1.00000 15 ssd 1.74660 osd.15 up 1.00000 1.00000 -5 10.47958 host ncn-s002 0 ssd 1.74660 osd.0 down 1.00000 1.00000 \u0026lt;-- the bad OSD 4 ssd 1.74660 osd.4 up 1.00000 1.00000 7 ssd 1.74660 osd.7 up 1.00000 1.00000 10 ssd 1.74660 osd.10 up 1.00000 1.00000 13 ssd 1.74660 osd.13 up 1.00000 1.00000 16 ssd 1.74660 osd.16 up 1.00000 1.00000 -7 10.47958 host ncn-s003 1 ssd 1.74660 osd.1 up 1.00000 1.00000 5 ssd 1.74660 osd.5 up 1.00000 1.00000 8 ssd 1.74660 osd.8 up 1.00000 1.00000 11 ssd 1.74660 osd.11 up 1.00000 1.00000 14 ssd 1.74660 osd.14 up 1.00000 1.00000 17 ssd 1.74660 osd.17 up 1.00000 1.00000 Get more information using the host and OSD.\nncn-s# ceph orch ps --daemon-type osd ncn-s002 NAME HOST STATUS REFRESHED AGE VERSION IMAGE NAME IMAGE ID CONTAINER ID osd.0 ncn-s002 running (23h) 7m ago 2d 15.2.8 registry.local/ceph/ceph:v15.2.8 5553b0cb212c 98859a09a946 osd.10 ncn-s002 running (23h) 7m ago 2d 15.2.8 registry.local/ceph/ceph:v15.2.8 5553b0cb212c 808162b421b8 osd.13 ncn-s002 running (23h) 7m ago 2d 15.2.8 registry.local/ceph/ceph:v15.2.8 5553b0cb212c 594d6fd03361 osd.16 ncn-s002 running (23h) 7m ago 2d 15.2.8 registry.local/ceph/ceph:v15.2.8 5553b0cb212c 726295e3625f osd.4 ncn-s002 running (23h) 7m ago 2d 15.2.8 registry.local/ceph/ceph:v15.2.8 5553b0cb212c ee1987d99e5a osd.7 ncn-s002 running (23h) 7m ago 2d 15.2.8 registry.local/ceph/ceph:v15.2.8 5553b0cb212c 78a89eaef92a  Optionally, leave off the host name and it will return all the OSD processing the cluster.\n In order to zap a single OSD, it is necessary to gather some information.\n  List the devices on that host with ceph orch device ls \u0026lt;hostname\u0026gt;.\nncn-s# ceph orch device ls ncn-s002 --wide Hostname Path Type Transport RPM Vendor Model Serial Size Health Ident Fault Available Reject Reasons ncn-s002 /dev/sdc ssd Unknown Unknown ATA SAMSUNG MZ7LH1T9 S455NY0M811867 1920G Unknown N/A N/A No locked, LVM detected, Insufficient space (\u0026lt;10 extents) on vgs ncn-s002 /dev/sdd ssd Unknown Unknown ATA SAMSUNG MZ7LH1T9 S455NY0M812407 1920G Unknown N/A N/A No locked, LVM detected, Insufficient space (\u0026lt;10 extents) on vgs ncn-s002 /dev/sde ssd Unknown Unknown ATA SAMSUNG MZ7LH1T9 S455NY0M812406 1920G Unknown N/A N/A No locked, LVM detected, Insufficient space (\u0026lt;10 extents) on vgs ncn-s002 /dev/sdf ssd Unknown Unknown ATA SAMSUNG MZ7LH1T9 S455NY0M812405 1920G Unknown N/A N/A No locked, LVM detected, Insufficient space (\u0026lt;10 extents) on vgs ncn-s002 /dev/sdg ssd Unknown Unknown ATA SAMSUNG MZ7LH1T9 S455NY0M811921 1920G Unknown N/A N/A No locked, LVM detected, Insufficient space (\u0026lt;10 extents) on vgs ncn-s002 /dev/sdh ssd Unknown Unknown ATA SAMSUNG MZ7LH1T9 S455NY0M811873 1920G Unknown N/A N/A No locked, LVM detected, Insufficient space (\u0026lt;10 extents) on vgs The locked status in the Reject column is likely the result of a wipe failure.\n  Find the drive path.\nncn-s# cephadm ceph-volume lvm list Inferring fsid 8f4dd38b-ee84-4d29-8305-1ef24e61a5d8 Using recent Ceph image docker.io/ceph/ceph@sha256:16d37584df43bd6545d16e5aeba527de7d6ac3da3ca7b882384839d2d86acc7d /usr/bin/podman: stdout /usr/bin/podman: stdout /usr/bin/podman: stdout ====== osd.0 ======= /usr/bin/podman: stdout /usr/bin/podman: stdout [block] /dev/ceph-380453cf-4581-4616-b95e-30a8743bece0/osd-data-59bcf0c9-5867-41c3-8e40-2e99232cf8e9 /usr/bin/podman: stdout /usr/bin/podman: stdout block device /dev/ceph-380453cf-4581-4616-b95e-30a8743bece0/osd-data-59bcf0c9-5867-41c3-8e40-2e99232cf8e9 /usr/bin/podman: stdout block uuid 54CjSj-kxEs-df0N-13Vs-miIF-g2KH-sX2UMQ /usr/bin/podman: stdout cephx lockbox secret /usr/bin/podman: stdout cluster fsid 8f4dd38b-ee84-4d29-8305-1ef24e61a5d8 /usr/bin/podman: stdout cluster name ceph /usr/bin/podman: stdout crush device class None /usr/bin/podman: stdout encrypted 0 /usr/bin/podman: stdout osd fsid b2eb119c-4f45-430b-96b0-bad9e8b9aca6 /usr/bin/podman: stdout osd id 0 \u0026lt;-- the OSD number /usr/bin/podman: stdout osdspec affinity /usr/bin/podman: stdout type block /usr/bin/podman: stdout vdo 0 /usr/bin/podman: stdout devices /dev/sdf \u0026lt;--the path /usr/bin/podman: stdout  Above output truncated for the purposes of this example.\n   Zap a single device with ceph orch device zap (hostname) (device path).\nncn-s# ceph orch device zap ncn-s002 /dev/sdf   "
},
{
	"uri": "/docs-csm/en-12/install/deploy_management_nodes/",
	"title": "Deploy Management Nodes",
	"tags": [],
	"description": "",
	"content": "Deploy Management Nodes The following procedure deploys Linux and Kubernetes software to the management NCNs. Deployment of the nodes starts with booting the storage nodes followed by the master nodes and worker nodes together.\nAfter the operating system boots on each node, there are some configuration actions which take place. Watching the console or the console log for certain nodes can help to understand what happens and when. When the process completes for all nodes, the Ceph storage is initialized and the Kubernetes cluster is created and ready for a workload. The PIT node will join Kubernetes after it is rebooted later in Deploy Final NCN.\nTiming of deployments The timing of each set of boots varies based on hardware. Nodes from some manufacturers will POST faster than others or vary based on BIOS setting. After powering on a set of nodes, an administrator can expect a healthy boot session to take about 60 minutes depending on the number of storage and worker nodes.\nTopics  Prepare for management node deployment  Tokens and IPMI password Ensure time is accurate before Deploying NCNs   Update management node firmware Deploy management nodes  Deploy workflow Deploy Check LVM on Kubernetes NCNs Check for unused drives on utility storage nodes   Configure after management node deployment  LiveCD cluster authentication Install tests and test server on NCNs Clean up chrony configurations   Validate management node deployment Important checkpoint Next topic  1. Prepare for management node deployment Preparation of the environment must be done before attempting to deploy the management nodes.\n1.1 Tokens and IPMI password   Define shell environment variables that will simplify later commands to deploy management nodes.\n  Set IPMI_PASSWORD to the root password for the NCN BMCs.\n read -s is used to prevent the password from being written to the screen or the shell history.\n pit# read -s IPMI_PASSWORD pit# export IPMI_PASSWORD   Set the remaining helper variables.\n These values do not need to be altered from what is shown.\n pit# mtoken=\u0026#39;ncn-m(?!001)\\w+-mgmt\u0026#39; ; stoken=\u0026#39;ncn-s\\w+-mgmt\u0026#39; ; wtoken=\u0026#39;ncn-w\\w+-mgmt\u0026#39; ; export USERNAME=root   Throughout the guide, simple one-liners can be used to query status of expected nodes. If the shell or environment is terminated, these environment variables should be re-exported.\nExamples:\n  Check power status of all NCNs.\npit# grep -oP \u0026#34;($mtoken|$stoken|$wtoken)\u0026#34; /etc/dnsmasq.d/statics.conf | sort -u | xargs -t -i ipmitool -I lanplus -U $USERNAME -E -H {} power status   Power off all NCNs.\npit# grep -oP \u0026#34;($mtoken|$stoken|$wtoken)\u0026#34; /etc/dnsmasq.d/statics.conf | sort -u | xargs -t -i ipmitool -I lanplus -U $USERNAME -E -H {} power off     1.2 Ensure time is accurate before deploying NCNs NOTE: Optionally, in order to use a timezone other than UTC, instead of step 1 below, follow this procedure for setting a local timezone. Then proceed to step 2.\n  Ensure that the PIT node has the correct current time.\nThe time can be inaccurate if the system has been powered off for a long time, or, for example, the CMOS was cleared on a Gigabyte node. See Clear Gigabyte CMOS.\n This step should not be skipped.\n Check the time on the PIT node to see whether it matches the current time:\npit# date \u0026#34;+%Y-%m-%d %H:%M:%S.%6N%z\u0026#34; If the time is inaccurate, set the time manually.\npit# timedatectl set-time \u0026#34;2019-11-15 00:00:00\u0026#34; Run the NTP script:\npit# /root/bin/configure-ntp.sh This ensures that the PIT is configured with an accurate date/time, which will be propagated to the NCNs during boot.\nIf the error Failed to set time: NTP unit is active is observed, then stop chrony first.\npit# systemctl stop chronyd Then run the commands above to complete the process.\n  Ensure that the current time is set in BIOS for all management NCNs.\nEach NCN is booted to the BIOS menu, the date and time are checked, and set to the current UTC time if needed.\n NOTE: Some steps in this procedure depend on USERNAME and IPMI_PASSWORD being set. This is done in Tokens and IPMI Password.\n Repeat the following process for each NCN.\n  Set the bmc variable to the name of the BMC of the NCN being checked.\nImportant: Be sure to change the below example to the appropriate NCN.\npit# bmc=ncn-w001-mgmt   Start an IPMI console session to the NCN.\npit# conman -j $bmc   Using another terminal to watch the console, boot the node to BIOS.\npit# ipmitool -I lanplus -U $USERNAME -E -H $bmc chassis bootdev bios \u0026amp;\u0026amp; ipmitool -I lanplus -U $USERNAME -E -H $bmc chassis power off \u0026amp;\u0026amp; sleep 10 \u0026amp;\u0026amp; ipmitool -I lanplus -U $USERNAME -E -H $bmc chassis power on  For HPE NCNs, the above process will boot the nodes to their BIOS; however, the BIOS menu is unavailable through conman because the node is booted into a graphical BIOS menu.\nIn order to access the serial version of the BIOS menu, perform the ipmitool steps above to boot the node. Then, in conman, press ESC+9 key combination when the following messages are shown on the console. That key combination will open a menu that can be used to enter the BIOS using conman.\nFor access via BIOS Serial Console: Press \u0026#39;ESC+9\u0026#39; for System Utilities Press \u0026#39;ESC+0\u0026#39; for Intelligent Provisioning Press \u0026#39;ESC+!\u0026#39; for One-Time Boot Menu Press \u0026#39;ESC+@\u0026#39; for Network Boot For HPE NCNs, the date configuration menu is at the following path: System Configuration -\u0026gt; BIOS/Platform Configuration (RBSU) -\u0026gt; Date and Time.\nAlternatively, for HPE NCNs, log in to the BMC\u0026rsquo;s web interface and access the HTML5 console for the node, in order to interact with the graphical BIOS. From the administrator\u0026rsquo;s own machine, create an SSH tunnel (-L creates the tunnel; -N prevents a shell and stubs the connection):\nlinux# bmc=ncn-w001-mgmt # Change this to be the appropriate node linux# ssh -L 9443:$bmc:443 -N root@eniac-ncn-m001 Opening a web browser to https://localhost:9443 will give access to the BMC\u0026rsquo;s web interface.\n   When the node boots, the conman session can be used to see the BIOS menu, in order to check and set the time to current UTC time. The process varies depending on the vendor of the NCN.\n  After the correct time has been verified, power off the NCN.\npit# ipmitool -I lanplus -U $USERNAME -E -H $bmc chassis power off   Repeat the above process for each NCN.\n  2. Update management node firmware  All firmware can be found in the HFP package provided with the Shasta release.\n The management nodes are expected to have certain minimum firmware installed for BMC, node BIOS, and PCIe cards. Where possible, the firmware should be updated prior to install. It is good to meet the minimum NCN firmware requirement before starting.\n Note: When the PIT node is booted from the LiveCD, it is not possible to use the Firmware Action Service (FAS) to update the the firmware because that service has not yet been installed. However, at this point, it would be possible to use the HPE Cray EX HPC Firmware Pack (HFP) product on the PIT node to learn about the firmware versions available in HFP.\n If the firmware is not updated at this point in the installation workflow, then it can be done with FAS after CSM and HFP have both been installed and configured. However, at that point a rolling reboot procedure for the management nodes will be needed, after the firmware has been updated.\nSee the HPE Cray EX System Software Getting Started Guide (S-8000) 22.07 on the HPE Customer Support Center for information about the HPE Cray EX HPC Firmware Pack (HFP) product. In the HFP documentation there is information about the recommended firmware packages to be installed. See \u0026ldquo;Product Details\u0026rdquo; in the HPE Cray EX HPC Firmware Pack Installation Guide.\nSome of the component types have manual procedures to check firmware versions and update firmware. See Upgrading Firmware Without FAS in the HPE Cray EX HPC Firmware Pack Installation Guide. It will be possible to extract the files from the product tarball, but the install.sh script from that product will be unable to load the firmware versions into the Firmware Action Services (FAS) because the management nodes are not booted and running Kubernetes and FAS cannot be used until Kubernetes is running.\nIf booted into the PIT node, the firmware can be found with HFP package provided with the Shasta release.\n  (optional) Check these BIOS settings on management nodes NCN BIOS.\n This is optional, the BIOS settings (or lack thereof) do not prevent deployment. The NCN installation will work with the CMOS' default BIOS. There may be settings that facilitate the speed of deployment, but they may be tuned at a later time.\nNOTE: The BIOS tuning will be automated, further reducing this step.\n   The firmware on the management nodes should be checked for compliance with the minimum required version and updated, if necessary, at this point.\n WARNING: Gigabyte NCNs running BIOS version C20 can become unusable when Shasta 1.5 is installed. This is a result of a bug in the Gigabyte firmware. This bug has not been observed in BIOS version C17.\nA key symptom of this bug is that the NCN will not PXE boot and will instead fall through to the boot menu, despite being configure to PXE boot. This behavior will persist until the failing node\u0026rsquo;s CMOS is cleared.\n  See Clear Gigabyte CMOS.    3. Deploy management nodes Deployment of the nodes starts with booting the storage nodes first. Then, the master nodes and worker nodes should be booted together. After the operating system boots on each node, there are some configuration actions which take place. Watching the console or the console log for certain nodes can help to understand what happens and when. When the process is complete for all nodes, the Ceph storage will have been initialized and the Kubernetes cluster will be created ready for a workload.\n3.1 Deploy workflow The configuration workflow described here is intended to help understand the expected path for booting and configuring. The actual steps to be performed are in the Deploy section.\n Start watching the consoles for ncn-s001 and at least one other storage node Boot all storage nodes at the same time  The first storage node (ncn-s001) will boot; it then starts a loop as ceph-ansible configuration waits for all other storage nodes to boot. The other storage nodes boot and become passive. They will be fully configured when ceph-ansible runs to completion on ncn-s001.   Once ncn-s001 notices that all other storage nodes have booted, ceph-ansible will begin Ceph configuration. This takes several minutes. Once ceph-ansible has finished on ncn-s001, then ncn-s001 waits for ncn-m002 to create /etc/kubernetes/admin.conf. Start watching the consoles for ncn-m002, ncn-m003, and at least one worker node. Boot master nodes (ncn-m002 and ncn-m003) and all worker nodes at the same time.  The worker nodes will boot and wait for ncn-m002 to create the /etc/cray/kubernetes/join-command-control-plane file so that they can join Kubernetes. The third master node (ncn-m003) boots and waits for ncn-m002 to create the /etc/cray/kubernetes/join-command-control-plane file so that it can join Kubernetes The second master node (ncn-m002) boots and runs kubernetes-cloudinit.sh, which will create /etc/kubernetes/admin.conf and /etc/cray/kubernetes/join-command-control-plan. It then waits for the storage node to create etcd-backup-s3-credentials.   Once ncn-s001 notices that ncn-m002 has created /etc/kubernetes/admin.conf, then ncn-s001 waits for any worker node to become available. As each worker node notices that ncn-m002 has created /etc/cray/kubernetes/join-command-control-plane, they will join the Kubernetes cluster.  Once ncn-s001 notices that a worker node has done this, it moves forward with the creation of ConfigMaps and running the post-Ceph playbooks (S3, OSD pools, quotas, and so on.)   Once ncn-s001 creates etcd-backup-s3-credentials during the ceph-rgw-users role (one of the last roles after Ceph has been set up), then ncn-m001 notices this and proceeds.   NOTE: If several hours have elapsed between storage and master nodes booting, or if there were issues PXE booting master nodes, the cloud-init script on ncn-s001 may not complete successfully. This can cause the /var/log/cloud-init-output.log on master node(s) to continue to output the following message:\n[ 1328.351558] cloud-init[8472]: Waiting for storage node to create etcd-backup-s3-credentials secret... In this case, the following script is safe to be executed again on ncn-s001:\nncn-s001# /srv/cray/scripts/common/storage-ceph-cloudinit.sh After this script finishes, the secrets will be created and the cloud-init script on the master node(s) should complete.\n 3.2 Deploy  NOTE: Some scripts in this section depend on IPMI_PASSWORD being set. This is done in Tokens and IPMI Password.\n   Set the default root password and SSH keys and optionally change the timezone.\nThe management nodes images do not contain a default password or default SSH keys.\nIt is required to set the default root password and SSH keys in the images used to boot the management nodes. Follow the NCN image customization steps in Change NCN Image Root Password and SSH Keys on PIT Node\n  Create boot directories for any NCN in DNS.\nThis will create folders for each host in /var/www, allowing each host to have its own unique set of artifacts: kernel, initrd, SquashFS, and script.ipxe bootscript.\n Patch the set-sqfs-links.sh script to include the blacklisting of an undesired kernel module.  pit# sed -i -E \u0026#39;s:rd.luks=0 /:rd.luks=0 module_blacklist=rpcrdma \\/:g\u0026#39; /root/bin/set-sqfs-links.sh  Invoke the script.  pit# /root/bin/set-sqfs-links.sh  Every NCN except for ncn-m001 should be included in the output from this script. If that is not the case, then verify that all NCN BMCs are set to use DHCP. See Set node BMCs to DHCP. After that is done, re-run the set-sqfs-links.sh script.\n   Customize boot scripts for any out-of-baseline NCNs\n Worker nodes with more than two small disks need to make adjustments to prevent bare-metal etcd creation. For a brief overview of what is expected, see disk plan of record / baseline.    Run the BIOS baseline script to apply configurations to BMCs.\nThe script will apply helper configurations to facilitate more deterministic network booting on any NCN port. This runs against any server vendor, but some settings are not applied for certain vendors.\n NOTE: This script will enable DCMI/IPMI on Hewlett-Packard Enterprise servers equipped with ILO. If ipmitool is not working at this time, it will after running this script.\n pit# /root/bin/bios-baseline.sh   Set each node to always UEFI Network Boot, and ensure they are powered off\npit# grep -oP \u0026#34;($mtoken|$stoken|$wtoken)\u0026#34; /etc/dnsmasq.d/statics.conf | sort -u | xargs -t -i ipmitool -I lanplus -U $USERNAME -E -H {} chassis bootdev pxe options=persistent pit# grep -oP \u0026#34;($mtoken|$stoken|$wtoken)\u0026#34; /etc/dnsmasq.d/statics.conf | sort -u | xargs -t -i ipmitool -I lanplus -U $USERNAME -E -H {} chassis bootdev pxe options=efiboot pit# grep -oP \u0026#34;($mtoken|$stoken|$wtoken)\u0026#34; /etc/dnsmasq.d/statics.conf | sort -u | xargs -t -i ipmitool -I lanplus -U $USERNAME -E -H {} power off  NOTE: The NCN boot order is further explained in NCN Boot Workflow.\n   Validate that the LiveCD is ready for installing NCNs.\nObserve the output of the checks and note any failures, then remediate them.\n  Specify the admin user password for the management switches in the system.\n read -s is used to prevent the password from being written to the screen or the shell history.\n pit# read -s SW_ADMIN_PASSWORD pit# export SW_ADMIN_PASSWORD   Run the LiveCD preflight checks.\npit# csi pit validate --livecd-preflight  Note: Ignore any errors about not being able resolve arti.dev.cray.com.\n     Print the available consoles.\npit# conman -q Expected output looks similar to the following:\nncn-m001-mgmt ncn-m002-mgmt ncn-m003-mgmt ncn-s001-mgmt ncn-s002-mgmt ncn-s003-mgmt ncn-w001-mgmt ncn-w002-mgmt ncn-w003-mgmt  NOTE: All console logs are located at /var/log/conman/console*\n   Boot the Storage Nodes\nBoot all the storage nodes. ncn-s001 will start 1 minute after the other storage nodes.\npit# grep -oP $stoken /etc/dnsmasq.d/statics.conf | grep -v \u0026#34;ncn-s001-\u0026#34; | sort -u | xargs -t -i ipmitool -I lanplus -U $USERNAME -E -H {} power on; \\  sleep 60; ipmitool -I lanplus -U $USERNAME -E -H ncn-s001-mgmt power on   Observe the installation through the console of ncn-s001-mgmt.\npit# conman -j ncn-s001-mgmt From there an administrator can witness console output for the cloud-init scripts.\nNOTE: Watch the storage node consoles carefully for error messages. If any are seen, consult Ceph-CSI Troubleshooting.\nNOTE: If the nodes have PXE boot issues (for example, getting PXE errors, or not pulling the ipxe.efi binary), see PXE boot troubleshooting.\n  Wait for storage nodes before booting Kubernetes master nodes and worker nodes.\nNOTE: Once all storage nodes are up and the message ...sleeping 5 seconds until /etc/kubernetes/admin.conf appears on ncn-s001\u0026rsquo;s console, it is safe to proceed with booting the Kubernetes master nodes and worker nodes\npit# grep -oP \u0026#34;($mtoken|$wtoken)\u0026#34; /etc/dnsmasq.d/statics.conf | sort -u | xargs -t -i ipmitool -I lanplus -U $USERNAME -E -H {} power on   Stop watching the console from ncn-s001.\nType the ampersand character and then the period character to exit from the conman session on ncn-s001.\n\u0026amp;. pit#   Wait. Observe the installation through ncn-m002-mgmt\u0026rsquo;s console:\nPrint the console name:\npit# conman -q | grep m002 Expected output looks similar to the following:\nncn-m002-mgmt Then join the console:\npit# conman -j ncn-m002-mgmt NOTE: If the nodes have PXE boot issues (e.g. getting PXE errors, not pulling the ipxe.efi binary) see PXE boot troubleshooting\nNOTE: If one of the master nodes seems hung waiting for the storage nodes to create a secret, check the storage node consoles for error messages. If any are found, consult CEPH CSI Troubleshooting\n  Wait for the deployment to finish.\nRefer to timing of deployments. It should not take more than 60 minutes for the kubectl get nodes command to return output indicating that all the master nodes and worker nodes (excluding from the PIT node) booted from the LiveCD and are Ready.\n When the following command prompts for a password, enter the root password for ncn-m002.\n pit# ssh ncn-m002 kubectl get nodes -o wide Expected output looks similar to the following:\nNAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME ncn-m002 Ready control-plane,master 2h v1.20.13 10.252.1.5 \u0026lt;none\u0026gt; SUSE Linux Enterprise High Performance Computing 15 SP3 5.3.18-59.19-default containerd://1.5.7 ncn-m003 Ready control-plane,master 2h v1.20.13 10.252.1.6 \u0026lt;none\u0026gt; SUSE Linux Enterprise High Performance Computing 15 SP3 5.3.18-59.19-default containerd://1.5.7 ncn-w001 Ready \u0026lt;none\u0026gt; 2h v1.20.13 10.252.1.7 \u0026lt;none\u0026gt; SUSE Linux Enterprise High Performance Computing 15 SP3 5.3.18-59.19-default containerd://1.5.7 ncn-w002 Ready \u0026lt;none\u0026gt; 2h v1.20.13 10.252.1.8 \u0026lt;none\u0026gt; SUSE Linux Enterprise High Performance Computing 15 SP3 5.3.18-59.19-default containerd://1.5.7 ncn-w003 Ready \u0026lt;none\u0026gt; 2h v1.20.13 10.252.1.9 \u0026lt;none\u0026gt; SUSE Linux Enterprise High Performance Computing 15 SP3 5.3.18-59.19-default containerd://1.5.7   Enable passwordless SSH for the PIT node.\n  Copy SSH files from ncn-m002 to the PIT node.\n When the following command prompts for a password, enter the root password for ncn-m002.\n pit# rsync -av ncn-m002:.ssh/ /root/.ssh/ Expected output looks similar to the following:\nPassword: receiving incremental file list ./ authorized_keys id_rsa id_rsa.pub known_hosts sent 145 bytes received 13,107 bytes 3,786.29 bytes/sec total size is 12,806 speedup is 0.97   Make a list of all of the NCNs (including ncn-m001).\npit# NCNS=$(grep -oP \u0026quot;ncn-[msw][0-9]{3}\u0026quot; /etc/dnsmasq.d/statics.conf | sort -u | tr '\\n' ',') ; echo \u0026quot;${NCNS}\u0026quot; Expected output looks similar to the following:\nncn-m001,ncn-m002,ncn-m003,ncn-s001,ncn-s002,ncn-s003,ncn-w001,ncn-w002,ncn-w003,   Verify that passwordless SSH is now working from the PIT node to the other NCNs.\nThe following command should not prompt for a password.\npit# PDSH_SSH_ARGS_APPEND='-o StrictHostKeyChecking=no' pdsh -Sw \u0026quot;${NCNS}\u0026quot; date \u0026amp;\u0026amp; echo SUCCESS || echo ERROR Expected output looks similar to the following:\nncn-w001: Warning: Permanently added \u0026#39;ncn-w001,10.252.1.7\u0026#39; (ECDSA) to the list of known hosts. ncn-w003: Warning: Permanently added \u0026#39;ncn-w003,10.252.1.9\u0026#39; (ECDSA) to the list of known hosts. ncn-m003: Warning: Permanently added \u0026#39;ncn-m003,10.252.1.6\u0026#39; (ECDSA) to the list of known hosts. ncn-s002: Warning: Permanently added \u0026#39;ncn-s002,10.252.1.11\u0026#39; (ECDSA) to the list of known hosts. ncn-m001: Warning: Permanently added \u0026#39;ncn-m001,10.252.1.4\u0026#39; (ECDSA) to the list of known hosts. ncn-w002: Warning: Permanently added \u0026#39;ncn-w002,10.252.1.8\u0026#39; (ECDSA) to the list of known hosts. ncn-m002: Warning: Permanently added \u0026#39;ncn-m002,10.252.1.5\u0026#39; (ECDSA) to the list of known hosts. ncn-s003: Warning: Permanently added \u0026#39;ncn-s003,10.252.1.12\u0026#39; (ECDSA) to the list of known hosts. ncn-s001: Warning: Permanently added \u0026#39;ncn-s001,10.252.1.10\u0026#39; (ECDSA) to the list of known hosts. ncn-s003: Thu 28 Apr 2022 02:43:21 PM UTC ncn-s001: Thu 28 Apr 2022 02:43:21 PM UTC ncn-s002: Thu 28 Apr 2022 02:43:21 PM UTC ncn-m001: Thu 28 Apr 2022 02:43:21 PM UTC ncn-m003: Thu 28 Apr 2022 02:43:21 PM UTC ncn-m002: Thu 28 Apr 2022 02:43:21 PM UTC ncn-w001: Thu 28 Apr 2022 02:43:22 PM UTC ncn-w002: Thu 28 Apr 2022 02:43:22 PM UTC ncn-w003: Thu 28 Apr 2022 02:43:22 PM UTC SUCCESS     Stop watching the console of ncn-m002.\nType the ampersand character and then the period character to exit from the conman session on ncn-m002.\n\u0026amp;. pit#   3.3 Check LVM on Kubernetes NCNs 3.3.1 Run the check Run the following command on the PIT node to validate that the expected LVM labels are present on disks on the master and worker nodes.\npit# /usr/share/doc/csm/install/scripts/check_lvm.sh 3.3.2 Expected check output Expected output looks similar to the following:\nWhen prompted, please enter the NCN password for ncn-m002 Warning: Permanently added \u0026#39;ncn-m002,10.252.1.11\u0026#39; (ECDSA) to the list of known hosts. Password: Checking ncn-m002... ncn-m002: OK Checking ncn-m003... Warning: Permanently added \u0026#39;ncn-m003,10.252.1.10\u0026#39; (ECDSA) to the list of known hosts. Warning: Permanently added \u0026#39;ncn-m003,10.252.1.10\u0026#39; (ECDSA) to the list of known hosts. ncn-m003: OK Checking ncn-w001... Warning: Permanently added \u0026#39;ncn-w001,10.252.1.9\u0026#39; (ECDSA) to the list of known hosts. Warning: Permanently added \u0026#39;ncn-w001,10.252.1.9\u0026#39; (ECDSA) to the list of known hosts. ncn-w001: OK Checking ncn-w002... Warning: Permanently added \u0026#39;ncn-w002,10.252.1.8\u0026#39; (ECDSA) to the list of known hosts. Warning: Permanently added \u0026#39;ncn-w002,10.252.1.8\u0026#39; (ECDSA) to the list of known hosts. ncn-w002: OK Checking ncn-w003... Warning: Permanently added \u0026#39;ncn-w003,10.252.1.7\u0026#39; (ECDSA) to the list of known hosts. Warning: Permanently added \u0026#39;ncn-w003,10.252.1.7\u0026#39; (ECDSA) to the list of known hosts. ncn-w003: OK SUCCESS: LVM checks passed on all master and worker NCNs If the check succeeds, skip the manual check procedure and recovery steps.\nIf the check fails for any nodes, the problem must be resolved before continuing. See LVM Check Failure Recovery.\n3.3.3 Manual LVM check procedure If needed, the LVM checks can be performed manually on the master and worker nodes.\n  Manual check on master nodes:\nncn-m# blkid -L ETCDLVM Example output:\n/dev/sdc   Manual check on worker nodes:\nncn-w# blkid -L CONLIB /dev/sdb2 ncn-w# blkid -L CONRUN /dev/sdb1 ncn-w# blkid -L K8SLET /dev/sdb3   The manual checks are considered successful if all of the blkid commands report a disk device (such as /dev/sdc \u0026ndash; the particular device is unimportant). If any of the lsblk commands return no output, then the check is a failure. Any failures must be resolved before continuing. See the following section for details on how to do so.\n3.3.4 LVM check failure recovery If there are LVM check failures, then the problem must be resolved before continuing with the install.\n  If any master node has the problem, then wipe and redeploy all of the NCNs before continuing the installation:\n Wipe each worker node using the \u0026lsquo;Basic Wipe\u0026rsquo; section of Wipe NCN Disks for Reinstallation. Wipe each master node (except ncn-m001 because it is the PIT node) using the \u0026lsquo;Basic Wipe\u0026rsquo; section of Wipe NCN Disks for Reinstallation. Wipe each storage node using the \u0026lsquo;Full Wipe\u0026rsquo; section of Wipe NCN Disks for Reinstallation. Return to the Set each node to always UEFI Network Boot, and ensure they are powered off step of the Deploy Management Nodes section above.    If only worker nodes have the problem, then wipe and redeploy the affected worker nodes before continuing the installation:\n Wipe each affected worker node using the \u0026lsquo;Basic Wipe\u0026rsquo; section of Wipe NCN Disks for Reinstallation. Power off each affected worker node. Return to the Boot the Master and Worker Nodes step of the Deploy Management Nodes section above.  Note: The ipmitool command will give errors trying to power on the unaffected nodes, because they are already powered on \u0026ndash; this is expected and not a problem.      3.4 Check for unused drives on utility storage nodes  IMPORTANT: Do the following if NCNs are Gigabyte hardware. It is suggested (but optional) for HPE NCNs.\nIMPORTANT: Estimate the expected number of OSDs using the following table and using this equation:\ntotal_osds = (number of utility storage/Ceph nodes) * (OSD count from table below for the appropriate hardware)\n    Hardware Manufacturer OSD Drive Count (not including OS drives)     GigaByte 12   HPE 8    Option 1 If there are OSDs on each node (ceph osd tree can show this), then all the nodes are in Ceph. That means the orchestrator can be used to look for the devices.\n  Get the number of OSDs in the cluster.\nncn-s# ceph -f json-pretty osd stat |jq .num_osds 24 IMPORTANT: If the returned number of OSDs is equal to total_osds calculated, then skip the following steps. If not, then proceed with the below additional checks and remediation steps.\n  Compare the number of OSDs to the output (which should resemble the example below). The number of drives will depend on the server hardware.\n NOTE: If the Ceph cluster is large and has a lot of nodes, a node may be specified after the below command to limit the results.\n ncn-s# ceph orch device ls Hostname Path Type Serial Size Health Ident Fault Available ncn-s001 /dev/sda ssd PHYF015500M71P9DGN 1920G Unknown N/A N/A No ncn-s001 /dev/sdb ssd PHYF016500TZ1P9DGN 1920G Unknown N/A N/A No ncn-s001 /dev/sdc ssd PHYF016402EB1P9DGN 1920G Unknown N/A N/A No ncn-s001 /dev/sdd ssd PHYF016504831P9DGN 1920G Unknown N/A N/A No ncn-s001 /dev/sde ssd PHYF016500TV1P9DGN 1920G Unknown N/A N/A No ncn-s001 /dev/sdf ssd PHYF016501131P9DGN 1920G Unknown N/A N/A No ncn-s001 /dev/sdi ssd PHYF016500YB1P9DGN 1920G Unknown N/A N/A No ncn-s001 /dev/sdj ssd PHYF016500WN1P9DGN 1920G Unknown N/A N/A No ncn-s002 /dev/sda ssd PHYF0155006W1P9DGN 1920G Unknown N/A N/A No ncn-s002 /dev/sdb ssd PHYF0155006Z1P9DGN 1920G Unknown N/A N/A No ncn-s002 /dev/sdc ssd PHYF015500L61P9DGN 1920G Unknown N/A N/A No ncn-s002 /dev/sdd ssd PHYF015502631P9DGN 1920G Unknown N/A N/A No ncn-s002 /dev/sde ssd PHYF0153000G1P9DGN 1920G Unknown N/A N/A No ncn-s002 /dev/sdf ssd PHYF016401T41P9DGN 1920G Unknown N/A N/A No ncn-s002 /dev/sdi ssd PHYF016504C21P9DGN 1920G Unknown N/A N/A No ncn-s002 /dev/sdj ssd PHYF015500GQ1P9DGN 1920G Unknown N/A N/A No ncn-s003 /dev/sda ssd PHYF016402FP1P9DGN 1920G Unknown N/A N/A No ncn-s003 /dev/sdb ssd PHYF016401TE1P9DGN 1920G Unknown N/A N/A No ncn-s003 /dev/sdc ssd PHYF015500N51P9DGN 1920G Unknown N/A N/A No ncn-s003 /dev/sdd ssd PHYF0165010Z1P9DGN 1920G Unknown N/A N/A No ncn-s003 /dev/sde ssd PHYF016500YR1P9DGN 1920G Unknown N/A N/A No ncn-s003 /dev/sdf ssd PHYF016500X01P9DGN 1920G Unknown N/A N/A No ncn-s003 /dev/sdi ssd PHYF0165011H1P9DGN 1920G Unknown N/A N/A No ncn-s003 /dev/sdj ssd PHYF016500TQ1P9DGN 1920G Unknown N/A N/A No If there are devices that show Available as Yes and they are not being automatically added, that device may need to be zapped.\nIMPORTANT: Prior to zapping any device, ensure that it is not being used.\n  Check to see if the number of devices is less than the number of listed drives in the output from step 1.\nncn-s# ceph orch device ls|grep dev|wc -l Example output:\n24 If the numbers are equal, but less than the total_osds calculated, then the ceph-mgr daemon may need to be failed in order to get a fresh inventory.\nncn-s# ceph mgr fail $(ceph mgr dump | jq -r .active_name) Wait 5 minutes and then re-check ceph orch device ls. See if the drives are still showing as Available. If so, then proceed to the next step.\n  ssh to the host and look at lsblk output and check against the device from the above ceph orch device ls\nncn-s# lsblk Example output:\nNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT loop0 7:0 0 4.2G 1 loop / run/ rootfsbase loop1 7:1 0 30G 0 loop └─live-overlay-pool 254:8 0 300G 0 dm loop2 7:2 0 300G 0 loop └─live-overlay-pool 254:8 0 300G 0 dm sda 8:0 0 1.8T 0 disk └─ceph--0a476f53--8b38--450d--8779--4e587402f8a8-osd--data--b620b7ef--184a--46d7--9a99--771239e7a323 254:7 0 1.8T 0 lvm  If it has an LVM volume like above, then it may be in use. In that case, do the option 2 check below to make sure that the drive can be wiped.    Option 2   Log into each ncn-s node and check for unused drives.\nncn-s# cephadm shell -- ceph-volume inventory IMPORTANT: The cephadm command may output this warning WARNING: The same type, major and minor should not be used for multiple devices.. Ignore this warning.\nThe field available would be True if Ceph sees the drive as empty and can be used. For example:\nDevice Path Size rotates available Model name /dev/sda 447.13 GB False False SAMSUNG MZ7LH480 /dev/sdb 447.13 GB False False SAMSUNG MZ7LH480 /dev/sdc 3.49 TB False False SAMSUNG MZ7LH3T8 /dev/sdd 3.49 TB False False SAMSUNG MZ7LH3T8 /dev/sde 3.49 TB False False SAMSUNG MZ7LH3T8 /dev/sdf 3.49 TB False False SAMSUNG MZ7LH3T8 /dev/sdg 3.49 TB False False SAMSUNG MZ7LH3T8 /dev/sdh 3.49 TB False False SAMSUNG MZ7LH3T8 Alternatively, just dump the paths of available drives:\nncn-s# cephadm shell -- ceph-volume inventory --format json-pretty | jq -r \u0026#39;.[]|select(.available==true)|.path\u0026#39;   Wipe and add drives   Wipe the drive ONLY after confirming that the drive is not being used by the current Ceph cluster using options 1, 2, or both.\n The following example wipes drive /dev/sdc on ncn-s002. Replace these values with the appropriate ones for the situation.\n ncn-s# ceph orch device zap ncn-s002 /dev/sdc --force   Add unused drives.\nncn-s# cephadm shell -- ceph-volume lvm create --data /dev/sd\u0026lt;drive to add\u0026gt; --bluestore   More information can be found at the cephadm reference page.\n4. Configure after management node deployment After the management nodes have been deployed, configuration can be applied to the booted nodes.\n4.1 LiveCD cluster authentication The LiveCD needs to authenticate with the cluster to facilitate the rest of the CSM installation.\n  Determine which master node is the first master node.\nMost often the first master node will be ncn-m002.\nRun the following commands on the PIT node to extract the value of the first-master-hostname field from the /var/www/ephemeral/configs/data.json file:\npit# FM=$(cat /var/www/ephemeral/configs/data.json | jq -r \u0026#39;.\u0026#34;Global\u0026#34;.\u0026#34;meta-data\u0026#34;.\u0026#34;first-master-hostname\u0026#34;\u0026#39;) pit# echo $FM   Copy the Kubernetes configuration file from that node to the LiveCD to be able to use kubectl as cluster administrator.\nRun the following commands on the PIT node:\npit# mkdir -v ~/.kube pit# scp ${FM}.nmn:/etc/kubernetes/admin.conf ~/.kube/config   Validate that kubectl commands run successfully from the PIT node.\npit# kubectl get nodes -o wide Expected output looks similar to the following:\nNAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME ncn-m002 Ready control-plane,master 2h v1.20.13 10.252.1.5 \u0026lt;none\u0026gt; SUSE Linux Enterprise High Performance Computing 15 SP3 5.3.18-59.19-default containerd://1.5.7 ncn-m003 Ready control-plane,master 2h v1.20.13 10.252.1.6 \u0026lt;none\u0026gt; SUSE Linux Enterprise High Performance Computing 15 SP3 5.3.18-59.19-default containerd://1.5.7 ncn-w001 Ready \u0026lt;none\u0026gt; 2h v1.20.13 10.252.1.7 \u0026lt;none\u0026gt; SUSE Linux Enterprise High Performance Computing 15 SP3 5.3.18-59.19-default containerd://1.5.7 ncn-w002 Ready \u0026lt;none\u0026gt; 2h v1.20.13 10.252.1.8 \u0026lt;none\u0026gt; SUSE Linux Enterprise High Performance Computing 15 SP3 5.3.18-59.19-default containerd://1.5.7 ncn-w003 Ready \u0026lt;none\u0026gt; 2h v1.20.13 10.252.1.9 \u0026lt;none\u0026gt; SUSE Linux Enterprise High Performance Computing 15 SP3 5.3.18-59.19-default containerd://1.5.7   4.2 Install tests and test server on NCNs Run the following commands on the PIT node.\npit# pushd /var/www/ephemeral \u0026amp;\u0026amp; ${CSM_RELEASE}/lib/install-goss-tests.sh \u0026amp;\u0026amp; popd 4.3 Clean up chrony configurations Run the following command without editing the value of the TOKEN variable.\npit# for i in $(grep -oP 'ncn-\\w\\d+' /etc/dnsmasq.d/statics.conf | sort -u | grep -v ncn-m001); do ssh $i \u0026quot;TOKEN=token /srv/cray/scripts/common/chrony/csm_ntp.py\u0026quot;; done Successful output can appear as:\nIf BSS is unreachable, local cache is checked and the configuration is still deployed:\n... BSS query failed. Checking local cache... Chrony configuration created Problematic config found: /etc/chrony.d/cray.conf.dist Problematic config found: /etc/chrony.d/pool.conf Restarted chronyd ... 5. Validate management node deployment The following csi pit validate commands will run a series of remote tests on the other nodes to validate they are healthy and configured correctly.\nObserve the output of the checks. If there are any failures, remediate them.\n  Check the storage nodes.\npit# csi pit validate --ceph | tee csi-pit-validate-ceph.log Once that command has finished, the following will extract the test totals reported for each node:\npit# grep \u0026#34;Total Test\u0026#34; csi-pit-validate-ceph.log Example output for a system with three storage nodes:\nTotal Tests: 8, Total Passed: 8, Total Failed: 0, Total Execution Time: 74.3782 seconds Total Tests: 3, Total Passed: 3, Total Failed: 0, Total Execution Time: 0.6091 seconds Total Tests: 3, Total Passed: 3, Total Failed: 0, Total Execution Time: 0.6260 seconds If these total lines report any failed tests, then look through the full output of the test in csi-pit-validate-ceph.log to see which node had the failed test and what the details are for that test.\nNote: See Utility Storage and Ceph CSI Troubleshooting in order to help resolve any failed tests.\n  Check the master and worker nodes.\nNote: Throughout the output of the csi pit validate command are test totals for each node where the tests run. Be sure to check all of them and not just the final one. A grep command is provided to help with this.\npit# csi pit validate --k8s | tee csi-pit-validate-k8s.log Once that command has finished, the following will extract the test totals reported for each node:\npit# grep \u0026#34;Total Test\u0026#34; csi-pit-validate-k8s.log Example output for a system with five master and worker nodes (excluding the PIT node):\nTotal Tests: 16, Total Passed: 16, Total Failed: 0, Total Execution Time: 0.3072 seconds Total Tests: 16, Total Passed: 16, Total Failed: 0, Total Execution Time: 0.2727 seconds Total Tests: 12, Total Passed: 12, Total Failed: 0, Total Execution Time: 0.2841 seconds Total Tests: 12, Total Passed: 12, Total Failed: 0, Total Execution Time: 0.3622 seconds Total Tests: 12, Total Passed: 12, Total Failed: 0, Total Execution Time: 0.2353 seconds If these total lines report any failed tests, then look through the full output of the test in csi-pit-validate-k8s.log to see which node had the failed test and what the details are for that test.\n WARNING: Notes on specific failures:\n If any of the FS Label tests fail (they have names like Master Node ETCDLVM FS Label or Worker Node CONLIB FS Label), then run manual tests on the node which reported the failure. See Manual LVM Check Procedure. If the manual tests fail, then the problem must be resolved before continuing to the next step. See LVM Check Failure Recovery. If the Weave Health test fails, run weave --local status connections on the node where the test failed. If messages similar to IP allocation was seeded by different peers are seen, then weave appears to be split-brained. At this point, it is necessary to wipe the NCNs and start the PXE boot again:  Wipe the NCNs using the \u0026lsquo;Basic Wipe\u0026rsquo; section of Wipe NCN Disks for Reinstallation. Return to the \u0026lsquo;Boot the Storage Nodes\u0026rsquo; step of Deploy Management Nodes section above.       Verify that all the pods in the kube-system namespace are Running or Completed.\nRun the following command on any Kubernetes master or worker node, or the PIT node:\nncn-mw/pit# kubectl get pods -o wide -n kube-system | grep -Ev \u0026#39;(Running|Completed)\u0026#39; If any pods are listed by this command, it means they are not in the Running or Completed state. Do not proceed before investigating this.\n  Important checkpoint Before proceeding, be aware that this is the last point where the other NCNs can be rebuilt without also having to rebuild the PIT node. Therefore, take time to double check both the cluster and the validation test results\nNext topic After completing the deployment of the management nodes, the next step is to install the CSM services.\nSee Install CSM Services\n"
},
{
	"uri": "/docs-csm/en-12/install/",
	"title": "Install",
	"tags": [],
	"description": "",
	"content": "Install CSM Abstract Installation of the CSM product stream has many steps in multiple procedures which should be done in a specific order. Information about the HPE Cray EX system and the site is used to prepare the configuration payload. The initial node used to bootstrap the installation process is called the PIT node because the Pre-Install Toolkit (PIT) is installed there.\nOnce the management network switches have been configured, the other management nodes can be deployed with an operating system and the software to create a Kubernetes cluster utilizing Ceph storage. The CSM services provide essential software infrastructure including the API gateway and many micro-services with REST APIs for managing the system. Once administrative access has been configured, the installation of CSM software can be validated with health checks before doing operational tasks like the checking and updating of firmware on system components or the preparation of compute nodes.\nOnce the CSM installation has completed, other product streams for the HPE Cray EX system can be installed.\nA major feature of CSM 1.2 is the Bifurcated CAN (BICAN). The BICAN is designed to separate administrative network traffic from user network traffic. More information can be found on the BICAN summary page. Review the BICAN summary before continuing with the CSM 1.2 install.\nDetailed BICAN documentation can be found on the BICAN technical details page.\nTopics  Validate SHCD Prepare configuration payload Prepare management nodes Bootstrap PIT node Configure management network switches Collect MAC addresses for NCNs Deploy management nodes Install CSM services Validate CSM health Deploy final NCN Configure administrative access Validate CSM health Configure Prometheus alert notifications Update firmware with FAS Prepare compute nodes Next topic Troubleshooting installation problems  The topics in this chapter need to be done as part of an ordered procedure so are shown here with numbered topics.\nNote: If problems are encountered during the installation, some topics have their own troubleshooting sections found in the operations index sections, but there is also a general troubleshooting topic.\nDetails \n  Validate SHCD\nThe cabling should be validated between the nodes and the management network switches. The information in the Shasta Cabling Diagram (SHCD) can be used to confirm the cables which physically connect components of the system. Having the data in the SHCD which matches the physical cabling will be needed later in both Prepare configuration payload and Configure management network switches.\nSee Validate SHCD.\nNote: If a reinstall or fresh install of this software release is being done on this system and the management network cabling has already been validated, then skip this step and move to Prepare configuration payload. \n  Prepare configuration payload\nInformation gathered from a site survey is needed to feed into the CSM installation process, such as system name, system size, site network information for the CAN, site DNS configuration, site NTP configuration, network information for the node used to bootstrap the installation. Much of the information about the system hardware is encapsulated in the SHCD (Shasta Cabling Diagram), which is a spreadsheet prepared by HPE Cray Manufacturing to assemble the components of the system and connect appropriately labeled cables.\nSee Prepare Configuration Payload \n  Prepare management nodes\nSome preparation of the management nodes might be needed before starting an install or reinstall. The preparation includes checking and updating the firmware on the PIT node, quiescing the compute nodes and application nodes, scaling back DHCP on the management nodes, wiping the storage on the management nodes, powering off the management nodes, and possibly powering off the PIT node.\nSee Prepare Management Nodes. \n  Bootstrap PIT node\nThe Pre-Install Toolkit (PIT) node needs to be bootstrapped from the LiveCD. There are two media available to bootstrap the PIT node\u0026ndash;the RemoteISO or a bootable USB device. The recommended media is the RemoteISO, because it does not require any physical media to prepare. However, remotely mounting an ISO on a BMC does not work smoothly for nodes from all vendors. It is recommended to try the RemoteISO first.\nUse one of these procedures to bootstrap the PIT node from the LiveCD:\n Bootstrap PIT Node from LiveCD Remote ISO (recommended)  Gigabyte BMCs should not use the RemoteISO method. Intel BMCs should not use the RemoteISO method.   Bootstrap PIT Node from LiveCD USB (fallback)  Using the LiveCD USB method requires a USB 3.0 device with at least 1TB of space to create a bootable LiveCD. \n  Configure management network switches\nNow that the PIT node has been booted with the LiveCD environment and CSI has generated the switch IP addresses, the management network switches can be configured.\nSee Management Network User Guide.\nNote: If a reinstall of this software release is being done on this system and the management network switches have already been configured, then skip this step and move to Collect MAC addresses for NCNs. \n  Collect MAC addresses for NCNs\nNow that the PIT node has been booted with the LiveCD and the management network switches have been configured, the actual MAC address for the management nodes can be collected. This process will include repetition of some of the steps done up to this point because csi config init will need to be run with the proper MAC addresses.\nSee Collect MAC Addresses for NCNs.\nNote: If a reinstall of this software release is being done on this system and the ncn_metadata.csv file already had valid MAC addresses for both BMC and node interfaces before csi config init was run, then this topic could be skipped and instead move to Deploy management nodes.\nNote: If a first time install of this software release is being done on this system and the ncn_metadata.csv file already had valid MAC addresses for both BMC and node interfaces before csi config init was run, then this topic could be skipped and instead move to Deploy management nodes. \n  Deploy management nodes\nNow that the PIT node has been booted with the LiveCD and the management network switches have been configured, the other management nodes can be deployed. This procedure will boot all of the management nodes, initialize Ceph storage on the storage nodes and start the Kubernetes cluster on all of the worker nodes and the master nodes, except for the PIT node. The PIT node will join Kubernetes after it is rebooted later in Deploy final NCN.\nSee Deploy Management Nodes. \n  Install CSM services\nDeployment of management nodes is complete with initialized Ceph storage and a running Kubernetes cluster on all worker and master nodes, except the PIT node. The Nexus repository will be populated with artifacts, containerized CSM services will be installed, and a few other configuration steps will be taken.\nSee Install CSM Services. \n  Validate CSM health\nValidate the health of the management nodes and all CSM services. The reason to do it now is that if there are any problems detected with the core infrastructure or the nodes, it is easy to rewind the installation to Deploy management nodes, because the PIT node has not yet been rebooted. In addition, rebooting the PIT node and deploying the final NCN successfully requires several CSM services to be working properly, so validating this is important.\nSee Validate CSM Health. \n  Deploy final NCN\nNow that all CSM services have been installed and the CSM health checks completed, with the possible exception of Booting the CSM Barebones Image and the UAS/UAI tests, the PIT node can be rebooted to leave the LiveCD environment and assume its intended role as one the Kubernetes master nodes.\nSee Deploy Final NCN. \n  Configure administrative access\nNow that all of the CSM services have been installed and the PIT node has been redeployed, administrative access can be prepared. This may include configuring Keycloak with a local Keycloak account or confirming Keycloak is properly federating LDAP or other Identity Provider (IdP), initializing the Cray command line interface for administrative commands, locking the management nodes from accidental actions such as firmware updates by FAS or power actions by CAPMC, configuring the CSM layer of configuration by CFS in NCN personalization,and configuring the node BMCs (node controllers) for nodes in liquid cooled cabinets.\nSee Configure Administrative Access. \n  Validate CSM health\nNow that all management nodes have joined the Kubernetes cluster, CSM services have been installed, and administrative access has been enabled, the health of the management nodes and all CSM services should be validated. There are no exceptions to running the tests\u0026ndash;all can be run now.\nThis CSM health validation can also be run at other points during the system lifecycle, such as when replacing a management node, checking the health after a management node has rebooted because of a crash, as part of doing a full system power down or power up, or after other types of system maintenance.\nSee Validate CSM Health. \n  Configure Prometheus alert notifications\nNow that CSM has been installed and health has been validated, if the system management health monitoring tools and specifically, Prometheus, are found to be useful, email notifications can be configured for specific alerts defined in Prometheus. Prometheus upstream documentation can be leveraged for an Alert Notification Template Reference as well as Notification Template Examples. Currently supported notification types include Slack, Pager Duty, email, or a custom integration via a generic webhook interface.\nSee Configure Prometheus Email Alert Notifications for an example configuration of an email alert notification for the Postgres replication alerts that are defined on the system. \n  Update firmware with FAS\nNow that all management nodes and CSM services have been validated as healthy, the firmware on other components in the system can be checked and updated. The Firmware Action Service (FAS) communicates with many devices on the system. FAS can be used to update the firmware for all of the devices it communicates with at once, or specific devices can be targeted for a firmware update.\nIMPORTANT: Before FAS can be used to update firmware, refer to the HPE Cray EX System Software Getting Started Guide (S-8000) 22.07 for more information about how to install the HPE Cray EX HPC Firmware Pack (HFP) product. The installation of HFP will inform FAS of the newest firmware available. Once FAS is aware that new firmware is available, then see Update Firmware with FAS. \n  Prepare compute nodes\nAfter completion of the firmware update with FAS, compute nodes can be prepared. Some compute node types have special preparation steps, but most compute nodes are ready to be used now.\nThese compute node types require preparation:\n HPE Apollo 6500 XL645D Gen10 Plus Gigabyte  See Prepare Compute Nodes \n  Next topic\nAfter completion of the firmware update with FAS and the preparation of compute nodes, the CSM product stream has been fully installed and configured. Refer to the HPE Cray EX System Software Getting Started Guide (S-8000) 22.07 on the HPE Customer Support Center for more information on other product streams to be installed and configured after CSM. \n  Troubleshooting installation problems\nThe installation of the Cray System Management (CSM) product requires knowledge of the various nodes and switches for the HPE Cray EX system. The procedures in this section should be referenced during the CSM install for additional information on system hardware, troubleshooting, and administrative tasks related to CSM. See Troubleshooting Installation Problems.\n  "
},
{
	"uri": "/docs-csm/en-12/install/install_csm_services/",
	"title": "Install Services",
	"tags": [],
	"description": "",
	"content": "Install CSM Services This procedure will install CSM applications and services into the CSM Kubernetes cluster.\n NOTE: Check the information in Known issues before starting this procedure to be warned about possible problems.\n  Install CSM services Create base BSS global boot parameters Wait for everything to settle Next topic   Known issues  Deploy CSM Applications and Services known issues Setup Nexus known issues    1. Install CSM services  NOTE: During this step, only on systems with only three worker nodes (typically Testing and Development Systems (TDS)), the customizations.yaml file will be automatically edited to lower pod CPU requests for some services, in order to better facilitate scheduling on smaller systems. See the file /var/www/ephemeral/${CSM_RELEASE}/tds_cpu_requests.yaml for these settings. This file can be modified with different values (prior to executing the yapl command below), if other settings are desired in the customizations.yaml file for this system. For more information about modifying customizations.yaml and tuning for specific systems, see Post-Install Customizations.\n   Install YAPL.\npit# rpm -Uvh /var/www/ephemeral/${CSM_RELEASE}/rpm/cray/csm/sle-15sp2/x86_64/yapl-*.x86_64.rpm   Install CSM services using YAPL.\npit# pushd /usr/share/doc/csm/install/scripts/csm_services \u0026amp;\u0026amp; \\  yapl -f install.yaml execute pit# popd    NOTES:\n This command may take up to 90 minutes to complete. If any errors are encountered, then potential fixes should be displayed where the error occurred. If the installation fails with a missing secret error message, then see CSM Services Install Fails Because of Missing Secret. Output is redirected to /usr/share/doc/csm/install/scripts/csm_services/yapl.log . To show the output in the terminal, append the --console-output execute argument to the yapl command. The yapl command can safely be rerun. By default, it will skip any steps which were previously completed successfully. To force it to rerun all steps regardless of what was previously completed, append the --no-cache argument to the yapl command.   2. Create base BSS global boot parameters   Wait for BSS to be ready.\npit# kubectl -n services rollout status deployment cray-bss   Retrieve an API token.\npit# export TOKEN=$(curl -k -s -S -d grant_type=client_credentials \\  -d client_id=admin-client \\  -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath=\u0026#39;{.data.client-secret}\u0026#39; | base64 -d` \\  https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r \u0026#39;.access_token\u0026#39;)   Create empty boot parameters.\npit# curl -i -k -H \u0026#34;Authorization: Bearer ${TOKEN}\u0026#34; -X PUT \\  https://api-gw-service-nmn.local/apis/bss/boot/v1/bootparameters \\  --data \u0026#39;{\u0026#34;hosts\u0026#34;:[\u0026#34;Global\u0026#34;]}\u0026#39; Example of successful output:\nHTTP/2 200 content-type: application/json; charset=UTF-8 date: Mon, 27 Jun 2022 17:08:55 GMT content-length: 0 x-envoy-upstream-service-time: 7 server: istio-envoy   Restart the spire-update-bss job.\npit# SPIRE_JOB=$(kubectl -n spire get jobs -l app.kubernetes.io/name=spire-update-bss -o name) pit# kubectl -n spire get $SPIRE_JOB -o json | jq \u0026#39;del(.spec.selector)\u0026#39; \\  | jq \u0026#39;del(.spec.template.metadata.labels.\u0026#34;controller-uid\u0026#34;)\u0026#39; \\  | kubectl replace --force -f -   Wait for the spire-update-bss job to complete.\npit# kubectl -n spire wait $SPIRE_JOB --for=condition=complete --timeout=5m   3. Wait for everything to settle Wait at least 15 minutes to let the various Kubernetes resources initialize and start before proceeding with the rest of the install. Because there are a number of dependencies between them, some services are not expected to work immediately after the install script completes.\n4. Next topic The next step is to validate CSM health before redeploying the final NCN.\nSee Validate CSM health before final NCN deployment.\nKnown issues Deploy CSM Applications and Services known issues The following error may occur during the Deploy CSM Applications and Services step:\n+ csi upload-sls-file --sls-file /var/www/ephemeral/prep/eniac/sls_input_file.json 2021/10/05 18:42:58 Retrieving S3 credentials ( sls-s3-credentials ) for SLS 2021/10/05 18:42:58 Unable to SLS S3 secret from k8s:secrets \u0026#34;sls-s3-credentials\u0026#34; not found   Verify that the sls-s3-credentials secret exists in the default namespace:\npit# kubectl get secret sls-s3-credentials Example output:\nNAME TYPE DATA AGE sls-s3-credentials Opaque 7 28d   Check for running sonar-sync jobs. If there are no sonar-sync jobs, then wait for one to complete. The sonar-sync CronJob is responsible for copying the sls-s3-credentials secret from the default namespace to the services namespace.\npit# kubectl -n services get pods -l cronjob-name=sonar-sync Example output:\nNAME READY STATUS RESTARTS AGE sonar-sync-1634322840-4fckz 0/1 Completed 0 73s sonar-sync-1634322900-pnvl6 1/1 Running 0 13s   Verify that the sls-s3-credentials secret now exists in the services namespace.\npit# kubectl -n services get secret sls-s3-credentials Example output:\nNAME TYPE DATA AGE sls-s3-credentials Opaque 7 20s   Running the yapl command again is expected to succeed.\n  5.2 Setup Nexus known issues Known potential issues along with suggested fixes are listed in Troubleshoot Nexus.\n"
},
{
	"uri": "/docs-csm/en-12/install/prepare_compute_nodes/",
	"title": "Prepare Compute Nodes",
	"tags": [],
	"description": "",
	"content": "Prepare Compute Nodes Topics:  Configure HPE Apollo 6500 XL645d Gen10 Plus Compute Nodes  Gather information Configure the iLO to use VLAN 4 Configure the switch port for the iLO to use VLAN 4 Clear bad MAC and IP address out of KEA Clear bad ID out of HSM   Update the BIOS Time on Gigabyte Compute Nodes  Details Configure HPE Apollo 6500 XL645d Gen10 Plus Compute Nodes The HPE Apollo 6500 XL645d Gen10 Plus compute node uses a NIC/shared iLO network port. The NIC is also referred to as the Embedded LOM (LAN On Motherboard) and is available to the booted OS. This shared port is plugged into a port on the TOR Ethernet switch designated for the Hardware Management Network (HMN) causing the NIC to get an IP address assigned to it from the wrong pool. To prevent this from happening, the iLO VLAN tag needs to be configured for VLAN 4 and the switch port the NIC/shared iLO is plugged into needs to be configured to allow only VLAN 4 traffic. This prevents the NIC from communicating over the switch and it will no longer DHCP an IP address.\nThis procedure needs to be done for each of the HPE Apollo 6500 XL645d servers that will be managed by CSM software. River compute nodes always index their BMCs from 1. For example, the compute BMCs in servers with more than one node will have component names (xnames) as follows: x3000c0s30b1, x3000c0s30b2, x3000c0s30b3, and so on. The node indicator is always a 0. For example, x3000c0s30b1n0 or x3000c0s30b4n0.\n\n  Gather information.\nThe following is an example using x3000c0s30b1n0 as the target compute node component name (xname):\nncn# XNAME=x3000c0s30b1n0 ncn# cray hsm inventory ethernetInterfaces list --component-id \\  ${XNAME} --format json | jq \u0026#39;.[]|select((.IPAddresses|length)\u0026gt;0)\u0026#39; { \u0026#34;ID\u0026#34;: \u0026#34;6805cabbc182\u0026#34;, \u0026#34;Description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;MACAddress\u0026#34;: \u0026#34;68:05:ca:bb:c1:82\u0026#34;, \u0026#34;LastUpdate\u0026#34;: \u0026#34;2021-04-19T22:15:00.523621Z\u0026#34;, \u0026#34;ComponentID\u0026#34;: \u0026#34;x3000c0s30b1n0\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;Node\u0026#34;, \u0026#34;IPAddresses\u0026#34;: [ { \u0026#34;IPAddress\u0026#34;: \u0026#34;10.252.1.21\u0026#34; } ] } { \u0026#34;ID\u0026#34;: \u0026#34;9440c938f7b4\u0026#34;, \u0026#34;Description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;MACAddress\u0026#34;: \u0026#34;94:40:c9:38:f7:b4\u0026#34;, \u0026#34;LastUpdate\u0026#34;: \u0026#34;2021-05-07T18:37:59.239924Z\u0026#34;, \u0026#34;ComponentID\u0026#34;: \u0026#34;x3000c0s30b1n0\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;Node\u0026#34;, \u0026#34;IPAddresses\u0026#34;: [ { \u0026#34;IPAddress\u0026#34;: \u0026#34;10.254.1.38\u0026#34; } ] } The second entry is the indication that the NIC is receiving incorrect IP addresses. The 10.254.x.y address is for the HMN and should not be associated with the node itself (x3000c0s30b1n0).\nMake a note of the ID, MACAddress, and IPAddress of the entry that has the 10.254 address listed.\nncn# ID=\u0026#34;9440c938f7b4\u0026#34; ncn# MAC=\u0026#34;94:40:c9:38:f7:b4\u0026#34; ncn# IPADDR=\u0026#34;10.254.1.38\u0026#34; These will be used later to clean up KEA and Hardware State Manager (HSM). There may not be a 10.254 address associated with the node, that is OK, it will enable skipping of several steps later on.\n\n  Configure the iLO to use VLAN 4.\n Connect to BMC WebUI and log in with standard root credentials.  From the administrators own machine create an SSH tunnel (-L creates the tunnel, and -N prevents a shell and stubs the connection): linux# BMC=x3000c0s30b1 linux# ssh -L 9443:$BMC:443 -N root@example-ncn-m001  Opening a web browser to https://localhost:9443 will give access to the BMC\u0026rsquo;s web interface. Login with the root credentials.   Click on iLO Shared Network Port on left menu. Make a note of the MAC Address under the Information section, that will be needed later. ncn# ILOMAC=\u0026#34;\u0026lt;MAC Address\u0026gt;\u0026#34; For example\nncn# ILOMAC=\u0026#34;94:40:c9:38:08:c7\u0026#34;  Click on General on the top menu. Under NIC Settings move slider to Enable VLAN. In the VLAN Tag box, enter 4. Click Apply. Click Reset iLO when it appears. Click Yes, Reset when it appears on the right. After accepting the BMC restart, connection to the BMC will be lost until the switch port reconfiguration is performed.  \n  Configure the switch port for the iLO to use VLAN 4.\n  Find the port and the switch the iLO is plugged into using the SHCD.\n  ssh to the switch and log in with standard admin credentials. Refer to /etc/hosts for exact hostname.\n  Verify the MAC on the port.\nExample using port number 46.\nsw-leaf-001# show mac-address-table | include 1/1/46 94:40:c9:38:08:c7 4 dynamic 1/1/46 Make sure the MAC address shown for that port matches the ILOMAC address noted in step 2.3 from the Information section of the WebUI\nNOTE: If the MAC is not correct, double check the server cabling and SHCD for the correct port then start this section over. Do not move on until the ILOMAC address has been found on the switch at the expected port.\n  Configure the port if the MAC is correct.\nExample using port number 46.\nsw-leaf-001# configure t sw-leaf-001(config)# int 1/1/46 sw-leaf-001(config-if)# vlan trunk allowed 4 sw-leaf-001(config-if)# write mem Copying configuration: [Success] sw-leaf-001(config-if)# exit sw-leaf-001(config)# exit   Verify the settings.\nsw-leaf-001# show running-config interface 1/1/46 interface 1/1/46 no shutdown mtu 9198 description dl645d no routing vlan trunk native 1 vlan trunk allowed 4 spanning-tree bpdu-guard spanning-tree port-type admin-edge exit After a few minutes the switch will be configured and access to the WebUI will be regained.\n  \n  Clear bad MAC and IP address out of KEA.\nNOTE: Skip this step if there was no bad MAC and IPADDR found in step 1.\nRetrieve a bearer token if you have not done so already.\nncn# export TOKEN=$(curl -s -S -d grant_type=client_credentials \\  -d client_id=admin-client \\  -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath=\u0026#39;{.data.client-secret}\u0026#39; | base64 -d` \\  https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r \u0026#39;.access_token\u0026#39;) Remove the entry from KEA that is associated with the MAC and IPADDRESS gathered in section 1.1.\nncn# curl -s -k -H \u0026#34;Authorization: Bearer ${TOKEN}\u0026#34; -X POST -H \\ \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#39;{\u0026#34;command\u0026#34;: \u0026#34;lease4-del\u0026#34;, \\ \u0026#34;service\u0026#34;: [ \u0026#34;dhcp4\u0026#34; ], \u0026#34;arguments\u0026#34;: {\u0026#34;hw-address\u0026#34;: \u0026#34;\u0026#39;${MAC}\u0026#39;\u0026#34;, \\ \u0026#34;ip-address\u0026#34;: \u0026#34;\u0026#39;${IPADDR}\u0026#39;\u0026#34;}}\u0026#39; https://api-gw-service-nmn.local/apis/dhcp-kea Expected results:\n[ { \u0026#34;result\u0026#34;: 0, \u0026#34;text\u0026#34;: \u0026#34;IPv4 lease deleted.\u0026#34; } ] \n  Clear bad ID out of HSM.\nNOTE: Skip this step if there was no bad ID found in step 1.\nTell HSM to delete the bad ID out of the Ethernet Interfaces table.\nncn# cray hsm inventory ethernetInterfaces delete $ID Expected results:\n{ \u0026#34;code\u0026#34;: 0, \u0026#34;message\u0026#34;: \u0026#34;deleted 1 entry\u0026#34; }   Everything is now configured and the CSM software will automatically discover the node after several minutes. After it has been discovered, the node is ready to be booted.\n1. Update the BIOS Time on Gigabyte Compute Nodes The BIOS time for Gigabyte compute nodes must be synced with the rest of the system. See Update the Gigabyte Node BIOS Time.\nNext Topic After completing the preparation for compute nodes, the CSM product stream has been fully installed and configured. Check the next topic.\nSee Next Topic for more information on other product streams to be installed and configured after CSM.\n"
},
{
	"uri": "/docs-csm/en-12/install/prepare_configuration_payload/",
	"title": "Prepare Configuration Payload",
	"tags": [],
	"description": "",
	"content": "Prepare Configuration Payload The configuration payload consists of the information which must be known about the HPE Cray EX system so it can be passed to the csi (Cray Site Init) program during the CSM installation process.\nInformation gathered from a site survey is needed to feed into the CSM installation process, such as system name, system size, site network information for the CAN, site DNS configuration, site NTP configuration, network information for the node used to bootstrap the installation. More detailed component level information about the system hardware is encapsulated in the SHCD (Shasta Cabling Diagram), which is a spreadsheet prepared by HPE Cray Manufacturing to assemble the components of the system and connect appropriately labeled cables.\nHow the configuration payload is prepared depends on whether this is a first time installation of CSM software on this system or the CSM software is being reinstalled. The reinstall scenario has the advantage of being able to use the configuration payload from the previous CSM installation and an additional configuration file which that installation generated. The first time install scenario requires passing command-line arguments to CSI, as well as the creation of a number of Configuration Payload Files.\nTopics  Command Line Configuration Payload Configuration Payload Files First Time Install Reinstall Next Topic  Command Line Configuration Payload The information from a site survey can be given to the csi command as command line arguments. The information and options shown below are to explain what data is needed. It will not be used until moving to the Bootstrap PIT Node procedure.\nThe air-cooled cabinet is known to csi as a river cabinet. The liquid-cooled cabinets are either mountain or hill (if a TDS system).\nFor more description of these settings and the default values, see Default IP Address Ranges and the other topics in CSM Overview. There are additional options not shown on this page that can be seen by running csi config init --help.\n   CSI option Information     --bootstrap-ncn-bmc-user root Administrative account for the management node BMCs   --bootstrap-ncn-bmc-pass changeme Password for bootstrap-ncn-bmc-user account   --system-name eniac Name of the HPE Cray EX system   --mountain-cabinets 4 Number of Mountain cabinets, but this could also be in cabinets.yaml   --starting-mountain-cabinet 1000 Starting Mountain cabinet ID   --hill-cabinets 0 Number of Hill cabinets, but this could also be in cabinets.yaml   --river-cabinets 1 Number of River cabinets, but this could also be in cabinets.yaml   --can-cidr 10.103.11.0/24 IP subnet for the CAN assigned to this system   --can-gateway 10.103.11.1 Virtual IP address for the CAN (on the spine switches)   --can-static-pool 10.103.11.112/28 MetalLB static pool on CAN   --can-dynamic-pool 10.103.11.128/25 MetalLB dynamic pool on CAN   --cmn-cidr 10.103.12.0/24 IP subnet for the CMN assigned to this system   --cmn-external-dns 10.103.12.113 IP address on CMN for this system\u0026rsquo;s DNS server   --cmn-gateway 10.103.12.1 Virtual IP address for the CMN (on the spine switches)   --cmn-static-pool 10.103.12.112/28 MetalLB static pool on CMN   --cmn-dynamic-pool 10.103.12.128/25 MetalLB dynamic pool on CMN   --hmn-cidr 10.254.0.0/17 Override the default cabinet IPv4 subnet for River HMN   --nmn-cidr 10.252.0.0/17 Override the default cabinet IPv4 subnet for River NMN   --hmn-mtn-cidr 10.104.0.0/17 Override the default cabinet IPv4 subnet for Mountain HMN   --nmn-mtn-cidr 10.100.0.0/17 Override the default cabinet IPv4 subnet for Mountain NMN   --ntp-pools time.nist.gov External NTP pool(s) for this system to use   --site-domain dev.cray.com Domain name for this system   --site-ip 172.30.53.79/20 IP address and netmask for the PIT node lan0 connection   --site-gw 172.30.48.1 Gateway for the PIT node to use   --site-nic p1p2 NIC on the PIT node to become lan0   --site-dns 172.30.84.40 Site DNS servers to be used by the PIT node   --install-ncn-bond-members p1p1,p10p1 NICs on each management node to become bond0   --application-node-config-yaml application_node_config.yaml Name of application_node_config.yaml   --cabinets-yaml cabinets.yaml Name of cabinets.yaml   --primary-server-name primary Desired name for the primary DNS server   --secondary-servers \u0026quot;\u0026quot; Comma-separated list of FQDN/IP for all DNS servers to be notified on DNS zone update   --notify-zones \u0026quot;\u0026quot; A comma-separated list of DNS zones to transfer      This is a long list of options. It can be helpful to create a Bash script file to call the csi command with all of these options, and then edit that file to adjust the values for the particular system being installed.\n  The bootstrap-ncn-bmc-user and bootstrap-ncn-bmc-pass must match what is used for the BMC account and its password for the management nodes.\n  Set site parameters (site-domain, site-ip, site-gw, site-nic, site-dns) for the information which connects ncn-m001 (the PIT node) to the site. The site-nic is the interface on this node connected to the site.\n  There are other interfaces possible, but the install-ncn-bond-members are typically:\n p1p1,p10p1 for HPE nodes p1p1,p1p2 for Gigabyte nodes p801p1,p801p2 for Intel nodes    The starting cabinet number for each type of cabinet (for example, starting-mountain-cabinet) has a default that can be overridden. See the csi config init --help output for more information.\n  An override to default cabinet IPv4 subnets can be made with the hmn-mtn-cidr and nmn-mtn-cidr parameters.\n  Several parameters (can-gateway, can-cidr, can-static-pool, can-dynamic-pool) describe the CAN (Customer Access network).\n The can-gateway is the common gateway IP address used for both spine switches and commonly referred to as the Virtual IP address for the CAN. The can-cidr is the IP subnet for the CAN assigned to this system. The can-static-pool and can-dynamic-pool are the MetalLB address static and dynamic pools for the CAN.    Several parameters (cmn-gateway, cmn-cidr, cmn-static-pool, cmn-dynamic-pool) describe the CMN (Customer Management network).\n The cmn-gateway is the common gateway IP address used for both spine switches and commonly referred to as the Virtual IP address for the CMN. The cmn-cidr is the IP subnet for the CMN assigned to this system. The cmn-static-pool and cmn-dynamic-pool are the MetalLB address static and dynamic pools for the CMN. The cmn-external-dns is the static IP address assigned to the DNS instance running in the cluster to which requests the cluster subdomain will be forwarded.  The cmn-external-dns IP address must be within the cnn-static-pool range.      Set ntp-pool to a reachable NTP server.\n  The application_node_config.yaml file is required. It is used to describe the mapping between prefixes in hmn_connections.csv and HSM subroles. This file also defines aliases for application nodes.\n See Create Application Node YAML.    For systems that use non-sequential cabinet ID numbers, use cabinets-yaml to include the cabinets.yaml file.\n This file can include information about the starting ID for each cabinet type and number of cabinets which have separate command line options. It also is a way to specify explicitly the ID of every cabinet in the system. See Create Cabinets YAML.    The PowerDNS zone transfer arguments primary-server-name, secondary-servers, and notify-zones are optional unless zone transfer is being configured.\n See the PowerDNS Configuration Guide.    Configuration Payload Files A few configuration files are needed for the installation of CSM. These are all provided to the csi command during the installation process.\n   Filename Source Information     cabinets.yaml SHCD The number and type of air-cooled and liquid-cooled cabinets. cabinet IDs, and VLAN numbers   application_node_config.yaml SHCD The number and type of application nodes with mapping from the name in the SHCD to the desired hostname   hmn_connections.json SHCD The network topology for HMN of the entire system   ncn_metadata.csv SHCD, other The number of master, worker, and storage nodes and MAC address information for BMC and bootable NICs   switch_metadata.csv SHCD Inventory of all spine, leaf, CDU, and leaf-bmc switches    Although some information in these files can be populated from site survey information, the SHCD prepared by HPE Cray Manufacturing is the best source of data for hmn_connections.json. The ncn_metadata.csv does require collection of MAC addresses from the management nodes because that information is not present in the SHCD.\ncabinets.yaml The cabinets.yaml file describes the type of cabinets in the system, the number of each type of cabinet, and the starting cabinet ID for every cabinet in the system. This file can be used to indicate that a system has non-contiguous cabinet ID numbers or non-standard VLAN numbers.\nThe component names (xnames) used in the other files should fit within the cabinet IDs defined by the starting cabinet ID for River cabinets (modified by the number of cabinets). It is OK for management nodes not to be in x3000 (as the first River cabinet), but they must be in one of the River cabinets. For example, x3000 with two cabinets would mean x3000 or x3001 should have all management nodes.\nSee Create Cabinets YAML for instructions about creating this file.\napplication_node_config.yaml The application_node_config.yaml file controls how the csi config init command finds and treats application nodes discovered in the hmn_connections.json file when building the SLS Input file.\nDifferent node prefixes in the SHCD can be identified as Application nodes. Each node prefix can be mapped to a specific HSM sub role. These sub roles can then be used as the targets of Ansible plays run by CFS to configure these nodes. The component name (xname) for each Application node can be assigned one or more hostname aliases.\nSee Create Application Node YAML for instructions about creating this file.\nhmn_connections.json The hmn_connections.json file is extracted from the HMN tab of the SHCD spreadsheet. The CSM release includes the hms-shcd-parser container; this container can do the extraction on the PIT node booted from the LiveCD (RemoteISO or USB device) or on a Linux system. Although some information in these files can be populated from site survey information, the SHCD prepared by HPE Cray Manufacturing is the best source of data for hmn_connections.json.\nNo action is required to create this file at this point, and it will be created when the PIT node is bootstrapped.\nncn_metadata.csv The information in the ncn_metadata.csv file identifies each of the management nodes, assigns the function as a master, worker, or storage node, and provides the MAC address information needed to identify the BMC and the NIC which will be used to boot the node.\nFor each management node, the component name (xname), role, and subrole can be extracted from the SHCD. However, the rest of the MAC address information needs to be collected another way. Collect as much information as possible before the PIT node is booted from the LiveCD and then get the rest later when directed. See the scenarios which enable partial data collection below in First Time Install.\nSee Create NCN Metadata CSV for instructions about creating this file.\nswitch_metadata.csv The switch_metadata.csv file is manually created to include information about all spine, leaf, CDU, and leaf-bmc switches in the system. None of the Slingshot switches for the HSN should be included in this file.\nSee Create Switch Metadata CSV for instructions about creating this file.\nFirst Time Install The process to install for the first time must collect the information needed to create these files.\n  Collect data for cabinets.yaml.\nSee Create Cabinets YAML for instructions about creating this file.\n  Collect data for application_node_config.yaml.\nSee Create Application Node YAML for instructions about creating this file.\n  Collect data for ncn_metadata.csv.\nSee Create NCN Metadata CSV for instructions about creating this file.\n  Collect data for switch_metadata.csv.\nSee Create Switch Metadata CSV for instructions about creating this file.\n  Reinstall The process to reinstall must have the configuration payload files available.\n  Collect Payload for Reinstall.\n  These files from a previous install are needed to do a reinstall.\n application_node_config.yaml (if used previously) cabinets.yaml (if used previously) hmn_connections.json ncn_metadata.csv switch_metadata.csv system_config.yaml  If the system_config.yaml is not available, then a reinstall cannot be done. Switch to the install process and generate any of the other files for the Configuration Payload Files which are missing.\n  The command line options used to call csi config init are not needed.\nWhen doing a reinstall, all of the command line options which had been given to csi config init during the previous installation will be found inside the system_config.yaml file. This simplifies the reinstall process.\nWhen you are ready to bootstrap the LiveCD, it will indicate when to run this command without any extra command line options. It will expect to find all of the above files in the current working directory.\nlinux# csi config init     Next Topic After completing this procedure the next step is to prepare the management nodes. See Prepare Management Nodes\n"
},
{
	"uri": "/docs-csm/en-12/install/prepare_management_nodes/",
	"title": "Prepare Management Nodes",
	"tags": [],
	"description": "",
	"content": "Prepare Management Nodes The procedures described on this page must be completed before any node is booted with the Cray Pre-Install Toolkit (PIT), which is performed in a later document. When the PIT node is referenced during these procedures, it means the node that will be booted as the PIT node.\n Quiesce compute and application nodes Disable DHCP service Wipe disks on booted nodes Set IPMI credentials Power off booted nodes Set node BMCs to DHCP Wipe USB device on PIT node Power off PIT node Configure DNS Check disk space  Quiesce compute nodes and application nodes  Skip this section if compute nodes and application nodes are not booted.\n The compute nodes and application nodes depend on the management nodes to provide services for their runtime environment. For example:\n Content Projection Service (CPS) to project the operating system image, the CPE image, or the Analytics image cray-dns-unbound (internal system DNS) cray-kea (DHCP leases) Access to the API gateway for node heartbeats  While the reinstall process happens, these nodes would not be able to function normally. As part of the reinstall, they will be rebooted with new boot images and configuration.\nSee Shut Down and Power Off Compute and User Access Nodes.\nDisable DHCP service  Skip this section if none of the management nodes are booted.\n If doing a reinstall and any of the management nodes are booted, then the DHCP service will need to be disabled before powering off management nodes.\nRuntime DHCP services interfere with the LiveCD\u0026rsquo;s bootstrap nature to provide DHCP leases to BMCs. To remove edge cases, disable the run-time cray-dhcp-kea pod.\nScale the deployment from either the LiveCD or any Kubernetes node:\nncn# kubectl scale -n services --replicas=0 deployment cray-dhcp-kea Wipe disks on booted nodes  Skip this section if none of the management nodes are booted.\n If any of the management nodes are booted with Linux, then they have data from previous installations on them which must be wiped.\nREQUIRED If the above is true, then for each management node (excluding ncn-m001), log in and do a \u0026ldquo;full wipe\u0026rdquo; of the node\u0026rsquo;s disks.\nSee full wipe from Wipe NCN Disks for Reinstallation.\nSet IPMI credentials The upcoming procedures use ipmitool. Set IPMI credentials for the BMCs of the NCNs.\n read -s is used in order to prevent the credentials from being displayed on the screen or recorded in the shell history.\n linux# USERNAME=root linux# read -s IPMI_PASSWORD linux# export IPMI_PASSWORD Power off booted nodes  Skip this section if none of the management nodes are booted.\n Power each NCN off using ipmitool from ncn-m001 (or the booted LiveCD, if reinstalling an incomplete install).\nShut down from LiveCD (pit)   Power off NCNs.\npit# conman -q | grep mgmt | grep -v m001 | xargs -t -i ipmitool -I lanplus -U $USERNAME -E -H {} power off   Check the power status to confirm that the nodes have powered off.\npit# conman -q | grep mgmt | grep -v m001 | xargs -t -i ipmitool -I lanplus -U $USERNAME -E -H {} power status   Shut down from ncn-m001   Power off NCNs.\nncn-m001# grep ncn /etc/hosts | grep mgmt | grep -v m001 | sort -u | awk \u0026#39;{print $2}\u0026#39; | xargs -t -i ipmitool -I lanplus -U $USERNAME -E -H {} power off   Check the power status to confirm that the nodes have powered off.\nncn-m001# grep ncn /etc/hosts | grep mgmt | grep -v m001 | sort -u | awk \u0026#39;{print $2}\u0026#39; | xargs -t -i ipmitool -I lanplus -U $USERNAME -E -H {} power status   Set node BMCs to DHCP Set the BMCs on the management nodes to DHCP. During the install of the management nodes their BMCs get set to static IP addresses. The installation expects these BMCs to be set back to DHCP before proceeding.\n These steps require that the Set IPMI credentials steps have been performed.\n   Set the LAN variable based on NCN hardware type.\n  If NCNs are Intel, set it to 3.\nlinux# LAN=3   For non-Intel nodes, set it to 1.\nlinux# LAN=1     Collect BMC hostnames or IP addresses.\n  From the LiveCD (pit):\n This collects BMC IP addresses using the old statics.conf on the system, in case CSI changes IP addresses:\n pit# BMCS=$(grep mgmt /etc/dnsmasq.d/statics.conf | grep -v m001 | awk -F \u0026#39;,\u0026#39; \u0026#39;{print $2}\u0026#39; | grep -Eo \u0026#34;([0-9]{1,3}[.]){3}[0-9]{1,3}\u0026#34; | sort -u | tr \u0026#39;\\n\u0026#39; \u0026#39; \u0026#39;) ; echo $BMCS   From ncn-m001:\nCollect BMC hostnames from /etc/hosts:\nncn-m001# BMCS=$(grep -wEo \u0026#34;ncn-[msw][0-9]{3}-mgmt\u0026#34; /etc/hosts | grep -v \u0026#34;m001\u0026#34; | sort -u | tr \u0026#39;\\n\u0026#39; \u0026#39; \u0026#39;) ; echo $BMCS     Set the BMCs to DHCP.\nlinux# for h in $BMCS ; do echo \u0026#34;Setting $hto DHCP\u0026#34; ipmitool -U $USERNAME -I lanplus -H $h -E lan set $LAN ipsrc dhcp done   Verify that the BMCs have been set to DHCP:\nlinux# for h in $BMCS ; do printf \u0026#34;$h: \u0026#34; ipmitool -U $USERNAME -I lanplus -H $h -E lan print $LAN | grep Source done   Perform a cold reset of any BMCs which are still reachable.\nlinux# for h in $BMCS ; do printf \u0026#34;$h: \u0026#34; if ping -c 3 $h \u0026gt;/dev/null 2\u0026gt;\u0026amp;1; then printf \u0026#34;Still reachable. Issuing cold reset... \u0026#34; ipmitool -U $USERNAME -I lanplus -H $h -E mc reset cold else echo \u0026#34;Not reachable (DHCP setting appears to be successful)\u0026#34; fi done As long as every BMC is either not reachable or receives a cold reset, this step is successful.\n  Wipe USB device on PIT node  Skip this section if intending to boot the PIT node from a USB device for the install.\n If the PIT node has previously been booted (either from a USB device or a remote ISO), then it should be wiped in order to avoid problems stemming from leftover LiveCD disk labels.\nWipe LiveCD disk labels with the following command:\nncn-m001# wipefs --all --force /dev/disk/by-label/cow /dev/disk/by-label/PITDATA /dev/disk/by-label/BOOT /dev/disk/by-label/CRAYLIVE Power off PIT node  Skip this step if planning to use this node as a staging area to create the USB LiveCD.\n Shut down the LiveCD or ncn-m001 node.\nlinux# poweroff Configure DNS If ncn-m001 is being used to prepare the USB LiveCD, remove the Kubernetes IP addresses from /etc/resolv.conf and add a valid external DNS server.\nCheck disk space If ncn-m001 is being used to prepare the USB LiveCD, ensure there is enough free disk space for the CSM tar archive to be downloaded and unpacked.\nNext topic The next step is to bootstrap the PIT node.\nSee Bootstrap PIT Node.\n"
},
{
	"uri": "/docs-csm/en-12/install/prepare_site_init/",
	"title": "Prepare Site Init",
	"tags": [],
	"description": "",
	"content": "Prepare Site Init These procedures guide administrators through setting up the site-init directory which contains important customizations for various products.\nNote: There are two media available to bootstrap the PIT node: the RemoteISO or a bootable USB device. Both of those can use this procedure. The only difference in this procedure is that the RemoteISO method will execute these commands on the PIT node, while the USB method could be done on any Linux system. This procedure works for both methods, so in order to be generic, this document uses the command prompt of linux# in its examples.\n Background Create and Initialize site-init Directory Create Baseline System Customizations Generate Sealed Secrets Version Control Site Init Files  Push to a Remote Repository   Customer-Specific Customizations  Prerequisites The procedures on this page assumes that the SYSTEM_NAME, CSM_RELEASE, CSM_PATH, and PITDATA variables are set and exported. This is normally done as part of the Bootstrap PIT Node procedure.\nlinux# echo -e \u0026#34;CSM_PATH=${CSM_PATH}\\nCSM_RELEASE=${CSM_RELEASE}\\nPITDATA=${PITDATA}\\nSYSTEM_NAME=${SYSTEM_NAME}\u0026#34; 1. Background The shasta-cfg directory included in the CSM release tarball includes relatively static, installation-centric artifacts, such as:\n Cluster-wide network configuration settings required by Helm Charts deployed by product stream Loftsman Manifests Sealed Secrets Sealed Secret Generate Blocks \u0026ndash; a form of plain-text input that renders to a Sealed Secret Helm Chart value overrides that are merged into Loftsman Manifests by product stream installers  2. Create and Initialize site-init Directory   Set the SITE_INIT variable.\n Important: All procedures on this page assume that this variable has been set.\n linux# SITE_INIT=${PITDATA}/prep/site-init   Create the site-init directory.\nlinux# mkdir -pv ${SITE_INIT} \u0026amp;\u0026amp; pushd ${SITE_INIT}   Initialize site-init from CSM.\nlinux# ${CSM_PATH}/shasta-cfg/meta/init.sh ${SITE_INIT}   Set an alias to the yq tool for use in these procedures.\n  Set the alias.\nlinux# alias yq=\u0026#34;${CSM_PATH}/shasta-cfg/utils/bin/$(uname | awk \u0026#39;{print tolower($0)}\u0026#39;)/yq\u0026#34;   Confirm that the alias points to the yq command.\nlinux# yq -V Expected output looks similar to the following (although the version number may vary):\nyq version 3.3.0     3. Create Baseline System Customizations The following steps update ${SITE_INIT}/customizations.yaml with system-specific customizations.\n  Merge the system-specific settings generated by CSI into customizations.yaml.\nlinux# yq merge -xP -i ${SITE_INIT}/customizations.yaml \u0026lt;(yq prefix -P \u0026#34;${PITDATA}/prep/${SYSTEM_NAME}/customizations.yaml\u0026#34; spec)   Set the cluster name.\nlinux# yq write -i ${SITE_INIT}/customizations.yaml spec.wlm.cluster_name \u0026#34;${SYSTEM_NAME}\u0026#34;   Make a backup copy of ${SITE_INIT}/customizations.yaml.\nlinux# cp -v ${SITE_INIT}/customizations.yaml ${SITE_INIT}/customizations.yaml.prepassword   Review the configuration to generate these sealed secrets in customizations.yaml in the site-init directory.\n spec.kubernetes.sealed_secrets.cray_reds_credentials spec.kubernetes.sealed_secrets.cray_meds_credentials spec.kubernetes.sealed_secrets.cray_hms_rts_credentials  The cray_reds_credentials are used by the HMS Discovery CronJob and the River Endpoint Discovery Service (REDS) for River components. This sealed secret contains the following:\n Default Redfish root user credentials for air-cooled Node and Router BMCs. Default SNMP credentials configured on leaf-bmc switches. This needs to match the SNMP credentials currently configured on leaf-bmc switches or the credentials will be configured later in the install. The SNMP username, authentication password, and the privacy password need to be provided.  The cray_meds_credentials are used by the Mountain Endpoint Discovery Service (MEDS) for the liquid-cooled components in an Olympus (Mountain) cabinet.\n The root user password needs to match what is currently configured on the CECs for the liquid-cooled cabinets in the system.  The cray_hms_rts_credentials are used by the Redfish Translation Service (RTS) for any hardware components which are not managed by Redfish, such as a ServerTech PDU in a River Cabinet.\n The ServerTech PDU credentials need to match the credentials for the admn user that is currently configured on the PDUs. The RTS root user credentials are unique to RTS and used only within the service mesh; these can be set as desired.  Edit customizations.yaml to replace the Username and Password references in the file so that the values match the existing settings of your system hardware components. See the Decrypt Sealed Secrets for Review section of Manage Sealed Secrets if needing to examine credentials from prior installs.\nlinux# vi ${SITE_INIT}/customizations.yaml   Review the changes that you made.\nlinux# diff ${SITE_INIT}/customizations.yaml ${SITE_INIT}/customizations.yaml.prepassword   Validate that REDS/MEDS/RTS credentials.\nFor all credentials, Make sure Username and Password values are correct.\n  Validate REDS credentials.\nThese credentials are used by the REDS and HMS discovery services, targeting River Redfish BMC endpoints and management switches\n NOTE: For vault_redfish_defaults, the only entry used is '{\u0026quot;Cray\u0026quot;: {\u0026quot;Username\u0026quot;: \u0026quot;root\u0026quot;, \u0026quot;Password\u0026quot;: \u0026quot;XXXX\u0026quot;}' Make sure it is specified as shown, with the Cray key. This key is not used in any of the other credential specifications.\n linux# yq read ${SITE_INIT}/customizations.yaml \u0026#39;spec.kubernetes.sealed_secrets.cray_reds_credentials.generate.data[*].args.value\u0026#39; | jq   Validate MEDS credentials.\nThese credentials are used by the MEDS service, targeting Redfish BMC endpoints.\nlinux# yq read ${SITE_INIT}/customizations.yaml \u0026#39;spec.kubernetes.sealed_secrets.cray_meds_credentials.generate.data[0].args.value\u0026#39; | jq   Validate RTS credentials.\nThese credentials are used by the Redfish Translation Service, targeting River Redfish BMC endpoints and PDU controllers.\nlinux# yq read ${SITE_INIT}/customizations.yaml \u0026#39;spec.kubernetes.sealed_secrets.cray_hms_rts_credentials.generate.data[*].args.value\u0026#39; | jq     To customize the PKI Certificate Authority (CA) used by the platform, see Certificate Authority.\n IMPORTANT The CA may not be modified after install.\n   Federate Keycloak with an upstream LDAP server.\n  Set environment variables for the LDAP server and its port.\nIn the example below, the LDAP server has the hostname dcldap2.us.cray.com and is using the port 636.\nlinux# LDAP=dcldap2.us.cray.com linux# PORT=636   Update the cray-keycloak sealed secret value if LDAP requires TLS.\nIf LDAP requires TLS (recommended), then update the cray-keycloak sealed secret value by supplying a base64-encoded Java KeyStore (JKS) that contains the CA certificate that signed the LDAP server\u0026rsquo;s host key. The password for the JKS file must be password. Administrators may use the keytool command from the openjdk:11-jre-slim container image packaged with CSM to create a JKS file that includes a PEM-encoded CA certificate to verify the LDAP host(s) as follows:\nThis step builds an example that will create (or update) cert.jks with the PEM-encoded CA certificate for an LDAP host, and then prepares certs.jks.b64, which will be injected into customizations.yaml.\n  Load the openjdk container image.\n NOTE Requires a properly configured Docker or Podman environment.\n linux# ${CSM_PATH}/hack/load-container-image.sh artifactory.algol60.net/csm-docker/stable/docker.io/library/openjdk:11-jre-slim   Get the issuer certificate.\nRetrieve the issuer certificate for the LDAP server at port 636. Use openssl s_client to connect and show the certificate chain returned by the LDAP host:\nlinux# openssl s_client -showcerts -connect ${LDAP}:${PORT} \u0026lt;/dev/null   Enter the issuer\u0026rsquo;s certificate into cacert.pem.\nEither manually extract (i.e., cut/paste) the issuer\u0026rsquo;s certificate into cacert.pem, or try the following commands to create it automatically.\n NOTE The following commands were verified using OpenSSL version 1.1.1d and use the -nameopt RFC2253 option to ensure consistent formatting of distinguished names (DNs). Unfortunately, older versions of OpenSSL may not support -nameopt on the s_client command or may use a different default format. As a result, your mileage may vary; however, you should be able to extract the issuer certificate manually from the output of the above openssl s_client example if the following commands are unsuccessful.\n   Observe the issuer\u0026rsquo;s DN.\nlinux# openssl s_client -showcerts -nameopt RFC2253 -connect ${LDAP}:${PORT} \u0026lt;/dev/null 2\u0026gt;/dev/null | grep issuer= | sed -e \u0026#39;s/^issuer=//\u0026#39; Expected output includes a line similar to this:\nemailAddress=dcops@hpe.com,CN=Data Center,OU=HPC/MCS,O=HPE,ST=WI,C=US   Extract the issuer\u0026rsquo;s certificate using awk.\n NOTE The issuer DN is properly escaped as part of the awk pattern below. It must be changed to match the value for emailAddress, CN, OU, etc. for your LDAP. If the value you are using is different, be sure to escape it properly!\n linux# openssl s_client -showcerts -nameopt RFC2253 -connect ${LDAP}:${PORT} \u0026lt;/dev/null 2\u0026gt;/dev/null | awk \u0026#39;/s:emailAddress=dcops@hpe.com,CN=Data Center,OU=HPC\\/MCS,O=HPE,ST=WI,C=US/,/END CERTIFICATE/\u0026#39; | awk \u0026#39;/BEGIN CERTIFICATE/,/END CERTIFICATE/\u0026#39; \u0026gt; cacert.pem     Verify that the issuer\u0026rsquo;s certificate was properly extracted and saved in cacert.pem.\nlinux# cat cacert.pem Expected output looks like:\n-----BEGIN CERTIFICATE----- MIIDvTCCAqWgAwIBAgIUYxrG/PrMcmIzDuJ+U1Gh8hpsU8cwDQYJKoZIhvcNAQEL BQAwbjELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAldJMQwwCgYDVQQKDANIUEUxEDAO BgNVBAsMB0hQQy9NQ1MxFDASBgNVBAMMC0RhdGEgQ2VudGVyMRwwGgYJKoZIhvcN AQkBFg1kY29wc0BocGUuY29tMB4XDTIwMTEyNDIwMzM0MVoXDTMwMTEyMjIwMzM0 MVowbjELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAldJMQwwCgYDVQQKDANIUEUxEDAO BgNVBAsMB0hQQy9NQ1MxFDASBgNVBAMMC0RhdGEgQ2VudGVyMRwwGgYJKoZIhvcN AQkBFg1kY29wc0BocGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC AQEAuBIZkKitHHVQHymtaQt4D8ZhG4qNJ0cTsLhODPMtVtBjPZp59e+PWzbc9Rj5 +wfjLGteK6/fNJsJctWlS/ar4jw/xBIPMk5pg0dnkMT2s7lkSCmyd9Uib7u6y6E8 yeGoGcb7I+4ZI+E3FQV7zPact6b17xmajNyKrzhBGEjYucYJUL5iTgZ6a7HOZU2O aQSXe7ctiHBxe7p7RhHCuKRrqJnxoohakloKwgHHzDLFQzX/5ADp1hdJcduWpaXY RMBu6b1mhmwo5vmc+fDnfUpl5/X4i109r9VN7JC7DQ5+JX8u9SHDGLggBWkrhpvl bNXMVCnwnSFfb/rnmGO7rdJSpwIDAQABo1MwUTAdBgNVHQ4EFgQUVg3VYExUAdn2 WE3e8Xc8HONy/+4wHwYDVR0jBBgwFoAUVg3VYExUAdn2WE3e8Xc8HONy/+4wDwYD VR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAWLDQLB6rrmK+gwUY+4B7 0USbQK0JkLWuc0tCfjTxNQTzFb75PeH+GH21QsjUI8VC6QOAAJ4uzIEV85VpOQPp qjz+LI/Ej1xXfz5ostZQu9rCMnPtVu7JT0B+NV7HvgqidTfa2M2dw9yUYS2surZO 8S0Dq3Bi6IEhtGU3T8ZpbAmAp+nNsaJWdUNjD4ECO5rAkyA/Vu+WyMz6F3ZDBmRr ipWM1B16vx8rSpQpygY+FNX4e1RqslKhoyuzXfUGzyXux5yhs/ufOaqORCw3rJIx v4sTWGsSBLXDsFM3lBgljSAHfmDuKdO+Qv7EqGzCRMpgSciZihnbQoRrPZkOHUxr NA== -----END CERTIFICATE-----   Create certs.jks.\n NOTE The alias used in this command for cray-data-center-ca should be changed to match your LDAP.\n linux# podman run --rm -v \u0026#34;$(pwd):/data\u0026#34; \\  artifactory.algol60.net/csm-docker/stable/docker.io/library/openjdk:11-jre-slim keytool \\  -importcert -trustcacerts -file /data/cacert.pem -alias cray-data-center-ca \\  -keystore /data/certs.jks -storepass password -noprompt   Create certs.jks.b64 by base64 encoding certs.jks.\nlinux# base64 certs.jks \u0026gt; certs.jks.b64   Inject and encrypt certs.jks.b64 into customizations.yaml.\nlinux# cat \u0026lt;\u0026lt;EOF | yq w - \u0026#39;data.\u0026#34;certs.jks\u0026#34;\u0026#39; \u0026#34;$(\u0026lt;certs.jks.b64)\u0026#34; | \\ yq r -j - | ${SITE_INIT}/utils/secrets-encrypt.sh | \\ yq w -f - -i ${SITE_INIT}/customizations.yaml \u0026#39;spec.kubernetes.sealed_secrets.cray-keycloak\u0026#39; { \u0026#34;kind\u0026#34;: \u0026#34;Secret\u0026#34;, \u0026#34;apiVersion\u0026#34;: \u0026#34;v1\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;keycloak-certs\u0026#34;, \u0026#34;namespace\u0026#34;: \u0026#34;services\u0026#34;, \u0026#34;creationTimestamp\u0026#34;: null }, \u0026#34;data\u0026#34;: {} } EOF     Update the keycloak_users_localize sealed secret with the appropriate value for ldap_connection_url.\n  Set ldap_connection_url in customizations.yaml.\nFor example:\nlinux# yq write -i ${SITE_INIT}/customizations.yaml \\  \u0026#39;spec.kubernetes.sealed_secrets.keycloak_users_localize.generate.data.(args.name==ldap_connection_url).args.value\u0026#39; \\  \u0026#34;ldaps://${LDAP}\u0026#34;   On success, review the keycloak_users_localize sealed secret.\nlinux# yq read ${SITE_INIT}/customizations.yaml spec.kubernetes.sealed_secrets.keycloak_users_localize Expected output is similar to:\ngenerate: name: keycloak-users-localize data: - type: static args: name: ldap_connection_url value: ldaps://dcldap2.us.cray.com     Configure the ldapSearchBase and localRoleAssignments settings for the cray-keycloak-users-localize chart in customizations.yaml.\nThere may be one or more groups in LDAP for administrators and one or more for users. Each admin group needs to be assigned to role admin and set to both shasta and cray clients in Keycloak. Each user group needs to be assigned to role user and set to both shasta and cray clients in Keycloak.\n  Set ldapSearchBase in customizations.yaml.\nThis example sets ldapSearchBase to dc=dcldap,dc=dit\nlinux# yq write -i ${SITE_INIT}/customizations.yaml spec.kubernetes.services.cray-keycloak-users-localize.ldapSearchBase \u0026#39;dc=dcldap,dc=dit\u0026#39;   Set localRoleAssignments in customizations.yaml.\nThis example sets localRoleAssignments for the LDAP groups employee, craydev, and shasta_admins to be the admin role and the LDAP group shasta_users to be the user role.\nlinux# yq write -s - -i ${SITE_INIT}/customizations.yaml \u0026lt;\u0026lt;EOF - command: update path: spec.kubernetes.services.cray-keycloak-users-localize.localRoleAssignments value: - {\u0026#34;group\u0026#34;: \u0026#34;employee\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;client\u0026#34;: \u0026#34;shasta\u0026#34;} - {\u0026#34;group\u0026#34;: \u0026#34;employee\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;client\u0026#34;: \u0026#34;cray\u0026#34;} - {\u0026#34;group\u0026#34;: \u0026#34;craydev\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;client\u0026#34;: \u0026#34;shasta\u0026#34;} - {\u0026#34;group\u0026#34;: \u0026#34;craydev\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;client\u0026#34;: \u0026#34;cray\u0026#34;} - {\u0026#34;group\u0026#34;: \u0026#34;shasta_admins\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;client\u0026#34;: \u0026#34;shasta\u0026#34;} - {\u0026#34;group\u0026#34;: \u0026#34;shasta_admins\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;client\u0026#34;: \u0026#34;cray\u0026#34;} - {\u0026#34;group\u0026#34;: \u0026#34;shasta_users\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;client\u0026#34;: \u0026#34;shasta\u0026#34;} - {\u0026#34;group\u0026#34;: \u0026#34;shasta_users\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;client\u0026#34;: \u0026#34;cray\u0026#34;} EOF   On success, review the cray-keycloak-users-localize values.\nlinux# yq read ${SITE_INIT}/customizations.yaml spec.kubernetes.services.cray-keycloak-users-localize Expected output looks similar to:\nsealedSecrets: - \u0026#39;{{ kubernetes.sealed_secrets.keycloak_users_localize | toYaml }}\u0026#39; localRoleAssignments: - {\u0026#34;group\u0026#34;: \u0026#34;employee\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;client\u0026#34;: \u0026#34;shasta\u0026#34;} - {\u0026#34;group\u0026#34;: \u0026#34;employee\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;client\u0026#34;: \u0026#34;cray\u0026#34;} - {\u0026#34;group\u0026#34;: \u0026#34;craydev\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;client\u0026#34;: \u0026#34;shasta\u0026#34;} - {\u0026#34;group\u0026#34;: \u0026#34;craydev\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;client\u0026#34;: \u0026#34;cray\u0026#34;} - {\u0026#34;group\u0026#34;: \u0026#34;shasta_admins\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;client\u0026#34;: \u0026#34;shasta\u0026#34;} - {\u0026#34;group\u0026#34;: \u0026#34;shasta_admins\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;client\u0026#34;: \u0026#34;cray\u0026#34;} - {\u0026#34;group\u0026#34;: \u0026#34;shasta_users\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;client\u0026#34;: \u0026#34;shasta\u0026#34;} - {\u0026#34;group\u0026#34;: \u0026#34;shasta_users\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;client\u0026#34;: \u0026#34;cray\u0026#34;} ldapSearchBase: dc=dcldap,dc=dit       Configure the Unbound DNS resolver (if needed).\nImportant: If access to a site DNS server is required and this DNS server was specified to csi using the site-dns option (either on the command line or in the system_config.yaml file), then no further action is required and this step should be skipped.\nThe default configuration is as follows:\ncray-dns-unbound: domain_name: \u0026#39;{{ network.dns.external }}\u0026#39; forwardZones: - name: \u0026#34;.\u0026#34; forwardIps: - \u0026#34;{{ network.netstaticips.system_to_site_lookups }}\u0026#34; The configured site DNS server can be verified by inspecting the value set for system_to_site_lookups.\nlinux# yq r ${SITE_INIT}/customizations.yaml spec.network.netstaticips.system_to_site_lookups 172.30.84.40 If there is no requirement to resolve external hostnames or no upstream DNS server, then remove the DNS forwarding configuration from the cray-dns-unbound service.\n  Remove the forwardZones configuration for the cray-dns-unbound service.\nlinux# yq delete -i ${SITE_INIT}/customizations.yaml spec.kubernetes.services.cray-dns-unbound.forwardZones   Review the cray-dns-unbound values.\nlinux# yq read ${SITE_INIT}/customizations.yaml spec.kubernetes.services.cray-dns-unbound Expected output is:\ndomain_name: \u0026#39;{{ network.dns.external }}\u0026#39;  IMPORTANT Do not remove the domain_name entry, it is required for Unbound to forward requests to PowerDNS correctly.\n     (Optional) Configure PowerDNS zone transfer and DNSSEC.\n  If zone transfer is to be configured review customizations.yaml and ensure the primary_server, secondary_servers, and notify_zones values are set correctly.\n  If DNSSEC is to be used then add the desired keys into the dnssec SealedSecret.\n  See the PowerDNS Configuration Guide for more information.\n\n  (Optional) Configure Prometheus SNMP Exporter.\nThe Prometheus SNMP exporter needs to be configured with a list of management network switches to scrape metrics from in order to populate the System Health Service Grafana dashboards.\nSee Prometheus SNMP Exporter for more information.\n  4. Generate Sealed Secrets Secrets are stored in customizations.yaml as SealedSecret resources (that is, encrypted secrets) which are deployed by specific charts and decrypted by the Sealed Secrets operator. But first, those secrets must be seeded generated and encrypted.\n  Load the zeromq container image required by Sealed Secret Generators.\n NOTE Requires a properly configured Docker or Podman environment.\n linux# ${CSM_PATH}/hack/load-container-image.sh artifactory.algol60.net/csm-docker/stable/docker.io/zeromq/zeromq:v4.0.5   Re-encrypt existing secrets.\nlinux# ${SITE_INIT}/utils/secrets-reencrypt.sh ${SITE_INIT}/customizations.yaml \\  ${SITE_INIT}/certs/sealed_secrets.key ${SITE_INIT}/certs/sealed_secrets.crt   Generate secrets.\nlinux# ${SITE_INIT}/utils/secrets-seed-customizations.sh ${SITE_INIT}/customizations.yaml Expected output looks similar to:\nCreating Sealed Secret keycloak-certs Generating type static_b64... Creating Sealed Secret keycloak-master-admin-auth Generating type static... Generating type static... Generating type randstr... Generating type static... Creating Sealed Secret cray_reds_credentials Generating type static... Generating type static... Creating Sealed Secret cray_meds_credentials Generating type static... Creating Sealed Secret cray_hms_rts_credentials Generating type static... Generating type static... Creating Sealed Secret vcs-user-credentials Generating type randstr... Generating type static... Creating Sealed Secret generated-platform-ca-1 Generating type platform_ca... Creating Sealed Secret pals-config Generating type zmq_curve... Generating type zmq_curve... Creating Sealed Secret munge-secret Generating type randstr... Creating Sealed Secret slurmdb-secret Generating type static... Generating type static... Generating type randstr... Generating type randstr... Creating Sealed Secret keycloak-users-localize Generating type static...   5. Version Control Site Init Files Setup site-init as a Git repository in order to manage the baseline configuration during initial system installation.\n  Initialize site-init as a Git repository.\nlinux# cd ${SITE_INIT} linux# git init .   (Optional) Exclude sealed secret private keys from Git.\nWARNING If production system or operational security is a concern, do NOT store the sealed secret private key in Git; instead, store the sealed secret key outside of Git in a secure offline system. In order to ensure that these sensitive keys are not accidentally committed, configure .gitignore to ignore files under the certs directory:\nlinux# echo \u0026#34;certs/\u0026#34; \u0026gt;\u0026gt; .gitignore   Stage site-init files to be committed.\nlinux# git add -A   Review what will be committed.\nlinux# git status   Commit the baseline configuration.\nlinux# git commit -m \u0026#34;Baseline configuration for $(${CSM_PATH}/lib/version.sh)\u0026#34;   5.1 Push to a Remote Repository It is strongly recommended that the site-init repository be maintained off-cluster. Add a remote repository and push the baseline configuration on master branch to a corresponding remote branch.\n6. Customer-Specific Customizations Customer-specific customizations are any changes on top of the baseline configuration to satisfy customer-specific requirements. It is recommended that customer-specific customizations be tracked on branches separate from the mainline in order to make them easier to manage.\nApply any customer-specific customizations by merging the corresponding branches into master branch of site-init.\nWhen considering merges, and especially when resolving conflicts, carefully examine differences to ensure all changes are relevant. For example, when applying a customer-specific customization used in a prior version, be sure the change still makes sense. It is common for options to change as new features are introduced and bugs are fixed.\n"
},
{
	"uri": "/docs-csm/en-12/install/pxe_boot_troubleshooting/",
	"title": "PXE Boot Troubleshooting",
	"tags": [],
	"description": "",
	"content": "PXE Boot Troubleshooting This page is designed to cover various issues that arise when trying to PXE boot nodes in an HPE Cray EX system.\n Configuration required for PXE booting Switch configuration  Aruba configuration Mellanox configuration   Next steps  Node iPXE retries and NIC order Restart BSS Restart Kea Missing BSS data    In order for PXE booting to work successfully, the management network switches need to be configured correctly.\nConfiguration required for PXE booting To successfully PXE boot nodes, the following is required:\n The ip helper-address must be configured on VLANs 1, 2, 4, and 7. This will be where the layer 3 gateway exists (spine or leaf). The virtual-IP/VSX/MAGP IP address must be configured on VLANs 1, 2, 4, and 7. spine01 and spine02 need an active gateway on VLAN 1; this can be identified from MTL.yaml generated by CSI. spine01 and spine02 need an ip helper-address on VLAN 1 pointing to 10.92.100.222.  Switch configuration Aruba configuration   Check the configuration for interface vlan x.\nThis configuration will be the same on BOTH Switches (except the ip address). There will be an active-gateway and ip helper-address configured.\nsw-spine-001(config)# int vlan 1,2,4,7 sw-spine-001(config-if-vlan-\u0026lt;1,2,4,7\u0026gt;)# show run current-context Example output:\ninterface vlan 1 ip mtu 9198 ip address 10.1.0.2/16 active-gateway ip mac 12:00:00:00:6b:00 active-gateway ip 10.1.0.1 ip helper-address 10.92.100.222 interface vlan 2 vsx-sync active-gateways ip mtu 9198 ip address 10.252.0.2/17 active-gateway ip mac 12:01:00:00:01:00 active-gateway ip 10.252.0.1 ip helper-address 10.92.100.222 ip ospf 1 area 0.0.0.0 interface vlan 4 vsx-sync active-gateways ip mtu 9198 ip address 10.254.0.2/17 active-gateway ip mac 12:01:00:00:01:00 active-gateway ip 10.254.0.1 ip helper-address 10.94.100.222 ip ospf 1 area 0.0.0.0 interface vlan 7 ip mtu 9198 ip address 10.103.11.1/24 active-gateway ip mac 12:01:00:00:01:00 active-gateway ip 10.103.11.111 ip helper-address 10.92.100.222   If any of this configuration is missing, then update it on BOTH switches.\nsw-spine-002# conf t sw-spine-002(config)# int vlan 1 sw-spine-002(config-if-vlan)# ip helper-address 10.92.100.222 sw-spine-002(config-if-vlan)# active-gateway ip mac 12:01:00:00:01:00 sw-spine-002(config-if-vlan)# active-gateway ip 10.1.0.1 sw-spine-002# conf t sw-spine-002(config)# int vlan 2 sw-spine-002(config-if-vlan)# ip helper-address 10.92.100.222 sw-spine-002(config-if-vlan)# active-gateway ip mac 12:01:00:00:01:00 sw-spine-002(config-if-vlan)# active-gateway ip 10.252.0.1 sw-spine-002# conf t sw-spine-002(config)# int vlan 4 sw-spine-002(config-if-vlan)# ip helper-address 10.94.100.222 sw-spine-002(config-if-vlan)# active-gateway ip mac 12:01:00:00:01:00 sw-spine-002# conf t sw-spine-002(config)# int vlan 7 sw-spine-002(config-if-vlan)# ip helper-address 10.92.100.222 sw-spine-002(config-if-vlan)# active-gateway ip mac 12:01:00:00:01:00 sw-spine-002(config-if-vlan)# active-gateway ip xxxxxxx sw-spine-002(config-if-vlan)# write mem   Mellanox configuration   Check the configuration for interface vlan 1.\nThis configuration will be the same on BOTH Switches (except the ip address). magp and ip dhcp relay will be configured.\nsw-spine-001 [standalone: master] # show run int vlan 1 Example output:\ninterface vlan 1 interface vlan 1 ip address 10.1.0.2/16 primary interface vlan 1 ip dhcp relay instance 2 downstream interface vlan 1 magp 1 interface vlan 1 magp 1 ip virtual-router address 10.1.0.1 interface vlan 1 magp 1 ip virtual-router mac-address 00:00:5E:00:01:01   If this configuration is missing, then add it to BOTH switches.\nsw-spine-001 [standalone: master] # conf t sw-spine-001 [standalone: master] (config) # interface vlan 1 magp 1 sw-spine-001 [standalone: master] (config interface vlan 1 magp 1) # ip virtual-router address 10.1.0.1 sw-spine-001 [standalone: master] (config interface vlan 1 magp 1) # ip virtual-router mac-address 00:00:5E:00:01:01 sw-spine-001 [standalone: master] # conf t sw-spine-001 [standalone: master] (config) # ip dhcp relay instance 2 vrf default sw-spine-001 [standalone: master] (config) # ip dhcp relay instance 2 address 10.92.100.222 sw-spine-001 [standalone: master] (config) # interface vlan 2 ip dhcp relay instance 2 downstream   Verify the VLAN 1 MAGP configuration.\nsw-spine-001 [standalone: master] # show magp 1 Example output:\nMAGP 1: Interface vlan: 1 Admin state : Enabled State : Master Virtual IP : 10.1.0.1 Virtual MAC : 00:00:5E:00:01:01   Verify the DHCP relay configuration.\nsw-spine-001 [standalone: master] (config) # show ip dhcp relay instance 2 Example output:\nVRF Name: default DHCP Servers: 10.92.100.222 DHCP relay agent options: always-on : Disabled Information Option: Disabled UDP port : 67 Auto-helper : Disabled ------------------------------------------- Interface Label Mode ------------------------------------------- vlan1 N/A downstream vlan2 N/A downstream vlan7 N/A downstream   Verify that the route to the TFTP server and the route for the ingress gateway are available.\nsw-spine-001 [standalone: master] # show ip route 10.92.100.60 Example output:\nFlags: F: Failed to install in H/W B: BFD protected (static route) i: BFD session initializing (static route) x: protecting BFD session failed (static route) c: consistent hashing p: partial programming in H/W VRF Name default: ------------------------------------------------------------------------------------------------------ Destination Mask Flag Gateway Interface Source AD/M ------------------------------------------------------------------------------------------------------ default 0.0.0.0 c 10.101.15.161 eth1/12 static 1/1 10.92.100.60 255.255.255.255 c 10.252.0.5 vlan2 bgp 200/0 c 10.252.0.6 vlan2 bgp 200/0 c 10.252.0.7 vlan2 bgp 200/0 sw-spine-001 [standalone: master] # show ip route 10.92.100.71 Example output:\nFlags: F: Failed to install in H/W B: BFD protected (static route) i: BFD session initializing (static route) x: protecting BFD session failed (static route) c: consistent hashing p: partial programming in H/W VRF Name default: ------------------------------------------------------------------------------------------------------ Destination Mask Flag Gateway Interface Source AD/M ------------------------------------------------------------------------------------------------------ default 0.0.0.0 c 10.101.15.161 eth1/12 static 1/1 10.92.100.71 255.255.255.255 c 10.252.0.5 vlan2 bgp 200/0 c 10.252.0.6 vlan2 bgp 200/0 c 10.252.0.7 vlan2 bgp 200/0   Next steps If the configuration looks good and PXE boot is still not working, then there are some other things to try.\nNode iPXE retries and NIC order In some environments, during the Deploy Final NCN reboot step, ncn-m001 may loop through all of its NICs and still fail to PXE boot, even after the third chain attempt. The NIC boot ordering used by default is designed to be optimal for multiple types of hardware and cabling, but it may need to be edited for specific environments in order to reduce the boot time of ncn-m001.\nIf the boot issues described above are observed, then follow the steps in the Edit the iPXE Embedded Boot Script procedure, adjusting the NIC boot order such that net0, or others, come before net2. If that does not resolve the issue, then return to this page.\nRestart BSS Restart the Boot Script Service (BSS) if the following output is returned on the console during an NCN PXE boot attempt (specifically the 404 Not Found error at the bottom):\nhttps://api-gw-service-nmn.local/apis/bss/boot/v1/bootscript...X509 chain 0x6d35c548 added X509 0x6d360d68 \u0026#34;eniac.dev.cray.com\u0026#34; X509 chain 0x6d35c548 added X509 0x6d3d62e0 \u0026#34;Platform CA - L1 (a0b073c8-5c9c-4f89-b8a2-a44adce3cbdf)\u0026#34; X509 chain 0x6d35c548 added X509 0x6d3d6420 \u0026#34;Platform CA (a0b073c8-5c9c-4f89-b8a2-a44adce3cbdf)\u0026#34; EFITIME is 2021-02-26 21:55:04 HTTP 0x6d35da88 status 404 Not Found   Roll out a restart of the BSS deployment.\nncn-mw# kubectl -n services rollout restart deployment cray-bss Example output:\ndeployment.apps/cray-bss restarted   Wait for this command to return (it will block showing status as the pods are refreshed):\nncn-mw# # kubectl -n services rollout status deployment cray-bss Example output:\nWaiting for deployment \u0026#34;cray-bss\u0026#34; rollout to finish: 1 out of 3 new replicas have been updated... Waiting for deployment \u0026#34;cray-bss\u0026#34; rollout to finish: 1 out of 3 new replicas have been updated... Waiting for deployment \u0026#34;cray-bss\u0026#34; rollout to finish: 1 out of 3 new replicas have been updated... Waiting for deployment \u0026#34;cray-bss\u0026#34; rollout to finish: 2 out of 3 new replicas have been updated... Waiting for deployment \u0026#34;cray-bss\u0026#34; rollout to finish: 2 out of 3 new replicas have been updated... Waiting for deployment \u0026#34;cray-bss\u0026#34; rollout to finish: 2 out of 3 new replicas have been updated... Waiting for deployment \u0026#34;cray-bss\u0026#34; rollout to finish: 1 old replicas are pending termination... Waiting for deployment \u0026#34;cray-bss\u0026#34; rollout to finish: 1 old replicas are pending termination... deployment \u0026#34;cray-bss\u0026#34; successfully rolled out   Reboot the NCN that failed to PXE boot.\n  Restart KEA In some cases, rebooting the Kea pod has resolved PXE issues.\n  Get the Kea pod.\nncn-mw# kubectl get pods -n services | grep kea Example output:\ncray-dhcp-kea-6bd8cfc9c5-m6bgw 3/3 Running 0 20h   Delete the Kea pod.\nncn-mw# kubectl delete pods -n services cray-dhcp-kea-6bd8cfc9c5-m6bgw   Missing BSS data If the PXE boot is giving 404 errors, this could be because the necessary information is not in BSS. The information is uploaded into BSS with the csi handoff bss-metadata and csi handoff bss-update-cloud-init commands in the Deploy Final NCN Handoff Data procedure. If these commands failed or were skipped accidentally, then this will cause the ncn-m001 PXE boot to fail.\nIn that case, then use the following recovery procedure.\n  Reboot to the PIT.\n  If using a USB PIT, follow this procedure:\n  Reboot the PIT node, watching the console as it boots.\n  Manually stop it at the boot menu.\n  Select the USB device for the boot.\n  Once booted, log in and mount the data partition.\npit# mount -vL PITDATA     If using a remote ISO PIT, follow the Bootstrap LiveCD Remote ISO procedure up through (and including) the Set Up The Site Link step.\n    Set variables for the system name, the CAN IP address for ncn-m002, the Kubernetes version, and the Ceph version.\nThe CAN IP address for ncn-m002 is obtained at this step of the Deploy Final NCN procedure.\nThe Kubernetes and Ceph versions are from the output of the csi handoff ncn-images command in the Deploy Final NCN procedure. If needed, the typescript file from that procedure should be on ncn-m002 and ncn-m003 in the /metal/bootstrap/prep/admin directory.\nSubstitute the correct values for the system in use in the following commands:\npit# SYSTEM_NAME=eniac pit# CAN_IP_NCN_M002=a.b.c.d pit# export KUBERNETES_VERSION=m.n.o pit# export CEPH_VERSION=x.y.z   If using a remote ISO PIT, run the following commands to finish configuring the network and copy files.\nSkip these steps if using a USB PIT.\n  Run the following command to copy files from ncn-m002 to the PIT node.\npit# scp -p ${CAN_IP_NCN_M002}:/metal/bootstrap/prep/${SYSTEM_NAME}/pit-files/* /etc/sysconfig/network/   Apply the network changes.\npit# wicked ifreload all pit# systemctl restart wickedd-nanny \u0026amp;\u0026amp; sleep 5   Copy data.json from ncn-m002 to the PIT node.\npit# mkdir -p /var/www/ephemeral/configs pit# scp ${CAN_IP_NCN_M002}:/metal/bootstrap/prep/${SYSTEM_NAME}/basecamp/data.json /var/www/ephemeral/configs     Copy Kubernetes configuration file from ncn-m002.\npit# mkdir -pv ~/.kube pit# scp ${CAN_IP_NCN_M002}:/etc/kubernetes/admin.conf ~/.kube/config   Set DNS to use unbound.\npit# echo \u0026#34;nameserver 10.92.100.225\u0026#34; \u0026gt; /etc/resolv.conf   Export an API token.\npit# export TOKEN=$(curl -k -s -S -d grant_type=client_credentials \\  -d client_id=admin-client \\  -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath=\u0026#39;{.data.client-secret}\u0026#39; | base64 -d` \\  https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r \u0026#39;.access_token\u0026#39;)   Re-run the BSS handoff commands from the Deploy Final NCN procedure.\nWARNING: These commands should never be run from a node other than the PIT node or ncn-m001\npit# csi handoff bss-metadata --data-file /var/www/ephemeral/configs/data.json || echo \u0026#34;ERROR: csi handoff bss-metadata failed\u0026#34; pit# csi handoff bss-update-cloud-init --set meta-data.dns-server=10.92.100.225 --limit Global   Perform the Restart BSS and the Restart Kea procedures.\n  Reboot the PIT node.\n  "
},
{
	"uri": "/docs-csm/en-12/install/reinstall_livecd/",
	"title": "Reinstall Livecd",
	"tags": [],
	"description": "",
	"content": "Reinstall LiveCD Setup a re-install of LiveCD on a node using the previous configuration.\n  Backup to the data partition:\npit# mkdir -pv /var/www/ephemeral/backup pit# pushd /var/www/ephemeral/backup pit# tar -czvf \u0026#34;dnsmasq-data-$(date \u0026#39;+%Y-%m-%d_%H-%M-%S\u0026#39;).tar.gz\u0026#34; /etc/dnsmasq.* pit# tar -czvf \u0026#34;network-data-$(date \u0026#39;+%Y-%m-%d_%H-%M-%S\u0026#39;).tar.gz\u0026#34; /etc/sysconfig/network/* pit# cp -pv /etc/hosts ./ pit# popd pit# umount -v /var/www/ephemeral   Unplug the USB device.\nThe USB device should now contain all the information already loaded, as well as the backups of the initialized files.\n  Plug the device into a new machine, or make a backup on the booted NCN. Make a snapshot of the USB device.\nmylinuxpc\u0026gt; mount -v /dev/disk/by-label/PITDATA /mnt mylinuxpc\u0026gt; tar -czvf --exclude *.squashfs \\ \u0026#34;install-data-$(date \u0026#39;+%Y-%m-%d_%H-%M-%S\u0026#39;).tar.gz\u0026#34; /mnt/ mylinuxpc\u0026gt; umount -v /dev/disk/by-label/PITDATA   Follow the directions in Bootstrap PIT Node from LiveCD USB, and then return here and move onto the next step.\nThe new tar.gz file can be stored anywhere, and can be used to reinitialize the LiveCD.\n  Delete the existing content on the USB device and create a new LiveCD on that same USB device.\nOnce the install-data partition is created, it can be remounted and can be used to restore the backup.\nmylinuxpc\u0026gt; mount -v /dev/disk/by-label/PITDATA /mnt mylinuxpc\u0026gt; tar -xzvf $(ls -ltR *.tar.gz | head -n 1) mylinuxpc\u0026gt; ls -R /mnt The tarball should have extracted everything into the install-data partition.\n  Retrieve the SquashFS artifacts.\nThe artifacts can be retrieved at the following locations:\n /mnt/var/www/ephemeral/k8s/ /mnt/var/www/ephemeral/ceph/    Attach the USB to a Cray non-compute node (NCN) and reboot into the USB device.\n  Once booted into the USB device, restore network configuration and dnsmasq, and ensure the pods are started.\n STOP AND INSPECT ANY FAILURE IN ANY OF THESE COMMANDS\n pit# tar -xzvf /var/www/ephemeral/backup/dnsmasq*.tar.gz pit# tar -xzvf /var/www/ephemeral/backup/network*.tar.gz pit# systemctl restart wicked wickedd-nanny pit# systemctl restart dnsmasq pit# systemctl start basecamp nexus   The LiveCD is now re-installed with the previous configuration.\n"
},
{
	"uri": "/docs-csm/en-12/install/configure_administrative_access/",
	"title": "Configure Administrative Access",
	"tags": [],
	"description": "",
	"content": "Configure Administrative Access There are several operations which configure administrative access to different parts of the system. Ensuring that the cray CLI can be used with administrative credentials enables use of many management services via commands. The management nodes can be locked from accidental manipulation by the cray capmc and cray fas commands when the intent is to work on the entire system except the management nodes. The cray scsd command can change the SSH keys, NTP server, syslog server, and BMC/controller passwords.\nTopics  Configure Keycloak account Configure the Cray command line interface Set Management role on the BMCs of management nodes Lock management nodes Configure BMC and controller parameters with SCSD Configure non-compute nodes with CFS Upload Olympus BMC recovery firmware into TFTP server Proceed to next topic  NOTE: The procedures in this section of installation documentation are intended to be done in order, even though the topics are administrative or operational procedures. The topics themselves do not have navigational links to the next topic in the sequence.\n1. Configure Keycloak account Upcoming steps in the installation workflow require an account to be configured in Keycloak for authentication. This can be either a local Keycloak account or an external Identity Provider (IdP), such as LDAP. Having an account in Keycloak with administrative credentials enables the use of many management services via the cray command.\nSee Configure Keycloak Account.\n2. Configure the Cray command line interface The cray command line interface (CLI) is a framework created to integrate all of the system management REST APIs into easily usable commands.\nLater procedures in the installation workflow use the cray command to interact with multiple services. The cray CLI configuration needs to be initialized for the Linux account. The Keycloak user who initializes the CLI configuration needs to be authorized for administrative actions.\nSee Configure the Cray command line interface.\n3. Set Management role on the BMCs of management nodes The BMCs that control management nodes will not have been marked with the Management role in HSM. It is important to mark them with the Management role so that they can be easily included in the locking/unlocking operations required as protections for FAS and CAPMC actions.\nSet BMC Management roles now!\nSee Set BMC Management Role.\n4. Lock management nodes The management nodes are unlocked at this point in the installation. Locking the management nodes and their BMCs will prevent actions from FAS to update their firmware or CAPMC to power off or do a power reset. Doing any of these by accident will take down a management node. If the management node is a Kubernetes master or worker node, this can have serious negative effects on system operation.\nIf a single node is taken down by mistake, it is possible that things will recover. However, if all management nodes are taken down, or all Kubernetes worker nodes are taken down by mistake, the system is dead and has to be completely restarted.\nLock the management nodes now!\nRun the lock_management_nodes.py script to lock all management nodes and their BMCs that are not already locked:\nncn# /opt/cray/csm/scripts/admin_access/lock_management_nodes.py The return value of the script is 0 if locking was successful. Otherwise, a non-zero return means that manual intervention may be needed to lock the nodes and their BMCs.\nFor more information about locking and unlocking nodes, see Lock and Unlock Nodes.\n5. Configure BMC and controller parameters with SCSD NOTE: If there are no liquid-cooled cabinets present in the HPE Cray EX system, then this step can be skipped.\nThe System Configuration Service (SCSD) allows administrators to set various BMC and controller parameters for components in liquid-cooled cabinets. At this point in the install, SCSD should be used to set the SSH key in the node controllers (BMCs) to enable troubleshooting. If any of the nodes fail to power down or power up as part of the compute node booting process, it may be necessary to look at the logs on the BMC for node power down or node power up.\nSee Configure BMC and Controller Parameters with SCSD.\n6. Configure non-compute nodes with CFS Non-compute Nodes (NCN) need to be configured after booting for administrative access, security, and other purposes. The Configuration Framework Service (CFS) is used to apply post-boot configuration in a decoupled, layered manner. Individual software products including CSM provide one or more layers of configuration in a process called \u0026ldquo;NCN personalization\u0026rdquo;.\nSee Configure Non-Compute Nodes with CFS.\n7. Upload Olympus BMC recovery firmware into TFTP server NOTE: This step requires the CSM software, Cray CLI, and HPC Firmware Pack (HFP) to be installed. If these are not currently installed, then skip this step and perform it later.\nThe Olympus hardware needs to have recovery firmware loaded to the cray-tftp server in case the BMC loses its firmware. The BMCs are configured to load a recovery firmware from a TFTP server. This procedure does not modify any BMC firmware, but only stages the firmware on the TFTP server for download in the event it is needed.\nSee Load Olympus BMC Recovery Firmware into TFTP server.\n8. Proceed to next topic After completing the operational procedures above which configure administrative access, the next step is to validate the health of management nodes and CSM services.\nSee Validate CSM Health.\n"
},
{
	"uri": "/docs-csm/en-12/install/configure_management_network/",
	"title": "Configure Management Network",
	"tags": [],
	"description": "",
	"content": "Configure Management Network HPE Cray EX systems can have network switches in many roles: spine switches, leaf switches, leaf-bmc switches, and CDU switches. Newer systems have HPE Aruba switches, while older systems have Dell and Mellanox switches. Switch IP addresses are generated by Cray Site Init (CSI).\nDocumentation for the Management Network can be found in the HPE Cray EX Management Network Installation and Configuration Guide.\nThe configuration for these switches will be generated from CSM Automated Network Utility (CANU). For more details, see the CANU documentation.\nIt is assumed that the administrator configuring the Management Network has a basic understanding of networking protocols (STP, VLAN, OSPF, LAG/MLAG, BGP, etc.), and knows how to configure network equipment. It is also assumed that they understand and know how to read an SHCD file.\nBefore configuring/reconfiguring any switches, make sure to get the current running configuration and save that in case the configuration must be reverted.\nAll switch configuration should be done with a console or out of band connection.\nSave the output of the following:\nsw# show run Details HPE Aruba switch configuration The management network switches should be configured in this order: spine, leaf (if present), CDU (if present), and leaf-bmc. Only systems with liquid-cooled cabinets will have the CDU switches. Only systems with many nodes in air-cooled cabinets will have leaf switches.\nDell and Mellanox switch configuration The management network switches should be configured in this order: spine, leaf (if present), CDU (if present), and leaf-bmc. Only systems with liquid-cooled cabinets will have the CDU switches. Only systems with many nodes in air-cooled cabinets will have leaf switches.\nOn a typical system, the Mellanox switches are spine switches and the Dell switches are used for leaf, CDU, and leaf-bmc.\nSite connections Currently CANU does not automatically create site connections (LAGs/uplink interfaces or default routes).\nHence, administrators need to manually configure the uplinks for site connections as well as default routes.\nExample configuration:\nNOTE: These are very simplistic examples and depending on the install scenario, administrators may need to also configure LAGs, etc.\nSite connections: Mellanox sw-spine# ena sw-spine# conf t sw-spine# interface ethernet 1/16 no switchport force sw-spine# interface ethernet 1/16 speed 10G force sw-spine# interface ethernet 1/16 vrf forwarding Customer sw-spine# interface ethernet 1/16 ip address 10.102.255.10/30 primary sw-spine# ip route vrf Customer 0.0.0.0/0 10.102.3.3 sw-spine# ip route vrf Customer 0.0.0.0/0 10.102.255.9 Site connections: Aruba sw-spine# config sw-spine# Interface 1/1/16 sw-spine# vrf attach Customer sw-spine# ip address 10.102.255.10/30 sw-spine# no shutdown sw-spine# exit sw-spine# ip route 0.0.0.0/0 10.102.3.3 vrf Customer sw-spine# ip route 0.0.0.0/0 0.102.255.9 vrf Customer Next topic After completing this procedure, collect MAC addresses for the management nodes using the PIT node and the management network switches configured in this procedure.\nSee Collect MAC addresses for NCNs.\n"
},
{
	"uri": "/docs-csm/en-12/install/connect_to_switch_over_usb_serial_cable/",
	"title": "Connect To Switch Over Usb-serial Cable",
	"tags": [],
	"description": "",
	"content": "Connect to Switch over USB-Serial Cable In the event that network plumbing is lacking, down, or unconfigured for procuring devices, then it is recommended to use the Serial/COM ports on the management switches.\nThis guide will instruct the user on procuring MAC addresses for the NCNs metadata files with the serial console.\nMileage may vary, as some obstacles such as BAUDRATE and terminal usage vary per manufacturer.\nCommon Manufacturers Refer to the external support/documentation portals for more information:\n Aruba Dell Mellanox  Setup / Connection Use minicom, screen, or cu to connect to the switch\u0026rsquo;s console.\nPrerequisites A USB-DB-9 or USB-RJ-45 cable is connected between the switch and the NCN.\nscreen screen /dev/ttyUSB1 screen /dev/ttyUSB1 115200 minicom minicom -b 9600 -D /dev/ttyUSB1 minicom -b 115200 -D /dev/ttyUSB1 cu cu -l /dev/ttyUSB1 -s 115200 Troubleshoot Connections Tip : Mellanox On Mellanox switches, if the console is not responding when opened, try holding CTRL + R (or control + R for macOS) to initiate a screen refresh. This should take 5-10 seconds.\nTip : No USB TTY Device If there is no device in /dev/tty*, follow dmesg -w and try reseating the USB cable (unplug the end in the NCN, and plug it back in).\nObserve the dmesg -w output. Does it show errors pertaining to USB? The cable may be bad, or a reboot may be required.\nAdditional External References  USB-B to RJ-45 rs232 Cable USB-B to USB-C adapter  "
},
{
	"uri": "/docs-csm/en-12/install/create_application_node_config_yaml/",
	"title": "Create Application Node Config Yaml",
	"tags": [],
	"description": "",
	"content": "Create Application Node Config YAML This topic provides directions on constructing the application_node_config.yaml file. This file controls how the csi config init command finds and treats application nodes discovered in the hmn_connections.json file when generating configuration files for the system.\n Prerequisites Background Directions  Prerequisites The application_node_config.yaml file can be constructed from information from one of the following sources:\n The SHCD Excel spreadsheet for the system The hmn_connections.json file generated from the system\u0026rsquo;s SHCD  Background SHCD and hmn_connections.json The HMN tab of the SHCD describes the air-cooled hardware present in the system and how these devices are connected to the Hardware Management Network (HMN). This information is required by CSM to perform hardware discovery and geolocation of air-cooled hardware in the system. The HMN tab may contain other hardware that is not managed by CSM, but is connected to the HMN.\nThe hmn_connections.json file is derived from the HMN tab of a system SHCD, and is one of the seed files required by Cray Site Init (CSI) command to generate configuration files required to install CSM. The hmn_connections.json file is almost a one-to-one copy of the right-hand table in the HMN tab of the SHCD. It is an array of JSON objects, and each object represents a row from the HMN tab. Any row that is not understood by CSI will be ignored, this includes any additional devices connected to the HMN that are not managed by CSM.\nFor a detailed mapping between the data in the SHCD and the equivalent information in the hmn_connections.json file, see Introduction to SHCD HMN Connections Rules.\nWhat is a Source Name? The source name is the name of the device that is being connected to the HMN network. In the SHCD HMN tab, this is in a column with the header Source or the Source field in the element of the hmn_connections.json for this device. From this source name, the csi config init command can infer the type of hardware that is connected to the HMN network (Node BMC, PDU, HSN Switch, BMC, and more).\nExample SHCD row from HMN tab with column headers representing an application node with SourceName uan01 in cabinet x3000 in slot 19. Its BMC is connected to port 37 of the management leaf switch in x3000 in slot 14.\n   Source (J20) Rack (K20) Location (L20) (M20) Parent (N20) (O20) Port (P20) Destination (Q20) Rack (R20) Location (S20) (T20) Port (U20)     uan01 x3000 u19   - j3 sw-smn01 x3000 u14 - j37    Example hmn_connections.json row representing an application node with SourceName uan01 in cabinet x3000 in slot 19. Its BMC is connected to port 37 of the management leaf switch in x3000 in slot 14.\n{ \u0026#34;Source\u0026#34;: \u0026#34;uan01\u0026#34;, \u0026#34;SourceRack\u0026#34;: \u0026#34;x3000\u0026#34;, \u0026#34;SourceLocation\u0026#34;: \u0026#34;u19\u0026#34;, \u0026#34;DestinationRack\u0026#34;: \u0026#34;x3000\u0026#34;, \u0026#34;DestinationLocation\u0026#34;: \u0026#34;u14\u0026#34;, \u0026#34;DestinationPort\u0026#34;: \u0026#34;j37\u0026#34; } Directions   Create a file called application_node_config.yaml with the following contents.\nThis is a base application node config file for CSI that does not add any additional prefixes, HSM SubRole mappings, or aliases.\n--- # Additional application node prefixes to match in the hmn_connections.json file prefixes: [] # Additional HSM SubRoles prefix_hsm_subroles: {} # Application Node aliases aliases: {}   Identify application nodes present in hmn_connections.json or the HMN tab of the system\u0026rsquo;s SHCD. In general, everything in the HMN tab of the SHCD or hmn_connections.json file that starts with uan, gn, or ln, are considered application nodes and any node that does not follow the SHCD/HMN Connections Rules should also be considered an application node, unless it is a KVM.\nIf the hmn_connections.json file is not available, then use the HMN tab of SHCD spreadsheet. This table is equivalent to the example hmn_connections.json output below.\n   Source (J20) Rack (K20) Location (L20) (M20) Parent (N20) (O20) Port (P20) Destination (Q20) Rack (R20) Location (S20) (T20) Port (U20)     gateway01 x3000 u29   - j3 sw-smn01 x3000 u32 - j42   login02 x3000 u28   - j3 sw-smn01 x3000 u32 - j43   lnet01 x3000 u27   - j3 sw-smn01 x3000 u32 - j41   vn01 x3000 u25   - j3 sw-smn01 x3000 u32 - j40   uan01 x3000 u23   - j3 sw-smn01 x3000 u32 - j39    If the hmn_connections.json file is available, then the following command can be used to show the HMN rows that are application nodes.\nlinux# cat hmn_connections.json | jq -rc \u0026#39;.[] | select(.Source | test(\u0026#34;^((mn|wn|sn|nid|cn|cn\\\\-|pdu)\\\\d+|.*(cmc|rcm|kvm|door).*|x\\\\d+p\\\\d*|sw-.+|columbia$)\u0026#34;; \u0026#34;i\u0026#34;) | not)\u0026#39;  Example hmn_connections.json output:\n{\u0026#34;Source\u0026#34;:\u0026#34;gateway01\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u29\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u32\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j42\u0026#34;}, {\u0026#34;Source\u0026#34;:\u0026#34;login02\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u28\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u32\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j43\u0026#34;} {\u0026#34;Source\u0026#34;:\u0026#34;lnet01\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u27\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u32\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j41\u0026#34;} {\u0026#34;Source\u0026#34;:\u0026#34;vn01\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u25\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u32\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j40\u0026#34;}, {\u0026#34;Source\u0026#34;:\u0026#34;uan01\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u23\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u32\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j39\u0026#34;},   Add additional application node prefixes.\nThe prefixes field is an array of strings, that augments the list of source name prefixes that are treated as application nodes. By default, csi config init only looks for application nodes that have source names that start with uan, gn, and ln. If the system contains application nodes that fall outside of those source name prefixes, then additional prefixes must be added to application_node_config.yaml. These additional prefixes will be used in addition to the default prefixes.\nTo add an additional prefix, append a new string element to the prefixes array.\n NOTE: The command csi config init does a case insensitive check for whether a source name contains an application node prefix. For example, the prefix uan will match uan, Uan, and UAN.\n From the HMN example above, the following additional prefixes are required:\n# Additional application node prefixes to match in the hmn_connections.json file prefixes: - gateway - login - lnet - vn   Add HSM SubRoles for application node prefixes.\nThe prefix_hsm_subroles field mapping application node prefix (string) to the applicable Hardware State Manager (HSM) SubRole (string) for the application nodes. All applications nodes have the HSM Role of Application, and the SubRole value can be used to label what type of the application node it is (such as UAN, Gateway, LNETRouter, and more).\nBy default, the csi config init command will use the following SubRoles for application nodes:\n   Prefix HSM SubRole     uan UAN   ln UAN   gn Gateway    If there are no additional prefixes in the SHCD or no desire to use a different HSM SubRole than the default, then this prefix_hsm_subroles field does not need any data populated.\nTo add additional HSM SubRole for a given prefix, add a new mapping under the prefix_hsm_subroles field. Where the key is the application node prefix and the value is the HSM SubRole.\nValid HSM SubRoles values are: Worker, Master, Storage, UAN, Gateway, LNETRouter, Visualization, and UserDefined.\nFrom the HMN example above, the following additional prefix HSM SubRole mappings are required:\n# Additional HSM SubRoles prefix_hsm_subroles: login: UAN lnet: LNETRouter gateway: Gateway vn: Visualization   Add application node aliases.\nThe aliases field is a map of component name (xname) strings to an array of alias strings.\n For guidance on building application node component names (xnames), follow one of the following:\n Building component names (xnames) for nodes in a single application node chassis Building component names (xnames) for nodes in a dual application node chassis   By default, the csi config init command does not set the ExtraProperties.Alias field for application nodes in the SLS input file.\nFor each application node, add its alias mapping under the aliases field. Where the key is the component name (xname) of the application node, and the value is an array of aliases (strings) which allows for one or more aliases to be specified for an application node.\nFrom the HMN example above, the following application node aliases are required:\n# Application Node aliases aliases: x3113c0s29b0n0: [\u0026#34;gateway01\u0026#34;] x3113c0s28b0n0: [\u0026#34;login02\u0026#34;] x3113c0s27b0n0: [\u0026#34;lnet01\u0026#34;] x3113c0s25b0n0: [\u0026#34;visualization01\u0026#34;, \u0026#34;vn02\u0026#34;] x3113c0s23b0n0: [\u0026#34;uan01\u0026#34;]  The ordering of component names (xnames) under aliases does not matter.\n   Final information in the example application_node_config.yaml built from the HMN example above.\n--- # Additional application node prefixes to match in the hmn_connections.json file prefixes: - gateway - login - lnet - vn # Additional HSM SubRoles prefix_hsm_subroles: login: UAN lnet: LNETRouter gateway: Gateway vn: Visualization # Application Node aliases aliases: x3113c0s29b0n0: [\u0026#34;gateway01\u0026#34;] x3113c0s28b0n0: [\u0026#34;login02\u0026#34;] x3113c0s27b0n0: [\u0026#34;lnet01\u0026#34;] x3113c0s25b0n0: [\u0026#34;visualization01\u0026#34;, \u0026#34;vn02\u0026#34;] x3113c0s23b0n0: [\u0026#34;uan01\u0026#34;]   "
},
{
	"uri": "/docs-csm/en-12/install/create_cabinets_yaml/",
	"title": "Create Cabinets Yaml",
	"tags": [],
	"description": "",
	"content": "Create Cabinets YAML This page provides directions on constructing the optional cabinets.yaml file. This file lists cabinet IDs for any systems with non-contiguous cabinet ID numbers and controls how the csi config init command treats cabinet IDs.\nThe following example file is manually created and follows this format. Each \u0026ldquo;type\u0026rdquo; of cabinet can have several fields: total_number of cabinets of this type, starting_id for this cabinet type, and a list of the IDs.\n--- cabinets: - type: hill total_number: 2 starting_id: 9000 - type: mountain total_number: 4 starting_id: 1000 cabinets: - id: 1000 nmn-vlan: 2000 hmn-vlan: 3000 - id: 1001 nmn-vlan: 2001 hmn-vlan: 3001 - id: 1002 - id: 1003 - type: river total_number: 4 starting_id: 3000 In this example file, there are two Hill cabinets that will be automatically numbered as 9000 and 9001. The Mountain cabinets appear in three groupings of four IDs. The River cabinets are non-contiguous in four separated IDs.\nA system with Hill cabinets can have one to four cabinet IDs. There is no limit on the number of Mountain or River cabinets.\nWhen the above cabinets.yaml file is used, csi will ignore any command-line argument to csi config init for starting-mountain-cabinet, starting-river-cabinet, starting-hill-cabinet, mountain-cabinets, river-cabinets, or hill-cabinets.\n"
},
{
	"uri": "/docs-csm/en-12/install/create_hmn_connections_json/",
	"title": "Create Hmn Connections Json File",
	"tags": [],
	"description": "",
	"content": "Create HMN Connections JSON File Use this procedure to generate the hmn_connections.json from the system\u0026rsquo;s SHCD Excel document. This process is typically needed when generating the hmn_connections.json file for a new system, or regenerating it when a system\u0026rsquo;s SHCD file is changed (specifically the HMN tab). The hms-shcd-parser tool can be used to generate the hmn_connections.json file.\nThe SHCD/HMN Connections Rules document explains the expected naming conventions and rules for the HMN tab of the SHCD file, and for the hmn_connections.json file.\nPrerequisites   SHCD Excel file for the system\n  Podman is available\n Podman is available on the CSM LiveCD, and is installed onto an NCN when being used as an environment to create the CSM PIT in the Bootstrap PIT Node from LiveCD USB or Bootstrap Pit Node from LiveCD Remote ISO procedures.\n   Procedure   Inspect the HMN tab of the SHCD file.\nVerify that it does not have unexpected data in columns J through U in rows 20 or below. If any unexpected data is present in this region of the HMN tab, then it will end up in the generated hmn_connections.json. Therefore, it must be removed before generating the hmn_connections.json file. Unexpected data is anything other than HMN cabling information, such as another table placed below the HMN cabling information. Any data above row 20 will not interfere when generating hmn_connections.json.\nFor example, the following image shows an unexpected table present underneath HMN cabling information in rows 26 to 29. The HMN cabling information in this example is truncated for brevity.\n  Load the hms-shcd-parser container image from the CSM release distribution into Podman.\n The CSM_PATH environment variable is expected to to be set from the Bootstrap PIT Node from LiveCD USB or Bootstrap PIT Node from LiveCD Remote ISO procedures.\n Determine the version of the hms-shcd-parser container image:\nlinux# SHCD_PARSER_VERSION=$(realpath ${CSM_PATH}/docker/artifactory.algol60.net/csm-docker/stable/hms-shcd-parser* | egrep -o \u0026#39;[0-9]+\\.[0-9]+\\.[0-9]+$\u0026#39;) linux# echo $SHCD_PARSER_VERSION Load the hms-shcd-parser container image into Podman:\nlinux# ${CSM_PATH}/hack/load-container-image.sh artifactory.algol60.net/csm-docker/stable/hms-shcd-parser:$SHCD_PARSER_VERSION   Copy the system\u0026rsquo;s SHCD file to the machine being used to prepare the hmn_connections.json file.\n  Set a variable to point to the system\u0026rsquo;s SHCD Excel file.\n NOTE: Make sure to quote the SHCD file path if there is whitespace in the document\u0026rsquo;s path or filename.\n linux# SHCD_FILE=\u0026#34;/path/to/systems/SHCD.xlsx\u0026#34;   Generate the hmn_connections.json file from the SHCD file.\n This will create the hmn_connections.json file in the current directory. If it already exists, it will be overwritten.\n linux# podman run --rm -it --name hms-shcd-parser -v \u0026#34;$(realpath \u0026#34;$SHCD_FILE\u0026#34;)\u0026#34;:/input/shcd_file.xlsx -v \u0026#34;$(pwd)\u0026#34;:/output artifactory.algol60.net/csm-docker/stable/hms-shcd-parser:$SHCD_PARSER_VERSION   "
},
{
	"uri": "/docs-csm/en-12/install/create_ncn_metadata_csv/",
	"title": "Create NCN Metadata Csv",
	"tags": [],
	"description": "",
	"content": "Create NCN Metadata CSV The information in the ncn_metadata.csv file identifies each of the management nodes, assigns the function as a master, worker, or storage node, and provides the MAC address information needed to identify the BMC and the NIC which will be used to boot the node.\nSome of the data in the ncn_metadata.csv can be found in the SHCD in the HMN tab. However, the hardest data to collect is the MAC addresses for the node\u0026rsquo;s BMC, the node\u0026rsquo;s bootable network interface, and the pair of network interfaces which will become the bonded interface bond0.\nTopics  Introduction  LACP Bonding   PXE or BOOTSTRAP MAC Sample ncn_metadata.csv Collection of MAC Addresses  Details Introduction Each of the management nodes is represented as a row in the ncn_metadata.csv file.\nFor example:\nXname,Role,Subrole,BMC MAC,Bootstrap MAC,Bond0 MAC0,Bond0 MAC1 x3000c0s9b0n0,Management,Storage,94:40:c9:37:77:26,14:02:ec:d9:76:88,14:02:ec:d9:76:88,94:40:c9:5f:b6:92 For each management node, the component name (xname), role, and subrole can be extracted from the SHCD in the HMN tab. However, the rest of the MAC address information needs to be collected another way.\nCheck the description for component names while mapping names between the SHCD and the ncn_metadata.csv file. See Component Names (xnames).\nThere are two interesting parts to the NCN metadata file:\n The MAC of the BMC The MAC(s) of the shasta-network interface(s)  The \u0026ldquo;shasta-network interface\u0026rdquo; is the interfaces, one or more, that comprise the NCNs' LACP link-aggregation ports.\nLACP Bonding NCNs may have one or more bond interfaces, which may be comprised from one or more physical interfaces. The preferred default configuration is two physical network interfaces per bond. The number of bonds themselves depends on the systems network topology.\nFor example, systems with 4 network interfaces on a given node could configure either of these permutations (for redundancy minimums within Shasta cluster):\n One bond with 4 interfaces (bond0) Two bonds with 2 interfaces each (bond0 and bond1)  For more information, see NCN Networking page for NCNs.\nPXE or BOOTSTRAP MAC In general this refers to the interface to be used when the node attempts to PXE boot. This varies between vintages of systems; systems before \u0026ldquo;Spring 2020\u0026rdquo; often booted NCNs with onboard NICs, newer systems boot over their PCIe cards.\nIf the system is booting over PCIe then the \u0026ldquo;bootstrap MAC\u0026rdquo; and the \u0026ldquo;bond0 MAC0\u0026rdquo; will be identical. If the system is booting over onboard NICs then the \u0026ldquo;bootstrap MAC\u0026rdquo; and the \u0026ldquo;bond0 MAC0\u0026rdquo; will be different.\n Other Nomenclature\n  \u0026ldquo;BOND MACS\u0026rdquo; are the MAC addresses for the physical interfaces that the node will use for the various VLANs. BOND0 MAC0 and BOND0 MAC1 should not be on the same physical network card to establish redundancy for failed chips. On the other hand, if any nodes' capacity prevents it from being redundant, then MAC1 and MAC0 will still produce a valid configuration if they do reside on the same physical chip/card. The BMC MAC is the exclusive, dedicated LAN for the onboard BMC. It should not be swapped with any other device.  Sample ncn_metadata.csv The following are sample rows from a ncn_metadata.csv file:\n  Use case: NCN with a single PCIe card (1 card with 2 ports):\n Notice how the MAC address for Bond0 MAC0 and Bond0 MAC1 are only off by 1, which indicates that they are on the same 2 port card.\n Xname,Role,Subrole,BMC MAC,Bootstrap MAC,Bond0 MAC0,Bond0 MAC1 x3000c0s6b0n0,Management,Worker,94:40:c9:37:77:b8,14:02:ec:da:bb:00,14:02:ec:da:bb:00,14:02:ec:da:bb:01   Use case: NCN with a dual PCIe cards (2 cards with 2 ports each for 4 ports total):\n   Notice how the MAC address for Bond0 MAC0 and Bond0 MAC1 have a difference greater than 1, which indicates that they are on not on the same 2 port same card.\n Xname,Role,Subrole,BMC MAC,Bootstrap MAC,Bond0 MAC0,Bond0 MAC1 x3000c0s9b0n0,Management,Storage,94:40:c9:37:77:26,14:02:ec:d9:76:88,14:02:ec:d9:76:88,94:40:c9:5f:b6:92   Example ncn_metadata.csv file for a system that has been configured as follows:\n Management NCNs are configured to boot over the PCIe NICs Master and Storage management NCNs have two 2 port PCIe cards Worker management NCNs have one 2 port PCIe card   Because the NCNs have been configured to boot over their PCIe NICs, the Bootstrap MAC and Bond0 MAC0 columns have the same value.\n IMPORTANT: Mind the index for each group of nodes (3, 2, 1\u0026hellip;. ; not 1, 2, 3). If storage nodes are ncn-s001 x3000c0s7b0n0, ncn-s002 x3000c0s8b0n0, ncn-s003 x3000c0s9b0n0, then their portion of the file would be ordered x3000c0s9b0n0, x3000c0s8b0n0, x3000c0s7b0n0.\nXname,Role,Subrole,BMC MAC,Bootstrap MAC,Bond0 MAC0,Bond0 MAC1 x3000c0s9b0n0,Management,Storage,94:40:c9:37:77:26,14:02:ec:d9:76:88,14:02:ec:d9:76:88,94:40:c9:5f:b6:92 x3000c0s8b0n0,Management,Storage,94:40:c9:37:87:5a,14:02:ec:d9:7b:c8,14:02:ec:d9:7b:c8,94:40:c9:5f:b6:5c x3000c0s7b0n0,Management,Storage,94:40:c9:37:0a:2a,14:02:ec:d9:7c:88,14:02:ec:d9:7c:88,94:40:c9:5f:9a:a8 x3000c0s6b0n0,Management,Worker,94:40:c9:37:77:b8,14:02:ec:da:bb:00,14:02:ec:da:bb:00,14:02:ec:da:bb:01 x3000c0s5b0n0,Management,Worker,94:40:c9:35:03:06,14:02:ec:d9:76:b8,14:02:ec:d9:76:b8,14:02:ec:d9:76:b9 x3000c0s4b0n0,Management,Worker,94:40:c9:37:67:60,14:02:ec:d9:7c:40,14:02:ec:d9:7c:40,14:02:ec:d9:7c:41 x3000c0s3b0n0,Management,Master,94:40:c9:37:04:84,14:02:ec:d9:79:e8,14:02:ec:d9:79:e8,94:40:c9:5f:b5:cc x3000c0s2b0n0,Management,Master,94:40:c9:37:f9:b4,14:02:ec:da:b8:18,14:02:ec:da:b8:18,94:40:c9:5f:a3:a8 x3000c0s1b0n0,Management,Master,94:40:c9:37:87:32,14:02:ec:da:b9:98,14:02:ec:da:b9:98,14:02:ec:da:b9:99 Collection of MAC Addresses Collect as much information as possible for the ncn_metadata.csv file before the PIT node is booted from the LiveCD and then get the rest later when directed. Having dummy MAC addresses, such as de:ad:be:ef:00:00, in the ncn_metadata.csv file is acceptable until the point during the install at which the management network switches have been configured and the PIT node can be used to collect the information. The correct MAC addresses are needed before attempting to boot the management nodes with their real image in Deploy Management Nodes\n  If the nodes are booted to Linux, then the data can be collected by ipmitool lan print for the BMC MAC, and the ip address command for the other NICs. This is rarely the case for a first time install. The PIT node examples of using these two commands could be extrapolated for other nodes which are booted to Linux. See the PIT node examples in Collecting BMC MAC Addresses and Collecting NCN MAC Addresses.\n  If the nodes are powered up and there is SSH access to the spine and leaf-bmc switches, it is possible to collect information from the spine and leaf-bmc switches.\n The BMC MAC address can be collected from the switches using knowledge about the cabling of the HMN from the SHCD. See Collecting BMC MAC Addresses. The node MAC addresses cannot be collected until after the PIT node has booted from the LiveCD. At that point, a partial boot of the management nodes can be done to collect the remaining information from the conman console logs on the PIT node using the Procedure: iPXE Consoles    If the nodes are powered up and there is no SSH access to the spine and leaf switches, it is possible to connect to the spine and leaf switches using the method described in Connect to Switch over USB-Serial Cable.\n The BMC MAC address can be collected from the switches using knowledge about the cabling of the HMN from the SHCD. See Collecting BMC MAC Addresses. The node MAC addresses cannot be collected until after the PIT node has booted from the LiveCD. At that point, a partial boot of the management nodes can be done to collect the remaining information from the conman console logs on the PIT node using the Procedure: iPXE Consoles    In all other cases, the full information needed for ncn_metadata.csv will not be available for collection until after the PIT node has been booted from the LiveCD. Having incorrect MAC addresses in the ncn_metadata.csv file as placeholders is acceptable until the point during the install at which the management network switches have been configured and the PIT node can be used to collect the information.\n At that point in the installation workflow, the Collect MAC Addresses for NCNs procedure will be used.    Unless the system does not use or does not have onboard NICs on the management nodes, then this topic may be necessary before constructing the ncn_metadata.csv file.\n See Switch PXE Boot from Onboard NIC to PCIe for more information.    "
},
{
	"uri": "/docs-csm/en-12/install/create_switch_metadata_csv/",
	"title": "Create Switch Metadata Csv",
	"tags": [],
	"description": "",
	"content": "Create Switch Metadata CSV This page provides directions on constructing the switch_metadata.csv file.\nThis file is manually created to include information about all spine, LeafBMC, CDU, and leaf switches in the system. None of the Slingshot switches for the HSN should be included in this file.\nThe file should have the following format, in ascending order by component name (xname):\nSwitch Xname,Type,Brand d0w1,CDU,Dell d0w2,CDU,Dell x3000c0w38,LeafBMC,Dell x3000c0w36,LeafBMC,Dell x3000c0h33s1,Spine,Mellanox x3000c0h34s1,Spine,Mellanox The above file would lead to this pairing between component name and hostname:\n   Hostname Component Name     sw-spine-001 x3000c0h33s1   sw-spine-002 x3000c0h34s1   sw-LeafBMC-001 x3000c0w38   sw-LeafBMC-002 x3000c0w36   sw-cdu-001 d0w1   sw-cdu-002 d0w2    The hostnames are automatically generated in ascending order by switch type.\nThe Brand name of the management switches can be determined from one of two places. The Device Diagrams or River Device Diagrams tab of the SHCD has pictures and diagrams of the components of the system including the management network switches. This will have a long name which shows the part number and the vendor name. The Rack Layout or River Rack Layout tab shows the part number in the context of its location within the cabinet.\n   Part Number Brand     Aruba 8320 48P 1G/10GBASE-T and 6P 40G QSFP with X472 (JL481A) Aruba   Aruba 8325-23C 32-port 100G QSFP+/QSFP28 (JL627A) Aruba   CS-XGE40-MLNX-2100-16 Mellanox   HPE Aruba 6300M - switch - 48 ports - managed - rack-mountable Aruba   JL625A - Aruba 8325-48Y8C BF 6 F 2 PS Bdl Aruba   XC-XGE-48P-DL2 Ethernet switch (Dell S3048-ON) Dell   XC-XGT-48P-DL2 Ethernet switch (Dell S4048-ON) Dell    There may be other switches in a specific SHCD, but the general guidelines for any abbreviations are that MLNX or MLX is for Mellanox and DL is for Dell. All other switches are HPE Aruba switches.\nPrerequisites   The SHCD for the system\nCheck the description for component names while mapping names between the SHCD and the switch_metadata.csv file. See Component Names (xnames).\n  Format Spine and leaf switches use the format xXcChHsS. LeafBMC switches use xXcCwW. CDU switches use dDwW.\nReference Diagram for Subsequent Sections  Diagram of a cabinet with side-by-side switches in SHCD.\n Directions   Identify the switches in the SHCD.\nLook for the following:\n  The slot number(s) for the LeafBMC switches (usually 48-port switches)\n In the above diagram this is x3000u22    The slot number(s) for the spine switches\n In the above diagram these are x3000u23R and x3000u23L (two side-by-side switches) Newer side-by-side switches use slot numbers of s1 and s2 instead of R and L      Each spine or leaf switch will follow this format: xXcChHsS:\n This format also applies to CDU switches that are in a River cabinet that make connections to an adjacent Hill cabinet.\n  xX : where X is the River cabinet identification number (the figure above is 3000) cC : where C is the chassis identification number. This should be 0. hH : where H is the slot number in the cabinet (height). sS : where S is the horizontal space number.    Each LeafBMC switch will follow this format: xXcCwW:\n xX : where X is the River cabinet identification number (the figure above is 3000). cC : where C is the chassis identification number. This should be 0. wW : where W is the slot number in the cabinet (height).    Each CDU switch will follow this format: dDwW:\n If a CDU switch is in a River cabinet, then follow the naming convention in step 2 instead.\n  dD : where D is the Coolant Distribution Unit (CDU) wW : where W is the management switch in a CDU    Each item in the file is either of type leaf, CDU, LeafBMC, or Spine.\n  Each line in the file must denote the Brand, either Dell, Mellanox, or Aruba.\n  Create the switch_metadata.csv file with this information.\n  linux# vi switch_metadata.csv See the following example files for reference.\nExamples of switch_metadata.csv  Use case: two Aruba CDU Switches, two Aruba LeafBMC switches, four Aruba leaf switches, and two Aruba spine switches:\n Switch Xname,Type,Brand d0w1,CDU,Aruba d0w2,CDU,Aruba x3000c0w31,LeafBMC,Aruba x3000c0w32,LeafBMC,Aruba x3000c0h33s1,leaf,Aruba x3000c0h34s1,leaf,Aruba x3000c0h35s1,leaf,Aruba x3000c0h36s1,leaf,Aruba x3000c0h37s1,Spine,Aruba x3000c0h38s1,Spine,Aruba  Use case: two Dell CDU switches, two Dell LeafBMC switches, and two Mellanox spine switches:\n Switch Xname,Type,Brand d0w1,CDU,Dell d0w2,CDU,Dell x3000c0w36,LeafBMC,Dell x3000c0w38,LeafBMC,Dell x3000c0h33s1,Spine,Mellanox x3000c0h34s1,Spine,Mellanox  Use case: two Dell LeafBMC switches and two Mellanox switches in the same slot number:\n Switch Xname,Type,Brand x3000c0w38,LeafBMC,Dell x3000c0w36,LeafBMC,Dell x3000c0h33s1,Spine,Mellanox x3000c0h33s2,Spine,Mellanox "
},
{
	"uri": "/docs-csm/en-12/install/deploy_final_ncn/",
	"title": "Deploy Final NCN",
	"tags": [],
	"description": "",
	"content": "Deploy Final NCN The following procedure contains information for rebooting and deploying the management node that is currently hosting the LiveCD. At the end of this procedure, the LiveCD will no longer be active. The node it was using will join the Kubernetes cluster as the final of three master nodes, forming a quorum.\nIMPORTANT: While the node is rebooting, it will only be available through Serial-Over-LAN (SOL) and local terminals. This procedure entails deactivating the LiveCD, meaning the LiveCD and all of its resources will be unavailable.\n Required services Notice of danger Hand-off Reboot Enable NCN disk wiping safeguard Clean up chrony configurations Configure DNS and NTP on each BMC Next topic  1. Required services These services must be healthy before the reboot of the LiveCD can take place. If the health checks performed earlier in the install completed successfully (Validate CSM Health), then the following platform services will be healthy and ready for reboot of the LiveCD:\n Utility Storage (Ceph) cray-bss cray-dhcp-kea cray-dns-unbound cray-ipxe cray-sls cray-tftp  2. Notice of danger  An administrator is strongly encouraged to be mindful of pitfalls during this segment of the CSM install. The steps below do contain warnings themselves, but overall there are risks:\n SSH will cease to work when the LiveCD reboots; the serial console will need to be used. Rebooting a remote ISO will dump all running changes on the PIT node; USB devices are accessible after the install. The NCN will never wipe a USB device during installation. Prior to shutting down the PIT node, learning the CMN IP addresses of the other NCNs will be helpful if troubleshooting is required.  This procedure entails deactivating the LiveCD, meaning the LiveCD and all of its resources will be unavailable.\n 3. Hand-off The steps in this section load hand-off data before a later procedure reboots the LiveCD node.\n\n  Start a new typescript.\n  Exit the current typescript, if one is active.\npit# exit   Start a new typescript on the PIT node.\npit# mkdir -pv /var/www/ephemeral/prep/admin \u0026amp;\u0026amp; pushd /var/www/ephemeral/prep/admin \u0026amp;\u0026amp; script -af csm-livecd-reboot.$(date +%Y-%m-%d).txt pit# export PS1=\u0026#39;\\u@\\H \\D{%Y-%m-%d} \\t \\w # \u0026#39;     Upload SLS file.\n NOTE: The environment variable SYSTEM_NAME must be set.\n pit# csi upload-sls-file --sls-file /var/www/ephemeral/prep/${SYSTEM_NAME}/sls_input_file.json Expected output looks similar to the following:\n2021/02/02 14:05:15 Retrieving S3 credentials ( sls-s3-credentials ) for SLS 2021/02/02 14:05:15 Uploading SLS file: /var/www/ephemeral/prep/eniac/sls_input_file.json 2021/02/02 14:05:15 Successfully uploaded SLS Input File.   Get a token to use for authenticated communication with the gateway.\n NOTE: api-gw-service-nmn.local is legacy, and will be replaced with api-gw-service.nmn.\n pit# export TOKEN=$(curl -k -s -S -d grant_type=client_credentials \\  -d client_id=admin-client \\  -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath=\u0026#39;{.data.client-secret}\u0026#39; | base64 -d` \\  https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r \u0026#39;.access_token\u0026#39;)   Validate that CSM_RELEASE and CSM_PATH variables are set.\nThese variables were set and added to /etc/environment during the earlier Bootstrap PIT Node step of the install. CSM_PATH should be the fully-qualified path to the expanded CSM release tarball on the PIT node.\npit# echo \u0026#34;CSM_RELEASE=${CSM_RELEASE}CSM_PATH=${CSM_PATH}\u0026#34;   Upload NCN boot artifacts into S3.\n  Run the following command.\npit# artdir=/var/www/ephemeral/data \u0026amp;\u0026amp; k8sdir=$artdir/k8s \u0026amp;\u0026amp; cephdir=$artdir/ceph \u0026amp;\u0026amp; csi handoff ncn-images \\  --k8s-kernel-path $k8sdir/*.kernel \\  --k8s-initrd-path $k8sdir/initrd.img*.xz \\  --k8s-squashfs-path $k8sdir/secure-*.squashfs \\  --ceph-kernel-path $cephdir/*.kernel \\  --ceph-initrd-path $cephdir/initrd.img*.xz \\  --ceph-squashfs-path $cephdir/secure-*.squashfs The end of the command output contains a block similar to this:\nRun the following commands so that the versions of the images that were just uploaded can be used in other steps: export KUBERNETES_VERSION=x.y.z export CEPH_VERSION=x.y.z   Run the export commands listed at the end of the output from the previous step.\n    Upload the data.json file to BSS, our cloud-init data source.\nIf any changes have been made to this file (for example, as a result of any customizations or workarounds), then use the path to the modified file instead.\n This step will prompt for the root password of the NCNs.\n pit# csi handoff bss-metadata --data-file /var/www/ephemeral/configs/data.json || echo \u0026#34;ERROR: csi handoff bss-metadata failed\u0026#34;   Patch the metadata for the Ceph nodes to have the correct run commands.\npit# python3 /usr/share/doc/csm/scripts/patch-ceph-runcmd.py   Ensure that the DNS server value is correctly set to point toward Unbound at 10.92.100.225 (NMN) and 10.94.100.225 (HMN).\npit# csi handoff bss-update-cloud-init --set meta-data.dns-server=\u0026#34;10.92.100.225 10.94.100.225\u0026#34; --limit Global   Preserve logs and configuration files if desired (optional).\nAfter the PIT node is redeployed, all files on its local drives will be lost. It is recommended to retain some of the log files and configuration files, because they may be useful if issues are encountered during the remainder of the install.\nThe following commands create a tar archive of these files, storing it in a directory that will be backed up in the next step.\npit# mkdir -pv /var/www/ephemeral/prep/logs \u0026amp;\u0026amp; ls -d \\  /etc/dnsmasq.d \\  /etc/os-release \\  /etc/sysconfig/network \\  /opt/cray/tests/cmsdev.log \\  /opt/cray/tests/install/logs \\  /opt/cray/tests/logs \\  /root/.canu \\  /root/.config/cray/logs \\  /root/csm*.{log,txt} \\  /tmp/*.log \\  /usr/share/doc/csm/install/scripts/csm_services/yapl.log \\  /var/log/conman \\  /var/log/zypper.log 2\u0026gt;/dev/null | sed \u0026#39;s_^/__\u0026#39; | xargs tar -C / -czvf /var/www/ephemeral/prep/logs/pit-backup-$(date +%Y-%m-%d_%H-%M-%S).tgz   Backup the bootstrap information from ncn-m001.\n NOTE: This preserves information that should always be kept together in order to fresh-install the system again.\n   Log in and set up passwordless SSH to the PIT node.\nCopying only the public keys from ncn-m002 and ncn-m003 to the PIT node. Do not set up passwordless SSH from the PIT node or the key will have to be securely tracked or expunged if using a USB installation).\n The ssh commands below may prompt for the NCN root password.\n pit# ssh ncn-m002 cat /root/.ssh/id_rsa.pub \u0026gt;\u0026gt; /root/.ssh/authorized_keys \u0026amp;\u0026amp; ssh ncn-m003 cat /root/.ssh/id_rsa.pub \u0026gt;\u0026gt; /root/.ssh/authorized_keys \u0026amp;\u0026amp; chmod 600 /root/.ssh/authorized_keys   Back up files from the PIT to ncn-m002.\npit# ssh ncn-m002 \\  \u0026#34;mkdir -pv /metal/bootstrap rsync -e \u0026#39;ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null\u0026#39; -rltD -P --delete pit.nmn:/var/www/ephemeral/prep /metal/bootstrap/ rsync -e \u0026#39;ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null\u0026#39; -rltD -P --delete pit.nmn:${CSM_PATH}/cray-pre-install-toolkit*.iso /metal/bootstrap/\u0026#34;   Back up files from the PIT to ncn-m003.\npit# ssh ncn-m003 \\  \u0026#34;mkdir -pv /metal/bootstrap rsync -e \u0026#39;ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null\u0026#39; -rltD -P --delete pit.nmn:/var/www/ephemeral/prep /metal/bootstrap/ rsync -e \u0026#39;ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null\u0026#39; -rltD -P --delete pit.nmn:${CSM_PATH}/cray-pre-install-toolkit*.iso /metal/bootstrap/\u0026#34;     Set the PIT node to PXE boot.\n  List IPv4 boot options using efibootmgr.\npit# efibootmgr | grep -Ei \u0026#34;ip(v4|4)\u0026#34;   Set and trim the boot order on the PIT node.\nThis only needs to be done for the PIT node, not for any of the other NCNs. See Setting boot order and Trimming boot order.\n  Tell the PIT node to PXE boot on the next boot.\nUse efibootmgr to set the next boot device to the first PXE boot option. This step assumes the boot order was set up in the previous step.\npit# efibootmgr -n $(efibootmgr | grep -Ei \u0026#34;ip(v4|4)\u0026#34; | awk \u0026#39;{print $1}\u0026#39; | head -n 1 | tr -d Boot*) | grep -i bootnext BootNext: 0014     Collect a backdoor login. Fetch the CMN IP address for ncn-m002 for a backdoor during the reboot of ncn-m001.\n  Get the IP address.\npit# ssh ncn-m002 \u0026#39;ip a show bond0.cmn0 | grep inet\u0026#39; Expected output will look similar to the following (exact values may differ):\ninet 10.102.11.13/24 brd 10.102.11.255 scope global bond0.cmn0 inet6 fe80::1602:ecff:fed9:7820/64 scope link   Log in from another external machine to verify SSH is up and running for this session.\nexternal# ssh root@10.102.11.13 ncn-m002#  Keep this terminal active as it will enable kubectl commands during the bring-up of the new NCN. If the reboot successfully deploys the LiveCD, then this terminal can be exited.\nPOINT OF NO RETURN: The next step will wipe the underlying nodes disks clean. It will ignore USB devices. RemoteISOs are at risk here; even though a backup has been performed of the PIT node, it is not possible to boot back to the same state. This is the last step before rebooting the node.\n     Wipe the disks on the PIT node.\n WARNING: Risk of USER ERROR! Do not assume to wipe the first three disks (for example, sda, sdb, and sdc); they are not pinned to any physical disk layout. Choosing the wrong ones may result in wiping the USB device. USB devices can only be wiped by operators at this point in the install. USB devices are never wiped by the CSM installer.\n   Select disks to wipe (SATA/NVME/SAS).\npit# md_disks=\u0026#34;$(lsblk -l -o SIZE,NAME,TYPE,TRAN | grep -E \u0026#39;(sata|nvme|sas)\u0026#39; | sort -h | awk \u0026#39;{print \u0026#34;/dev/\u0026#34; $2}\u0026#39;)\u0026#34;   Run a sanity check by printing disks into typescript or console.\npit# echo $md_disks Expected output looks similar to the following:\n/dev/sda /dev/sdb /dev/sdc   Wipe. This is irreversible.\npit# wipefs --all --force $md_disks If any disks had labels present, output looks similar to the following:\n/dev/sda: 8 bytes were erased at offset 0x00000200 (gpt): 45 46 49 20 50 41 52 54 /dev/sda: 8 bytes were erased at offset 0x6fc86d5e00 (gpt): 45 46 49 20 50 41 52 54 /dev/sda: 2 bytes were erased at offset 0x000001fe (PMBR): 55 aa /dev/sdb: 6 bytes were erased at offset 0x00000000 (crypto_LUKS): 4c 55 4b 53 ba be /dev/sdb: 6 bytes were erased at offset 0x00004000 (crypto_LUKS): 53 4b 55 4c ba be /dev/sdc: 8 bytes were erased at offset 0x00000200 (gpt): 45 46 49 20 50 41 52 54 /dev/sdc: 8 bytes were erased at offset 0x6fc86d5e00 (gpt): 45 46 49 20 50 41 52 54 /dev/sdc: 2 bytes were erased at offset 0x000001fe (PMBR): 55 aa If there was any wiping done, output should appear similar to the output above. If this is re-run, there may be no output or an ignorable error.\n    Quit the typescript session and copy the typescript file off of ncn-m001.\n  Stop the typescript session:\npit# exit   Back up the completed typescript file by re-running the rsync commands in the Backup Bootstrap Information section.\n    (Optional) Setup ConMan or serial console, if not already on, from any laptop or other system with network connectivity to the cluster.\nexternal# script -a boot.livecd.$(date +%Y-%m-%d).txt external# export PS1=\u0026#39;\\u@\\H \\D{%Y-%m-%d} \\t \\w # \u0026#39; external# SYSTEM_NAME=eniac external# USERNAME=root external# export IPMI_PASSWORD=changeme external# ipmitool -I lanplus -U $USERNAME -E -H ${SYSTEM_NAME}-ncn-m001-mgmt chassis power status external# ipmitool -I lanplus -U $USERNAME -E -H ${SYSTEM_NAME}-ncn-m001-mgmt sol activate   4. Reboot   Reboot the LiveCD.\npit# reboot   Wait for the node to boot, acquire its hostname (ncn-m001), and run cloud-init.\nIf all of that happens successfully, then skip the rest of this step and proceed to the next step. Otherwise, use the following information to remediate the problems.\n NOTES:\n If the node has PXE boot issues, such as getting PXE errors or not pulling the ipxe.efi binary, see PXE boot troubleshooting. If ncn-m001 did not run all the cloud-init scripts, then the following commands need to be run (but only in that circumstance).   ncn-m001# cloud-init clean ; cloud-init init ; cloud-init modules -m init ; \\  cloud-init modules -m config ; cloud-init modules -m final   Once cloud-init has completed successfully, log in and start a typescript (the IP address used here is the one noted for ncn-m002 in an earlier step).\nexternal# ssh root@10.102.11.13 ncn-m002# pushd /metal/bootstrap/prep/admin ncn-m002# script -af csm-verify.$(date +%Y-%m-%d).txt ncn-m002# export PS1=\u0026#39;\\u@\\H \\D{%Y-%m-%d} \\t \\w # \u0026#39; ncn-m002# ssh ncn-m001   Run kubectl get nodes to see the full Kubernetes cluster.\nncn-m001# kubectl get nodes Expected output looks similar to the following:\nNAME STATUS ROLES AGE VERSION ncn-m001 Ready control-plane,master 27s v1.20.13 ncn-m002 Ready control-plane,master 4h v1.20.13 ncn-m003 Ready control-plane,master 4h v1.20.13 ncn-w001 Ready \u0026lt;none\u0026gt; 4h v1.20.13 ncn-w002 Ready \u0026lt;none\u0026gt; 4h v1.20.13 ncn-w003 Ready \u0026lt;none\u0026gt; 4h v1.20.13   Restore and verify the site link.\nRestore networking files from the manual backup taken during the Backup the bootstrap information step.\nncn-m001# SYSTEM_NAME=eniac ncn-m001# rsync ncn-m002:/metal/bootstrap/prep/${SYSTEM_NAME}/pit-files/ifcfg-lan0 /etc/sysconfig/network/ \u0026amp;\u0026amp; \\  wicked ifreload lan0 \u0026amp;\u0026amp; \\  wicked ifstatus lan0 Expected output looks similar to:\nlan0 up link: #32, state up, mtu 1500 type: bridge, hwaddr 90:e2:ba:0f:11:c2 config: compat:suse:/etc/sysconfig/network/ifcfg-lan0 leases: ipv4 static granted addr: ipv4 172.30.53.88/20 [static]   Verify that the site link (lan0) and the VLANs have IP addresses.\n Examine the output to ensure that each interface has been assigned an IPv4 address.\n ncn-m001# for INT in lan0 bond0.nmn0 bond0.hmn0 bond0.can0 bond0.cmn0 ; do ip a show $INT || echo \u0026#34;ERROR: Command failed: ip a show $INT\u0026#34; done   Verify that the default route is via the CMN.\nncn-m001# ip r show default   Verify that there is not a metal bootstrap IP address.\nncn-m001# ip a show bond0   Verify zypper repositories are empty and all remote SUSE repositories are disabled.\n If the rm command fails because the files do not exist, this is not an error and should be ignored.\n ncn-m001# rm -v /etc/zypp/repos.d/* \u0026amp;\u0026amp; zypper ms --remote --disable   Download and install/upgrade the documentation RPM.\nSee Check for Latest Documentation\n  Exit the typescript and move the backup to ncn-m001.\nThis is required to facilitate reinstallations, because it pulls the preparation data back over to the documented area (ncn-m001).\nncn-m001# exit ncn-m002# exit # typescript exited ncn-m002# rsync -rltDv -P /metal/bootstrap ncn-m001:/metal/ \u0026amp;\u0026amp; rm -rfv /metal/bootstrap ncn-m002# exit   5. Enable NCN disk wiping safeguard The next steps require csi from the installation media. csi will not be provided on an NCN otherwise because it is used for Cray installation and bootstrap.\n  SSH back into ncn-m001 or restart a local console.\n  Resume the typescript.\nncn-m001# script -af /metal/bootstrap/prep/admin/csm-verify.$(date +%Y-%m-%d).txt ncn-m001# export PS1=\u0026#39;\\u@\\H \\D{%Y-%m-%d} \\t \\w # \u0026#39;   Obtain access to CSI.\nncn-m001# mkdir -pv /mnt/livecd /mnt/rootfs /mnt/sqfs \u0026amp;\u0026amp; \\  mount -v /metal/bootstrap/cray-pre-install-toolkit-*.iso /mnt/livecd/ \u0026amp;\u0026amp; \\  mount -v /mnt/livecd/LiveOS/squashfs.img /mnt/sqfs/ \u0026amp;\u0026amp; \\  mount -v /mnt/sqfs/LiveOS/rootfs.img /mnt/rootfs/ \u0026amp;\u0026amp; \\  cp -pv /mnt/rootfs/usr/bin/csi /tmp/csi \u0026amp;\u0026amp; \\  /tmp/csi version \u0026amp;\u0026amp; \\  umount -vl /mnt/sqfs /mnt/rootfs /mnt/livecd  NOTE /tmp/csi will delete itself on the next reboot. The /tmp directory is tmpfs and runs in memory; it will not persist on restarts.\n   Authenticate with the cluster.\nncn-m001# export TOKEN=$(curl -k -s -S -d grant_type=client_credentials \\  -d client_id=admin-client \\  -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath=\u0026#39;{.data.client-secret}\u0026#39; | base64 -d` \\  https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r \u0026#39;.access_token\u0026#39;)   Set the wipe safeguard to allow safe reboots on all NCNs.\nncn-m001# /tmp/csi handoff bss-update-param --set metal.no-wipe=1   6. Clean up chrony configurations This step requires the exported TOKEN variable from the previous section: Enable NCN disk wiping safeguard. If still using the same shell session, there is no need to export it again.\nncn-m001# /srv/cray/scripts/common/chrony/csm_ntp.py Successful output can appear as:\n... BSS query failed. Checking local cache... Chrony configuration created Problematic config found: /etc/chrony.d/cray.conf.dist Problematic config found: /etc/chrony.d/pool.conf Restarted chronyd ... or\n... Chrony configuration created Restarted chronyd ... 7. Configure DNS and NTP on each BMC  NOTE: Only follow this section if the NCNs are HPE hardware. If the system uses Gigabyte or Intel hardware, skip this section.\n Configure DNS and NTP on the BMC for each management node except ncn-m001. However, the commands in this section are all run on ncn-m001.\n  Validate that the system is HPE hardware.\nncn-m001# ipmitool mc info | grep \u0026#34;Hewlett Packard Enterprise\u0026#34; || echo \u0026#34;Not HPE hardware -- SKIP these steps\u0026#34;   Set environment variables.\nSet the IPMI_PASSWORD and USERNAME variables to the BMC credentials for the NCNs.\n Using read -s for this prevents the credentials from being echoed to the screen or saved in the shell history.\n ncn-m001# read -s IPMI_PASSWORD ncn-m001# read -s USERNAME ncn-m001# export IPMI_PASSWORD USERNAME   Set BMCS variable to list of the BMCs for all master, worker, and storage nodes, except ncn-m001-mgmt:\nncn-m001# BMCS=$(grep -Eo \u0026#34;[[:space:]]ncn-[msw][0-9][0-9][0-9]-mgmt([.]|[[:space:]]|$)\u0026#34; /etc/hosts | sed \u0026#39;s/^.*\\(ncn-[msw][0-9][0-9][0-9]-mgmt\\).*$/\\1/\u0026#39; | sort -u | grep -v \u0026#34;^ncn-m001-mgmt$\u0026#34;) ; echo $BMCS Expected output looks similar to the following:\nncn-m002-mgmt ncn-m003-mgmt ncn-s001-mgmt ncn-s002-mgmt ncn-s003-mgmt ncn-w001-mgmt ncn-w002-mgmt ncn-w003-mgmt   Get the DNS server IP address for the NMN.\nncn-m001# NMN_DNS=$(kubectl get services -n services -o wide | grep cray-dns-unbound-udp-nmn | awk \u0026#39;{ print $4 }\u0026#39;); echo $NMN_DNS Example output:\n10.92.100.225   Get the DNS server IP address for the HMN.\nncn-m001# HMN_DNS=$(kubectl get services -n services -o wide | grep cray-dns-unbound-udp-hmn | awk \u0026#39;{ print $4 }\u0026#39;); echo $HMN_DNS Example output:\n10.94.100.225   Run the following to loop through all of the BMCs (except ncn-m001-mgmt) and apply the desired settings.\nncn-m001# for BMC in $BMCS ; do echo \u0026#34;$BMC: Disabling DHCP and configure NTP on the BMC using data from unbound service\u0026#34; /opt/cray/csm/scripts/node_management/set-bmc-ntp-dns.sh ilo -H $BMC -S -n echo echo \u0026#34;$BMC: Configuring DNS on the BMC using data from unbound\u0026#34; /opt/cray/csm/scripts/node_management/set-bmc-ntp-dns.sh ilo -H $BMC -D $NMN_DNS,$HMN_DNS -d echo echo \u0026#34;$BMC: Showing settings\u0026#34; /opt/cray/csm/scripts/node_management/set-bmc-ntp-dns.sh ilo -H $BMC -s echo done ; echo \u0026#34;Configuration completed on all NCN BMCs\u0026#34;   8. Next topic After completing this procedure, proceed to Configure Administrative Access.\n"
},
{
	"uri": "/docs-csm/en-12/install/csm_installation_failure/",
	"title": "Services Install Fails Because Of Missing Secret",
	"tags": [],
	"description": "",
	"content": "CSM Services Install Fails Because of Missing Secret When running the install script in the Install CSM Services procedure, it may fail due to a timing-related issue. This page documents how to determine if this problem was the cause of an install script failure, and the appropriate remediation steps to take if it is encountered.\nHow to determine if an install hit this issue   Verify that the installation script output contains an error about a missing secret.\nExample snippet from the install script output:\nERROR Step: Set Management NCNs to use Unbound --- Checking Precondition + Getting admin-client-auth secret Error from server (NotFound): secrets \u0026#34;admin-client-auth\u0026#34; not found + Obtaining access token curl: (22) The requested URL returned error: 404 + Querying SLS curl: (22) The requested URL returned error: 503 Check the doc below for troubleshooting: If any management NCNs are missing from the output, take corrective action before proceeding. INFO Failed Pipeline/Step id: f0cd9574240989eb04118d308f26b3ea exit status 22 If the above secrets \u0026quot;admin-client-auth\u0026quot; not found error is observed, then proceed to the next step.\n  Verify that keycloak-setup has this issue.\nLook for a keycloak-setup pod still in the Running state:\npit# kubectl get pods -n services | grep keycloak-setup Example output:\nkeycloak-setup-1-xj9s5 1/2 Running 0 32m   Check the istio-proxy container logs for the keycloak-setup pod found in the previous step.\nIn the following command, substitute the name of the keycloak-setup pod found in the previous step.\npit # kubectl logs --namespace services -n services KEYCLOAK-SETUP-POD-NAME --container istio-proxy | grep \u0026#39;[[:space:]]503[[:space:]]\u0026#39; | grep SDS | tail -n2 If the output looks similar to the following, then proceed to the remediation steps.\n[2022-05-27T13:21:24.535Z] \u0026#34;POST /keycloak/realms/master/protocol/openid-connect/token HTTP/1.1\u0026#34; 503 UF,URX \u0026#34;TLS error: Secret is not supplied by SDS\u0026#34; 96 159 16 - \u0026#34;-\u0026#34; \u0026#34;python-requests/2.27.1\u0026#34; \u0026#34;19fe9b72-d887-4649-b934-9dc7bc76cc21\u0026#34; \u0026#34;keycloak.services:8080\u0026#34; \u0026#34;10.44.0.31:8080\u0026#34; outbound|8080||keycloak.services.svc.cluster.local - 10.28.81.125:8080 10.32.0.25:60032 - default [2022-05-27T13:21:34.573Z] \u0026#34;POST /keycloak/realms/master/protocol/openid-connect/token HTTP/1.1\u0026#34; 503 UF,URX \u0026#34;TLS error: Secret is not supplied by SDS\u0026#34; 96 159 61 - \u0026#34;-\u0026#34; \u0026#34;python-requests/2.27.1\u0026#34; \u0026#34;ef0255b4-260b-47b5-8077-3e17e9371baf\u0026#34; \u0026#34;keycloak.services:8080\u0026#34; \u0026#34;10.44.0.31:8080\u0026#34; outbound|8080||keycloak.services.svc.cluster.local - 10.28.81.125:8080 10.32.0.25:60964 - default   Remediate the problem   Delete the current keycloak-setup pod.\nIn the following command, substitute the name of the keycloak-setup pod found in the previous section.\npit # kubectl delete pod --namespace services KEYCLOAK-SETUP-POD-NAME   Find the pod name of the new keycloak-setup pod by using the same kubectl get pods command from the previous section.\n  Ensure that the new keycloak-setup pod completed setup:\nIn the following command, substitute the name of the new keycloak-setup pod found in the previous step.\npit # kubectl logs --namespace services -n services NEW-KEYCLOAK-SETUP-POD-NAME --container keycloak-setup | tail -n 3 Example output indicating that it has completed setup:\n2022-05-27 14:12:25,251 - INFO - keycloak_setup - Deleting \u0026#39;keycloak-gatekeeper-client\u0026#39; Secret in namespace \u0026#39;services\u0026#39;... 2022-05-27 14:12:25,264 - INFO - keycloak_setup - The \u0026#39;keycloak-gatekeeper-client\u0026#39; secret in namespace \u0026#39;services\u0026#39; already doesn\u0026#39;t exit. 2022-05-27 14:12:25,264 - INFO - keycloak_setup - Keycloak setup complete   Once all Keycloak pods have successfully completed, then re-run the installation script and proceed with the installation.\npit # kubectl get pods --namespace services | grep keycloak | grep -Ev \u0026#39;(Completed|Running)\u0026#39; If this command gives no output, then installation may proceed.\n  "
},
{
	"uri": "/docs-csm/en-12/install/boot_livecd_virtual_iso/",
	"title": "Boot Livecd Virtual Iso",
	"tags": [],
	"description": "",
	"content": "Boot LiveCD Virtual ISO This page will walk-through booting the LiveCD .iso file directly onto a BMC.\nTopics  Boot LiveCD Virtual ISO  Topics Details  Prerequisites BMCs' Virtual Mounts  HPE iLO BMCs Gigabyte BMCs   Configuring  Backing up the Overlay COW FS Restoring from an Overlay COW FS Backup        Details Prerequisites A Cray Pre-Install Toolkit ISO is required for this process. This ISO can be obtained from:\n The Cray Pre-Install Toolkit ISO included in a CSM release tar file. It will have a filename similar to cray-pre-install-toolkit-sle15sp2.x86_64-1.4.10-20210514183447-gc054094.iso  BMCs' Virtual Mounts Most BMCs offer a Web Interface for controlling the node and for providing access to its BIOS and firmware.\nRefer to the following pages based on your node vendor for help mounting an ISO image:\n HPE iLO BMCs Gigabyte  HPE iLO BMCs HPE iLO BMCs allow for booting directly from an HTTP-accessible ISO location.\n  Enter the Virtual Media URL, select Boot on Next Reset, and click Insert Media.\n  Reboot by selecting Reset in the top right power menu.\n  Open the virtual terminal by choosing the HTML5 Console option when clicking the terminal image in the bottom left corner.\n NOTE: It may appear that the boot is stalled at a line of EXT4-fs (loop1): mounted ... or Starting dracut pre-mount hook.... This is the step when it actually begins downloading the ISO\u0026rsquo;s SquashFS root file system and can take a few minutes\n   Gigabyte BMCs Gigabyte BMCs allow for booting over HTTP.\n WARNING: Do not try to boot over NFS or CIFS because of problems in the Gigabyte firmware.\n   Go to the BMC settings and setup the remote ISO for the protocol and node.\n  Access the BMC\u0026rsquo;s web interface and navigate to Settings -\u0026gt; Media Redirection Settings -\u0026gt; General Settings.\n  Enable Remote Media Support and Mount CD/DVD and then fill in the server IP address or DNS name and the path to the server.\n NOTE: The Gigabyte URL appears to not allow certain characters and has a limit on path length. You may need to move or rename the ISO to a location with a smaller file name.\n   Navigate to Image Redirection -\u0026gt; Remote Images.\n  Click on the Start button to start the Virtual ISO mount.\n  Reboot the node and select the Virtual CDROM option from the manual boot options.\n  Configuring  Boot LiveCD Virtual ISO  Topics Details  Prerequisites BMCs' Virtual Mounts  HPE iLO BMCs Gigabyte BMCs   Configuring  Backing up the Overlay COW FS Restoring from an Overlay COW FS Backup        The ISO boots with no password, requiring one be set on first login. Continue the bootstrap process by setting the root password following the procedure First Login.\n NOTE: The root OS / directory is writable without persistence. This means that restarting the machine will result in all changes being lost. Before restarting, consider following Backing up the Overlay COW FS and the accompanying Restoring from an Overlay COW FS Backup section.\n Backing up the Overlay COW FS Backup the writable overlay upper-dir so that changes are not lost after a reboot or when updating the ISO.\nThis requires a location to scp a tar file as a backup.\ntar czf /run/overlay.tar.gz -C /run/overlayfs/rw . scp /run/overlay.tar.gz \u0026lt;somelocation\u0026gt;  NOTE: To reduce the size of the backup, delete any SquashFS files first, or exclude them in the tar command using --exclude='*.squashfs'. Those will need to be repopulated after you restoring the backup.\n Restoring from an Overlay COW FS Backup Restore a backed up tar file from the previous command with the following:\nscp \u0026lt;somelocation\u0026gt; /run/overlay.tar.gz tar xf /run/overlay.tar.gz -C /run/overlayfs/rw mount -o remount / If the squashfs files were excluded from the backup, repopulate them following the configuration section.\n"
},
{
	"uri": "/docs-csm/en-12/install/bootstrap_livecd_remote_iso/",
	"title": "Bootstrap Pit Node From Livecd Remote Iso",
	"tags": [],
	"description": "",
	"content": "Bootstrap PIT Node from LiveCD Remote ISO The Pre-Install Toolkit (PIT) node needs to be bootstrapped from the LiveCD. There are two media available to bootstrap the PIT node: the RemoteISO or a bootable USB device. This procedure describes using the USB device. If not using the RemoteISO, see Bootstrap PIT Node from LiveCD USB\nThe installation process is similar to the USB-based installation, with adjustments to account for the lack of removable storage.\nImportant: Before starting this procedure be sure to complete the procedure to Prepare Configuration Payload for the relevant installation scenario.\nTopics  Known compatibility issues Attaching and booting the LiveCD with the BMC First login Configure the running LiveCD  Generate installation files  Subsequent installs (reinstalls) Initial installs (bare-metal)   Verify and backup system_config.yaml Prepare Site Init   Bring up the PIT services and validate PIT health Next topic  1. Known compatibility issues The LiveCD Remote ISO has known compatibility issues for nodes from certain vendors.\n Intel nodes should not attempt to bootstrap using the LiveCD Remote ISO method. Instead use Bootstrap PIT Node from LiveCD USB Gigabyte nodes should not attempt to bootstrap using the LiveCD Remote ISO method. Instead use Bootstrap PIT Node from LiveCD USB  2. Attaching and booting the LiveCD with the BMC  Warning: If this is a re-installation on a system that still has a USB device from a prior installation, then that USB device must be wiped before continuing. Failing to wipe the USB, if present, may result in confusion. If the USB is still booted, then it can wipe itself using the basic wipe from Wipe NCN Disks for Reinstallation. If it is not booted, please do so and wipe it or disable the USB ports in the BIOS (not available for all vendors).\n Obtain and attach the LiveCD cray-pre-install-toolkit ISO file to the BMC. Depending on the vendor of the node, the instructions for attaching to the BMC will differ.\n  Download the CSM software release and extract the LiveCD remote ISO image.\nImportant: Ensure that you have the CSM release plus any patches or hotfixes by following the instructions in Update CSM Product Stream\nThe cray-pre-install-toolkit ISO and other files are now available in the directory from the extracted CSM tar file. The ISO will have a name similar to cray-pre-install-toolkit-sle15sp3.x86_64-1.5.8-20211203183315-geddda8a.iso\nThis ISO file can be extracted from the CSM release tar file using the following command:\nlinux# tar --wildcards --no-anchored -xzvf \u0026lt;csm-release\u0026gt;.tar.gz \u0026#39;cray-pre-install-toolkit-*.iso\u0026#39;   Prepare a server on the network to host the cray-pre-install-toolkit ISO file.\nPlace the cray-pre-install-toolkit ISO file on a server which the BMC of the PIT node will be able to contact using HTTP or HTTPS.\nNote: A short URL is better than a long URL for the PIT file on the webserver.\n  See the respective procedure below to attach an ISO.\n HPE iLO BMCs Gigabyte BMCs Do not use the RemoteISO method. See Bootstrap PIT Node from LiveCD USB Intel BMCs Do not use the RemoteISO method. See Bootstrap PIT Node from LiveCD USB    The chosen procedure should have rebooted the server. Observe the server boot into the LiveCD.\n  3. First login On first login (over SSH or at local console) the LiveCD will prompt the administrator to change the password.\n  The initial password is empty; enter the username of root and press return twice.\npit login: root Expected output looks similar to the following:\nPassword: \u0026lt;-------just press Enter here for a blank password You are required to change your password immediately (administrator enforced) Changing password for root. Current password: \u0026lt;------- press Enter here, again, for a blank password New password: \u0026lt;------- type new password Retype new password:\u0026lt;------- retype new password Welcome to the CRAY Pre-Install Toolkit (LiveOS)   4. Configure the running LiveCD   Start a typescript to record this section of activities done on ncn-m001 while booted from the LiveCD.\npit# script -af ~/csm-install-remoteiso.$(date +%Y-%m-%d).txt pit# export PS1=\u0026#39;\\u@\\H \\D{%Y-%m-%d} \\t \\w # \u0026#39;   Print information about the booted PIT image.\nThere is nothing in the output that needs to be verified. This is run in order to ensure the information is recorded in the typescript file, in case it is needed later. For example, this information is useful to include in any bug reports or service queries for issues encountered on the PIT node.\npit# /root/bin/metalid.sh Expected output looks similar to the following:\n= PIT Identification = COPY/CUT START ======================================= VERSION=1.5.7 TIMESTAMP=20211028194247 HASH=ge4aceb1 CRAY-Site-Init build signature... Build Commit : a6c8dddf9df1a9fc7f8c4f17cb26568a8b41d433-main Build Time : 2021-12-01T16:16:41Z Go Version : go1.16.10 Git Version : a6c8dddf9df1a9fc7f8c4f17cb26568a8b41d433 Platform : linux/amd64 App. Version : 1.12.2 metal-net-scripts-0.0.2-1.noarch metal-basecamp-1.1.9-1.x86_64 metal-ipxe-2.0.10-1.noarch pit-init-1.2.12-1.noarch = PIT Identification = COPY/CUT END =========================================   Find a local disk for storing product installers.\npit# disk=\u0026#34;$(lsblk -l -o SIZE,NAME,TYPE,TRAN | grep -E \u0026#39;(sata|nvme|sas)\u0026#39; | sort -h | awk \u0026#39;{print $2}\u0026#39; | head -n 1 | tr -d \u0026#39;\\n\u0026#39;)\u0026#34; pit# echo $disk pit# parted --wipesignatures -m --align=opt --ignore-busy -s /dev/$disk -- mklabel gpt mkpart primary ext4 2048s 100% pit# mkfs.ext4 -L PITDATA \u0026#34;/dev/${disk}1\u0026#34; pit# mount -vL PITDATA The parted command may give an error similar to the following:\nError: Partition(s) 4 on /dev/sda have been written, but we have been unable to inform the kernel of the change, probably because it/they are in use. As a result, the old partition(s) will remain in use. You should reboot now before making further changes. In that case, the following steps may resolve the problem without needing to reboot. These commands remove volume groups and raid arrays that may be using the disk. These commands only need to be run if the earlier parted command failed.\npit# RAIDS=$(grep \u0026#34;${disk}[0-9]\u0026#34; /proc/mdstat | awk \u0026#39;{ print \u0026#34;/dev/\u0026#34;$1 }\u0026#39;) ; echo ${RAIDS} pit# VGS=$(echo ${RAIDS} | xargs -r pvs --noheadings -o vg_name 2\u0026gt;/dev/null) ; echo ${VGS} pit# echo ${VGS} | xargs -r -t -n 1 vgremove -f -v pit# echo ${RAIDS} | xargs -r -t -n 1 mdadm -S -f -v After running the above procedure, retry the parted command which failed. If it succeeds, resume the install from that point.\n  Set up the site-link, enabling SSH to work. You can reconnect with SSH after this step.\n Note: If your site\u0026rsquo;s network authority or network administrator has already provisioned a DHCP IPv4 address for your master node\u0026rsquo;s external NIC(s), then skip this step.\n   Set networking variables.\n If you have previously created the system_config.yaml file for this system, the values for these variables are in it. The following table lists the variables being set, their corresponding system_config.yaml fields, and a description of what they are.\n    Variable system_config.yaml Description     site_ip site-ip The IPv4 address and CIDR netmask for the node\u0026rsquo;s external interface(s)   site_gw site-gw The IPv4 gateway address for the node\u0026rsquo;s external interface(s)   site_dns site-dns The IPv4 domain name server address for the site   site_nics site-nic The actual NIC name(s) for the external site interface(s)     If the system_config.yaml file has not yet been generated for this system, the values for site_ip, site_gw, and site_dns should be provided by the site\u0026rsquo;s network administrator or network authority. The site_nics interface(s) are typically the first onboard adapter or the first copper 1 GbE PCIe adapter on the PIT node. If multiple interfaces are specified, they must be separated by spaces (for example, site_nics='p2p1 p2p2 p2p3').\n pit# site_ip=172.30.XXX.YYY/20 pit# site_gw=172.30.48.1 pit# site_dns=172.30.84.40 pit# site_nics=em1   Run the csi-setup-lan0.sh script to set up the site link.\n Note: All of the /root/bin/csi-* scripts are harmless to run without parameters; doing so will print usage statements.\n pit# /root/bin/csi-setup-lan0.sh $site_ip $site_gw $site_dns $site_nics   Verify that lan0 has an IP address and attempt to auto-set the hostname based on DNS.\nThe script appends -pit to the end of the hostname as a means to reduce the chances of confusing the PIT node with an actual, deployed NCN.\npit# ip a show lan0 pit# /root/bin/csi-set-hostname.sh # this will attempt to set the hostname based on the site\u0026#39;s own DNS records.   Add helper variables to PIT node environment.\n Important: All CSM install procedures on the PIT node assume that these variables are set and exported.\n   Set helper variables.\npit# CSM_RELEASE=csm-x.y.z pit# SYSTEM_NAME=eniac pit# PITDATA=$(lsblk -o MOUNTPOINT -nr /dev/disk/by-label/PITDATA)   Add variables to the PIT environment.\nBy adding these to the /etc/environment file of the PIT node, these variables will be automatically set and exported in shell sessions on the PIT node.\n The echo prepends a newline to ensure that the variable assignment occurs on a unique line, and not at the end of another line.\n pit# echo \u0026#34; CSM_RELEASE=${CSM_RELEASE}PITDATA=${PITDATA}CSM_PATH=${PITDATA}/${CSM_RELEASE}SYSTEM_NAME=${SYSTEM_NAME}\u0026#34; | tee -a /etc/environment     Exit the typescript, exit the console session, and log in again using SSH.\npit# exit # exit the typescript started earlier pit# exit # log out of the pit node # Close the console session by entering \u0026amp;. or ~. # Then ssh back into the PIT node external# ssh root@${SYSTEM_NAME}-ncn-m001   After reconnecting, resume the typescript (the -a appends to an existing script).\npit# script -af $(ls -tr ~/csm-install-remoteiso*.txt | head -n 1) pit# export PS1=\u0026#39;\\u@\\H \\D{%Y-%m-%d} \\t \\w # \u0026#39;   Verify that expected environment variables are set in the new login shell.\npit# echo -e \u0026#34;CSM_PATH=${CSM_PATH}\\nCSM_RELEASE=${CSM_RELEASE}\\nPITDATA=${PITDATA}\\nSYSTEM_NAME=${SYSTEM_NAME}\u0026#34;   Check hostname.\npit# hostnamectl  Note:\n The hostname should be similar to eniac-ncn-m001-pit when booted from the LiveCD, but it will be shown as pit# in the documentation command prompts from this point onward. If the hostname returned by the hostnamectl command is pit, then re-run the csi-set-hostname.sh script with the same parameters. Otherwise, an administrator should set the hostname manually with hostnamectl. In the latter case, do not confuse other administrators by using the hostname ncn-m001. Append the -pit suffix, indicating that the node is booted from the LiveCD.       Create necessary directories.\npit# mkdir -pv ${PITDATA}/{admin,configs} ${PITDATA}/prep/{admin,logs} ${PITDATA}/data/{k8s,ceph}   Relocate the typescript to the newly mounted PITDATA directory.\n  Quit the typescript session with the exit command.\n  Copy the typescript file to its new location.\npit# cp -v ~/csm-install-remoteiso.*.txt ${PITDATA}/prep/admin   Restart the typescript, appending to the previous file.\npit# script -af $(ls -tr ${PITDATA}/prep/admin/csm-install-remoteiso*.txt | head -n 1) pit# export PS1=\u0026#39;\\u@\\H \\D{%Y-%m-%d} \\t \\w # \u0026#39;     Download the CSM software release to the PIT node.\n  Set variable to URL of CSM tarball.\npit# URL=https://arti.dev.cray.com/artifactory/shasta-distribution-stable-local/csm/${CSM_RELEASE}.tar.gz   Fetch the release tarball.\npit# wget ${URL} -O ${CSM_PATH}.tar.gz   Expand the tarball on the PIT node.\n Note: Expansion of the tarball may take more than 45 minutes.\n pit# tar -C ${PITDATA} -zxvf ${CSM_PATH}.tar.gz \u0026amp;\u0026amp; ls -l ${CSM_PATH}   Copy the artifacts into place.\npit# rsync -a -P --delete ${CSM_PATH}/images/kubernetes/ ${PITDATA}/data/k8s/ \u0026amp;\u0026amp; rsync -a -P --delete ${CSM_PATH}/images/storage-ceph/ ${PITDATA}/data/ceph/    Note: The PIT ISO, Helm charts/images, and bootstrap RPMs are now available in the extracted CSM tar file.\n   Install the latest version of CSI tool.\npit# rpm -Uvh --force $(find ${CSM_PATH}/rpm/ -name \u0026#34;cray-site-init-*.x86_64.rpm\u0026#34; | sort -V | tail -1)   Install the latest documentation RPM.\nSee Check for Latest Documentation\n  Show the version of CSI installed.\npit# /root/bin/metalid.sh Expected output looks similar to the following:\n= PIT Identification = COPY/CUT START ======================================= VERSION=1.5.7 TIMESTAMP=20211028194247 HASH=ge4aceb1 CRAY-Site-Init build signature... Build Commit : a6c8dddf9df1a9fc7f8c4f17cb26568a8b41d433-main Build Time : 2021-12-01T16:16:41Z Go Version : go1.16.10 Git Version : a6c8dddf9df1a9fc7f8c4f17cb26568a8b41d433 Platform : linux/amd64 App. Version : 1.12.2 metal-net-scripts-0.0.2-1.noarch metal-basecamp-1.1.9-1.x86_64 metal-ipxe-2.0.10-1.noarch pit-init-1.2.12-1.noarch = PIT Identification = COPY/CUT END =========================================   4.1 Generate installation files Some files are needed for generating the configuration payload. See the Command Line Configuration Payload and Configuration Payload Files topics if one has not already prepared the information for this system.\n Command Line Configuration Payload Configuration Payload Files    Create the hmn_connections.json file by following the Create HMN Connections JSON procedure. Return to this section when completed.\n  Create the configuration input files if needed and copy them into the preparation directory.\nThe preparation directory is ${PITDATA}/prep.\nCopy these files into the preparation directory, or create them if this is an initial install of the system:\n application_node_config.yaml (optional - see below) cabinets.yaml (optional - see below) hmn_connections.json ncn_metadata.csv switch_metadata.csv system_config.yaml (only available after first-install generation of system files)   The optional application_node_config.yaml file may be provided for further definition of settings relating to how application nodes will appear in HSM for roles and subroles. See Create Application Node YAML.\nThe optional cabinets.yaml file allows cabinet naming and numbering as well as some VLAN overrides. See Create Cabinets YAML.\nThe system_config.yaml file is generated by the csi tool during the first install of a system, and can later be used for reinstalls of the system. For the initial install, the information in it must be provided as command line arguments to csi config init.\n After gathering the files into this working directory, move on to Subsequent Fresh-Installs (Re-Installs).\n  Proceed to the appropriate next step.\n If this is the initial install of the system, then proceed to Initial Installs (bare-metal). If this is a reinstall of the system, then proceed to Subsequent Installs (Reinstalls).    4.1.a Subsequent installs (reinstalls)   For subsequent fresh-installs (re-installs) where the system_config.yaml parameter file is available, generate the updated system configuration (see Cray Site Init Files.\n Warning: If the system_config.yaml file is unavailable, then skip this step and proceed to Initial Installs (bare-metal).\n   Check for the configuration files. The needed files should be in the preparation directory.\npit# ls -1 ${PITDATA}/prep Expected output looks similar to the following:\napplication_node_config.yaml cabinets.yaml hmn_connections.json ncn_metadata.csv switch_metadata.csv system_config.yaml   Generate the system configuration.\n Note: Ensure that you specify a reachable NTP pool or server using the ntp-pools or ntp-servers fields, respectively. Adding an unreachable server can cause clock skew as chrony tries to continually reach out to a server it can never reach.\n pit# cd ${PITDATA}/prep \u0026amp;\u0026amp; csi config init A new directory matching the system-name field in system_config.yaml will now exist in the working directory.\n Note: These warnings from csi config init for issues in hmn_connections.json can be ignored.\n  The node with the external connection (ncn-m001) will have a warning similar to this because its BMC is connected to the site and not the HMN like the other management NCNs. It can be ignored.\n\u0026#34;Couldn\u0026#39;t find switch port for NCN: x3000c0s1b0\u0026#34;   An unexpected component may have this message. If this component is an application node with an unusual prefix, it should be added to the application_node_config.yaml file. Then rerun csi config init. See the procedure to Create Application Node Config YAML\n{\u0026#34;level\u0026#34;:\u0026#34;warn\u0026#34;,\u0026#34;ts\u0026#34;:1610405168.8705149,\u0026#34;msg\u0026#34;:\u0026#34;Found unknown source prefix! If this is expected to be an Application node, please update application_node_config.yaml\u0026#34;,\u0026#34;row\u0026#34;: {\u0026#34;Source\u0026#34;:\u0026#34;gateway01\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u33\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3002\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u48\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j29\u0026#34;}}   If a cooling door is found in hmn_connections.json, there may be a message like the following. It can be safely ignored.\n{\u0026#34;level\u0026#34;:\u0026#34;warn\u0026#34;,\u0026#34;ts\u0026#34;:1612552159.2962296,\u0026#34;msg\u0026#34;:\u0026#34;Cooling door found, but xname does not yet exist for cooling doors!\u0026#34;,\u0026#34;row\u0026#34;: {\u0026#34;Source\u0026#34;:\u0026#34;x3000door-Motiv\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34; \u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u36\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j27\u0026#34;}}      Skip the next step and continue to verify and backup system_config.yaml.\n    4.1.b Initial installs (bare-metal)   For first-time/initial installs (without a system_config.yamlfile), generate the system configuration. See below for an explanation of the command line parameters and some common settings.\n  Check for the configuration files. The needed files should be in the preparation directory.\npit# ls -1 ${PITDATA}/prep Expected output looks similar to the following:\napplication_node_config.yaml cabinets.yaml hmn_connections.json ncn_metadata.csv switch_metadata.csv   Generate the system configuration.\n Notes:\n Run csi config init --help to print a full list of parameters that must be set. These will vary significantly depending on the system and site configuration. Ensure that you specify a reachable NTP pool or server using the --ntp-pools or --ntp-servers flags, respectively. Adding an unreachable server can cause clock skew as chrony tries to continually reach out to a server it can never reach.   pit# cd ${PITDATA}/prep \u0026amp;\u0026amp; csi config init \u0026lt;options\u0026gt; A new directory matching the --system-name argument will now exist in the working directory.\n Important: After generating a configuration, a visual audit of the generated files for network data should be performed.\nSpecial Notes: Certain parameters to csi config init may be hard to grasp on first-time configuration generations:\n The optional application_node_config.yaml file is used to map prefixes in hmn_connections.csv to HSM subroles. A command line option is required in order for csi to use the file. See Create Application Node YAML. The bootstrap-ncn-bmc-user and bootstrap-ncn-bmc-pass must match what is used for the BMC account and its password for the management NCNs. Set site parameters (site-domain, site-ip, site-gw, site-nic, site-dns) for the network information which connects ncn-m001 (the PIT node) to the site. The site-nic is the interface on ncn-m001 that is connected to the site network. There are other interfaces possible, but the install-ncn-bond-members are typically:  p1p1,p10p1 for HPE nodes p1p1,p1p2 for Gigabyte nodes p801p1,p801p2 for Intel nodes   If not using a cabinets-yaml file, then set the three cabinet parameters (mountain-cabinets, hill-cabinets, and river-cabinets) to the quantity of each cabinet type included in this system. The starting cabinet number for each type of cabinet (for example, starting-mountain-cabinet) has a default that can be overridden. See the csi config init --help. For systems that use non-sequential cabinet ID numbers, use the cabinets-yaml argument to include the cabinets.yaml file. This file gives the ability to explicitly specify the ID of every cabinet in the system. When specifying a cabinets.yaml file with the cabinets-yaml argument, other command line arguments related to cabinets will be ignored by csi. See Create Cabinets YAML. An override to default cabinet IPv4 subnets can be made with the hmn-mtn-cidr and nmn-mtn-cidr parameters.  Note: These warnings from csi config init for issues in hmn_connections.json can be ignored.\n  The node with the external connection (ncn-m001) will have a warning similar to this because its BMC is connected to the site and not the HMN like the other management NCNs. It can be ignored.\n\u0026#34;Couldn\u0026#39;t find switch port for NCN: x3000c0s1b0\u0026#34;   An unexpected component may have this message. If this component is an application node with an unusual prefix, it should be added to the application_node_config.yaml file. Then rerun csi config init. See the procedure to Create Application Node Config YAML\n{\u0026#34;level\u0026#34;:\u0026#34;warn\u0026#34;,\u0026#34;ts\u0026#34;:1610405168.8705149,\u0026#34;msg\u0026#34;:\u0026#34;Found unknown source prefix! If this is expected to be an Application node, please update application_node_config.yaml\u0026#34;,\u0026#34;row\u0026#34;: {\u0026#34;Source\u0026#34;:\u0026#34;gateway01\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u33\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3002\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u48\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j29\u0026#34;}}   If a cooling door is found in hmn_connections.json, there may be a message like the following. It can be safely ignored.\n{\u0026#34;level\u0026#34;:\u0026#34;warn\u0026#34;,\u0026#34;ts\u0026#34;:1612552159.2962296,\u0026#34;msg\u0026#34;:\u0026#34;Cooling door found, but xname does not yet exist for cooling doors!\u0026#34;,\u0026#34;row\u0026#34;: {\u0026#34;Source\u0026#34;:\u0026#34;x3000door-Motiv\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34; \u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u36\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j27\u0026#34;}}      Link the generated system_config.yaml file into the prep/ directory. This is needed for pit-init to find and resolve the file.\n NOTE This step is needed only for fresh installs where system_config.yaml is missing from the prep/ directory.\n pit# cd ${PITDATA}/prep \u0026amp;\u0026amp; ln ${SYSTEM_NAME}/system_config.yaml   Continue to the next step to verify and backup system_config.yaml.\n    4.2 Verify and backup system_config.yaml   Verify that the newly generated system_config.yaml matches the current version of CSI.\n  View the new system_config.yaml file and note the CSI version reported near the end of the file.\npit# cat ${PITDATA}/prep/${SYSTEM_NAME}/system_config.yaml   Note the version reported by the csi tool.\npit# csi version   The two versions should match. If they do not, determine the cause and regenerate the file.\n    Copy the new system_config.yaml file somewhere safe to facilitate re-installs.\n  Continue to the next step to Prepare Site Init.\n  4.3 Prepare Site Init  Important: Although the command prompts in this procedure are linux#, the procedure should be performed on the PIT node.\n Prepare the site-init directory by performing the Prepare Site Init procedures.\n5. Bring up the PIT services and validate PIT health   Initialize the PIT.\nThe pit-init.sh script will prepare the PIT server for deploying NCNs.\n Set the USERNAME and IPMI_PASSWORD variables to the credentials for the BMC of the PIT node.\nread -s is used in order to prevent the credentials from being displayed on the screen or recorded in the shell history.\n pit# USERNAME=root pit# read -s IPMI_PASSWORD pit# export USERNAME IPMI_PASSWORD ; /root/bin/pit-init.sh   Start and configure NTP on the LiveCD for a fallback/recovery server.\npit# /root/bin/configure-ntp.sh   Install Goss Tests and Server\npit# rpm -Uvh --force $(find ${CSM_PATH}/rpm/ -name \u0026#34;goss-servers*.rpm\u0026#34; | sort -V | tail -1) \\  $(find ${CSM_PATH}/rpm/ -name \u0026#34;csm-testing*.rpm\u0026#34; | sort -V | tail -1)   Next topic After completing this procedure, proceed to configure the management network switches.\nSee Configure Management Network Switches\n"
},
{
	"uri": "/docs-csm/en-12/install/bootstrap_livecd_usb/",
	"title": "Bootstrap Pit Node From Livecd Usb",
	"tags": [],
	"description": "",
	"content": "Bootstrap PIT Node from LiveCD USB The Pre-Install Toolkit (PIT) node needs to be bootstrapped from the LiveCD. There are two media available to bootstrap the PIT node: the RemoteISO or a bootable USB device. This procedure describes using the USB device. If not using the USB device, see Bootstrap PIT Node from LiveCD Remote ISO.\nThese steps provide a bootable USB with SSH enabled, capable of installing this CSM release.\nTopics  Download and expand the CSM release Create the bootable media Configuration payload  Generate installation files  Subsequent installs (reinstalls) Initial installs (bare-metal)   Verify and backup system_config.yaml Prepare Site Init   Prepopulate LiveCD daemons configuration and NCN artifacts Boot the LiveCD  First login   Configure the running LiveCD Next topic  1. Download and expand the CSM release Fetch the base installation CSM tarball, extract it, and install the contained CSI tool.\n  Create a working area for this procedure:\nlinux# mkdir usb linux# cd usb   Set up the initial typescript.\nlinux# SCRIPT_FILE=$(pwd)/csm-install-usb.$(date +%Y-%m-%d).txt linux# script -af ${SCRIPT_FILE} linux# export PS1=\u0026#39;\\u@\\H \\D{%Y-%m-%d} \\t \\w # \u0026#39;   Set and export helper variables.\n Important: All CSM install procedures for preparing the PIT node assume that these variables are set and exported.\n pit# export CSM_RELEASE=csm-x.y.z pit# export SYSTEM_NAME=eniac pit# export PITDATA=/mnt/pitdata   Download and expand the CSM software release.\nImportant: Ensure that you have the CSM release plus any patches or hotfixes by following the instructions in Update CSM Product Stream\nImportant: Download to a location that has sufficient space for both the tarball and the expanded tarball.\n Important: All CSM install procedures for preparing the PIT node assume that the CSM_PATH variable has been set and exported.\nNote: Expansion of the tarball may take more than 45 minutes.\n linux# tar -zxvf ${CSM_RELEASE}.tar.gz linux# ls -l ${CSM_RELEASE} linux# export CSM_PATH=$(pwd)/${CSM_RELEASE} The ISO and other files are now available in the directory from the extracted CSM tarball.\n  Install the latest version of CSI tool.\nlinux# rpm -Uvh --force $(find ${CSM_PATH}/rpm/cray/csm/ -name \u0026#34;cray-site-init-*.x86_64.rpm\u0026#34; | sort -V | tail -1)   Install the latest documentation RPM.\nSee Check for Latest Documentation\n  Show the version of CSI installed.\nlinux# csi version Expected output looks similar to the following:\nCRAY-Site-Init build signature... Build Commit : b3ed3046a460d804eb545d21a362b3a5c7d517a3-release-shasta-1.4 Build Time : 2021-02-04T21:05:32Z Go Version : go1.14.9 Git Version : b3ed3046a460d804eb545d21a362b3a5c7d517a3 Platform : linux/amd64 App. Version : 1.5.18   Configure zypper with the embedded repository from the CSM release.\nlinux# zypper ar -fG \u0026#34;${CSM_PATH}/rpm/embedded\u0026#34; \u0026#34;${CSM_RELEASE}-embedded\u0026#34;   Install Podman or Docker to support container tools required to generate sealed secrets.\nPodman RPMs are included in the embedded repository in the CSM release and may be installed in your pre-LiveCD environment using zypper as follows:\n  Install podman and podman-cni-config packages:\nlinux# zypper in --repo ${CSM_RELEASE}-embedded -y podman podman-cni-config   Alternatively, one may use rpm -Uvh to install RPMs (and their dependencies) manually from the ${CSM_PATH}/rpm/embedded directory.\nlinux# rpm -Uvh $(find ${CSM_PATH}/rpm/embedded -name \u0026#34;podman-*.x86_64.rpm\u0026#34; | sort -V | tail -1) \\  $(find ${CSM_PATH}/rpm/embedded -name \u0026#34;podman-cni-config-*.noarch.rpm\u0026#34; | sort -V | tail -1)     Install lsscsi to view attached storage devices.\nlsscsi RPMs are included in the embedded repository in the CSM release and may be installed in your pre-LiveCD environment using zypper as follows:\n  Install lsscsi package:\nlinux# zypper in --repo ${CSM_RELEASE}-embedded -y lsscsi   Alternatively, one may use rpm -Uvh to install RPMs (and their dependencies) manually from the ${CSM_PATH}/rpm/embedded directory.\nlinux# rpm -Uvh $(find ${CSM_PATH}/rpm/embedded -name \u0026#34;lsscsi-*.x86_64.rpm\u0026#34; | sort -V | tail -1)     Remove CNI configuration from prior install\nIf reinstalling the system and using ncn-m001 to prepare the USB image, then remove the prior CNI configuration.\nncn-m001# rm -rf /etc/cni/net.d/00-multus.conf /etc/cni/net.d/10-*.conflist /etc/cni/net.d/multus.d This should leave the following two files in /etc/cni/net.d.\nncn-m001# ls /etc/cni/net.d 87-podman-bridge.conflist 99-loopback.conf.sample   2. Create the bootable media Before creating the the bootable LiveCD, identify which device will be used for it.\n  Identify the USB device.\nThis example shows the USB device is /dev/sdd on the host.\nlinux# lsscsi Expected output looks similar to the following:\n[6:0:0:0] disk ATA SAMSUNG MZ7LH480 404Q /dev/sda [7:0:0:0] disk ATA SAMSUNG MZ7LH480 404Q /dev/sdb [8:0:0:0] disk ATA SAMSUNG MZ7LH480 404Q /dev/sdc [14:0:0:0] disk SanDisk Extreme SSD 1012 /dev/sdd [14:0:0:1] enclosu SanDisk SES Device 1012 - In the above example, internal disks are the ATA devices and USB drives are final two devices.\nSet a variable with your disk to avoid mistakes:\nlinux# USB=/dev/sd\u0026lt;disk_letter\u0026gt;   Format the USB device.\n  On Linux, use the CSI application to do this:\nlinux# csi pit format ${USB} ${CSM_PATH}/cray-pre-install-toolkit-*.iso 50000  Note: If the previous command fails with the following error message, it indicates that this Linux computer does not have the checkmedia RPM installed. In that case, install the RPM and run csi pit format again.\nERROR: Unable to validate ISO. Please install checkmedia  Install the missing RPMs  linux# zypper in --repo ${CSM_RELEASE}-embedded -y libmediacheck5 checkmedia linux# csi pit format ${USB} ${CSM_PATH}/cray-pre-install-toolkit-*.iso 50000    On MacOS, use the write-livecd.sh script to do this.\nThis script is contained in the CSI tool RPM. See install latest version of the CSI tool step.\nmacos# write-livecd.sh ${USB} ${CSM_PATH}/cray-pre-install-toolkit-*.iso 50000    Note: At this point, the USB device is usable in any server with a CPU with x86_64 architecture. The remaining steps help add the installation data and enable SSH on boot.\n   Mount the configuration and persistent data partitions.\nlinux# mkdir -pv /mnt/cow ${PITDATA} \u0026amp;\u0026amp; mount -vL cow /mnt/cow \u0026amp;\u0026amp; mount -vL PITDATA ${PITDATA} \u0026amp;\u0026amp; mkdir -pv ${PITDATA}/configs ${PITDATA}/prep/{admin,logs} ${PITDATA}/data/{ceph,k8s}   Copy and extract the tarball into the USB.\nlinux# cp -v ${CSM_PATH}.tar.gz ${PITDATA} \u0026amp;\u0026amp; tar -zxvf ${CSM_PATH}.tar.gz -C ${PITDATA}/   The USB device is now bootable and contains the CSM artifacts. This may be useful for internal or quick usage. Administrators seeking a Shasta installation must continue on to the configuration payload.\n3. Configuration payload The SHASTA-CFG structure and other configuration files will be prepared, then csi will generate a system-unique configuration payload. This payload will be used for the rest of the CSM installation on the USB device.\n Generate Installation Files Verify and Backup system_config.yaml Prepare Site Init  3.1 Generate installation files Some files are needed for generating the configuration payload. See these topics in Prepare Configuration Payload if the information for this system has not yet been prepared.\n Command line configuration payload Configuration payload files   Note:: The USB device is usable at this time, but without SSH enabled as well as core services. This means the USB device could be used to boot the system now, and this step can be returned to at another time.\n   At this time see Create HMN Connections JSON for instructions about creating the hmn_connections.json.\n  Create the configuration input files if needed and copy them into the preparation directory.\nThe preparation directory is ${PITDATA}/prep.\nCopy these files into the preparation directory, or create them if this is an initial install of the system:\n application_node_config.yaml (optional - see below) cabinets.yaml (optional - see below) hmn_connections.json ncn_metadata.csv switch_metadata.csv system_config.yaml (only available after first-install generation of system files)   The optional application_node_config.yaml file may be provided for further definition of settings relating to how application nodes will appear in HSM for roles and subroles. See Create Application Node YAML\nThe optional cabinets.yaml file allows cabinet naming and numbering as well as some VLAN overrides. See Create Cabinets YAML.\nThe system_config.yaml file is generated by the csi tool during the first install of a system, and can later be used for reinstalls of the system. For the initial install, the information in it must be provided as command line arguments to csi config init.\n   Proceed to the appropriate next step.\n If this is the initial install of the system, then proceed to Initial Installs (bare-metal). If this is a reinstall of the system, then proceed to Subsequent Installs (Re-Installs).    3.1.a Subsequent installs (reinstalls)   For subsequent fresh-installs (re-installs) where the system_config.yaml parameter file is available, generate the updated system configuration (see Cray Site Init Files.\n Warning: If the system_config.yaml file is unavailable, then skip this step and proceed to Initial Installs (bare-metal).\n   Check for the configuration files. The needed files should be in the preparation directory.\nlinux# ls -1 ${PITDATA}/prep Expected output looks similar to the following:\napplication_node_config.yaml cabinets.yaml hmn_connections.json ncn_metadata.csv switch_metadata.csv system_config.yaml   Generate the system configuration.\n Note: Ensure that you specify a reachable NTP pool or server using the ntp-pools or ntp-servers fields, respectively. Adding an unreachable server can cause clock skew as chrony tries to continually reach out to a server it can never reach.\n linux# cd ${PITDATA}/prep \u0026amp;\u0026amp; csi config init A new directory matching the system-name field in system_config.yaml will now exist in the working directory.\n Note: These warnings from csi config init for issues in hmn_connections.json can be ignored.\n  The node with the external connection (ncn-m001) will have a warning similar to this because its BMC is connected to the site and not the HMN like the other management NCNs. It can be ignored.\n\u0026#34;Couldn\u0026#39;t find switch port for NCN: x3000c0s1b0\u0026#34;   An unexpected component may have this message. If this component is an application node with an unusual prefix, it should be added to the application_node_config.yaml file. Then rerun csi config init. See the procedure to Create Application Node Config YAML.\n{\u0026#34;level\u0026#34;:\u0026#34;warn\u0026#34;,\u0026#34;ts\u0026#34;:1610405168.8705149,\u0026#34;msg\u0026#34;:\u0026#34;Found unknown source prefix! If this is expected to be an Application node, please update application_node_config.yaml\u0026#34;,\u0026#34;row\u0026#34;: {\u0026#34;Source\u0026#34;:\u0026#34;gateway01\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u33\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3002\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u48\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j29\u0026#34;}}   If a cooling door is found in hmn_connections.json, there may be a message like the following. It can be safely ignored.\n{\u0026#34;level\u0026#34;:\u0026#34;warn\u0026#34;,\u0026#34;ts\u0026#34;:1612552159.2962296,\u0026#34;msg\u0026#34;:\u0026#34;Cooling door found, but xname does not yet exist for cooling doors!\u0026#34;,\u0026#34;row\u0026#34;: {\u0026#34;Source\u0026#34;:\u0026#34;x3000door-Motiv\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34; \u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u36\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j27\u0026#34;}}      Skip the next step and continue to verify and backup system_config.yaml.\n    3.1.b Initial installs (bare-metal)   For first-time/initial installs (without a system_config.yamlfile), generate the system configuration. See below for an explanation of the command line parameters and some common settings.\n  Check for the configuration files. The needed files should be in the preparation directory.\nlinux# ls -1 ${PITDATA}/prep Expected output looks similar to the following:\napplication_node_config.yaml cabinets.yaml hmn_connections.json ncn_metadata.csv switch_metadata.csv   Generate the system configuration.\n Notes:\n Run csi config init --help to print a full list of parameters that must be set. These will vary significantly depending on the system and site configuration. Ensure that you specify a reachable NTP pool or server using the --ntp-pools or --ntp-servers flags, respectively. Adding an unreachable server can cause clock skew as chrony tries to continually reach out to a server it can never reach.   linux# cd ${PITDATA}/prep \u0026amp;\u0026amp; csi config init \u0026lt;options\u0026gt; A new directory matching the --system-name argument will now exist in the working directory.\n Important: After generating a configuration, a visual audit of the generated files for network data should be performed.\nSpecial Notes: Certain parameters to csi config init may be hard to grasp on first-time configuration generations:\n The optional application_node_config.yaml file is used to map prefixes in hmn_connections.csv to HSM subroles. A command line option is required in order for csi to use the file. See Create Application Node YAML. The bootstrap-ncn-bmc-user and bootstrap-ncn-bmc-pass must match what is used for the BMC account and its password for the management NCNs. Set site parameters (site-domain, site-ip, site-gw, site-nic, site-dns) for the network information which connects ncn-m001 (the PIT node) to the site. The site-nic is the interface on ncn-m001 that is connected to the site network. There are other interfaces possible, but the install-ncn-bond-members are typically:  p1p1,p10p1 for HPE nodes p1p1,p1p2 for Gigabyte nodes p801p1,p801p2 for Intel nodes   If not using a cabinets-yaml file, then set the three cabinet parameters (mountain-cabinets, hill-cabinets, and river-cabinets) to the quantity of each cabinet type included in this system. The starting cabinet number for each type of cabinet (for example, starting-mountain-cabinet) has a default that can be overridden. See the csi config init --help. For systems that use non-sequential cabinet ID numbers, use the cabinets-yaml argument to include the cabinets.yaml file. This file gives the ability to explicitly specify the ID of every cabinet in the system. When specifying a cabinets.yaml file with the cabinets-yaml argument, other command line arguments related to cabinets will be ignored by csi. See Create Cabinets YAML. An override to default cabinet IPv4 subnets can be made with the hmn-mtn-cidr and nmn-mtn-cidr parameters.  Note: These warnings from csi config init for issues in hmn_connections.json can be ignored.\n  The node with the external connection (ncn-m001) will have a warning similar to this because its BMC is connected to the site and not the HMN like the other management NCNs. It can be ignored.\n\u0026#34;Couldn\u0026#39;t find switch port for NCN: x3000c0s1b0\u0026#34;   An unexpected component may have this message. If this component is an application node with an unusual prefix, it should be added to the application_node_config.yaml file. Then rerun csi config init. See the procedure to Create Application Node Config YAML.\n{\u0026#34;level\u0026#34;:\u0026#34;warn\u0026#34;,\u0026#34;ts\u0026#34;:1610405168.8705149,\u0026#34;msg\u0026#34;:\u0026#34;Found unknown source prefix! If this is expected to be an Application node, please update application_node_config.yaml\u0026#34;,\u0026#34;row\u0026#34;: {\u0026#34;Source\u0026#34;:\u0026#34;gateway01\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u33\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3002\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u48\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j29\u0026#34;}}   If a cooling door is found in hmn_connections.json, there may be a message like the following. It can be safely ignored.\n{\u0026#34;level\u0026#34;:\u0026#34;warn\u0026#34;,\u0026#34;ts\u0026#34;:1612552159.2962296,\u0026#34;msg\u0026#34;:\u0026#34;Cooling door found, but xname does not yet exist for cooling doors!\u0026#34;,\u0026#34;row\u0026#34;: {\u0026#34;Source\u0026#34;:\u0026#34;x3000door-Motiv\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34; \u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u36\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j27\u0026#34;}}      Link the generated system_config.yaml file into the prep/ directory. This is needed for pit-init to find and resolve the file.\n NOTE This step is needed only for fresh installs where system_config.yaml is missing from the prep/ directory.\n pit# cd ${PITDATA}/prep \u0026amp;\u0026amp; ln ${SYSTEM_NAME}/system_config.yaml   Continue to the next step to verify and backup system_config.yaml.\n    3.2 Verify and backup system_config.yaml   Verify that the newly generated system_config.yaml matches the current version of CSI.\n  View the new system_config.yaml file and note the CSI version reported near the end of the file.\nlinux# cat ${PITDATA}/prep/${SYSTEM_NAME}/system_config.yaml   Note the version reported by the csi tool.\nlinux# csi version   The two versions should match. If they do not, determine the cause and regenerate the file.\n    Copy the new system_config.yaml file somewhere safe to facilitate re-installs.\n  Continue to the next step to Prepare Site Init.\n  3.3 Prepare Site Init  Note:: It is assumed at this point that $PITDATA (that is, /mnt/pitdata) is still mounted on the Linux system. This is important because the following procedure depends on that mount existing.\n   Install Git if not already installed (recommended).\nAlthough not strictly required, the procedures for setting up the site-init directory recommend persisting site-init files in a Git repository.\n  Prepare the site-init directory.\nPerform the Prepare Site Init procedures.\n  4. Prepopulate LiveCD daemons configuration and NCN artifacts Now that the configuration is generated, the LiveCD must be populated with the generated files.\n  Use CSI to populate the LiveCD with networking files so SSH will work on the first boot.\nlinux# cd ${PITDATA}/prep \u0026amp;\u0026amp; csi pit populate cow /mnt/cow/ ${SYSTEM_NAME}/ Expected output looks similar to the following:\nconfig------------------------\u0026gt; /mnt/cow/rw/etc/sysconfig/network/config...OK ifcfg-bond0-------------------\u0026gt; /mnt/cow/rw/etc/sysconfig/network/ifcfg-bond0...OK ifcfg-lan0--------------------\u0026gt; /mnt/cow/rw/etc/sysconfig/network/ifcfg-lan0...OK ifcfg-bond0.nmn0--------------\u0026gt; /mnt/cow/rw/etc/sysconfig/network/ifcfg-bond0.nmn0...OK ifcfg-bond0.hmn0--------------\u0026gt; /mnt/cow/rw/etc/sysconfig/network/ifcfg-bond0.hmn0...OK ifcfg-bond0.can0--------------\u0026gt; /mnt/cow/rw/etc/sysconfig/network/ifcfg-bond0.can0...OK ifcfg-bond0.cmn0--------------\u0026gt; /mnt/cow/rw/etc/sysconfig/network/ifcfg-bond0.cmn0...OK ifroute-lan0------------------\u0026gt; /mnt/cow/rw/etc/sysconfig/network/ifroute-lan0...OK ifroute-bond0.nmn0------------\u0026gt; /mnt/cow/rw/etc/sysconfig/network/ifroute-bond0.nmn0...OK CAN.conf----------------------\u0026gt; /mnt/cow/rw/etc/dnsmasq.d/CAN.conf...OK CMN.conf----------------------\u0026gt; /mnt/cow/rw/etc/dnsmasq.d/CMN.conf...OK HMN.conf----------------------\u0026gt; /mnt/cow/rw/etc/dnsmasq.d/HMN.conf...OK NMN.conf----------------------\u0026gt; /mnt/cow/rw/etc/dnsmasq.d/NMN.conf...OK MTL.conf----------------------\u0026gt; /mnt/cow/rw/etc/dnsmasq.d/MTL.conf...OK statics.conf------------------\u0026gt; /mnt/cow/rw/etc/dnsmasq.d/statics.conf...OK conman.conf-------------------\u0026gt; /mnt/cow/rw/etc/conman.conf...OK   Set the hostname and print it into the hostname file.\n Note: Do not confuse other administrators by naming the LiveCD ncn-m001. Append the -pit suffix, indicating that the node is booted from the LiveCD.\n linux# echo \u0026#34;${SYSTEM_NAME}-ncn-m001-pit\u0026#34; | tee /mnt/cow/rw/etc/hostname   Add some helpful variables to the PIT environment.\nBy adding these to the /etc/environment file of the PIT image, these variables will be automatically set and exported in shell sessions on the booted PIT node.\n Important: All CSM install procedures on the booted PIT node assume that these variables are set and exported.\nThe echo prepends a newline to ensure that the variable assignment occurs on a unique line, and not at the end of another line.\n linux# echo \u0026#34; CSM_RELEASE=${CSM_RELEASE}SYSTEM_NAME=${SYSTEM_NAME}\u0026#34; | tee -a /mnt/cow/rw/etc/environment   Unmount the overlay.\nlinux# umount -v /mnt/cow   Copy the NCN artifacts.\n  Copy Kubernetes node artifacts:\nlinux# csi pit populate pitdata \u0026#34;${CSM_PATH}/images/kubernetes/\u0026#34; ${PITDATA}/data/k8s/ -kiK Expected output looks similar to the following:\n5.3.18-24.37-default-0.0.6.kernel-----------------\u0026gt; /mnt/pitdata/data/k8s/...OK initrd.img-0.0.6.xz-------------------------------\u0026gt; /mnt/pitdata/data/k8s/...OK kubernetes-0.0.6.squashfs-------------------------\u0026gt; /mnt/pitdata/data/k8s/...OK   Copy Ceph/storage node artifacts:\nlinux# csi pit populate pitdata \u0026#34;${CSM_PATH}/images/storage-ceph/\u0026#34; ${PITDATA}/data/ceph/ -kiC Expected output looks similar to the following:\n5.3.18-24.37-default-0.0.5.kernel-----------------\u0026gt; /mnt/pitdata/data/ceph/...OK initrd.img-0.0.5.xz-------------------------------\u0026gt; /mnt/pitdata/data/ceph/...OK storage-ceph-0.0.5.squashfs-----------------------\u0026gt; /mnt/pitdata/data/ceph/...OK     Quit the typescript session with the exit command and copy the typescript file to the data partition on the USB drive.\nlinux# exit linux# cp -v ${SCRIPT_FILE} /mnt/pitdata/prep/admin   Unmount the data partition:\nlinux# cd ~ \u0026amp;\u0026amp; umount -v /mnt/pitdata   Move the USB device to the system to be installed, if needed.\nIf the USB device was created somewhere other than ncn-m001 of the system to be installed, move it there from its current location.\n  Proceed to the next step to boot into the LiveCD image.\n  5. Boot the LiveCD Some systems will boot the USB device automatically if no other OS exists (bare-metal). Otherwise the administrator may need to use the BIOS Boot Selection menu to choose the USB device.\nIf an administrator has the node booted with an operating system which will next be rebooting into the LiveCD, then use efibootmgr to set the boot order to be the USB device. See the set boot order page for more information about how to set the boot order to have the USB device first.\n Note: UEFI booting must be enabled in order for the system to find the USB device\u0026rsquo;s EFI bootloader.\n   Start a typescript on an external system.\nThis will record this section of activities done on the console of ncn-m001 using IPMI.\nexternal# script -a boot.livecd.$(date +%Y-%m-%d).txt external# export PS1=\u0026#39;\\u@\\H \\D{%Y-%m-%d} \\t \\w # \u0026#39;   Confirm that the IPMI credentials work for the BMC by checking the power status.\nSet the BMC variable to the hostname or IP address of the BMC of the PIT node.\n read -s is used in order to prevent the credentials from being displayed on the screen or recorded in the shell history.\n external# BMC=eniac-ncn-m001-mgmt external# read -s IPMI_PASSWORD external# export IPMI_PASSWORD ; ipmitool -I lanplus -U root -E -H ${BMC} chassis power status   Connect to the IPMI console.\nexternal# ipmitool -I lanplus -U root -E -H ${BMC} sol activate   Reboot ncn-m001.\nncn-m001# reboot   Watch the shutdown and boot from the ipmitool console session.\n An integrity check runs before Linux starts by default; it can be skipped by selecting OK in its prompt.\n   5.1 First login On first log in (over SSH or at local console), the LiveCD will prompt the administrator to change the password.\n  The initial password is empty; enter the username of root and press return twice.\npit login: root Expected output looks similar to the following:\nPassword: \u0026lt;-------just press Enter here for a blank password You are required to change your password immediately (administrator enforced) Changing password for root. Current password: \u0026lt;------- press Enter here, again, for a blank password New password: \u0026lt;------- type new password Retype new password:\u0026lt;------- retype new password Welcome to the CRAY Pre-Install Toolkit (LiveOS)  Note: If this password ever becomes lost or forgotten, one may reset it by mounting the USB device on another computer. See Reset root Password on LiveCD for information on clearing the password.\n   Disconnect from IPMI console.\nOnce the network is up so that SSH to the node works, disconnect from the IPMI console.\nYou can disconnect from the IPMI console by entering ~.; That is, the tilde character followed by a period character.\n  Exit the typescript started on the external system and use scp to transfer it to the PIT node.\n Set PIT_NODE variable to the site IP address or hostname of the PIT node.\n external# exit external# PIT_NODE=eniac-ncn-m001 external# scp boot.livecd.*.txt root@${PIT_NODE}:/root   Log in to the PIT node as root using ssh.\nexternal# ssh root@${PIT_NODE}   Mount the data partition.\nThe data partition is set to fsopt=noauto to facilitate LiveCDs over virtual-ISO mount. Therefore, USB installations need to mount this manually by running the following command.\n Note: When creating the USB PIT image, this was mounted over /mnt/pitdata. Now that the USB PIT is booted, it will mount over /var/www/ephemeral. The FSLabel PITDATA is already in /etc/fstab, so the path is omitted in the following mount command.\n pit# mount -vL PITDATA   Set and export new environment variables.\nThe commands below save them to /etc/environment as well, which makes them available in all new shell sessions on the PIT node.\npit# export PITDATA=$(lsblk -o MOUNTPOINT -nr /dev/disk/by-label/PITDATA) pit# export CSM_PATH=${PITDATA}/${CSM_RELEASE} pit# echo \u0026#34; PITDATA=${PITDATA}CSM_PATH=${CSM_PATH}\u0026#34; | tee -a /etc/environment   Start a typescript to record this section of activities done on ncn-m001 while booted from the LiveCD.\npit# script -af /var/www/ephemeral/prep/admin/booted-csm-livecd.$(date +%Y-%m-%d).txt pit# export PS1=\u0026#39;\\u@\\H \\D{%Y-%m-%d} \\t \\w # \u0026#39;   Verify that expected environment variables are set in the new login shell.\nThese were written into /etc/environment on the USB PIT image earlier in this procedure, before it was booted.\npit# echo -e \u0026#34;CSM_PATH=${CSM_PATH}\\nCSM_RELEASE=${CSM_RELEASE}\\nPITDATA=${PITDATA}\\nSYSTEM_NAME=${SYSTEM_NAME}\u0026#34;   Copy the typescript made on the external system into the PITDATA mount.\npit# cp -v /root/boot.livecd.*.txt ${PITDATA}/prep/admin   Check the hostname.\npit# hostnamectl  Note:\n The hostname should be similar to eniac-ncn-m001-pit when booted from the LiveCD, but it will be shown as pit# in the documentation command prompts from this point onward. If the hostname returned by the hostnamectl command is pit, then set the hostname manually with hostnamectl. In that case, do not confuse other administrators by using the hostname ncn-m001. Append the -pit suffix, indicating that the node is booted from the LiveCD.     Install the latest documentation RPM.\nSee Check for Latest Documentation\n  Print information about the booted PIT image.\nThere is nothing in the output that needs to be verified. This is run in order to ensure the information is recorded in the typescript file, in case it is needed later. For example, this information is useful to include in any bug reports or service queries for issues encountered on the PIT node.\npit# /root/bin/metalid.sh Expected output looks similar to the following:\n= PIT Identification = COPY/CUT START ======================================= VERSION=1.5.7 TIMESTAMP=20211028194247 HASH=ge4aceb1 CRAY-Site-Init build signature... Build Commit : a6c8dddf9df1a9fc7f8c4f17cb26568a8b41d433-main Build Time : 2021-12-01T16:16:41Z Go Version : go1.16.10 Git Version : a6c8dddf9df1a9fc7f8c4f17cb26568a8b41d433 Platform : linux/amd64 App. Version : 1.12.2 metal-net-scripts-0.0.2-1.noarch metal-basecamp-1.1.9-1.x86_64 metal-ipxe-2.0.10-1.noarch pit-init-1.2.12-1.noarch = PIT Identification = COPY/CUT END =========================================   6. Configure the running LiveCD   Set and export BMC credential variables.\n read -s is used in order to prevent the credentials from being displayed on the screen or recorded in the shell history.\n pit# read -s IPMI_PASSWORD pit# USERNAME=root pit# export IPMI_PASSWORD USERNAME   Initialize the PIT.\nThe pit-init.sh script will prepare the PIT server for deploying NCNs.\npit# /root/bin/pit-init.sh   Start and configure NTP on the LiveCD for a fallback/recovery server.\npit# /root/bin/configure-ntp.sh   Install Goss Tests and Server\nThe following assumes the CSM_PATH environment variable is set to the absolute path of the unpacked CSM release.\npit# rpm -Uvh --force $(find ${CSM_PATH}/rpm/ -name \u0026#34;goss-servers*.rpm\u0026#34; | sort -V | tail -1) \\  $(find ${CSM_PATH}/rpm/ -name \u0026#34;csm-testing*.rpm\u0026#34; | sort -V | tail -1)   Next topic After completing this procedure, proceed to configure the management network switches.\nSee Configure Management Network Switches.\n"
},
{
	"uri": "/docs-csm/en-12/install/cable_management_network_servers/",
	"title": "Cable Management Network Servers",
	"tags": [],
	"description": "",
	"content": "Cable Management Network Servers This topic describes nodes in the air-cooled cabinet with diagrams and pictures showing where to find the ports on the nodes and how to cable the nodes to the management network switches.\n HPE Hardware  HPE DL385 HPE DL325 HPE Worker Node Cabling HPE Master Node Cabling HPE Storage Node Cabling HPE UAN Cabling HPE Apollo 6500 XL645D HPE Apollo 6500 XL675D   Gigabyte/Intel Hardware  Worker Node Cabling Master Node Cabling Storage Node Cabling UAN Cabling    HPE Hardware HPE DL385  The OCP Slot is noted (number 7) in the image above.  This is the bottom middle slot to the left of the VGA port. Ports are numbered left-to-right: the far left port is port 1.   The PCIe Slot 1 is on the top left side of the image above (under number 1).  Ports are numbered left-to-right: the far left port is port 1.    HPE DL325  The OCP Slot is noted (number 9) in the image above.  This is the slot on the bottom left of the node. Ports are numbered left-to-right: the far left port is port 1.   The PCIE Slot 1 is on the top left side of the image above (under number 1).  Ports are numbered left-to-right: the far left port is port 1.    HPE Worker Node Cabling    Device Port Linux Device Destination Name VLAN LAG     OCP 1 mgmt0 primary N/A HMN, NMN, CAN MLAG-LACP   OCP 2 mgmt1 secondary N/A HMN, NMN, CAN MLAG-LACP   ILO 1 None HMN leaf-bmc N/A HMN N/A    NOTES:  A single OCP card is the default worker configuration.   SHCD Example    hostname Source Destination Destination     wn01 x3000u04ocp-j1 x3000u12-j7 sw-25g01   wn01 x3000u04ocp-j2 x3000u13-j7 sw-25g02    HPE Master Node Cabling Dual Card Installations The table below describes the cabling of dual card configurations. Also read notes in this section to see other possible customer-based configurations.\n   Device Port Linux Device Destination Name VLAN LAG     OCP 1 mgmt0 primary N/A HMN, NMN, CAN MLAG-LACP   OCP 2 sun0 N/A N/A N/A N/A   PCIE-SLOT1 1 mgmt1 secondary N/A HMN, NMN, CAN MLAG-LACP   PCIE-SLOT1 2 sun1 N/A N/A N/A N/A   ILO 1 None HMN leaf-bmc N/A HMN N/A    NOTES:  REQUIRED: Master 001 (ncn-m001) is required to have a site connection on OCP Port 2 for installation and maintenance. RECOMMENDED: Masters 002 and 003 may optionally have a site connection on OCP Port 2 for emergency system access. REQUIRED: Master 001 (ncn-m001) is required to have its BMC/iLO connected to the site.   SHCD Example    hostname Source Destination Destination     mn01 x3000u01ocp-j1 x3000u12-j1 sw-25g01   mn01 x3000u01s1-j1 x3000u13-j1 sw-25g02    NOTE: Master 1 (ncn-m001) is required to have a site connection for installation and non-CAN system access. This can have several configurations depending on customer requirements/equipment:\n Dual 10/25Gb card configurations as described in the table above should use PCIe Slot 1, Port 2 as a site connection if the customer supports 10/25Gb. If the customer does not support 10/25Gb speeds (or connection type) and requires RJ45 copper or 1Gb, then a new and separate card will be installed on ncn-m001 and that card will provide site connectivity. Another possibility (non-HPE hardware mainly) is that a built-in 1Gb port will be used if available (similar to Shasta v1.3 PoR on Gigabyte hardware).  HPE Storage Node Cabling    Device Port Linux Device Destination Name VLAN LAG     OCP 1 mgmt0 primary N/A HMN, NMN, CAN MLAG-LACP   OCP 2 sun0 primary N/A SUN MLAG-LACP   PCIE-SLOT1 1 mgmt1 secondary N/A HMN, NMN, CAN MLAG-LACP   PCIE-SLOT1 2 sun1 secondary N/A SUN MLAG-LACP   ILO 1 None HMN leaf-bmc N/A HMN N/A    NOTES:  All ports are cabled. OCP Port 1 and PCIE Slot 1 Port 1 (first ports) are bonded for the NMN, HMN and CAN. OCP Port 2 and PCIE Slot 1 Port 2 (second ports) cabled but not configured in this release.   SHCD Example    hostname Source Destination Destination     sn01 x3000u17s1-j2 x3000u34-j14 sw-25g02   sn01 x3000u17s1-j1 x3000u34-j8 sw-25g02   sn01 x3000u17ocp-j2 x3000u33-j14 sw-25g01   sn01 x3000u17ocp-j1 x3000u33-j8 sw-25g01   The OCP ports go to the First switch and the PCIe ports go to the Second switch. OCP port 1 and PCIe port 1 form a Bond. OCP port 2 and PCIe port 2 form a Bond.             For systems that include 4 leaf switches the cabling will look like the following.\nSHCD Example with four leaf switches.    hostname Source Destination Destination     sn01 x3000u10ocp-j2 x3000u36-j5 sw-25g04   sn01 x3000u10s1-j2 x3000u35-j5 sw-25g03   sn01 x3000u10ocp-j1 x3000u34-j6 sw-25g02   sn01 x3000u10s1-j1 x3000u33-j6 sw-25g01    HPE UAN Cabling    Device Port Linux Device Destination Name VLAN LAG     OCP 1 mgmt0 primary N/A NMN N/A   OCP 2 mgmt1 primary N/A CAN MLAG-LACP   PCIE-SLOT1 1 mgmt2 secondary N/A N/A N/A   PCIE-SLOT1 2 mgmt3 secondary N/A CAN MLAG-LACP   ILO 1 None HMN leaf-bmc N/A HMN N/A    NOTES:  All ports are cabled. The OCP Port 1 connects to the NMN in a non-bonded configuration. The PCIE Slot 1 Port 1 is cabled but not configured/used in this release. OCP Port 2 and PCIE Slot 1 Port 2 (second ports) are bonded for the CAN.   SHCD Example    hostname Source Destination Destination     uan01 x3000u17s1-j2 x3000u34-j14 sw-25g02   uan01 x3000u17s1-j1 x3000u34-j8 sw-25g02   uan01 x3000u17ocp-j2 x3000u33-j14 sw-25g01   uan01 x3000u17ocp-j1 x3000u33-j8 sw-25g01    HPE Apollo 6500 XL645D  The XL645D has two servers in the same chassis. The iLO BMC RJ45 port is a shared network port. Both iLO/BMC traffic and compute node traffic could transit this link.  Isolating this port to iLO/BMC only traffic is not possible within firmware configuration alone. iLO configuration settings must be paired with management switch port settings to ensure only BMC traffic exits the port. The iLO firmware must be set to tag traffic to VLAN 4. The switch port must be set to trunk VLAN 4.   Ports on the OCP card are numbered left-to-right: the far left port is port 1.  Apollo XL645D Cabling (per server)    Server Port Management Network Port Speed Use / Configuration     OCP port 1 1G leaf-bmc switch 1Gb Management Network NMN   OCP port 2 None None None   OCP port 3 None None None   OCP port 4 None None None   iLO 1G leaf-bmc switch 1Gb Management Network HMN    HPE Apollo 6500 XL675D  Two PCIe slots (chassis slots 21 and 22) are highlighted. One will contain the 1Gb management network card and one will be for the HSN. The iLO BMC RJ45 port is a shared network port. Both iLO/BMC traffic and compute node traffic could transit this link.  Isolating this port to iLO/BMC only traffic is not possible within firmware configuration alone. iLO configuration settings must be paired with management switch port settings to ensure only BMC traffic exits the port. The iLO firmware must be set to tag traffic to VLAN 4. The switch port must be set to trunk VLAN 4.   Ports on the PCIe card are numbered left-to-right: the far left port is port 1.  Apollo XL675D Cabling    Server Port Management Network Port Speed Use / Configuration     PCIe port 1 1G leaf-bmc switch 1Gb Management Network NMN   PCIe port 2 None None None   PCIe port 3 None None None   PCIe port 4 None None None   iLO 1G leaf-bmc switch 1Gb Management Network HMN    Gigabyte/Intel Hardware Worker Node Cabling    Server Port Management Network Port Speed Use / Configuration     PCIe Slot 1 port 1 spine or leaf pair, switch 1/2 40Gb Management Network NMN/HMN/CAN   PCIe Slot 1 port 2 spine or leaf pair, switch 2/2 40Gb Management Network NMN/HMN/CAN    SHCD Example    hostname Source Destination Destination     wn01 x3000u07s1-j1 x3000u24L-j4 sw-smn02   wn01 x3000u07s1-j2 x3000u24R-j4 sw-smn03    NOTE: Cabling of ncn-w001 has changed in Shasta v1.4. Please see ncn-m001 note below.\nMaster Node Cabling    Server Port Management Network Port Speed Use / Configuration     PCIe Slot 1 port 1 spine or leaf pair, switch 1/2 40Gb Management Network NMN/HMN/CAN   PCIe Slot 1 port 2 spine or leaf pair, switch 2/2 40Gb Management Network NMN/HMN/CAN   LAN0 port 1 NONE (See note below for ncn-m001) NONE Site (See note below for ncn-m001)    SHCD Example    hostname Source Destination Destination     mn01 x3000u01s1-j1 x3000u24L-j1 sw-smn02   mn01 x3000u01s1-j2 x3000u24R-j1 sw-smn03    NOTE: Master 1 (ncn-m001) is required to have a site connection for installation and non-CAN system access. In Shasta versions \u0026lt;=1.3 this connection was on ncn-w001. This can have several configurations depending on customer requirements/equipment:\n The default configuration for Gigabyte systems uses the built-in 1Gb lan0 port for site connection on ncn-m001. If the customer requires connectivity greater than 1Gb (or a different connection type), then a new and separate card will be installed on ncn-m001 and that card will provide site connectivity.  Storage Node Cabling    Server Port Management Network Port Speed Use / Configuration     PCIe Slot 1 port 1 spine or leaf pair, switch 1/2 40Gb Management Network NMN/HMN/CAN   PCIe Slot 1 port 2 spine or leaf pair, switch 2/2 40Gb Management Network NMN/HMN/CAN    SHCD Example    hostname Source Destination Destination     sn01 x3000u13s1-j1 x3000u24L-j7 sw-smn02   sn01 x3000u13s1-j2 x3000u24R-j7 sw-smn03    UAN Cabling    Server Port Management Network Port Speed Use / Configuration     LAN0 port 1 leaf-bmc (see note) 1Gb Management Network NMN   PCIe Slot 1 port 1 spine or leaf pair, switch 1/2 40Gb Management Network CAN bond   PCIe Slot 1 port 2 spine or leaf pair, switch 2/2 40Gb Management Network CAN bond    SHCD Example    hostname Source Destination Destination     uan01 x3000u27s1-j1 x3000u24L-j10 sw-smn02   uan01 x3000u27s1-j2 x3000u24R-j10 sw-smn03    NOTE that there are a couple configurations possible for LAN0:\n Existing Gigabyte systems on Dell and Mellanox network hardware will use the (existing) Dell leaf-bmc port. Any Gigabyte system on Aruba network hardware will use an Aruba 6300 (for the 1Gb port). Optionally a 10/25Gb card could be added in an Aruba hardware system to match the HPE UANs.  "
},
{
	"uri": "/docs-csm/en-12/install/ceph_csi_troubleshooting/",
	"title": "Ceph Csi Troubleshooting",
	"tags": [],
	"description": "",
	"content": "Ceph CSI Troubleshooting If there has been a failure to initialize all Ceph CSI components on ncn-s001, then the storage node cloud-init may need to be rerun.\nTopics:  Verify Ceph CSI Rerun Storage Node cloud-init  Details 1. Verify Ceph CSI Verify that the ceph-csi requirements are in place.\n  Log in to ncn-s001 and run the following command.\nncn-s001# ceph -s If it returns a connection error, then assume Ceph is not installed. See Rerun Storage Node cloud-init.\n  Verify all post-Ceph-install tasks have run.\nLog in to ncn-s001 and check /etc/cray/ceph for completed task files ceph_k8s_initialized and csi_initialized.\nncn-s001# ls /etc/cray/ceph/ ceph_k8s_initialized csi_initialized installed kubernetes_nodes.txt tuned Check your results against this example.\nIf any components are missing, see Rerun Storage Node cloud-init.\n  Check to see if ceph-csi prerequisites have been created in Kubernetes.\nThese commands can be run from any master node, any worker node, or ncn-s001.\nncn# kubectl get cm NAME DATA AGE ceph-csi-config 1 3h50m cephfs-csi-sc 1 3h50m kube-csi-sc 1 3h50m sma-csi-sc 1 3h50m sts-rados-config 1 4h ncn# kubectl get secrets | grep csi csi-cephfs-secret Opaque 4 3h51m csi-kube-secret Opaque 2 3h51m csi-sma-secret Opaque 2 3h51m Check your results against the above examples.\nIf any components are missing, see Rerun Storage Node cloud-init.\n  1. Rerun Storage Node cloud-init This procedure will restart the storage node cloud-init process to prepare Ceph for use by the utility storage nodes.\n  Run the following on ncn-s001:\nncn-s001# ls /etc/cray/ceph If any files are there they will represent completed stages.\n  If you have a running cluster, edit storage-ceph-cloudinit.sh on ncn-s001:\nncn-s001# vi /srv/cray/scripts/common/storage-ceph-cloudinit.sh Comment out this section:\n#if [ -f \u0026#34;$ceph_installed_file\u0026#34; ]; then # echo \u0026#34;This ceph cluster has been initialized\u0026#34; #else # echo \u0026#34;Installing ceph\u0026#34; # init # mark_initialized $ceph_installed_file #fi   Run the storage-ceph-cloudinit.sh script on ncn-s001:\nncn-s001# /srv/cray/scripts/common/storage-ceph-cloudinit.sh Configuring node auditing software Using generic auditing configuration This ceph cluster has been initialized This ceph cluster has already been tuned This ceph radosgw config and initial k8s integration already complete ceph-csi configuration has been already been completed  If your output is like above, then that means that all the steps ran.  You can also locate the files in /etc/cray/ceph that are created as each step completes.   If the script failed, then examine the output for indications of what may be causing the problem.    "
},
{
	"uri": "/docs-csm/en-12/install/clear_gigabyte_cmos/",
	"title": "Clear Gigabyte Cmos",
	"tags": [],
	"description": "",
	"content": "Clear Gigabyte CMOS Because of a bug in the Gigabyte firmware, the Shasta 1.5 install may negatively impact Gigabyte motherboards when attempting to boot using bonded Mellanox network cards. The result is a board that is unusable until a CMOS clear is physically done via a jumper on the board itself.\nA patched firmware release (newer than C20 BIOS) is expected to be available for a future release of Shasta. It is recommended that Gigabyte users wait for this new firmware before attempting an installation of Shasta 1.5. The procedure to recover the boards is included below.\n All firmware can be found with HFP package provided with the Shasta release.\n Clear BIOS settings by jumper  Pull the power cables or blade server from the chassis, and open the system top cover. Move the Clear CMOS Jumper to 2-3, and wait 2 to 3 seconds. Move the Clear CMOS Jumper to 1-2.  Motherboard MZ62-HD0-00/-YF for Gigabyte H262 chassis Motherboard MZ32-AR0-00/-YF for Gigabyte R272 chassis Motherboard MZ92-FS0-00/-YF for Gigabyte R282 chassis "
},
{
	"uri": "/docs-csm/en-12/install/collect_mac_addresses_for_ncns/",
	"title": "Collect Mac Addresses For NCNs",
	"tags": [],
	"description": "",
	"content": "Collect MAC Addresses for NCNs Now that the PIT node has been booted with the LiveCD and the management network switches have been configured, the actual MAC addresses for the management nodes can be collected. This process will include repetition of some of the steps done up to this point because csi config init will need to be run with the proper MAC addresses and some services will need to be restarted.\nNote: If an install or reinstall of the CSM software release is being done on this system and the ncn_metadata.csv file already has valid MAC addresses for both BMC and node interfaces before csi config init was run, then skip this topic and move to Deploy Management Nodes.\nTopics  Collect BMC MAC addresses Restart services after BMC MAC addresses collected Collect NCN MAC addresses Restart services after NCN MAC addresses collected Next topic  1. Collect BMC MAC addresses The BMC MAC addresses can be collected from the switches using knowledge about the cabling of the NMN from the SHCD.\nSee Collecting BMC MAC Addresses.\n2. Restart services after BMC MAC addresses collected The previous step updated ncn_metadata.csv with the BMC MAC addresses, so several earlier steps need to be repeated.\n  Change into the preparation directory.\npit# cd /var/www/ephemeral/prep   Confirm that the ncn_metadata.csv file in this directory has the new information. There should be no remaining dummy data (de:ad:be:ef:00:00) for the BMC MAC column in the file, but that string may be present for the Bootstrap MAC, Bond0 MAC0, and Bond0 MAC1 columns.\npit# cat ncn_metadata.csv   Rename the incorrectly generated configurations.\nBefore deleting the incorrectly generated configurations, consider making a backup of them, in case they need to be examined at a later time.\n Warning: Ensure that the SYSTEM_NAME environment variable is correctly set.\n pit# export SYSTEM_NAME=eniac pit# echo $SYSTEM_NAME Rename the old directory.\npit# mv /var/www/ephemeral/prep/${SYSTEM_NAME} /var/www/ephemeral/prep/${SYSTEM_NAME}.oldBMC   Copy over the system_config.yaml file from the first attempt at generating the system configuration files.\npit# cp /var/www/ephemeral/prep/${SYSTEM_NAME}.oldBMC/system_config.yaml /var/www/ephemeral/prep/   Generate system configuration again.\nThe needed files should be in the current directory.\npit# ls -1 Expected output looks similar to the following:\napplication_node_config.yaml cabinets.yaml hmn_connections.json ncn_metadata.csv switch_metadata.csv system_config.yaml The system_config.yaml file will make it easier to run the next command because it has the saved information from the command line arguments which were used initially for this command.\npit# csi config init A new directory matching your --system-name argument will now exist in your working directory.\nThese warnings from csi config init for issues in hmn_connections.json can be ignored.\n  The node with the external connection (ncn-m001) will have a warning similar to this because its BMC is connected to the site and not the HMN like the other management NCNs. It can be ignored.\n\u0026#34;Couldn\u0026#39;t find switch port for NCN: x3000c0s1b0\u0026#34;   An unexpected component may have this message. If this component is an application node with an unusual prefix, it should be added to the application_node_config.yaml file. Then rerun csi config init. See the procedure to Create Application Node Config YAML.\n{\u0026#34;level\u0026#34;:\u0026#34;warn\u0026#34;,\u0026#34;ts\u0026#34;:1610405168.8705149,\u0026#34;msg\u0026#34;:\u0026#34;Found unknown source prefix! If this is expected to be an Application node, please update application_node_config.yaml\u0026#34;,\u0026#34;row\u0026#34;: {\u0026#34;Source\u0026#34;:\u0026#34;gateway01\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u33\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3002\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u48\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j29\u0026#34;}}   If a cooling door is found in hmn_connections.json, there may be a message like the following. It can be safely ignored.\n{\u0026#34;level\u0026#34;:\u0026#34;warn\u0026#34;,\u0026#34;ts\u0026#34;:1612552159.2962296,\u0026#34;msg\u0026#34;:\u0026#34;Cooling door found, but xname does not yet exist for cooling doors!\u0026#34;,\u0026#34;row\u0026#34;: {\u0026#34;Source\u0026#34;:\u0026#34;x3000door-Motiv\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34; \u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u36\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j27\u0026#34;}}     Copy the interface configuration files generated earlier by csi config init into /etc/sysconfig/network/.\npit# cp -pv /var/www/ephemeral/prep/${SYSTEM_NAME}/pit-files/* /etc/sysconfig/network/ \u0026amp;\u0026amp; wicked ifreload all \u0026amp;\u0026amp; systemctl restart wickedd-nanny \u0026amp;\u0026amp; sleep 5   Check that IP addresses are set for each interface and investigate any failures.\n Note: The bond0.can0 interface is optional in CSM 1.2+\n pit# wicked show bond0 bond0.nmn0 bond0.hmn0 bond0.can0 Example output:\nbond0 up link: #7, state up, mtu 1500 type: bond, mode ieee802-3ad, hwaddr b8:59:9f:fe:49:d4 config: compat:suse:/etc/sysconfig/network/ifcfg-bond0 leases: ipv4 static granted addr: ipv4 10.1.1.2/16 [static] bond0.nmn0 up link: #8, state up, mtu 1500 type: vlan bond0[2], hwaddr b8:59:9f:fe:49:d4 config: compat:suse:/etc/sysconfig/network/ifcfg-bond0.nmn0 leases: ipv4 static granted addr: ipv4 10.252.1.4/17 [static] route: ipv4 10.92.100.0/24 via 10.252.0.1 proto boot bond0.can0 up link: #9, state up, mtu 1500 type: vlan bond0[7], hwaddr b8:59:9f:fe:49:d4 config: compat:suse:/etc/sysconfig/network/ifcfg-bond0.can0 leases: ipv4 static granted addr: ipv4 10.102.9.5/24 [static] bond0.hmn0 up link: #10, state up, mtu 1500 type: vlan bond0[4], hwaddr b8:59:9f:fe:49:d4 config: compat:suse:/etc/sysconfig/network/ifcfg-bond0.hmn0 leases: ipv4 static granted addr: ipv4 10.254.1.4/17 [static]   Copy the service configuration files generated earlier by csi config init for dnsmasq, Metal Basecamp (cloud-init), and ConMan.\n  Copy files (files only, -r is expressly not used).\npit# cp -pv /var/www/ephemeral/prep/${SYSTEM_NAME}/dnsmasq.d/* /etc/dnsmasq.d/ \u0026amp;\u0026amp; cp -pv /var/www/ephemeral/prep/${SYSTEM_NAME}/conman.conf /etc/conman.conf \u0026amp;\u0026amp; cp -pv /var/www/ephemeral/prep/${SYSTEM_NAME}/basecamp/* /var/www/ephemeral/configs/   Restart all PIT services.\npit# systemctl restart basecamp nexus dnsmasq conman     Verify that all BMCs can be pinged.\nNote: It may take about 10 minutes from when dnsmasq is restarted to when the BMCs pick up new DHCP leases.\nThis step will check all management nodes except ncn-m001-mgmt because that has an external connection and could not be booted by itself as the PIT node.\npit# export mtoken=\u0026#39;ncn-m(?!001)\\w+-mgmt\u0026#39; ; export stoken=\u0026#39;ncn-s\\w+-mgmt\u0026#39; ; export wtoken=\u0026#39;ncn-w\\w+-mgmt\u0026#39; pit# grep -oP \u0026#34;($mtoken|$stoken|$wtoken)\u0026#34; /etc/dnsmasq.d/statics.conf | sort -u | xargs -t -i ping -c3 {}   3. Collect NCN MAC addresses Now that the BMC MAC addresses are correct in ncn_metadata.csv and the PIT node services have been restarted, a partial boot of the management nodes can be done to collect the remaining information from the conman console logs on the PIT node using the Procedure: iPXE Consoles\nSee Procedure: iPXE Consoles.\n4. Restart services after NCN MAC addresses collected The previous step updated ncn_metadata.csv with the NCN MAC addresses for Bootstrap MAC, Bond0 MAC0, and Bond0 MAC1 so several earlier steps need to be repeated.\n  Change into the preparation directory.\npit# cd /var/www/ephemeral/prep   Confirm that the ncn_metadata.csv file in this directory has the new information. There should be no remaining dummy data (\u0026quot;de:ad:be:ef:00:00\u0026quot;) for columns or rows in the file. Every row should have uniquely different MAC addresses from the other rows.\npit# grep \u0026#34;de:ad:be:ef:00:00\u0026#34; ncn_metadata.csv Expected output looks similar to the following, that is, no lines that still have \u0026quot;de:ad:be:ef:00:00\u0026quot;:\nDisplay the file and confirm the contents are unique between the different rows.\npit# cat ncn_metadata.csv   Remove the incorrectly generated configurations. Before deleting the incorrectly generated configurations, consider making a backup of them, in case they need to be examined at a later time.\n WARNING Ensure that the SYSTEM_NAME environment variable is correctly set.\n pit# export SYSTEM_NAME=eniac pit# echo $SYSTEM_NAME Rename the old directory.\npit# mv /var/www/ephemeral/prep/${SYSTEM_NAME} /var/www/ephemeral/prep/${SYSTEM_NAME}.oldNCN   Copy over the system_config.yaml file from the second attempt at generating the system configuration files.\npit# cp /var/www/ephemeral/prep/${SYSTEM_NAME}.oldNCN/system_config.yaml /var/www/ephemeral/prep/   Generate system configuration again.\nCheck for the expected files that should exist be in the current directory.\npit# ls -1 Expected output looks similar to the following:\napplication_node_config.yaml cabinets.yaml hmn_connections.json ncn_metadata.csv switch_metadata.csv system_config.yaml Regenerate the system configuration. The system_config.yaml file contains all of the options that were used to generate the initial system configuration, and can be used in place of specifying CLI flags to CSI.\npit# csi config init A new directory matching your $SYSTEM_NAME environment variable will now exist in your working directory.\nThese warnings from csi config init for issues in hmn_connections.json can be ignored.\n  The node with the external connection (ncn-m001) will have a warning similar to this because its BMC is connected to the site and not the HMN like the other management NCNs. It can be ignored.\n\u0026#34;Couldn\u0026#39;t find switch port for NCN: x3000c0s1b0\u0026#34;   An unexpected component may have this message. If this component is an application node with an unusual prefix, it should be added to the application_node_config.yaml file. Then rerun csi config init. See the procedure to Create Application Node Config YAML.\n{\u0026#34;level\u0026#34;:\u0026#34;warn\u0026#34;,\u0026#34;ts\u0026#34;:1610405168.8705149,\u0026#34;msg\u0026#34;:\u0026#34;Found unknown source prefix! If this is expected to be an Application node, please update application_node_config.yaml\u0026#34;,\u0026#34;row\u0026#34;: {\u0026#34;Source\u0026#34;:\u0026#34;gateway01\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34;u33\u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3002\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u48\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j29\u0026#34;}}   If a cooling door is found in hmn_connections.json, there may be a message like the following. It can be safely ignored.\n{\u0026#34;level\u0026#34;:\u0026#34;warn\u0026#34;,\u0026#34;ts\u0026#34;:1612552159.2962296,\u0026#34;msg\u0026#34;:\u0026#34;Cooling door found, but xname does not yet exist for cooling doors!\u0026#34;,\u0026#34;row\u0026#34;: {\u0026#34;Source\u0026#34;:\u0026#34;x3000door-Motiv\u0026#34;,\u0026#34;SourceRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;SourceLocation\u0026#34;:\u0026#34; \u0026#34;,\u0026#34;DestinationRack\u0026#34;:\u0026#34;x3000\u0026#34;,\u0026#34;DestinationLocation\u0026#34;:\u0026#34;u36\u0026#34;,\u0026#34;DestinationPort\u0026#34;:\u0026#34;j27\u0026#34;}}     Copy the interface configuration files generated earlier by csi config init into /etc/sysconfig/network/.\npit# cp -pv /var/www/ephemeral/prep/${SYSTEM_NAME}/pit-files/* /etc/sysconfig/network/ \u0026amp;\u0026amp; wicked ifreload all \u0026amp;\u0026amp; systemctl restart wickedd-nanny \u0026amp;\u0026amp; sleep 5   Check that IP addresses are set for each interface and investigate any failures.\n Note: The bond0.can0 interface is optional in CSM 1.2+\n pit# wicked show bond0 bond0.nmn0 bond0.hmn0 bond0.can0 Example output:\nbond0 up link: #7, state up, mtu 1500 type: bond, mode ieee802-3ad, hwaddr b8:59:9f:fe:49:d4 config: compat:suse:/etc/sysconfig/network/ifcfg-bond0 leases: ipv4 static granted addr: ipv4 10.1.1.2/16 [static] bond0.nmn0 up link: #8, state up, mtu 1500 type: vlan bond0[2], hwaddr b8:59:9f:fe:49:d4 config: compat:suse:/etc/sysconfig/network/ifcfg-bond0.nmn0 leases: ipv4 static granted addr: ipv4 10.252.1.4/17 [static] route: ipv4 10.92.100.0/24 via 10.252.0.1 proto boot bond0.can0 up link: #9, state up, mtu 1500 type: vlan bond0[7], hwaddr b8:59:9f:fe:49:d4 config: compat:suse:/etc/sysconfig/network/ifcfg-bond0.can0 leases: ipv4 static granted addr: ipv4 10.102.9.5/24 [static] bond0.hmn0 up link: #10, state up, mtu 1500 type: vlan bond0[4], hwaddr b8:59:9f:fe:49:d4 config: compat:suse:/etc/sysconfig/network/ifcfg-bond0.hmn0 leases: ipv4 static granted addr: ipv4 10.254.1.4/17 [static]   Copy the service configuration files generated earlier by csi config init for dnsmasq, Metal Basecamp (cloud-init), and ConMan.\n  Copy files (files only, -r is expressly not used).\npit# cp -pv /var/www/ephemeral/prep/${SYSTEM_NAME}/dnsmasq.d/* /etc/dnsmasq.d/ pit# cp -pv /var/www/ephemeral/prep/${SYSTEM_NAME}/conman.conf /etc/conman.conf pit# cp -pv /var/www/ephemeral/prep/${SYSTEM_NAME}/basecamp/* /var/www/ephemeral/configs/   Update CA Cert on the copied data.json file for Basecamp with the generated certificate in site-init:\npit# csi patch ca \\ --cloud-init-seed-file /var/www/ephemeral/configs/data.json \\ --customizations-file /var/www/ephemeral/prep/site-init/customizations.yaml \\ --sealed-secret-key-file /var/www/ephemeral/prep/site-init/certs/sealed_secrets.key   Restart all PIT services.\npit# systemctl restart basecamp nexus dnsmasq conman     Ensure system-specific settings generated by CSI are merged into customizations.yaml.\n The yq tool used in the following procedures is available under /var/www/ephemeral/prep/site-init/utils/bin once the SHASTA-CFG repository has been cloned.\n pit# alias yq=\u0026#34;/var/www/ephemeral/prep/site-init/utils/bin/$(uname | awk \u0026#39;{print tolower($0)}\u0026#39;)/yq\u0026#34; pit# yq merge -xP -i /var/www/ephemeral/prep/site-init/customizations.yaml \u0026lt;(yq prefix -P \u0026#34;/var/www/ephemeral/prep/${SYSTEM_NAME}/customizations.yaml\u0026#34; spec)   Next topic After completing the collection of BMC MAC addresses and NCN MAC addresses in order to update ncn_metadata.csv, and after restarting the services dependent on correct data in ncn_metadata.csv, the next step is deployment of the management nodes.\nSee Deploy Management Nodes\n"
},
{
	"uri": "/docs-csm/en-12/install/collecting_ncn_mac_addresses/",
	"title": "Collecting NCN Mac Addresses",
	"tags": [],
	"description": "",
	"content": "Collecting NCN MAC Addresses This procedure details how to collect the NCN MAC addresses from an HPE Cray EX system. The MAC addresses needed for the Bootstrap MAC, Bond0 MAC0, and Bond0 MAC1 columns in ncn_metadata.csv will be collected. This data will feed into the cloud-init metadata.\nThe Bootstrap MAC address will be used for identification of this node during the early part of the PXE boot process, before the bonded interface can be established.\nBond0 MAC0 and Bond0 MAC1 are the MAC addresses for the physical interfaces that the node will use for the various VLANs. Bond0 MAC0 and Bond0 MAC1 should be on different network cards in order to establish redundancy for a failed network card. On the other hand, this is not an absolute requirement. If the node has only a single network card, then this will force MAC1 and MAC0 to reside on the same physical card; while not optimal, this will still produce a valid configuration.\nSections  Procedure: iPXE consoles  Requirements MAC address collection   Procedure: Serial consoles Procedure: Recovering from an incorrect ncn_metadata.csv file  The easy way to do this leverages the NIC dump provided by the metal-ipxe package on the LiveCD. This option is outlined in Procedure: iPXE consoles.\nThe alternative is to use serial cables (or SSH) to collect the MAC addresses from the switch ARP tables. This can become exponentially difficult for large systems, and is not recommended. This option is outlined in Procedure: Serial consoles.\nProcedure: iPXE consoles This procedure is faster for those with the LiveCD (CRAY Pre-Install Toolkit). It can be used to quickly boot-check nodes to dump network device information without an operating system. This works by accessing the PCI configuration space.\nRequirements  If CSI does not work because of a file requirement, then file a ticket. By default, dnsmasq and ConMan are already running on the LiveCD, but bond0 needs to be configured. dnsmasq needs to serve/listen over bond0, and ConMan needs the BMC information.\n  LiveCD dnsmasq is configured for the bond0/metal network (NMN/HMN/CAN do not matter) BMC MAC addresses already collected LiveCD ConMan is configured for each BMC  For help with either of those, see LiveCD Setup.\nMAC address collection   (Optional) Modify the boot so that nodes stop network booting after dumping their network devices.\n NOTE Removing the iPXE script will prevent network booting. Be aware that the nodes may still disk boot.\n pit# mv /var/www/boot/script.ipxe /var/www/boot/script.ipxe.bak   Verify that consoles are active with conman -q.\nThe following command lists all nodes that ConMan is configured to monitor.\npit# conman -q ncn-m002-mgmt ncn-m003-mgmt ncn-s001-mgmt ncn-s002-mgmt ncn-s003-mgmt ncn-w001-mgmt ncn-w002-mgmt ncn-w003-mgmt   Set the nodes to PXE boot and restart them.\n  Record the username for the NCN BMCs.\npit# USERNAME=root   Record the password for this user.\n read -s is used in order to prevent the credentials from being displayed on the screen or recorded in the shell history.\n pit# read -s IPMI_PASSWORD   Set the nodes to PXE boot and restart them.\npit# export IPMI_PASSWORD pit# grep -oP \u0026#34;($mtoken|$stoken|$wtoken)\u0026#34; /etc/dnsmasq.d/statics.conf | sort -u | xargs -t -i ipmitool -I lanplus -U $USERNAME -E -H {} chassis bootdev pxe options=persistent pit# grep -oP \u0026#34;($mtoken|$stoken|$wtoken)\u0026#34; /etc/dnsmasq.d/statics.conf | sort -u | xargs -t -i ipmitool -I lanplus -U $USERNAME -E -H {} chassis bootdev pxe options=efiboot pit# grep -oP \u0026#34;($mtoken|$stoken|$wtoken)\u0026#34; /etc/dnsmasq.d/statics.conf | sort -u | xargs -t -i ipmitool -I lanplus -U $USERNAME -E -H {} power off pit# sleep 10 pit# grep -oP \u0026#34;($mtoken|$stoken|$wtoken)\u0026#34; /etc/dnsmasq.d/statics.conf | sort -u | xargs -t -i ipmitool -I lanplus -U $USERNAME -E -H {} power on     Wait for the nodes to network boot.\nThis can be monitored using ConMan; the -m option follows the console output in read-only mode, and the -j option joins an interactive console session. The available node names were listed in step 2 above. The boot usually starts in less than 3 minutes. After that, log data should start flowing through ConMan; the speed depends on how quickly the nodes POST. To see a ConMan help screen for all supported escape sequences, use \u0026amp;?.\npit# conman -m ncn-m002-mgmt   Exit ConMan.\nThis is done by typing \u0026amp;. (that is, press and release \u0026amp;, then press and release .).\n  Print off what has been found in the console logs.\nThis snippet will omit duplicates from multiple boot attempts:\npit# for file in /var/log/conman/*; do echo $file grep -Eoh \u0026#39;(net[0-9] MAC .*)\u0026#39; $file | sort -u | grep PCI \u0026amp;\u0026amp; echo ----- done   Use the output from the previous step to collect two MAC addresses to use for bond0, and two more to use for bond1, based on the topology.\nThe Bond0 MAC0 must be the first port of the first PCIe card, specifically the port connecting the NCN to the lower spine. For example, if connected to spines01 and spines02, this is going to sw-spine-001. If connected to sw-spine-007 and sw-spine-008, then this is sw-spine-007.\nThe 2nd MAC for bond0 is the first port of the 2nd PCIe card, or 2nd port of the first when only one card exists.\nUse the table provided on NCN Networking for referencing commonly seen devices.\nWorker nodes also have the high-speed network cards. If these cards are known, filter their device IDs out from the above output using this snippet:\npit# unset did # clear it if you used it. pit# did=1017 # ConnectX-5 example. pit# for file in /var/log/conman/*; do echo $file grep -Eoh \u0026#39;(net[0-9] MAC .*)\u0026#39; $file | sort -u | grep PCI | grep -Ev \u0026#34;$did\u0026#34; \u0026amp;\u0026amp; echo ----- done To filter out onboard NICs, or site-link cards, omit their device IDs as well. Use the above snippet but add the other IDs.\nThis snippet prints out only mgmt MAC addresses; the did is the HSN and onboard NICs that are being ignored.\npit# unset did # clear it if you used it. pit# did=\u0026#39;(1017|8086|ffff)\u0026#39; pit# for file in /var/log/conman/*; do echo $file grep -Eoh \u0026#39;(net[0-9] MAC .*)\u0026#39; $file | sort -u | grep PCI | grep -Ev \u0026#34;$did\u0026#34; \u0026amp;\u0026amp; echo ----- done   Examine the output to identify Bond0 MAC addresses for each NCN.\nUse the lowest value MAC address per PCIe card.\n Example: One PCIe card with two ports, for a total of two ports per node.\n ----- /var/log/conman/console.ncn-w003-mgmt net2 MAC b8:59:9f:d9:9e:2c PCI.DeviceID 1013 PCI.VendorID 15b3 \u0026lt;-bond0-mac0 (0x2c \u0026lt; 0x2d) net3 MAC b8:59:9f:d9:9e:2d PCI.DeviceID 1013 PCI.VendorID 15b3 \u0026lt;-bond0-mac1 ----- The above output identifies MAC0 and MAC1 of the bond as b8:59:9f:d9:9e:2c and b8:59:9f:d9:9e:2d, respectively.\n Example: Two PCIe cards with two ports each, for a total of four ports per node.\n ----- /var/log/conman/console.ncn-w006-mgmt net0 MAC 94:40:c9:5f:b5:df PCI.DeviceID 8070 PCI.VendorID 1077 \u0026lt;-bond0-mac0 (0xdf \u0026lt; 0xe0) net1 MAC 94:40:c9:5f:b5:e0 PCI.DeviceID 8070 PCI.VendorID 1077 (future use) net2 MAC 14:02:ec:da:b9:98 PCI.DeviceID 8070 PCI.VendorID 1077 \u0026lt;-bond0-mac1 (0x98 \u0026lt; 0x99) net3 MAC 14:02:ec:da:b9:99 PCI.DeviceID 8070 PCI.VendorID 1077 (future use) ----- The above output identifies MAC0 and MAC1 of the bond as 94:40:c9:5f:b5:df and 14:02:ec:da:b9:99, respectively.\n  Collect the NCN MAC address for the PIT node.\nThis information will be used to populate the MAC addresses for ncn-m001.\npit# cat /proc/net/bonding/bond0 | grep -i perm For example:\nPermanent HW addr: b8:59:9f:c7:12:f2 \u0026lt;-bond0-mac0 Permanent HW addr: b8:59:9f:c7:12:f3 \u0026lt;-bond0-mac1   Update ncn_metadata.csv with the collected MAC addresses for Bond0 from all of the management NCNs.\n NOTE: Each type of NCN (master, storage, and worker) are grouped together in the file and are listed in descending numerical order within their group (for example, ncn-s003 is listed directly before ncn-s002).\n For each NCN, update the corresponding row in ncn_metadata with the values for Bond0 MAC0 and Bond0 MAC1. For Bootstrap MAC, copy the value from Bond0 MAC0.\nXname,Role,Subrole,BMC MAC,Bootstrap MAC,Bond0 MAC0,Bond0 MAC1 x3000c0s9b0n0,Management,Worker,94:40:c9:37:77:26,b8:59:9f:c7:12:f2,b8:59:9f:c7:12:f2,b8:59:9f:c7:12:f3 ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ bond0-mac0 bond0-mac0 bond0-mac1   Power off the NCNs.\npit# grep -oP \u0026#34;($mtoken|$stoken|$wtoken)\u0026#34; /etc/dnsmasq.d/statics.conf | sort -u | xargs -t -i ipmitool -I lanplus -U $USERNAME -E -H {} power off   If the script.ipxe file was renamed in the first step of this procedure, then restore it to its original location.\npit# mv /var/www/boot/script.ipxe.bak /var/www/boot/script.ipxe   Procedure: Serial consoles Pick out the MAC addresses for the Bond from both the sw-spine-001 and sw-spine-002 switches, following the Collecting BMC MAC Addresses procedure.\n NOTE: The node must be booted into an operating system in order for the Bond MAC addresses to appear on the spine switches.\nA PCIe card with dual-heads may go to either spine switch, meaning MAC0 must be collected from spine-01. Refer to the cabling diagram or the actual rack (in-person).\n   Follow Metadata BMC on each spine switch that port1 and port2 of the bond are plugged into.\n  Usually the 2nd/3rd/4th/Nth MAC address on the PCIe card will be a 0x1 or 0x2 deviation from the first port.\nCollection is quicker if this can be easily confirmed.\n  Procedure: Recovering from an incorrect ncn_metadata.csv file If the ncn_metadata.csv file is incorrect, the NCNs will be unable to deploy. This section details a recovery procedure in case that happens.\n  Remove the incorrectly generated configurations.\nBefore deleting the incorrectly generated configurations, make a backup of them in case they need to be examined at a later time.\n WARNING Ensure that the SYSTEM_NAME environment variable is correctly set. If SYSTEM_NAME is not set, then the command below could potentially remove the entire prep directory.\npit# export SYSTEM_NAME=eniac  pit# rm -rvf /var/www/ephemeral/prep/$SYSTEM_NAME   Manually edit ncn_metadata.csv, replacing the bootstrap MAC address with Bond0 MAC0 address for the afflicted nodes that failed to boot.\n  Re-run csi config init with the required flags.\n  Copy all of the newly generated files into place.\npit# cp -pv /var/www/ephemeral/prep/$SYSTEM_NAME/dnsmasq.d/* /etc/dnsmasq.d/ \u0026amp;\u0026amp; cp -pv /var/www/ephemeral/prep/$SYSTEM_NAME/basecamp/* /var/www/ephemeral/configs/ \u0026amp;\u0026amp; cp -pv /var/www/ephemeral/prep/$SYSTEM_NAME/conman.conf /etc/ \u0026amp;\u0026amp; cp -pv /var/www/ephemeral/prep/$SYSTEM_NAME/pit-files/* /etc/sysconfig/network/   Update the CA certificates on the copied data.json file. Provide the path to the data.json file, the path to the customizations.yaml file, and the sealed_secrets.key file.\npit# csi patch ca \\  --cloud-init-seed-file /var/www/ephemeral/configs/data.json \\  --customizations-file /var/www/ephemeral/prep/site-init/customizations.yaml \\  --sealed-secret-key-file /var/www/ephemeral/prep/site-init/certs/sealed_secrets.key   Restart everything to apply the new configurations:\npit# wicked ifreload all \u0026amp;\u0026amp; systemctl restart dnsmasq conman basecamp \u0026amp;\u0026amp; systemctl restart nexus   Ensure system-specific settings generated by CSI are merged into customizations.yaml:\n The yq tool used in the following procedures is available under /var/www/ephemeral/prep/site-init/utils/bin once the SHASTA-CFG repo has been cloned.\n pit# alias yq=\u0026#34;/var/www/ephemeral/prep/site-init/utils/bin/$(uname | awk \u0026#39;{print tolower($0)}\u0026#39;)/yq\u0026#34; pit# yq merge -xP -i /var/www/ephemeral/prep/site-init/customizations.yaml \u0026lt;(yq prefix -P \u0026#34;/var/www/ephemeral/prep/${SYSTEM_NAME}/customizations.yaml\u0026#34; spec)   Wipe the disks before relaunching the NCNs.\nSee full wipe from Wipe NCN Disks for Reinstallation.\n  Set BMCs to DHCP, if needed.\nFor any NCNs which booted far enough to begin running cloud-init, set their BMCs to DHCP. If in doubt, it does no harm to perform this step. See Set node BMCs to DHCP.\n  "
},
{
	"uri": "/docs-csm/en-12/install/collecting_bmc_mac_addresses/",
	"title": "Collecting The BMC Mac Addresses",
	"tags": [],
	"description": "",
	"content": "Collecting the BMC MAC Addresses This guide will detail how to collect BMC MAC addresses from an HPE Cray EX system with configured switches. The BMC MAC address is the exclusive, dedicated LAN for the onboard BMC.\nResults may vary if an unconfigured switch is being used.\nPrerequisites  There is a configured switch with SSH access or unconfigured with COM access (Serial Over LAN/DB-9). A file is available to record the collected BMC information.  Procedure   Start a session on the leaf-bmc switch, either using SSH or a USB serial cable.\n  SSH\n NOTE: These IP addresses are examples; 10.X.0.4 may not match the setup.\n   over METAL MANAGEMENT\npit# ssh admin@10.1.0.4   over NODE MANAGEMENT\npit# ssh admin@10.252.0.4   SSH over HARDWARE MANAGEMENT\npit# ssh admin@10.254.0.4     Serial\nSee Connect to Switch over USB-Serial Cable, if wanting to use that option.\n    Display the MAC addresses for the BMC ports (if known).\nIf they exist on the same VLAN, then dump the VLAN to get the MAC addresses. In order to find the ports of the BMCs, cross-reference the HMN tab of the SHCD file.\n Reference the CLI for more information (press ? or tab).\n   Print using the VLAN ID:\n  DellOS 10\nsw-leaf-bmc-001# show mac address-table vlan 4 The output should look similar to:\nVlanId Mac Address Type Interface 4 00:1e:67:98:fe:2c dynamic ethernet1/1/11 4 a4:bf:01:38:f0:b1 dynamic ethernet1/1/27 4 a4:bf:01:38:f1:44 dynamic ethernet1/1/25 4 a4:bf:01:48:1e:ac dynamic ethernet1/1/28 4 a4:bf:01:48:1f:70 dynamic ethernet1/1/31 4 a4:bf:01:48:1f:e0 dynamic ethernet1/1/26 4 a4:bf:01:48:20:03 dynamic ethernet1/1/30 4 a4:bf:01:48:20:57 dynamic ethernet1/1/29 4 a4:bf:01:4d:d9:9a dynamic ethernet1/1/32   Aruba AOS-CX\nsw-leaf-bmc-001# show mac-address-table vlan 4 The output should look similar to:\nMAC age-time : 300 seconds Number of MAC addresses : 21 MAC Address VLAN Type Port -------------------------------------------------------------- b4:2e:99:df:f3:61 4 dynamic 1/1/36 b4:2e:99:df:ec:f1 4 dynamic 1/1/35 b4:2e:99:df:ec:49 4 dynamic 1/1/33 94:40:c9:37:04:84 4 dynamic 1/1/26 94:40:c9:35:03:06 4 dynamic 1/1/27 94:40:c9:37:0a:2a 4 dynamic 1/1/29 94:40:c9:37:67:60 4 dynamic 1/1/43 94:40:c9:37:67:80 4 dynamic 1/1/37 94:40:c9:37:77:26 4 dynamic 1/1/31 94:40:c9:37:77:b8 4 dynamic 1/1/28 94:40:c9:37:87:5a 4 dynamic 1/1/30 94:40:c9:37:f9:b4 4 dynamic 1/1/25 b4:2e:99:df:eb:c1 4 dynamic 1/1/34     Print using the interface and trunk:\n  DellOS 10\nsw-leaf-bmc-001# show mac address-table interface ethernet 1/1/32 The output should look similar to:\nVlanId Mac Address Type Interface 4 a4:bf:01:4d:d9:9a dynamic ethernet1/1/32   Aruba AOS-CX\nThe final argument of the command is the list of ports. For example: 1/1/1, 1/1/1-1/1/3, or lag1.\nsw-leaf-bmc-001# show mac-address-table port 1/1/36 The output should look similar to:\nMAC age-time : 300 seconds Number of MAC addresses : 1 MAC Address VLAN Type Port -------------------------------------------------------------- b4:2e:99:df:f3:61 4 dynamic 1/1/36     Print everything:\n  DellOS 10\nsw-leaf-bmc-001# show mac address-table The output should look similar to:\nVlanId Mac Address Type Interface 4 a4:bf:01:4d:d9:9a dynamic ethernet1/1/32 ....   Aruba AOS-CX\nsw-leaf-bmc-001# show mac-address-table The output should look similar to:\nMAC age-time : 300 seconds Number of MAC addresses : 52 MAC Address VLAN Type Port -------------------------------------------------------------- ec:eb:b8:3d:89:41 1 dynamic 1/1/42       Ensure that the management NCNs are present in the ncn_metadata.csv file.\nThe output from the previous show mac address-table command will display information for all management NCNs that do not have an external connection for their BMC, such as ncn-m001. The BMC MAC address for ncn-m001 will be collected in the next step, as this BMC is not connected to the system\u0026rsquo;s management network like the other management nodes.\nAll of the management NCNs should be present in the ncn_metadata.csv file.\nFill in the Bootstrap MAC, Bond0 MAC0, and Bond0 MAC1 columns with a placeholder value, such as de:ad:be:ef:00:00, as a marker that the correct value is not in this file yet.\n IMPORTANT NCNs of each type (master, storage, and worker) are grouped together in the file and are listed in descending numerical order within their group (for example, ncn-s003 is listed directly before ncn-s002).\n Xname,Role,Subrole,BMC MAC,Bootstrap MAC,Bond0 MAC0,Bond0 MAC1 x3000c0s9b0n0,Management,Storage,a4:bf:01:38:f1:44,de:ad:be:ef:00:00,de:ad:be:ef:00:00,de:ad:be:ef:00:00 x3000c0s8b0n0,Management,Storage,a4:bf:01:48:1f:e0,de:ad:be:ef:00:00,de:ad:be:ef:00:00,de:ad:be:ef:00:00 x3000c0s7b0n0,Management,Storage,a4:bf:01:38:f0:b1,de:ad:be:ef:00:00,de:ad:be:ef:00:00,de:ad:be:ef:00:00 ^^^^^^^^^^^^^^^^^ BMC MAC address The column heading line must match that shown above in order for csi to parse it correctly.\n  Collect the BMC MAC address information for the PIT node.\nThe PIT node BMC is not connected to the switch like the other management nodes.\n  For HPE and Gigabyte nodes:\npit# ipmitool lan print 1 | grep \u0026#34;MAC Address\u0026#34;   For Intel nodes:\npit# ipmitool lan print 3 | grep \u0026#34;MAC Address\u0026#34;   Example output:\nMAC Address : a4:bf:01:37:87:32   Add this information for ncn-m001 to the ncn_metadata.csv file.\nThere should be ncn-m003, then ncn-m002, and this new entry for ncn-m001 as the last line in the file.\nx3000c0s1b0n0,Management,Master,a4:bf:01:37:87:32,de:ad:be:ef:00:00,de:ad:be:ef:00:00,de:ad:be:ef:00:00 ^^^^^^^^^^^^^^^^^ BMC MAC address   Verify that the ncn_metadata.csv file has a row for every management node in the SHCD.\nThere may be placeholder entries for some MAC addresses.\nBelow is a sample file showing storage nodes 3, 2, and 1, then worker nodes 3, 2, and 1, and finally master nodes 3, 2, and 1, with valid BMC MAC addresses, but placeholder value de:ad:be:ef:00:00 for the Bootstrap MAC, Bond0 MAC0, and Bond0 MAC1.\nXname,Role,Subrole,BMC MAC,Bootstrap MAC,Bond0 MAC0,Bond0 MAC1 x3000c0s9b0n0,Management,Storage,a4:bf:01:38:f1:44,de:ad:be:ef:00:00,de:ad:be:ef:00:00,de:ad:be:ef:00:00 x3000c0s8b0n0,Management,Storage,a4:bf:01:48:1f:e0,de:ad:be:ef:00:00,de:ad:be:ef:00:00,de:ad:be:ef:00:00 x3000c0s7b0n0,Management,Storage,a4:bf:01:38:f0:b1,de:ad:be:ef:00:00,de:ad:be:ef:00:00,de:ad:be:ef:00:00 x3000c0s6b0n0,Management,Worker,a4:bf:01:48:1e:ac,de:ad:be:ef:00:00,de:ad:be:ef:00:00,de:ad:be:ef:00:00 x3000c0s5b0n0,Management,Worker,a4:bf:01:48:20:57,de:ad:be:ef:00:00,de:ad:be:ef:00:00,de:ad:be:ef:00:00 x3000c0s4b0n0,Management,Worker,a4:bf:01:48:20:03,de:ad:be:ef:00:00,de:ad:be:ef:00:00,de:ad:be:ef:00:00 x3000c0s3b0n0,Management,Master,a4:bf:01:48:1f:70,de:ad:be:ef:00:00,de:ad:be:ef:00:00,de:ad:be:ef:00:00 x3000c0s2b0n0,Management,Master,a4:bf:01:4d:d9:9a,de:ad:be:ef:00:00,de:ad:be:ef:00:00,de:ad:be:ef:00:00 x3000c0s1b0n0,Management,Master,a4:bf:01:37:87:32,de:ad:be:ef:00:00,de:ad:be:ef:00:00,de:ad:be:ef:00:00   "
},
{
	"uri": "/docs-csm/en-12/",
	"title": "Cray System Management Documentation",
	"tags": [],
	"description": "",
	"content": "Cray System Management Documentation Scope and Audience The documentation included here describes the Cray System Management (CSM) software, how to install or upgrade CSM software, and related supporting operational procedures to manage an HPE Cray EX system. CSM software is the foundation upon which other software product streams for the HPE Cray EX system depend.\nThe CSM installation prepares and deploys a distributed system across a group of management nodes organized into a Kubernetes cluster which uses Ceph for utility storage. These nodes perform their function as Kubernetes master nodes, Kubernetes worker nodes, or utility storage nodes with the Ceph storage.\nSystem services on these nodes are provided as containerized micro-services packaged for deployment via Helm charts. Kubernetes orchestrates these services and schedules them on Kubernetes worker nodes with horizontal scaling. Horizontal scales increases or decreases the number of service instances as demand for them varies, such as when booting many compute nodes or application nodes.\nThis information is intended for system installers, system administrators, and network administrators of the system. It assumes some familiarity with standard Linux and open source tools, such as shell scripts, revision control with git, configuration management with Ansible, YAML, JSON, and TOML file formats, etc.\nTable of Contents   Introduction to CSM Installation\nThis chapter provides an introduction to using the CSM software to manage the HPE Cray EX system which also describes the scenarios for installation and upgrade of CSM software, how product stream updates for CSM are delivered, the operational activities done after installation for on-going management of the HPE Cray EX system, differences between previous release and this release, and conventions used in this documentation.\n  Pre-Install Steps\nThis chapter outlines how to set up default credentials for River BMCs and ServerTech PDUs, which must be done before the initial installation of CSM, in order to enable HSM software to interact with River Redfish BMCs and PDUs.\n  Update CSM Product Stream\nThis chapter explains how to get the CSM product release, get any patches, update to the latest documentation, and check for any Field Notices or Hotfixes.\n  Install CSM\nThis chapter provides an order list of procedures which can be used for CSM software installation or reinstall that indicate when to do operational tasks as part of the installation workflow. Updating software is in another chapter. Installation of the CSM product stream has many steps in multiple procedures which should be done in a specific order. Information about the HPE Cray EX system and the site is used to prepare the configuration payload. The initial node used to bootstrap the installation process is called the PIT node because the Pre-Install Toolkit is installed there. Once the management network switches have been configured, the other management nodes can be deployed with an operating system and the software to create a Kubernetes cluster utilizing Ceph storage. The CSM services provide essential software infrastructure including the API gateway and many micro-services with REST APIs for managing the system. Once administrative access has been configured, the installation of CSM software and nodes can be validated with health checks before doing operational tasks like the check and update of firmware on system components or the preparation of compute nodes.\n  Upgrade CSM\nThis chapter provides an order list of procedures which can be used to update CSM software that indicate when to do operational tasks as part of the software upgrade workflow. There are procedures to prepare the HPE Cray system for the upgrade, and update the management network, the management nodes, and the CSM services. After the upgrade of CSM software, the CSM health checks are used to validate the system before doing any other operational tasks like the check and update of firmware on system components.\n  CSM Operational Activities\nThis chapter provides an unordered set of administrative procedures required to operate an HPE Cray EX system with CSM software and grouped into several major areas:\n CSM Product Management Artifact Management Boot Orchestration Compute Rolling Upgrade Configuration Management Console Management Firmware Management Hardware State Manager Image Management Kubernetes Network Management Node Management Package Repository Management Power Management Resiliency River Endpoint Discovery Service Security And Authentication System Configuration Service System Layout Service System Management Health UAS User And Admin Topics Utility Storage Validate CSM Health    CSM Troubleshooting Information\nThis chapter provides information about some known issues in the system and tips for troubleshooting Kubernetes.\n  CSM Background Information\nThis chapter provides background information about the NCNs (non-compute nodes) which function as management nodes for the HPE Cray EX system. This information is not normally needed to install or upgrade software, but provides background which might be helpful for troubleshooting an installation.\n  Glossary\nThis chapter provides explanations of terms and acronyms used throughout the rest of this documentation.\n  Copyright and License MIT License\n(C) Copyright [2020-2022] Hewlett Packard Enterprise Development LP\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u0026ldquo;Software\u0026rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \u0026ldquo;AS IS\u0026rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
},
{
	"uri": "/docs-csm/en-12/glossary/",
	"title": "Glossary",
	"tags": [],
	"description": "",
	"content": "Glossary Glossary of terms used in CSM documentation.\n Application Node (AN) Baseboard Management Controller (BMC) Blade Switch Controller (sC) Boot Script Service (BSS) Boot Orchestration Service (BOS) Cabinet Cooling Group Cabinet Environmental Controller (CEC) CEC microcontroller (eC) Compute Rolling Upgrade Service (CRUS) Cray Advanced Platform Monitoring and Control (CAPMC) Customer Access Network Chassis Management Module (CMM) Compute Node (CN) Configuration Framework Service (CFS) Content Projection Service (CPS) Cray CLI (cray) Cray Site Init (CSI) Cray System Management (CSM) Data Virtualization Service (DVS) EX Compute Cabinet EX TDS Cabinet Fabric Floor Standing CDU Hardware Management Network (HMN) Hardware Management Notification Fanout Daemon (HMNFD) Hardware State Manager (HSM) Heartbeat Tracker Daemon (HBTD) High Speed Network (HSN) Image Management Service (IMS) Kubernetes NCNs LiveCD Management Cabinet Management Nodes Mountain Endpoint Discovery Service (MEDS) NIC Mezzanine Card (NMC) Node Controller (nC) Node Management Network Non-Compute Node (NCN) Olympus Cabinet Power Distribution Unit (PDU) Pre-Install Toolkit (PIT) node Rack-Mounted CDU Rack System Compute Cabinet Redfish Translation Service (RTS) River Cabinet River Endpoint Discovery Service (REDS) Rosetta ASIC Service/IO Cabinet Slingshot Slingshot Blade Switch Slingshot Top of Rack (ToR) Switch Shasta Cabling Diagram (SHCD) Supply/Return Cutoff Valves System Admin Toolkit (SAT) System Layout Service (SLS) System Management Network (SMNet) System Management Services (SMS) System Management Services (SMS) nodes Top of Rack Switch Controller (sC-ToR) User Access Instance (UAI) User Access Node (UAN) User Access Service (UAS) Version Control Service (VCS) xname  Application Node (AN) An application node (AN) is an NCN which is not providing management functions for the HPE Cray EX system. The AN is not part of the Kubernetes cluster to which management nodes belong. One special type of AN is the UAN (User Access Node), but different systems may have need for other types of ANs, such as:\n nodes which provide a Lustre routing function (LNet router) gateways between HSN and InfiniBand data movers between two different network file systems visualization servers other special-purpose nodes  Baseboard Management Controller (BMC) Air-Cooled cabinet COTS servers that include a Redfish-enabled baseboard management controller (BMC) and REST endpoint for API control and management. Either IPMI commands or REST API calls can be used to manage a BMC.\nBlade Switch Controller (sC) The Slingshot blade switch embedded controller (sC) provides a hardware management REST endpoint to monitor environmental conditions and manage the blade power, switch ASIC, FPGA buffer/interfaces, and firmware.\nBoot Script Service (BSS) The Boot Script Service stores the configuration information that is used to boot each hardware component. Nodes consult BSS for their boot artifacts and boot parameters when nodes boot or reboot.\nBoot Orchestration Service (BOS) The Boot Orchestration Service (BOS) is responsible for booting, configuring, and shutting down collections of nodes. This is accomplished using BOS components, such as boot orchestration session templates and sessions, as well as launching a Boot Orchestration Agent (BOA) that fulfills boot requests. BOS uses other services which provide boot artifact configuration (BSS), power control (CAPMC), node status (HSM), and configuration (CFS).\nCabinet Cooling Group A cabinet cooling group is a group of Olympus cabinets that are connected to a floor-standing coolant distribution unit (CDU). Management network CDU switches in the CDU aggregate all the node management network (NMN) and hardware management network (HMN) connections for the cabinet group.\nCabinet Environmental Controller (CEC) The Liquid-Cooled Olympus cabinet environmental controller (CEC) sets the cabinet\u0026rsquo;s geolocation, monitors environmental sensors, and communicates status to the cooling distribution unit (CDU). The CEC microcontroller (eC) signals the cooling distribution unit (CDU) to start liquid cooling and then enables the DC rectifiers so that a chassis can be powered on. The CEC does not provide a REST endpoint on SMNet, it simply provides the cabinet environmental and CDU status to the CMM for evaluation or action; the CEC takes no action. The CEC firmware is flashed automatically when the CMM firmware is flashed. If there are momentary erroneous signals because of a CEC reset or cable disconnection, the system can ride through these events without issuing an EPO.\nCEC microcontroller (eC) The CEC microcontroller (eC) sets the cabinet\u0026rsquo;s geolocation, monitors the cabinet environmental sensors, and communicates cabinet status to the cooling distribution unit (CDU). The eC does not provide a REST endpoint on SMNet as do other embedded controllers, but simply monitors the cabinet sensors and provides the cabinet environmental and CDU status to the CMMs for evaluation and/or action.\nCompute Rolling Upgrade Service (CRUS) The Compute Rolling Upgrade Service (CRUS) upgrades sets of compute nodes without requiring an entire set of nodes to be out of service at once. CRUS manages the workload management status of nodes, handling each of the steps required to upgrade compute nodes.\nSee Compute Rolling Upgrades.\nNote: CRUS is deprecated in CSM 1.2.0. It will be removed in a future CSM release and replaced with BOS V2, which will provide similar functionality. See Deprecated features.\nCray Advanced Platform Monitoring and Control (CAPMC) The Cray Advanced Platform Monitoring and Control (CAPMC) service enables direct hardware control of power on/off, power monitoring, or system-wide power telemetry and configuration parameters from Redfish. CAPMC implements a simple interface for powering on/off compute nodes and application nodes, querying node state information, and querying site-specific service usage rules. These controls enable external software to more intelligently manage system-wide power consumption or configuration parameters.\nCray CLI (cray) The cray command line interface (CLI) is a framework created to integrate all of the system management REST APIs into easily usable commands.\nCustomer Access Network The Customer Access Network (CAN) provides access from outside the customer network to services, noncompute nodes (NCNs), and User Access Nodes (UANs) in the system. This allows for the following:\n Clients outside of the system:  Log in to each of the NCNs and UANs. Access web UIs within the system (e.g. Prometheus, Grafana, and more). Access the Rest APIs within the system. Access a DNS server within the system for resolution of names for the webUI and REST API services. Run Cray CLI commands from outside the system. Access the User Access Instances (UAI).   NCNs and UANs to access systems outside the cluster (e.g. LDAP, license servers, and more). Services within the cluster to access systems outside the cluster.  These nodes and services need an IP address that routes to the customer\u0026rsquo;s network in order to be accessed from outside the network.\nChassis Management Module (CMM) The cabinet chassis management module (CMM) provides a REST endpoint via its chassis controller (cC). The CMM is an embedded controller that monitors and controls all the blades in a chassis. Each chassis supports 8 compute blades and 8 switches and associated rectifiers/PSUs in the rectifier shelf. Power Considerations - Two CMMs in adjacent chassis share power from the rectifier shelf (a shelf connects two adjacent chassis - 0 and 1, 2 and 3, 4 and 5, 6 and 7). If both CMMs sharing shelf power are both enabling the rectifiers, one of the CMMs can be removed (but only one at a time) without the rectifier shelf powering off. Removing a CMM will shutdown all compute blades and switches in the chassis. Cooling Considerations - Any single CMM in any cabinet can enable CDU cooling. Note that the CDU \u0026ldquo;enable path\u0026rdquo; has vertical control which means CMMs 0, 2, 4, and 6 and CEC0 are in a path (half of the cabinet), and CMMs 1, 3, 5, and 7 and CEC1 are in another path. Any CMM or CEC in the same half-cabinet path can be removed and CDU cooling will stay enabled as long as the other CMMs/CEC enables CDU cooling.\nCompute Node (CN) The compute node (CN) is where high performance computing application are run. These have hostnames that are of the form nidXXXXXX, that is, nid followed by six digits. where the XXXXXX is a six digit number starting with zero padding.\nConfiguration Framework Service (CFS) The Configuration Framework Service (CFS) is available on systems for remote execution and configuration management of nodes and boot images. This includes nodes available in the Hardware State Manager (HSM) service inventory (compute, management, and application nodes), and boot images hosted by the Image Management Service (IMS).\nCFS configures nodes and images via a GitOps methodology. All configuration content is stored in a version control service (VCS), and is managed by authorized system administrators. CFS provides a scalable Ansible Execution Environment (AEE) for the configuration to be applied with flexible inventory and node targeting options.\nContent Projection Service (CPS) The Content Projection Service (CPS) provides the root filesystem for compute nodes and application nodes in conjunction with the Data Virtualization Service (DVS). Using CPS and DVS, the HPE Cray Programming Environment (CPE) and Analytics products are provided as separately mounted filesystems to compute nodes, application nodes (such as UANs), and worker nodes hosting UAI pods.\nCray Site Init (CSI) The Cray Site Init (CSI) program creates, validates, installs, and upgrades an HPE Cray EX system. CSI can prepare the LiveCD for booting the PIT node and then is used from a booted PIT node to do its other functions during an installation. During an upgrade, CSI is installed on one of the nodes to facilitate the CSM software upgrade.\nCray System Management (CSM) Cray System Management (CSM) refers to the product stream which provides the infrastructure to manage an HPE Cray EX system using Kubernetes to manage the containerized workload of layered micro-services with well-defined REST APIs which provide the ability to discover and control the hardware platform, manage configuration of the system, configure the network, boot nodes, gather log and telemetry data, connect API access and user level access to Identity Providers (IdPs), and provide a method for system administrators and end-users to access the HPE Cray EX system.\nData Virtualization Service (DVS) The Data Virtualization Service (DVS) is a distributed network service that projects file systems mounted on non-compute nodes (NCN) to other nodes within the HPE Cray EX system. Projecting is the process of making a file system available on nodes where it does not physically reside. DVS-specific configuration settings enable clients to access a file system projected by DVS servers. These clients include compute nodes, User Access Nodes (UANs), and other management nodes running User Access Instances (UAIs). Thus DVS, while not a file system, represents a software layer that provides scalable transport for file system services. DVS is integrated with the Content Projection Service (CPS).\nEX Compute Cabinet A Liquid-Cooled Olympus cabinet is a dense compute cabinet that supports 64 compute blades and 64 high-speed network (HSN) switches.\nImage Management Service (IMS) The Image Management Service (IMS) uses the open source Kiwi-NG tool to build image roots from recipes. IMS also uses CFS to apply image customization for pre-boot configuration of the image root. These images are bootable on compute nodes and application nodes.\nEX TDS Cabinet A Liquid-Cooled TDS cabinet is a dense compute cabinet that supports 2-chassis, 16 compute blades and 16 high-speed network (HSN) switches, and includes a rack-mounted 4U coolant distribution unit (MCDU-4U).\nFabric The Slingshot fabric consists of the switches, cables, ports, topology policy, and configuration settings for the Slingshot high-speed network.\nFloor Standing CDU A floor-standing coolant distribution unit (CDU) pumps liquid coolant through a cabinet group or cabinet chilled doors.\nHardware Management Network (HMN) The hardware management network (HMN) includes HMS embedded controllers. This includes chassis controllers (cC), node controllers (nC) and switch controllers (sC), for Liquid-Cooled TDS and Liquid-Cooled Olympus systems. For standard rack systems, this includes iPDUs, COTS server BMCs, or any other equipment that requires hardware-management with Redfish. The hardware management network is isolated from all other node management networks. An out-of-band Ethernet management switch and hardware management VLAN is used for customer access and administration of hardware.\nHardware Management Notification Fanout Daemon (HMNFD) The Hardware Management Notification Fanout Daemon (HMNFD) service receives component state change notifications from the HSM. It fans notifications out to subscribers (typically compute nodes).\nHardware State Manager (HSM) Hardware State Manager (HSM) service monitors and interrogates hardware components in an HPE Cray EX system, tracking hardware state and inventory information, and making it available via REST queries and message bus events when changes occur.\nHeartbeat Tracker Daemon (HBTD) The Heartbeat Tracker Daemon (HBTD) service listens for heartbeats from components (mainly compute nodes). It tracks changes in heartbeats and conveys changes to HSM.\nHigh Speed Network (HSN) The High Speed Network (HSN) in an HPE Cray EX system is based on the Slingshot switches.\nKubernetes NCNs The Kubernetes NCNs are the management nodes which are known as Kubernetes master nodes (ncn-mXXX) or Kubernetes worker nodes (ncn-wXXX). The only type of management node which is excluded from this is the utility storage node (ncn-sXXX).\nLiveCD The LiveCD has a complete bootable Linux operating system that can be run from a read-only CD or DVD, a writable USB flash drive, or a hard disk. It is used to bootstrap the installation process for CSM software. It contains the Pre-Install Toolkit (PIT). The node which boots from it during the install is known as the PIT node.\nManagement Cabinet At least one 19 inch IEA management cabinet is required for every HPE Cray EX system to support the management non-compute nodes (NCN), system management network, utility storage, and other support equipment. This cabinet serves as the primary customer access point for managing the system.\nManagement Nodes The management nodes are one grouping of NCNs. The management nodes include the master nodes with hostnames of the form of ncn-mXXX, the worker nodes with hostnames of the form ncn-wXXX, and utility storage nodes, with hostnames of the form ncn-sXXX, where the XXX is a three digit number starting with zero padding. The utility storage nodes provide Ceph storage for use by the management nodes. The master nodes provide Kubernetes master functions and have the etcd cluster which provides a datastore for Kubernetes. The worker nodes provide Kubernetes worker functions where most of the containerized workload is scheduled by Kubernetes.\nMountain Cabinet See Olympus cabinet. Some software and documentation refers to the Olympus cabinet as a Mountain cabinet.\nMountain Endpoint Discovery Service (MEDS) The Mountain Endpoint Discovery Service (MEDS) manages initial discovery, configuration, and geolocation of Redfish-enabled BMCs in liquid-cooled Olympus cabinets. It periodically makes Redfish requests to determine if hardware is present or missing.\nNIC Mezzanine Card (NMC) The NIC mezzanine card (NMC) attaches to two host port connections on a liquid-cooled compute blade node card and provides the high-speed network (HSN) controllers (NICs). There are typically two or four NICs on each node card. NMCs connect to the rear panel EXAMAX connectors on the compute blade through an internal L0 cable assembly in a single-, dual-, or quad-injection bandwidth configuration depending on the design of the node card.\nNode Controller (nC) Each compute blade node card includes an embedded node controller (nC) and REST endpoint to manage the node environmental conditions, power, HMS nFPGA interface, and firmware.\nNode Management Network The node management network (NMN) communicates with motherboard PCH-style hosts, typically 10GbE Ethernet LAN-on-motherboard (LOM) interfaces. This network supports node boot protocols (DHCP/TFTP/HTTP), in-band telemetry and event exchange, and general access to management REST APIs.\nNon-Compute Node (NCN) Any node which is not a compute node may be called a Non-Compute Node (NCN). The NCNs include management nodes and application nodes.\nOlympus Cabinet The Olympus cabinet is a liquid-cooled dense compute cabinet that supports 64 compute blades and 64 high-speed network (HSN) switches. Every HPE Cray EX system with Olympus cabinets will also have at least one River cabinet to house non-compute node components such as management nodes, management network switches, storage nodes, application nodes, and possibly other air-cooled compute nodes. Some software and documentation refers to the Olympus cabinet as a Mountain cabinet.\nPower Distribution Unit (PDU) The cabinet PDU receives 480VAC 3-phase facility power and provides circuit breaker, fuse protection, and EMI filtered power to the rectifier/power supplies that distribute ±190VDC (HVDC) to a chassis. PDUs are passive devices that do not connect to the SMNet.\nPre-Install Toolkit (PIT) node The Pre-Install Toolkit is installed onto the initial node used as the inception node during software installation which is booted from a LiveCD. This is the node that will eventually become ncn-m001. The node running the Pre-Install Toolkit is known as the PIT node during the installation process until it reboots from a normal management node image like the other master nodes.\nEarly in the install process, before the Pre-Install Toolkit has been installed or booted, the documents may still refer to the PIT node. In this case, they are referring to the node which will eventually become the PIT node.\nIn this documentation, PIT node and LiveCD are sometimes used interchangeably.\nRack-Mounted CDU The rack-mounted coolant distribution unit (MCDU-4U) pumps liquid coolant through the Liquid-Cooled TDS cabinet coolant manifolds.\nRack System Compute Cabinet Air-Cooled compute cabinets house a cluster of compute nodes, Slingshot ToR switches, and SMNet ToR switches.\nRedfish Translation Service (RTS) The Redfish Translation Service (RTS) aids in management of any hardware components which are not managed by Redfish, such as a ServerTech PDU in a River Cabinet.\nRiver Cabinet At least one 19 inch IEA management cabinet is required for every HPE Cray EX system to support the management non-compute nodes (NCN), system management network, utility storage, and other support equipment. Additional River cabinets may be included to house storage storage or compute nodes which are not in an Olympus liquid-cooled cabinet.\nRiver Endpoint Discovery Service (REDS) The River Endpoint Discovery Service (REDS) manages initial discovery, configuration, and geolocation of Redfish-enabled BMCs in air-cooled River cabinets. It periodically makes Redfish requests to determine if hardware is present or missing.\nRosetta ASIC The Rosetta ASIC is a 64-port switch chip that forms the foundation for the Slingshot network. Each port can operate at either 100G or 200G. Each network edge port supports IEEE 802.3 Ethernet, optimized-IP based protocols, and portals (an enhanced frame format that supports higher rates of small messages).\nService/IO Cabinet An Air-Cooled service/IO cabinet houses a cluster of NCN servers, Slingshot ToR switches, and management network ToR switches to support the managed ecosystem storage, network, user access services (UAS), and other IO services such as LNet and gateways.\nSlingshot Slingshot supports L1 and L2 network connectivity between 200 Gbs switch ports and L0 connectivity from a single 200 Gbs port to two 100 Gbs Mellanox ConnectX-5 NICs. Slingshot also supports edge ports and link aggregation groups (LAG) to external storage systems or networks.\n IEEE 802.3cd/bs (200 Gbps) Ethernet over 4 x 50 Gbs (PAM-4) lanes 200GBASE-DR4, 500 meter singlemode fiber 200GBASE-SR4, 100 meter multi-mode fiber 200GBASE-CR4, 3 meter copper cable IEEE 802.3cd (100 Gbps) Ethernet over 2 x 50 Gbs (PAM-4) lanes 100GBASE-SR2, 100 meter multimode fiber 100GBASE-CR2, 3 meter copper cable IEEE 802.3 2018 100 Gbps Ethernet over 4 x 25 Gbs (NRZ) lanes 100GBASE-CR4, 5 meter copper cable 100GBASE-SR4, 100 meter multi-mode fiber Optimized Ethernet and HPC fabric formats Lossy and lossless delivery Flow control, 802.1x (PAUSE), 802.1p (PFC), credit-based flow control on fabric links, fine-grain flow control on host links and edge ports, link-level retry, low latency FEC, Ethernet physical interfaces.  Slingshot Blade Switch The Liquid-Cooled Olympus cabinet blade switch supports one switch ASIC and 48 fabric ports. Eight connectors on the rear panel connect orthogonally to each compute blade then to NIC mezzanine cards (NMCs) inside the compute blade. Each rear panel EXAMAX connector supports two switch ports (a total of 16 fabric ports per blade). Twelve QSFP-DD cages on the front panel (4 fabric ports per QSFP-DD cage), fan out 48 external fabric ports to other switches. The front-panel top ports support passive electrical cables (PEC) or active optical cables (AOC). The front-panel bottom ports support only PECs for proper cooling in the blade enclosure.\nSlingshot Top of Rack (ToR) Switch A standard River cabinet can support one, two, or four, rack-mounted Slingshot ToR switches. Each switch supports a total of 64 fabric ports. 32 QSFP-DD connectors on the front panel connect 64 ports to the fabric. All front-panel connectors support either passive electrical cables (PEC) or active optical cables (AOC).\nShasta Cabling Diagram (SHCD) The Shasta Cabling Diagram (SHCD) is a multiple tab spreadsheet prepared by HPE Cray Manufacturing with information about the components in an HPE Cray EX system. This document has much information about the system. Included in the SHCD are a configuration summary with revision history, floor layout plan, type and location of components in the air-cooled cabinets, type and location of components in the liquid-cooled cabinets, device diagrams for switches and nodes in the cabinets, list of source and destination of every HSN cable, list of source and destination of every cable connected to the spine switches, list of source and destination of every cable connected to the NMN, list of source and destination of every cable connected to the HMN. list of cabling for the KVM, and routing of power to the PDUs.\nSupply/Return Cutoff Valves Manual coolant supply and return shutoff valves at the top of each cabinet can be closed to isolate a single cabinet from the other cabinets in the cooling group for maintenance. If the valves are closed during operation, the action automatically causes the CMMs to remove ±190VDC from each chassis in the cabinet because of the loss of coolant pressure.\nSystem Admin Toolkit (SAT) The System Admin Toolkit (SAT) product provides the sat command line interface which interacts with the REST APIs of many services to perform more complex system management tasks.\nSystem Layout Service (SLS) The System Layout Service (SLS) serves as a \u0026ldquo;single source of truth\u0026rdquo; for the system design. It details the physical locations of network hardware, management nodes, application nodes, compute nodes, and cabinets. It also stores information about the network, such as which port on which switch should be connected to each node.\nSystem Management Network (SMNet) The system management network (SMNet) is a dedicated out-of-band (OOB) spine-leaf topology Ethernet network that interconnects all the nodes in the system to management services.\nSystem Management Services (SMS) System Management Services (SMS) leverages open REST APIs, Kubernetes container orchestration, and a pool of commercial off-the-shelf (COTS) servers to manage the system. The management server pool, custom Redfish-enabled embedded controllers, iPDU controllers, and server BMCs are unified under a common software platform that provides 3 levels of management: Level 1 HaaS, Level 2 IaaS, and Level 3 PaaS.\nSystem Management Services (SMS) nodes System Management Services (SMS) nodes provide access to the entire management cluster and Kubernetes container orchestration.\nTop of Rack Switch Controller (sC-ToR) The Air-Cooled cabinet HSN ToR switch embedded controller (sC-ToR) provides a hardware management REST endpoint to monitor the ToR switch environmental conditions and manage the switch power, HSN ASIC, and FPGA interfaces.\nUser Access Instance (UAI) The User Access Instance (UAI) is a lightweight, disposable platform that runs under Kubernetes orchestration on worker nodes. The UAI provides a single user containerized environment for users on a Cray Ex system to develop, build, and execute their applications on the HPE Cray EX compute node. See UAN for another way for users to gain access.\nUser Access Node (UAN) The User Access Node (UAN) is an NCN, but is really one of the special types of application nodes. The UAN provides a traditional multi-user Linux environment for users on a Cray Ex system to develop, build, and execute their applications on the HPE Cray EX compute node. See UAI for another way for users to gain access. Some sites refer to their UANs as Login nodes.\nUser Access Service (UAS) The User Access Service (UAS) is a containerized service managed by Kubernetes that enables users to create and run user applications inside a UAI. UAS runs on a management node that is acting as a Kubernetes worker node. When a user requests a new UAI, the UAS service returns status and connection information to the newly created UAI. External access to UAS is routed through a node that hosts gateway services.\nVersion Control Service (VCS) The Version Control Service (VCS) provides configuration content to CFS via a GitOps methodology based on a git server (gitea) that can be accessed by the git command but also includes a web interface for repository management, pull requests, and a visual view of all repositories and organizations.\nxname Component names (xnames) identify the geolocation for hardware components in the HPE Cray EX system. Every component is uniquely identified by these component names. Some, like the system cabinet number or the CDU number, can be changed by site needs. There is no geolocation encoded within the cabinet number, such as an X-Y coordinate system to relate to the floor layout of the cabinets. Other component names refer to the location within a cabinet and go down to the port on a card or switch or the socket holding a processor or a memory DIMM location. See Component Names (xnames).\n"
},
{
	"uri": "/docs-csm/en-12/background/ncn_operating_system_releases/",
	"title": "NCN Operating System Releases",
	"tags": [],
	"description": "",
	"content": "NCN Operating System Releases The NCNs define their products per image layer:\n Management node SquashFS images are always SLE_HPC (SuSE High Performance Computing) Utility Storage nodes Ceph Images are always SLE_HPC (SuSE High Performance Computing) with SES (SuSE Enterprise Storage)  The sles-release RPM is uninstalled for NCNs, and instead, the sle_HPC-release RPM is installed. These both provide the same files, but differ for os-release and /etc/product.d/baseproduct.\nThe ses-release RPM is installed on top of the sle_HPC-release RPM in the Ceph images.\nThe following example shows the two product files for a utility storage node booted from the Ceph image. This node is capable of high performance computing and serving enterprise storage.\nncn-s# ls -l /etc/products.d/ total 5 lrwxrwxrwx 1 root root 12 Jan 1 06:43 baseproduct -\u0026gt; SLE_HPC.prod -rw-r--r-- 1 root root 1587 Oct 21 15:27 ses.prod -rw-r--r-- 1 root root 2956 Jun 10 2020 SLE_HPC.prod ncn-s# grep \u0026#39;\u0026lt;summary\u0026#39; /etc/products.d/*.prod /etc/products.d/ses.prod: \u0026lt;summary\u0026gt;SUSE Enterprise Storage 7\u0026lt;/summary\u0026gt; /etc/products.d/SLE_HPC.prod: \u0026lt;summary\u0026gt;SUSE Linux Enterprise High Performance Computing 15 SP3\u0026lt;/summary\u0026gt; Kubernetes nodes will report SLE HPC only, which is reflected in the kubectl output.\nncn# kubectl get nodes -o wide NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME ncn-m001 Ready control-plane,master 27h v1.20.13 10.252.1.4 \u0026lt;none\u0026gt; SUSE Linux Enterprise High Performance Computing 15 SP3 5.3.18-59.19-default containerd://1.5.7 ncn-m002 Ready control-plane,master 8d v1.20.13 10.252.1.5 \u0026lt;none\u0026gt; SUSE Linux Enterprise High Performance Computing 15 SP3 5.3.18-59.19-default containerd://1.5.7 ncn-m003 Ready control-plane,master 8d v1.20.13 10.252.1.6 \u0026lt;none\u0026gt; SUSE Linux Enterprise High Performance Computing 15 SP3 5.3.18-59.19-default containerd://1.5.7 ncn-w001 Ready \u0026lt;none\u0026gt; 8d v1.20.13 10.252.1.7 \u0026lt;none\u0026gt; SUSE Linux Enterprise High Performance Computing 15 SP3 5.3.18-59.19-default containerd://1.5.7 ncn-w002 Ready \u0026lt;none\u0026gt; 8d v1.20.13 10.252.1.8 \u0026lt;none\u0026gt; SUSE Linux Enterprise High Performance Computing 15 SP3 5.3.18-59.19-default containerd://1.5.7 ncn-w003 Ready \u0026lt;none\u0026gt; 8d v1.20.13 10.252.1.9 \u0026lt;none\u0026gt; SUSE Linux Enterprise High Performance Computing 15 SP3 5.3.18-59.19-default containerd://1.5.7 "
},
{
	"uri": "/docs-csm/en-12/background/ncn_packages/",
	"title": "NCN Packages",
	"tags": [],
	"description": "",
	"content": "NCN Packages The management nodes boot from images which have many (RPM) packages installed. Lists of the packages for these images are generated on running nodes. A list of images can be collected by running a zypper command on one of the storage, worker, or master nodes.\nKubernetes Images The Kubernetes image is used to boot the master nodes and worker nodes.\nCollection ncn-w002# zypper --disable-repositories se --installed-only | grep i+ | tr -d \u0026#39;|\u0026#39; | awk \u0026#39;{print $2}\u0026#39; The List  SLE_HPC SLE_HPC-release acpid apparmor-profiles arptables at autoyast2 autoyast2-installation base bc bind-utils biosdevname ceph-common cfs-state-reporter cloud-init conntrack-tools cpupower crash cray-cos-release cray-cps-utils cray-dvs-kmp-default cray-dvs-service cray-heartbeat cray-lustre-client cray-lustre-client-devel cray-lustre-client-kmp-default cray-network-config cray-node-identity cray-orca cray-power-button cray-sat-podman craycli-wrapper createrepo_c dnsmasq dosfstools dracut-kiwi-live dracut-metal-mdsquash dump e2fsprogs ebtables emacs ethtool expect fping gdb genders git-core glibc gnuplot gperftools gptfdisk grub2 haproxy hpe-csm-scripts hplip ipmitool iproute2-bash-completion ipset ipvsadm irqbalance java-1_8_0-ibm java-1_8_0-ibm-plugin kdump kdumpid keepalived kernel-mft-mlnx-kmp-default kernel-source kernel-syms kexec-tools kmod-bash-completion kubeadm kubectl kubelet less libcanberra-gtk0 libecpg6 libpq5 libunwind-devel ltrace lvm2 man mariadb mariadb-tools mdadm minicom mlocate nmap numactl open-lldp patterns-base-base pdsh perf perl-MailTools perl-doc pixz podman podman-cni-config postgresql postgresql-contrib postgresql-docs postgresql-server python python-urlgrabber python3-Jinja2 python3-MarkupSafe python3-click python3-colorama python3-curses python3-ipaddr python3-lxml python3-netaddr python3-pexpect python3-pip python3-rpm python3-sip rarpd rasdaemon rsync rsyslog rzsz screen slingshot-network-config smartmontools socat spire-agent squashfs squid strace sudo sysstat systemtap tar tcpdump unixODBC usbutils vim wget wireshark xfsdump yast2-add-on yast2-bootloader yast2-country yast2-network yast2-services-manager yast2-users yum-metadata-parser zip  CEPH The Ceph image is used to boot the utility storage nodes.\nCollection ncn-s002# zypper --disable-repositories se --installed-only | grep i+ | tr -d \u0026#39;|\u0026#39; | awk \u0026#39;{print $2}\u0026#39; The List  SLE_HPC SLE_HPC-release acpid apparmor-profiles arptables at autoyast2 autoyast2-installation base bc bind-utils biosdevname ceph-mds ceph-mgr ceph-mon ceph-osd ceph-radosgw cfs-state-reporter cloud-init cpupower crash cray-cos-release cray-dvs-kmp-default cray-dvs-service cray-heartbeat cray-lustre-client cray-lustre-client-devel cray-lustre-client-kmp-default cray-network-config cray-node-identity cray-power-button craycli-wrapper createrepo_c dnsmasq dosfstools dracut-kiwi-live dracut-metal-mdsquash dump e2fsprogs ebtables emacs ethtool expect fping gdb genders git-core glibc gnuplot gperftools gptfdisk grub2 haproxy hpe-csm-scripts hplip ipmitool iproute2-bash-completion ipset irqbalance java-1_8_0-ibm java-1_8_0-ibm-plugin kdump kdumpid keepalived kernel-mft-mlnx-kmp-default kernel-source kernel-syms kexec-tools kmod-bash-completion kubectl less libcanberra-gtk0 libecpg6 libpq5 libunwind-devel ltrace lvm2 man mariadb mariadb-tools mdadm minicom mlocate netcat-openbsd nmap numactl open-lldp patterns-base-base pdsh perf perl-MailTools perl-doc pixz podman podman-cni-config postgresql postgresql-contrib postgresql-docs postgresql-server python python-urlgrabber python3-Jinja2 python3-MarkupSafe python3-boto3 python3-click python3-colorama python3-curses python3-ipaddr python3-lxml python3-netaddr python3-pexpect python3-pip python3-rpm python3-sip rarpd rasdaemon rsync rsyslog rzsz screen slingshot-network-config smartmontools socat spire-agent squashfs squid strace sudo sysstat systemtap tar tcpdump unixODBC usbutils vim wget wireshark xfsdump yast2-add-on yast2-bootloader yast2-country yast2-network yast2-services-manager yast2-users yum-metadata-parser zip  "
},
{
	"uri": "/docs-csm/en-12/background/ncn_plan_of_record/",
	"title": "Plan Of Record",
	"tags": [],
	"description": "",
	"content": "Plan of Record This document outlines the hardware necessary to meet CSM\u0026rsquo;s Plan of Record (PoR). This serves as the minimum, necessary pieces required per each server in the management plane.\n If the system\u0026rsquo;s NICs do not align to the PoR NICs outlined below (e.g. Onboard NICs are used instead of PCIe), then follow Customize PCIe Hardware before booting the NCN(s). If there are more disks than what is listed below in the PoR for disks, then follow Customize Disk Hardware before booting the NCN(s).  Table of Contents  Non-Compute Nodes  Masters NCNs  Disks NICs   Workers NCNs  Disks NICs   Storage NCNs  Disks NICs      Non-Compute Nodes  NOTE: Several components below are necessary to provide redundancy in the event of hardware failure.\n Masters NCNs Master Disks  Operating System: 2x SSDs of equal size, and less than 500GiB (524288000000 bytes) ETCD: 1x SSD smaller than 500GiB (524288000000 bytes) (This disk will be fully encrypted with LUKS2)  Master NICs  NOTE: The 2nd port on each card is unused/empty (reserved for future use).\n  Management Network: 2x PCIe cards, with 1 or 2 heads/ports each for a total of 4 ports split between two PCIe cards  Workers NCNs Worker Disks  Operating System: 2x SSDs of equal size, and less than 500GiB (524288000000 bytes) Ephemeral: 1x SSD larger than 1TiB (1048576000000 bytes)  Worker NICs  NOTE: There is no PCIe redundancy for the management network for worker NCNs. The only redundancy set up for workers is port redundancy.\n  Management Network: 1x PCIe card with 2 heads/ports for a total of 2 ports dedicated to a single PCIe card High-Speed Network: 1x PCIe card capable of 100Gbps (e.g. ConnectX-5 or Cassini), with 1 or 2 heads/ports  Storage NCNs Storage Disks  Operating System: 2x SSDs of equal size, and less than 500GiB (524288000000 bytes) CEPH: 8x SSDs of any size   NOTE: Any available disk that is not consumed by the operating system will be used for CEPH, but a node needs a minimum of 8 disks for making an ideal CEPH pool for CSM.\n Storage NICs  NOTE: The 2nd port on each card is filled but not configured (reserved for future use).\n  Management Network: 2x PCIe cards, each with 2 heads/ports for a total of 4 ports split between two PCIe cards  "
},
{
	"uri": "/docs-csm/en-12/background/",
	"title": "Background Information",
	"tags": [],
	"description": "",
	"content": "CSM Background Information This document provides background information about the NCNs (non-compute nodes) which function as management nodes for the HPE Cray EX system. This information is not normally needed to install software, but provides background which might be helpful for troubleshooting an installation.\nTopics:  Cray Site Init Files Certificate Authority NCN Images NCN Boot Workflow NCN Networking NCN Mounts and File Systems NCN Packages NCN Operating System Releases cloud-init Basecamp Configuration  Details Cray Site Init Files The Cray Site Init (csi) command has several files which describe pre-configuration data needed during the installation process:\n application_node_config.yaml cabinets.yaml hmn_connections.json ncn_metadata.csv switch_metadata.csv  In addition, after running csi with those pre-config files, csi creates an output system_config.yaml file which can be passed to csi when reinstalling this software release.\nCertificate Authority While a system is being installed for the first time, a certificate authority (CA) is needed. This can be generated for a system, or one can be supplied from a customer intermediate CA. Outside of a new installation, there is no supported method to rotate or change the platform CA in this release.\nFor more information about these topics, see Certificate Authority\n \u0026ldquo;Overview\u0026rdquo; \u0026ldquo;Use Default Platform Generated CA\u0026rdquo; \u0026ldquo;Customize Platform Generated CA\u0026rdquo; \u0026ldquo;Use an External CA\u0026rdquo;  NCN Images The management nodes boot from NCN images which are created as layers on top of a common base image. The common image is customized with a Kubernetes layer for the master nodes and worker nodes. The common image is also customized with a storage-ceph layer for the utility storage nodes. Three artifacts are needed to boot the management nodes.\nSee NCN Images\nNCN Boot Workflow The boot workflow for management nodes (NCNs) is different from compute nodes or application nodes. They can PXE boot over the network or from local storage.\nSee NCN Boot Workflow for these topics\n How can I tell if I booted via disk or PXE? Set BMCs to DHCP Set Boot Order  Setting Order Trimming Boot Order Examples Reverting Changes Locating USB Device    NCN Networking Non-compute nodes and compute nodes have different network interfaces used for booting. The NCN network interfaces, device naming, and vendor and bus identification are described in this topic.\n NCN Networking  NCN Mounts and File Systems The management nodes have specific file systems and mounts and use overlayfs.\nSee NCN Mounts and File Systems\nNCN Packages The management nodes boot from images which have many (RPM) packages installed. The packages installed differ between the Kubernetes master and worker nodes versus the utility storage nodes.\n NCN Packages  NCN Operating System Releases All management nodes have an operating system based on SLE_HPC (SuSE High Performance Computing).\n NCN Operating System Releases  cloud-init Basecamp Configuration Metal Basecamp is a cloud-init DataSource available on the LiveCD. Basecamp\u0026rsquo;s configuration file offers many inputs for various cloud-init scripts embedded within the NCN images.\n"
},
{
	"uri": "/docs-csm/en-12/background/certificate_authority/",
	"title": "Certificate Authority",
	"tags": [],
	"description": "",
	"content": "Certificate Authority While a system is being installed for the first time, a certificate authority (CA) is needed. This can be generated for a system, or one can be supplied from a customer intermediate CA. Outside of a new installation, there is no supported method to rotate or change the platform CA in this release.\nTopics:  Overview Use Default Platform Generated CA Customize Platform Generated CA Use External CA  Overview At install time, a PKI certificate authority (CA) can either be generated for a system, or a customer can opt to supply their own (intermediate) CA.\n Outside of a new installation, there is currently no supported method to rotate (change) the platform CA. The ability to rotate CAs is anticipated as part of a future release.\n Sealed Secrets, part of shasta-cfg, are used by the installation process to inject CA material in an encrypted form. Vault (cray-vault instance) ultimately sources and stores the CA from a K8S secret (result of decrypting the corresponding Sealed Secret).\nThe resulting CA will be used to sign multiple workloads on the platform (Ingress, mTLS for PostgreSQL Clusters, Spire, \u0026hellip;).\n Management of Sealed Secrets should ideally take place on a secure workstation.\n Use Default Platform Generated CA In shasta-cfg, there is a Sealed Secret generator named platform_ca. By default, the customizations.yaml file will contain a generation template to use this generator, and will create a sealed secret named generated-platform-ca-1. The cray-vault overrides in customizations.yaml contain a) a templated reference to expand the generated-platform-ca-1 Sealed Secret and b) directives instructing vault to load the CA material on start-up \u0026ndash; ultimately initializing a HashiCorp Vault PKI Engine instance with the material.\n Note: the intermediate CA gets installed into Vault, not the root CA (as generated). Use of a root CA is not recommended.\n The resulting default configuration (prior to seeding customizations) should look like the following customizations.yaml snippet:\nspec: ... kubernetes: sealed_secrets: ... gen_platform_ca_1: generate: name: generated-platform-ca-1 data: - type: platform_ca args: root_days: 3651 int_days: 3650 root_cn: \u0026#34;Platform CA\u0026#34; int_cn: \u0026#34;Platform CA - L1\u0026#34; services: ... cray-vault: sealedSecrets: - \u0026#34;{{ kubernetes.sealed_secrets.gen_platform_ca_1 | toYaml }}\u0026#34; pki: customCA: enabled: true secret: generated-platform-ca-1 private_key: int_ca.key certificate: int_ca.crt ca_bundle: root_ca.crt ...  The platform_ca generator will produce RSA CAs with a 3072-bit modulus, using SHA256 as the base signature algorithm.\n Customize Platform Generated CA The platform_ca generator inputs can be customized, if desired. Notably, the root_days, int_days, root_cn, and int_cn fields can be modified. While the shasta-cfg documentation on the use of generators supplies additional detail, the *_days settings control the validity period and the *_cn settings control the common name value for the resulting CA certificates. Ensure the Sealed Secret name reference in spec.kubernetes.services.cray-vault.sealedSecrets is updated if you opt to use a different name.\n Outside of a new installation, there is currently no supported method to rotate (change) the platform CA. Please set validity periods accordingly. The ability to rotate CAs is anticipated as part of a future release.\n Use External CA The static_platform_ca generator, part of shasta-cfg, can be used to supply an external CA private key, certificate, and associated upstream CAs that form the trust chain. The generator will attempt to prevent you from supplying a root CA. You must also supply the entire trust chain up to the root CA certificate.\n Outside of a new installation, there is currently no supported method to rotate (change) the platform CA. Please ensure validity periods are set accordingly for external CAs you use in this process. The ability to rotate CAs is anticipated as part of a future release.\n Here is an example customizations.yaml snippet illustrating the generator input to inject a static CA:\nspec: ... kubernetes: sealed_secrets: ... external_platform_ca_1: generate: name: external-platform-ca-1 data: - type: static_platform_ca args: key: |------BEGIN PRIVATE KEY----- MIIG/gIBADANBgkqhkiG9w0BAQEFAASCBugwggbkAgEAAoIBgQDvhzXCUmGalTDo uswnppXbM+E+OwU79xvaZBsiGEDPpERPZfizpSO3/6IWnYvCUCrb1V4rIhkSKGYq LLVMhmEkfiEImDnx+ksbZau3/w23ogP4qj+BpbTRF707//IOfXgRSD1Q+mVQ7MVo crOt8e/hR4DqZjbkWOrw9pdrfvV159o6x9RVpip33BkAtDzONYApY6ePhzS1BFmo I9R0zMGNeVpy7I2m47YUwpyGAWjRoof0P2BFHX7vdEoJE/TWAlbbiqlM9OHmR85J I/O0MwP63C2Eqn9HajbF1GPVw2IvGN6fE3THtmVDVwxD17cFsKxtVl8gMHljkw9V I+U5piuIfDPvaCoUIC3hlv7jsQs9j52LyZZF3sOKP3xsGG4a5ThqK08EKEgrFovg MYsQrt8aSx7o/7K6IzDOD9QVf7dmkFVxlbPGAjR6nlQ5aW7gFEOAr1CbbZFS+lKi KGjHGraIv93MTqqToE7yRJ6Sv0yP7U9clCi6MNi89AWFfZDkLAsCAwEAAQKCAYAW R61odeE+T8JM45M53PTzfs/kyfiiq0mb9tPPSBI/Pjhcak/H5gR8iPq6v8zQNkTG TgKEYJeUaM2X/rCefaFrk4/fDMnXCEEUO1DNvJu6CQf1iWB+3rsC+AJSImyRjHou oVmSvrfN3zg9ju3HsElv2wbSxs80TlEMOOO8zAJpBTf3X78QeHRa0c5BkoJVbASP 1QUxBJKSg+UTDsIkWydl0XPoXLiQXX4CUFfe3yKw3T1oKrz5sNSt0VNRpNmRToY3 s96Teuv2iBUnN4UciuFajgjlP0Wt2YvntWoYcwJ7mOjwo6Ru5IXdPMeLBx/xKeLF j2SnPiozSAg2OV8G+yffOIcV7598s2Jh9LpgEX0S2NWPdSrjp33IWM9clivzQXaV fFZtFcb3dkrXTt2jVuj6hQR5dsVMC/D/sfORPuAudejmUkAYmozTI9vgcOJpWw3h AT8KBZ6xR3ifr3/GwJk9eosFMeLCTnUprhgbMzM9sde31NOzgYPhiPrN4GJRp4EC gcEA+e3m7HNrSY766GOaiYwiVdzLftL7i6Ie0QTHqJLLESu2/XyxuoML6IRXc+Df A/HVtuwJMqxEe3APvOcwS/Qs6qnPhh0WNz9vJ+3D/uo7Om3cbIR8J6QlsQID9Kas /OAOqxcbtedkkiDSzVM1SPzNh+R85FBDK2xBM433Eu9xET0V8YZegT99SWg72l8+ M37/EhGvtyQpYpY8lYs8pI3Xj7IRLt+jkPKu59uDdATMvVntOMheddpTwYW7XdUI M67VAoHBAPVYodD9Hoe5AcUBrahM7trGzAw3z8fom5lf/wmzJ6Mow8lgH6tliwCs 4NS5PR45olONhK7o7vd/PXvzP1QSIHLNbInveCH29O0ZmBasDlF/eDT+Hcdzq0sw YWUR+9mX5kNS3DuZaWy6f2PDQC+mzPn1yxGmwL2yW0sY6ExfKjmFVSjqG7Mt/oMo BriKaANd3ctge3aRm2MHniXOPq+jC2Zq1rRopWgWIWDzchQsyl4e6iHs5s80nQsE R9nrC6CfXwKBwQDMlwLB7HmW7YRXV7HZhu1UfDnYx71CwKOZVuBaDlBM7gwN1VVn 6H6HCE7OfPYStJTN+MpOwNYOdd1sNZRDmM5sCjXnA0h8UWEcvnYC5ps1aVlXO9ym VqjEDXJPg2F4X7GiPHhin9ikBlqJ2eN0q/1TkKbr/wf9M9Dr8vqedYOJKQgdfnE+ PErDHKBiUjUI0pzanb/Jm8CFA5b0k9ZAnhwndQy74jZzITYsdnVVM9il6EdYhC1P LDoD4QVP+mOMa0ECgcEA0ZCKb4O1j0Kk000ysx47q53A7vLBRUVXmzOXGgbwZXpN efXkNze9+q6wQKOVI/sgv3OTEQAgFkGWGAjXYA03sDftbQiiOYjC/r8s3LjMZiqW V9VzREl11/yURIuO7vbDlV/yg+nvVhMa+vDtI4a7cQrVENe5rI7rUgMNcSacX5OX ASKu1GcGDaujyf9XBwEnkS9xZf7LllQMbshzXPzMoQfDK0hzeKvmiPSIzdjQZoLL hHzhTb3oIl/eq7IMNX/LAoHAYuVeWbSXROyXITXrYcYMwgtYjjUWThQmrLQImJjj HDUNMqq8w8OaQsV+JpZ0lwukeYst3d8vH8Eb4UczUaR+oJpBeEmXjXCGYG4Ec1EQ H72VrrZoJowoqORDSp88h+akcF6+vPJPuNC/Ea7+eAeiYqgxOX5nc2uLjZxBt4OC AhKMY5mnBN2pfAkGVpuyUw3dqGctTSCT0jnxvFPXpldgdAmXi2NTPqPd0IzmLKNG jja1TCeqn9XRTy+EArf1bYi+ -----END PRIVATE KEY----- cert: |------BEGIN CERTIFICATE----- MIIEZTCCAs2gAwIBAgIJAKnqv1FyMOp/MA0GCSqGSIb3DQEBCwUAMFsxDzANBgNV BAoMBlNoYXN0YTERMA8GA1UECwwIUGxhdGZvcm0xGjAYBgNVBAMMEVJvb3QgR2Vu ZXJhdGVkIENBMRkwFwYDVQQDDBBQbGF0Zm9ybSBSb290IENBMB4XDTIwMDcwMTIz MjU1MVoXDTIwMDcxMTIzMjU1MVowJDEPMA0GA1UECgwGU2hhc3RhMREwDwYDVQQL DAhQbGF0Zm9ybTCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBAO+HNcJS YZqVMOi6zCemldsz4T47BTv3G9pkGyIYQM+kRE9l+LOlI7f/ohadi8JQKtvVXisi GRIoZiostUyGYSR+IQiYOfH6Sxtlq7f/DbeiA/iqP4GltNEXvTv/8g59eBFIPVD6 ZVDsxWhys63x7+FHgOpmNuRY6vD2l2t+9XXn2jrH1FWmKnfcGQC0PM41gCljp4+H NLUEWagj1HTMwY15WnLsjabjthTCnIYBaNGih/Q/YEUdfu90SgkT9NYCVtuKqUz0 4eZHzkkj87QzA/rcLYSqf0dqNsXUY9XDYi8Y3p8TdMe2ZUNXDEPXtwWwrG1WXyAw eWOTD1Uj5TmmK4h8M+9oKhQgLeGW/uOxCz2PnYvJlkXew4o/fGwYbhrlOGorTwQo SCsWi+AxixCu3xpLHuj/srojMM4P1BV/t2aQVXGVs8YCNHqeVDlpbuAUQ4CvUJtt kVL6UqIoaMcatoi/3cxOqpOgTvJEnpK/TI/tT1yUKLow2Lz0BYV9kOQsCwIDAQAB o2MwYTAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQU uNa6qcbJsHdxo6k8kaR5o53DNbIwHwYDVR0jBBgwFoAU/SFNwDBMcAYWBC2SCsDf OyZJbEMwDQYJKoZIhvcNAQELBQADggGBAD8O1Vg9WLFem0RZiZWjtXiNOTZmaksE +a49CE7yGqyETljlVOvbkTUTr4eJnzq2prYJUF8QavSBs38OahcxkTU2GOawZa09 hFc1aBiGSPAxTxJqdHV+G3QZcce1CG2e9VyrxqNudosNRNBEPMOsgg4LpvlRqMfm QhPEJcfvVaCopDZBFXLBPxqmt9BckWFmTSsK09xnrCE/40YD69hdUQ6USJaz9/cd UfNm0HIugRUMvFUP2ytdJmbV+1YQbfVsFrKU4aClrMg+ECX83od5N1TUNQwMePLh IizLGoGDF353eRVKxlzyI724Ni9W82rMW66TQdA7vU6liItHYrhDmcZ+mK2R0F5B ZuYjsLf/BCQ1uDv/bsVG40ogjH/eI/qfhRIzbgVVTF74uKG97pOakp2iQaG9USFd 9/s6ouQQXfkDZ2a/vzs8SBD4eIx7vmeABPRqlHTE8VzohxugxMbJNMdZRPGrEeH6 uddqVNpMH9ehQtsDdt0nmfVIy9/An3BKFw== -----END CERTIFICATE----- ca_bundle: |------BEGIN CERTIFICATE----- MIIEezCCAuOgAwIBAgIJAMjuQjQKUpUtMA0GCSqGSIb3DQEBCwUAMFsxDzANBgNV BAoMBlNoYXN0YTERMA8GA1UECwwIUGxhdGZvcm0xGjAYBgNVBAMMEVJvb3QgR2Vu ZXJhdGVkIENBMRkwFwYDVQQDDBBQbGF0Zm9ybSBSb290IENBMB4XDTIwMDcwMTIz MjU1MVoXDTIwMDcxMTIzMjU1MVowWzEPMA0GA1UECgwGU2hhc3RhMREwDwYDVQQL DAhQbGF0Zm9ybTEaMBgGA1UEAwwRUm9vdCBHZW5lcmF0ZWQgQ0ExGTAXBgNVBAMM EFBsYXRmb3JtIFJvb3QgQ0EwggGiMA0GCSqGSIb3DQEBAQUAA4IBjwAwggGKAoIB gQDQ0DTdZmqCOfrWb8KTXJ0hT1r2G51rRE5eAp8d/PoVCgV1gg5h1+jbiv3yYd2R BgM/CPZPvEJaL03wR1gO9NiGEXh1ALd8+yv1O1VRKNb6JuB5cPZFHE3Z8El6aGMc zrqN1ZekRPrZMM1W5Iw78olOMZvsxYw0ZIJqfKOWYB9jYUNM1KohHVj65f/HD/Em kC+9VFhepRV9z21q6fBU13bMz6/NlW19omvbTMwrVSPbYi2nSzqOfi00GXmVh/9Q WElBrAeiGLOsjWkeQ8sFF8ab4SSvzLAAilyQqkBhz2jIxB4L7iG+b9KEgVLeOoMH 1Rs7RhduOMEQypZGVA/vsu/86/5ctM1Cu60mZP+s5B7oT2rwypz0ihLiVCaDCcS5 lDK7PPT5GxZPD8TAqX0SgtaxJnSB/RzavGPSS7efFvlWXh18frwlwa+FgOnyCw1/ qR3BHarcZX9XZivBQSupxQAaUNPMlk0N4wYi6oWrmf21zwd7NtZAinxC2F98J1sn sK8CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYD VR0OBBYEFP0hTcAwTHAGFgQtkgrA3zsmSWxDMA0GCSqGSIb3DQEBCwUAA4IBgQAp ApgLdQBK6fZ7CWlEWwXSKxcjv3akuSqf1NXfn/J9e1rAqqyYoTDE9DXG9dYHL9OA p78KLsLy9fQmrLMmjacXw49bpXDG6XN1WLJfhgQg3j7lXvOvXyxynOgKDtBlroiU nMoK+or9lF2lBIuY34GPyZCL/+vB8s1tu0dGBDgHMUL8/k5d27sdGZZUljC7CgcC k+ABrv19IygDpZpZ6m5N27xajnKpJSjXOfpMCPdhCuNRMgMTX6x8bxZzVAx9ogQ8 16ZzAziB4iMXeCggaY/+YnoEstzTDPXB8FuqeGEVt63Y9ZA7NgWYvVExtKFGGhOL lnEhCLjQyu6/LgOJNfNM9EofaE/IU+i0talgFA+ygSChmYdXzFJn4EfAY9XbwEwV Pw+NHbkpv82jIpc+mopuMRdDO5OyFb+IGkn7ITUFE9N+u97oz2PjD5nQ/Z5DGjBu y3sefnrlqaRanHYkmOnOBTwImPSq8RE8eJP2aRrnu+2YrnoACXxS+XWUXtNhXJ4= -----END CERTIFICATE----- services: ... cray-vault: sealedSecrets: - \u0026#34;{{ kubernetes.sealed_secrets.external_platform_ca_1 | toYaml }}\u0026#34; pki: customCA: enabled: true secret: external-platform-ca-1 private_key: int_ca.key certificate: int_ca.crt ca_bundle: ca_bundle.crt ...  Only RSA-based CAs with 3072- or 4096-bit moduli, using RSA256 as a signature/digest algorithm have been tested/are supported. Also note, the generator does not support password-protected private keys.\n "
},
{
	"uri": "/docs-csm/en-12/readme/",
	"title": "Cray System Management - Readme",
	"tags": [],
	"description": "",
	"content": "Cray System Management (CSM) - README The documentation included here describes how to install or upgrade the Cray System Management (CSM) software and related supporting operational procedures. CSM software is the foundation upon which other software product streams for the HPE Cray EX system depend.\nThis documentation is in Markdown format. Although much of it can be viewed with any text editor, a richer experience will come from using a tool which can render the Markdown to show different font sizes, the use of bold and italics formatting, inclusion of diagrams and screen shots as image files, and to follow navigational links within a topic file and to other files.\nThere are many tools which can render the Markdown format to get these advantages. Any Internet search for Markdown tools will provide a long list of these tools. Some of the tools are better than others at displaying the images and allowing you to follow the navigational links.\nThe exploration of the CSM documentation begins with the Cray System Management Documentation which introduces topics related to CSM software installation, upgrade, and operational use. Notice that the previous sentence had a link to the file for the Cray System Management Documentation. If the link does not work, then a better Markdown viewer is needed.\n"
},
{
	"uri": "/docs-csm/en-12/release_notes/",
	"title": "Cray System Management - Release Notes",
	"tags": [],
	"description": "",
	"content": "Cray System Management (CSM) - Release Notes CSM 1.2.0 CSM 1.2 contains approximately 2000 changes spanning bug fixes, new feature development, and documentation improvements. This page lists some of the highlights.\nNew Monitoring  New network traffic dashboard New Kubernetes and microservice health dashboard New boot dashboard New command line dashboard for critical services like smd, smd-postgres, capmc, and hbtd New Grafana dashboard for critical services like smd, capmc, smd-postgres, and hbtd Management nodes sample SMART data and publish it to SMA/SMF Support for HPE PDU telemetry  Networking   Release Cray Automated Network Utility (CANU) V1.0.0\n  Performance improvements to Unbound and DHCP Helper\n  Initial Release of Bifurcated CAN\n BICAN summary page BICAN technical details  The user and administrative traffic segregation introduced by Bifurcated CAN has changed the URLs for certain services as it is now necessary to include the network path in the fully qualified domain name. Access to administrative services is now restricted to the Customer Management Network (CMN). API access is available via the Customer Management Network (CMN), Customer Access Network (CAN), and Customer Highspeed Network (CHN).\nThe following table assumes the system was configured with a system-name of shasta and a site-domain of dev.cray.com.\n   Old Name New Name     auth.shasta.dev.cray.com auth.cmn.shasta.dev.cray.com   nexus.shasta.dev.cray.com nexus.cmn.shasta.dev.cray.com   grafana.shasta.dev.cray.com grafana.cmn.shasta.dev.cray.com   prometheus.shasta.dev.cray.com prometheus.cmn.shasta.dev.cray.com   alertmanager.shasta.dev.cray.com alertmanager.cmn.shasta.dev.cray.com   vcs.shasta.dev.cray.com vcs.cmn.shasta.dev.cray.com   kiali-istio.shasta.dev.cray.com kiali-istio.cmn.shasta.dev.cray.com   s3.shasta.dev.cray.com s3.cmn.shasta.dev.cray.com   sma-grafana.shasta.dev.cray.com sma-grafana.cmn.shasta.dev.cray.com   sma-kibana.shasta.dev.cray.com sma-kibana.cmn.shasta.dev.cray.com   api.shasta.dev.cray.com api.cmn.shasta.dev.cray.com, api.chn.shasta.dev.cray.com, api.can.shasta.dev.cray.com      PowerDNS authoritative DNS server\n Supports zone transfer to external DNS servers via AXFR query and DNSSEC Refer to the PowerDNS Migration Guide and PowerDNS Configuration Guide for further information.    Management network switch hostname changes\nThe management network switch hostnames have changed in CSM 1.2 to more accurately reflect the usage of each switch type.\n   Old Name New Name Usage     sw-spine Unchanged Network spine that links to other switches.   sw-agg sw-leaf NMN connections for NCNs and application nodes.   sw-leaf sw-leaf-bmc BMC connections, PDUs, Slingshot switches, cooling doors      Miscellaneous functionality  SLES15 SP3 support for NCNs, UANs, Compute Nodes, and barebones validation image S3FS added to master and worker nodes for storing SDU dumps and CPS content Improved FAS (Firmware Action Service) error reporting CFS State Reporter added to storage nodes Numerous new tests added along with improved error logging CAPMC support for HPE Apollo 6500 power capping CAPMC support for new power schema for BardPeak power capping CAPMC support for HPE G2 Metered 3Ph 39.9kVA 60A 480/277V FIO PDU Improved CAPMC error handling in BOA root user password and SSH keys now handled by NCN personalization after initial install; locations of data changed in HashiCorp Vault from previous releases Generic Ansible passthrough parameter added to CFS session API Improved CFS session resiliency after power outages Pod priority class additions to improve upgrades and fail-over  New hardware support  Olympus Bard Peak Blade (AMD Trento with AMD MI200) with Slingshot 11 - Compute Node Olympus Grizzly Peak NVidia A100 80GB GPU - Compute Node Milan-Based DL385 Gen10+ with AMD Mi100 GPU - UAN and Application Node Milan-Based Apollo 6500/XL675d Gen10+ with NVIDIA A100 40GB - Compute Node Milan-Based Apollo 6500/XL645d Gen10+ with NVIDIA A100 80GB - Compute Node HPE G2 Metered 3Ph 39.9kVA 60A 480/277V FIO PDU  Automation improvements  Automated validation of CSM health in several areas Automated administrative access configuration Automated installation of CFS set-up of passwordless SSH Automated validation of Management Network cabling Automated firmware check on PIT node keycloak-installer is released CSM install and upgrade automation improvements  Base platform component upgrades    Platform Component Version     Ceph 15.2.15   containerd 1.5.7   CoreDNS 1.7.0   Etcd for Kubernetes 3.5.0   Etcd cluster 3.3.22   Helm 3.2.4   Istio 1.8   Keepalived 2.0.19   Kiali 1.28.1   Kubernetes 1.20.13   Loftsman 1.2.0-1   MetalLB 0.11.0   Multus 3.7   PostgreSQL 12.11   Strimzi Operator 0.27.1   Vault 1.5.5   Vault Operator 1.8.0   Zookeeper 3.5.9    Security improvements  Switch to non-root containers - A significant number of root user container images have been removed. The remainder have been identified for removal in a future release Verification of signed RPMs CVE remediation - A significant number of CVEs have been addressed, including a majority of the critical and high CVEs, like polkit and log4j Updates to Nexus require authentication Removal of code injection vulnerability in commit and cloneURL fields of CFS configuration API Further restrictions on allowed HTTP verbs in API requests coming from Compute Nodes Option to restrict Compute Nodes to only call URIs by machine identity  Customer-requested enhancements  Ability to turn off slots without hms-discovery powering them on Resilient way to reboot a Compute Node into its current configuration with a single API call  Bug fixes  Documented optimized BIOS boot order for NCNs Fixed: Slingshot switches attempting DHCP renewal to unreachable address Fixed: Node will not reboot following upgrade of BMC and BIOS Fixed: Worker node container /var/lib/containerd is full and pods stuck in ContainerCreating state Fixed: Incorrect data or bad monitor filters in sysmgmt-health namespace Fixed: Hardware State Manager showing compute nodes in standby after cabinet-level power down procedure Fixed: Cray HSM inventory reports incorrect DIMM Id and Name Fixed: Image customization CFS jobs do not set an Ansible limit when customizing Fixed: No /proc available in CFS image container Fixed: ConMan reconnects to nodes every hour, reissuing old messages with updated time stamps Fixed: CFS can leave sessions pending after a power outage Fixed: sonar-jobs-watcher not stopping orphaned CFS pods Fixed: PXE boot failures during installs, upgrades, and NCN rebuilds  Deprecations  CRUS is deprecated in CSM 1.2.0. It will be removed in a future CSM release and replaced with BOS V2, which will provide similar functionality. PowerDNS will replace Unbound as the authoritative DNS source in a future CSM release.  The cray-dns-unbound-manager CronJob will be deprecated in a future release once all DNS records are migrated to PowerDNS. The introduction of PowerDNS and Bifurcated CAN will introduce some node and service naming changes. See the PowerDNS Migration Guide for more information.    See Deprecated features.\nRemovals  The V1 version of the CFS API has been removed The cray-externaldns-coredns, cray-externaldns-etcd, and cray-externaldns-wait-for-etcd pods have been removed. PowerDNS is now the provider of the external DNS service.  Known issues Security vulnerability exceptions in CSM 1.2 A great deal of emphasis was placed on elimination or reduction of critical or high security vulnerabilities of container images included in the CSM 1.2 release. There remain, however, a small number of exceptions that are listed below. General reasons for carrying exceptions include needing to version pin certain core components, upstream fixes not being available, or new vulnerability detection or fixes occurring after release content is frozen. A new effort to track and address security vulnerabilities of container images spins up with each major CSM release.\n   Image Reason     csm-dckr/stable/dckr.io/ceph/ceph:v15.2.8 This image is needed for the procedure to upgrade to CSM 1.2, but is purged afterwards.   csm-dckr/stable/quay.io/ceph/ceph:v15.2.15 This version of Ceph (Octopus) is pinned for the CSM 1.2 release. The next major version of CSM will support Ceph (Pacific).   csm-dckr/stable/quay.io/cephcsi/cephcsi:v3.5.1 Upstream fixes became available after CSM 1.2 release content was frozen.   csm-dckr/stable/csm-config:1.9.31 The vulnerability was discovered after CSM 1.2 release content was frozen and will be addressed in the next major CSM release.   csm-dckr/stable/dckr.io/bitnami/external-dns:0.10.2-debian-10-r23 Upstream fixes are needed and are not yet available.   csm-dckr/stable/quay.io/kiali/kiali:v1.28.1 Upstream fixes are needed and are not yet available. There is a procedure to Remove Kiali if desired.   csm-dckr/stable/k8s.gcr.io/kube-proxy:v1.20.13 Upstream fixes are needed and are not yet available for the 1.20.13 version of Kubernetes included in CSM 1.2.   csm-dckr/stable/dckr.io/nfvpe/multus:v3.1 Upstream fixes are needed for resolution. However, this image is only needed for the upgrade to CSM 1.2 and is purged afterwards.   csm-dckr/stable/dckr.io/nfvpe/multus:v3.7 Upstream fixes are needed and are not yet available.   quay.io/oauth2-proxy/oauth2-proxy:v7.2.1 The latest tagged image was pinned to use alpine:3.15.0 and was not addressed upstream until after CSM 1.2 release content was frozen.    "
},
{
	"uri": "/docs-csm/en-12/background/ncn_boot_workflow/",
	"title": "NCN Boot Workflow",
	"tags": [],
	"description": "",
	"content": "NCN Boot Workflow Non-compute nodes can boot from two sources:\n Network/PXE Disk  Topics  Determine the current boot order Reasons to change the boot order after CSM install Determine if NCNs booted via disk or PXE Set BMCs to DHCP Boot order overview Setting boot order Trimming boot order Example boot orders Reverting changes Locating USB device  Determine the current boot order Under normal operations, the NCNs use the following boot order:\n PXE (to ensure that the NCN is booting with desired images and configuration) Disk (fallback in the event that PXE services are unavailable)  Reasons to change the boot order after CSM install After the CSM install is complete, it is usually not necessary to change the boot order. Having PXE first and disk as a fallback works in the majority of situations.\nIt may be desirable to change the boot order under these circumstances:\n Testing disk-backed booting Booting from a USB or remote ISO Testing or deploying other customizations  Determine if NCNs booted via disk or PXE There are two different methods for determining whether a management node is booted using disk or PXE. The method to use will vary depending on the system environment.\n  Check kernel parameters.\nncn# cat /proc/cmdline If it starts with kernel, then the node network booted. If it starts with BOOT_IMAGE=(, then it disk booted.\n  Check output from efibootmgr.\nncn# efibootmgr The BootCurrent value should be matched to the list beneath to see if it lines up with a networking option or a cray sd*) option for disk boots.\nncn# efibootmgr Example output:\nBootCurrent: 0016 Timeout: 2 seconds BootOrder: 0000,0011,0013,0014,0015,0016,0017,0005,0007,0018,0019,001A,001B,001C,001D,001E,001F,0020,0021,0012 Boot0000* cray (sda1) Boot0001* UEFI: Built-in EFI Shell Boot0005* UEFI: PXE IP4 Mellanox Network Adapter - B8:59:9F:1D:D8:4E Boot0007* UEFI: PXE IP4 Mellanox Network Adapter - B8:59:9F:1D:D8:4F Boot0010* UEFI: AMI Virtual CDROM0 1.00 Boot0011* cray (sdb1) Boot0012* UEFI: Built-in EFI Shell Boot0013* UEFI OS Boot0014* UEFI OS Boot0015* UEFI: AMI Virtual CDROM0 1.00 Boot0016* UEFI: SanDisk \u0026lt;--- Matches here Boot0017* UEFI: SanDisk, Partition 2 Boot0018* UEFI: HTTP IP4 Intel(R) I350 Gigabit Network Connection Boot0019* UEFI: PXE IP4 Intel(R) I350 Gigabit Network Connection Boot001A* UEFI: HTTP IP4 Mellanox Network Adapter - B8:59:9F:1D:D8:4E Boot001B* UEFI: HTTP IP4 Mellanox Network Adapter - B8:59:9F:1D:D8:4F Boot001C* UEFI: HTTP IP4 Intel(R) I350 Gigabit Network Connection Boot001D* UEFI: PXE IP4 Intel(R) I350 Gigabit Network Connection Boot001E* UEFI: PXE IP6 Intel(R) I350 Gigabit Network Connection Boot001F* UEFI: PXE IP6 Intel(R) I350 Gigabit Network Connection Boot0020* UEFI: PXE IP6 Mellanox Network Adapter - B8:59:9F:1D:D8:4E Boot0021* UEFI: PXE IP6 Mellanox Network Adapter - B8:59:9F:1D:D8:4F   Set BMCs to DHCP When reinstalling a system, the BMCs for the NCNs may be set to static IP addressing. The /var/lib/misc/dnsmasq.leases file is checked when setting up the symlinks for the artifacts each node needs to boot. So if the BMCs are set to static, those artifacts will not get set up correctly. Set the BMCs back to DHCP by using a command such as:\n read -s is used to prevent the password from being written to the screen or the shell history.\n ncn# USERNAME=root ncn# read -s IPMI_PASSWORD ncn# export IPMI_PASSWORD ncn# for h in $( grep mgmt /etc/hosts | grep -v m001 | awk -F \u0026#39;,\u0026#39; \u0026#39;{print $2}\u0026#39; ); do ipmitool -U $USERNAME -I lanplus -H $h -E lan set 1 ipsrc dhcp done Some BMCs need a cold reset in order to pick up this change fully:\nncn# for h in $( grep mgmt /etc/hosts | grep -v m001 | awk -F \u0026#39;,\u0026#39; \u0026#39;{print $2}\u0026#39; ); do ipmitool -U $USERNAME -I lanplus -H $h -E mc reset cold done Boot order overview  ipmitool can set and edit boot order; it works better for some vendors based on their BMC implementation efibootmgr speaks directly to the node\u0026rsquo;s UEFI; it can only be ignored by new BIOS activity   NOTE: cloud-init will set boot order when it runs, but this does not always work with certain hardware vendors. An administrator can invoke the cloud-init script at /srv/cray/scripts/metal/set-efi-bbs.sh on any NCN. Find the script here, on GitHub.\n Setting boot order This section gives the procedure for setting the boot order on NCNs and the PIT node.\nSetting the boot order with efibootmgr will ensure that the desired network interfaces and disks are in the proper order for booting.\nThe commands are the same for all hardware vendors, except where noted.\n  Create a list of the desired IPv4 boot devices.\nFollow the section corresponding to the hardware manufacturer of the system:\n  Gigabyte Technology\nncn/pit# efibootmgr | grep -iP \u0026#39;(pxe ipv?4.*adapter)\u0026#39; | tee /tmp/bbs1   Hewlett-Packard Enterprise\nncn/pit# efibootmgr | grep -i \u0026#39;port 1\u0026#39; | grep -i \u0026#39;pxe ipv4\u0026#39; | tee /tmp/bbs1   Intel Corporation\nncn/pit# efibootmgr | grep -i \u0026#39;ipv4\u0026#39; | grep -iv \u0026#39;baseboard\u0026#39; | tee /tmp/bbs1     Create a list of the Cray disk boot devices.\nncn/pit# efibootmgr | grep -i cray | tee /tmp/bbs2   Set the boot order to first PXE boot, with disk boot as the fallback option.\nncn/pit# efibootmgr -o $(cat /tmp/bbs* | awk \u0026#39;!x[$0]++\u0026#39; | sed \u0026#39;s/^Boot//g\u0026#39; | tr -d \u0026#39;*\u0026#39; | awk \u0026#39;{print $1}\u0026#39; | tr -t \u0026#39;\\n\u0026#39; \u0026#39;,\u0026#39; | sed \u0026#39;s/,$//\u0026#39;) | grep -i bootorder   Set all of the desired boot options to be active.\nncn/pit# cat /tmp/bbs* | awk \u0026#39;!x[$0]++\u0026#39; | sed \u0026#39;s/^Boot//g\u0026#39; | tr -d \u0026#39;*\u0026#39; | awk \u0026#39;{print $1}\u0026#39; | xargs -r -t -i efibootmgr -b {} -a   After following the steps above on a given NCN, that NCN will use the desired Shasta boot order.\nThis is the end of the Setting boot order procedure.\nTrimming boot order This section gives the procedure for removing unwanted entries from the boot order on NCNs and the PIT node.\nThis section will only advise on removing other PXE entries. There are too many vendor-specific entries beyond disks and NICs to cover in this section (e.g. BIOS entries, iLO entries, etc.).\nIn this case, the instructions are the same regardless of node type (management, storage, or worker):\n  Make lists of the unwanted boot entries.\n  Gigabyte Technology\nncn/pit# efibootmgr | grep -ivP \u0026#39;(pxe ipv?4.*)\u0026#39; | grep -iP \u0026#39;(adapter|connection|nvme|sata)\u0026#39; | tee /tmp/rbbs1 ncn/pit# efibootmgr | grep -iP \u0026#39;(pxe ipv?4.*)\u0026#39; | grep -i connection | tee /tmp/rbbs2   Hewlett-Packard Enterprise\n NOTE: This does not trim HSN Mellanox cards; these should disable their OpROMs using the high speed network snippets.\n ncn/pit# efibootmgr | grep -vi \u0026#39;pxe ipv4\u0026#39; | grep -i adapter |tee /tmp/rbbs1 ncn/pit# efibootmgr | grep -iP \u0026#39;(sata|nvme)\u0026#39; | tee /tmp/rbbs2   Intel Corporation\nncn/pit# efibootmgr | grep -vi \u0026#39;ipv4\u0026#39; | grep -iP \u0026#39;(sata|nvme|uefi)\u0026#39; | tee /tmp/rbbs1 ncn/pit# efibootmgr | grep -i baseboard | tee /tmp/rbbs2     Remove them.\nncn/pit# cat /tmp/rbbs* | awk \u0026#39;!x[$0]++\u0026#39; | sed \u0026#39;s/^Boot//g\u0026#39; | awk \u0026#39;{print $1}\u0026#39; | tr -d \u0026#39;*\u0026#39; | xargs -r -t -i efibootmgr -b {} -B   The boot menu should be trimmed down to contain only relevant entries.\nThis is the end of the Trimming boot order procedure.\nExample boot orders Each section shows example output of the efibootmgr command.\n  Master node (with onboard NICs enabled)\nBootCurrent: 0009 Timeout: 2 seconds BootOrder: 0004,0000,0007,0009,000B,000D,0012,0013,0002,0003,0001 Boot0000* cray (sda1) Boot0001* UEFI: Built-in EFI Shell Boot0002* UEFI OS Boot0003* UEFI OS Boot0004* cray (sdb1) Boot0007* UEFI: PXE IP4 Intel(R) I350 Gigabit Network Connection Boot0009* UEFI: PXE IP4 Mellanox Network Adapter - B8:59:9F:34:89:62 Boot000B* UEFI: PXE IP4 Mellanox Network Adapter - B8:59:9F:34:89:63 Boot000D* UEFI: PXE IP4 Intel(R) I350 Gigabit Network Connection Boot0012* UEFI: PNY USB 3.1 FD PMAP Boot0013* UEFI: PNY USB 3.1 FD PMAP, Partition 2   Storage node (with onboard NICs enabled)\nBootNext: 0005 BootCurrent: 0006 Timeout: 2 seconds BootOrder: 0007,0009,0000,0002 Boot0000* cray (sda1) Boot0001* UEFI: Built-in EFI Shell Boot0002* cray (sdb1) Boot0005* UEFI: PXE IP4 Intel(R) I350 Gigabit Network Connection Boot0007* UEFI: PXE IP4 Mellanox Network Adapter - B8:59:9F:34:88:76 Boot0009* UEFI: PXE IP4 Mellanox Network Adapter - B8:59:9F:34:88:77 Boot000B* UEFI: PXE IP4 Intel(R) I350 Gigabit Network Connection   Worker node (with onboard NICs enabled)\nBootNext: 0005 BootCurrent: 0008 Timeout: 2 seconds BootOrder: 0007,0009,000B,0000,0002 Boot0000* cray (sda1) Boot0001* UEFI: Built-in EFI Shell Boot0002* cray (sdb1) Boot0005* UEFI: PXE IP4 Intel(R) I350 Gigabit Network Connection Boot0007* UEFI: PXE IP4 Mellanox Network Adapter - 98:03:9B:AA:88:30 Boot0009* UEFI: PXE IP4 Mellanox Network Adapter - B8:59:9F:34:89:2A Boot000B* UEFI: PXE IP4 Mellanox Network Adapter - B8:59:9F:34:89:2B Boot000D* UEFI: PXE IP4 Intel(R) I350 Gigabit Network Connection   Reverting changes This procedure is only needed if wishing to revert boot order changes.\nReset the BIOS. Refer to vendor documentation for resetting the BIOS or attempt to reset the BIOS with ipmitool\n NOTE: When using ipmitool against a machine remotely, it requires more arguments:\nread -s is used to prevent the password from being written to the screen or the shell history.\nlinux# USERNAME=root linux# read -s IPMI_PASSWORD linux# export IPMI_PASSWORD linux# ipmitool -I lanplus -U $USERNAME -E -H \u0026lt;bmc-hostname\u0026gt;    Reset BIOS with ipmitool.\nncn/pit# ipmitool chassis bootdev none options=clear-cmos   Set next boot with ipmitool.\nncn/pit# ipmitool chassis bootdev pxe options=persistent ncn/pit# ipmitool chassis bootdev pxe options=efiboot   Boot to BIOS for checkout of boot devices.\nncn/pit# ipmitool chassis bootdev bios options=efiboot   This is the end of the Reverting changes procedure.\nLocating USB device This procedure explains how to identify USB devices on NCNs.\nSome nodes very obviously display which device is the USB, whereas other nodes (such as Gigabyte) do not.\nParsing the output of efibootmgr can be helpful in determining which device is a USB device. Tools such as lsblk, blkid, or kernel (/proc) may also be of use. As an example, one can sometimes match up ls -l /dev/disk/by-partuuid with efibootmgr -v.\n  Display the current UEFI boot selections.\nncn/pit# efibootmgr Example output:\nBootCurrent: 0015 Timeout: 1 seconds BootOrder: 000E,000D,0011,0012,0007,0005,0006,0008,0009,0000,0001,0002,000A,000B,000C,0003,0004,000F,0010,0013,0014 Boot0000* Enter Setup Boot0001 Boot Device List Boot0002 Network Boot Boot0003* Launch EFI Shell Boot0004* UEFI HTTPv6: Network 00 at Riser 02 Slot 01 Boot0005* UEFI HTTPv6: Intel Network 00 at Baseboard Boot0006* UEFI HTTPv4: Intel Network 00 at Baseboard Boot0007* UEFI IPv4: Intel Network 00 at Baseboard Boot0008* UEFI IPv6: Intel Network 00 at Baseboard Boot0009* UEFI HTTPv6: Intel Network 01 at Baseboard Boot000A* UEFI HTTPv4: Intel Network 01 at Baseboard Boot000B* UEFI IPv4: Intel Network 01 at Baseboard Boot000C* UEFI IPv6: Intel Network 01 at Baseboard Boot000D* UEFI HTTPv4: Network 00 at Riser 02 Slot 01 Boot000E* UEFI IPv4: Network 00 at Riser 02 Slot 01 Boot000F* UEFI IPv6: Network 00 at Riser 02 Slot 01 Boot0010* UEFI HTTPv6: Network 01 at Riser 02 Slot 01 Boot0011* UEFI HTTPv4: Network 01 at Riser 02 Slot 01 Boot0012* UEFI IPv4: Network 01 at Riser 02 Slot 01 Boot0013* UEFI IPv6: Network 01 at Riser 02 Slot 01 Boot0014* UEFI Samsung Flash Drive 1100 Boot0015* UEFI Samsung Flash Drive 1100 Boot0018* UEFI SAMSUNG MZ7LH480HAHQ-00005 S45PNA0M838871 Boot1001* Enter Setup   Set next boot entry.\nIn the example above, the device is 0014 or 0015. An option is to guess it is the first one, and can correct this on-the-fly in POST. Notice the lack of Boot in the ID number given; If wanting to choose Boot0014 in the output above, pass 0014 to efibootmgr:\nncn/pit# efibootmgr -n 0014   Verify that the BootNext device is what was selected.\nncn/pit# efibootmgr | grep -i bootnext Example output:\nBootNext: 0014   Now the UEFI Samsung Flash Drive will boot next.\n NOTE: There are duplicates in the list. During boot, the EFI boot manager will select the first one. If the first one is false, then it can be deleted with efibootmgr -b 0014 -d.\n   This is the end of the Locating USB device procedure.\n"
},
{
	"uri": "/docs-csm/en-12/background/ncn_images/",
	"title": "NCN Images",
	"tags": [],
	"description": "",
	"content": "NCN Images The management nodes boot from NCN images which are created from layers on top of a common base image. The common image is customized with a Kubernetes layer for the master nodes and worker nodes. The common image is customized with a storage-ceph layer for the utility storage nodes..\nTopics:  Overview of NCN Images LiveCD Server  Details Overview of NCN Images There are several flavors of NCN images, each share a common base image. When booting NCNs an admin or user will need to choose between stable (Release) and unstable (pre-release/dev) images.\n For details on how these images behave and inherit from the base and common images, see [node-image-docs][1].\n In short, each image (i.e. Kubernetes and storage-ceph) inherit from the non-compute-common layer. Operationally these are all that matter; the common layer, Kubernetes layer, Ceph layer, and any other new images.\nTo boot an NCN, you need 3 artifacts for each node-type (kubernetes-manager/worker, ceph):\n The Kubernetes SquashFS ([stable][4] or [unstable][5])  initrd-img-[RELEASE].xz $version-[RELEASE].kernel kubernetes-[RELEASE].squashfs   The CEPH SquashFS ([stable][6] or [unstable][7])  initrd-img-[RELEASE].xz $version-[RELEASE].kernel storage-ceph-[RELEASE].squashfs    LiveCD Server   View the current ephemeral data payload:\npit# ls -l /var/www total 8 drwxr-xr-x 1 dnsmasq tftp 4096 Dec 17 21:20 boot drwxr-xr-x 7 root root 4096 Dec 2 04:45 ephemeral pit# ls -l /var/www/ephemeral/data/* /var/www/ephemeral/data/ceph: total 4 drwxr-xr-x 2 root root 4096 Dec 17 21:42 0.0.7 /var/www/ephemeral/data/k8s: total 4 drwxr-xr-x 2 root root 4096 Dec 17 21:26 0.0.8   Setup the \u0026ldquo;booting repositories\u0026rdquo;:\npit# set-sqfs-links.sh Mismatching kernels! The discovered artifacts will deploy an undesirable stack. mkdir: created directory \u0026#39;ncn-m001\u0026#39; /var/www/ncn-m001 /var/www \u0026#39;kernel\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/k8s/0.0.8/5.3.18-24.37-default-0.0.8.kernel\u0026#39; \u0026#39;initrd.img.xz\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/k8s/0.0.8/initrd.img-0.0.8.xz\u0026#39; \u0026#39;filesystem.squashfs\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/k8s/0.0.8/kubernetes-0.0.8.squashfs\u0026#39; /var/www mkdir: created directory \u0026#39;ncn-m002\u0026#39; /var/www/ncn-m002 /var/www \u0026#39;kernel\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/k8s/0.0.8/5.3.18-24.37-default-0.0.8.kernel\u0026#39; \u0026#39;initrd.img.xz\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/k8s/0.0.8/initrd.img-0.0.8.xz\u0026#39; \u0026#39;filesystem.squashfs\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/k8s/0.0.8/kubernetes-0.0.8.squashfs\u0026#39; /var/www mkdir: created directory \u0026#39;ncn-m003\u0026#39; /var/www/ncn-m003 /var/www \u0026#39;kernel\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/k8s/0.0.8/5.3.18-24.37-default-0.0.8.kernel\u0026#39; \u0026#39;initrd.img.xz\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/k8s/0.0.8/initrd.img-0.0.8.xz\u0026#39; \u0026#39;filesystem.squashfs\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/k8s/0.0.8/kubernetes-0.0.8.squashfs\u0026#39; /var/www mkdir: created directory \u0026#39;ncn-w002\u0026#39; /var/www/ncn-w002 /var/www \u0026#39;kernel\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/k8s/0.0.8/5.3.18-24.37-default-0.0.8.kernel\u0026#39; \u0026#39;initrd.img.xz\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/k8s/0.0.8/initrd.img-0.0.8.xz\u0026#39; \u0026#39;filesystem.squashfs\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/k8s/0.0.8/kubernetes-0.0.8.squashfs\u0026#39; /var/www mkdir: created directory \u0026#39;ncn-w003\u0026#39; /var/www/ncn-w003 /var/www \u0026#39;kernel\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/k8s/0.0.8/5.3.18-24.37-default-0.0.8.kernel\u0026#39; \u0026#39;initrd.img.xz\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/k8s/0.0.8/initrd.img-0.0.8.xz\u0026#39; \u0026#39;filesystem.squashfs\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/k8s/0.0.8/kubernetes-0.0.8.squashfs\u0026#39; /var/www mkdir: created directory \u0026#39;ncn-s001\u0026#39; /var/www/ncn-s001 /var/www \u0026#39;kernel\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/ceph/0.0.7/5.3.18-24.37-default-0.0.7.kernel\u0026#39; \u0026#39;initrd.img.xz\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/ceph/0.0.7/initrd.img-0.0.7.xz\u0026#39; \u0026#39;filesystem.squashfs\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/ceph/0.0.7/storage-ceph-0.0.7.squashfs\u0026#39; /var/www mkdir: created directory \u0026#39;ncn-s002\u0026#39; /var/www/ncn-s002 /var/www \u0026#39;kernel\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/ceph/0.0.7/5.3.18-24.37-default-0.0.7.kernel\u0026#39; \u0026#39;initrd.img.xz\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/ceph/0.0.7/initrd.img-0.0.7.xz\u0026#39; \u0026#39;filesystem.squashfs\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/ceph/0.0.7/storage-ceph-0.0.7.squashfs\u0026#39; /var/www mkdir: created directory \u0026#39;ncn-s003\u0026#39; /var/www/ncn-s003 /var/www \u0026#39;kernel\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/ceph/0.0.7/5.3.18-24.37-default-0.0.7.kernel\u0026#39; \u0026#39;initrd.img.xz\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/ceph/0.0.7/initrd.img-0.0.7.xz\u0026#39; \u0026#39;filesystem.squashfs\u0026#39; -\u0026gt; \u0026#39;../ephemeral/data/ceph/0.0.7/storage-ceph-0.0.7.squashfs\u0026#39; /var/www   View the currently set links\npit# ls -l /var/www/ncn-* boot: total 1552 -rw-r--r-- 1 root root 166634 Dec 17 13:21 graffiti.png -rw-r--r-- 1 dnsmasq tftp 700480 Dec 17 13:25 ipxe.efi -rw-r--r-- 1 dnsmasq tftp 700352 Dec 15 09:35 ipxe.efi.stable -rw-r--r-- 1 root root 6157 Dec 15 05:12 script.ipxe -rw-r--r-- 1 root root 6284 Dec 17 13:21 script.ipxe.rpmnew ephemeral: total 32 drwxr-xr-x 2 root root 4096 Dec 6 22:18 configs drwxr-xr-x 4 root root 4096 Dec 7 04:29 data drwx------ 2 root root 16384 Dec 2 04:25 lost+found drwxr-xr-x 4 root root 4096 Dec 3 02:31 prep drwxr-xr-x 2 root root 4096 Dec 2 04:45 static ncn-m001: total 4 lrwxrwxrwx 1 root root 53 Dec 26 06:11 filesystem.squashfs -\u0026gt; ../ephemeral/data/k8s/0.0.8/kubernetes-0.0.8.squashfs lrwxrwxrwx 1 root root 47 Dec 26 06:11 initrd.img.xz -\u0026gt; ../ephemeral/data/k8s/0.0.8/initrd.img-0.0.8.xz lrwxrwxrwx 1 root root 61 Dec 26 06:11 kernel -\u0026gt; ../ephemeral/data/k8s/0.0.8/5.3.18-24.37-default-0.0.8.kernel ncn-m002: total 4 lrwxrwxrwx 1 root root 53 Dec 26 06:11 filesystem.squashfs -\u0026gt; ../ephemeral/data/k8s/0.0.8/kubernetes-0.0.8.squashfs lrwxrwxrwx 1 root root 47 Dec 26 06:11 initrd.img.xz -\u0026gt; ../ephemeral/data/k8s/0.0.8/initrd.img-0.0.8.xz lrwxrwxrwx 1 root root 61 Dec 26 06:11 kernel -\u0026gt; ../ephemeral/data/k8s/0.0.8/5.3.18-24.37-default-0.0.8.kernel ncn-m003: total 4 lrwxrwxrwx 1 root root 53 Dec 26 06:11 filesystem.squashfs -\u0026gt; ../ephemeral/data/k8s/0.0.8/kubernetes-0.0.8.squashfs lrwxrwxrwx 1 root root 47 Dec 26 06:11 initrd.img.xz -\u0026gt; ../ephemeral/data/k8s/0.0.8/initrd.img-0.0.8.xz lrwxrwxrwx 1 root root 61 Dec 26 06:11 kernel -\u0026gt; ../ephemeral/data/k8s/0.0.8/5.3.18-24.37-default-0.0.8.kernel ncn-s001: total 4 lrwxrwxrwx 1 root root 56 Dec 26 06:11 filesystem.squashfs -\u0026gt; ../ephemeral/data/ceph/0.0.7/storage-ceph-0.0.7.squashfs lrwxrwxrwx 1 root root 48 Dec 26 06:11 initrd.img.xz -\u0026gt; ../ephemeral/data/ceph/0.0.7/initrd.img-0.0.7.xz lrwxrwxrwx 1 root root 62 Dec 26 06:11 kernel -\u0026gt; ../ephemeral/data/ceph/0.0.7/5.3.18-24.37-default-0.0.7.kernel ncn-s002: total 4 lrwxrwxrwx 1 root root 56 Dec 26 06:11 filesystem.squashfs -\u0026gt; ../ephemeral/data/ceph/0.0.7/storage-ceph-0.0.7.squashfs lrwxrwxrwx 1 root root 48 Dec 26 06:11 initrd.img.xz -\u0026gt; ../ephemeral/data/ceph/0.0.7/initrd.img-0.0.7.xz lrwxrwxrwx 1 root root 62 Dec 26 06:11 kernel -\u0026gt; ../ephemeral/data/ceph/0.0.7/5.3.18-24.37-default-0.0.7.kernel ncn-s003: total 4 lrwxrwxrwx 1 root root 56 Dec 26 06:11 filesystem.squashfs -\u0026gt; ../ephemeral/data/ceph/0.0.7/storage-ceph-0.0.7.squashfs lrwxrwxrwx 1 root root 48 Dec 26 06:11 initrd.img.xz -\u0026gt; ../ephemeral/data/ceph/0.0.7/initrd.img-0.0.7.xz lrwxrwxrwx 1 root root 62 Dec 26 06:11 kernel -\u0026gt; ../ephemeral/data/ceph/0.0.7/5.3.18-24.37-default-0.0.7.kernel ncn-w002: total 4 lrwxrwxrwx 1 root root 53 Dec 26 06:11 filesystem.squashfs -\u0026gt; ../ephemeral/data/k8s/0.0.8/kubernetes-0.0.8.squashfs lrwxrwxrwx 1 root root 47 Dec 26 06:11 initrd.img.xz -\u0026gt; ../ephemeral/data/k8s/0.0.8/initrd.img-0.0.8.xz lrwxrwxrwx 1 root root 61 Dec 26 06:11 kernel -\u0026gt; ../ephemeral/data/k8s/0.0.8/5.3.18-24.37-default-0.0.8.kernel ncn-w003: total 4 lrwxrwxrwx 1 root root 53 Dec 26 06:11 filesystem.squashfs -\u0026gt; ../ephemeral/data/k8s/0.0.8/kubernetes-0.0.8.squashfs lrwxrwxrwx 1 root root 47 Dec 26 06:11 initrd.img.xz -\u0026gt; ../ephemeral/data/k8s/0.0.8/initrd.img-0.0.8.xz lrwxrwxrwx 1 root root 61 Dec 26 06:11 kernel -\u0026gt; ../ephemeral/data/k8s/0.0.8/5.3.18-24.37-default-0.0.8.kernel   "
},
{
	"uri": "/docs-csm/en-12/background/ncn_mounts_and_file_systems/",
	"title": "NCN Mounts And File Systems",
	"tags": [],
	"description": "",
	"content": "NCN Mounts and File Systems The management nodes use drive storage for persistence and block storage. This page outlines reference information for these disks, their partition tables, and their management.\nTopics:  What Controls Partitioning? Plan of Record / Baseline  Problems When Above/Below Baseline Worker Nodes with ETCD  Disable Luks Expand the RAID     Disk Layout Quick-Reference Tables OverlayFS and Persistence  OverlayFS Example Persistent Directories  Layering - Upperdir and Lowerdir(s) Layering Real World Example   OverlayFS Control  Reset Toggles Reset On Next Boot Reset on Every Boot Re-sizing the Persistent Overlay Thin Overlay Feature     SystemD MetalFS Old/Retired FS-Labels  Details What Controls Partitioning? Partitioning is controlled by two aspects:\n dracut; this selects disks and builds their partition tables and/or LVM storage. cloud-init; this manages standalone partitions or volumes, as well as high-level object storage.  Plan of Record / Baseline    Node Type No. of \u0026ldquo;small\u0026rdquo; disks (0.5 TiB) No. of \u0026ldquo;large\u0026rdquo; disks (1.9 TiB)     k8s-master nodes 3 0   k8s-worker nodes 2 1   ceph-storage nodes 2 3+    Disks are chosen by dracut. Kubernetes and storage nodes use different dracut modules.\n First, two disks for the OS are chosen from the pool of \u0026ldquo;small\u0026rdquo; disks Second, one disk is selected for the ephemeral data  Problems When Above/Below Baseline The master nodes and worker nodes use the same artifacts, and thus have the same dracut modules assimilating disks. Therefore, it is important to beware of:\n k8s-master nodes with one or more extra \u0026ldquo;large\u0026rdquo; disk(s); these disks help but are unnecessary ceph-storage nodes do not run the same dracut modules because they have different disk demands  Worker Nodes with ETCD k8s-worker nodes with 1 or more extra \u0026ldquo;small\u0026rdquo; disk(s); these disks are confusing and unnecessary and can be disabled easily.\nDisable Luks  NOTE This is broken, use the expand RAID option instead. (MTL-1309)\n All NCNs (master/worker/storage) have the same kernel parameters, but are not always necessary. This method works by toggling the dependency for the metal ETCD module, disabling LUKs will disable ETCD bare-metal creation.\n  Disable LUKs for each worker node, thus disabling the metal ETCD module:\n During Bootstrap (on the pit node): sed -i \u0026#39;s/disk-opts rd.luks /disk-opts rd.luks=0 /g\u0026#39; /var/www/ncn-w*/script.ipxe  During runtime with csi: csi handoff bss-update-param rd.luks=0     Rebuild the node\n Run the basic wipe if the node was already booted (re)boot the node    Expand the RAID This option simply expands the RAID to consume the extra disks, leaving none behind for the metal ETCD module to find.\n  Set metal.disks equal to the number of \u0026ldquo;small\u0026rdquo; disks in the node(s), this will reserve them for the RAID and prevent any other partitioning from happening on them.\n During Bootstrap (on the pit node): sed -i \u0026#39;s/disk-opts /disk-opts metal.disks=3 /g\u0026#39; /var/www/ncn-w*/script.ipxe  During runtime with csi: csi handoff bss-update-param metal.disks=3     Change the RAID type, or leave it as default (mirror)\n During Bootstrap (on the pit node): sed -i \u0026#39;s/disk-opts /disk-opts metal.md-level=stripe /g\u0026#39; /var/www/ncn-w*/script.ipxe  During runtime with csi: csi handoff bss-update-param metal.md-level=stripe     Rebuild the node\n Run the basic wipe if the node was already booted (re)boot the node    Disk Layout Quick-Reference Tables The table below represents all recognizable FS labels on any given management node, varying slightly by node role (Kubernetes master or Kubernetes worker).\n   k8s-master k8s-worker storage-ceph FS Label Partitions Device Partition Size OverlayFS Work Order(s) Memo     ✅ ✅ ✅ BOOTRAID /metal/recovery 2 small disks in RAID1 500 MiB ❌ Present since Shasta-Preview 1    ✅ ✅ ✅ SQFSRAID /run/initramfs/live 2 small disks in RAID1 25 GiB ✅ CASM-1885 squashfs should compress our images to about 1/3rd their uncompressed size. (20G → 6.6G) On pepsi\u0026rsquo;s ncn-w001, we are at about 20G of non-volatile data storage needed.   ✅ ✅ ✅ ROOTRAID /run/initramfs/overlayfs 2 small disks in RAID1 150 GiB ✅ Present since Shasta-Preview 1 The persistent image file is loaded from this partition, when the image file is loaded the underlying drive is lazily unmounted (umount -l) so that when the overlay closes the disk follows suit.   ✅ ✅ ✅ AUX /dev/md/AUX (Not Mounted) 2 small disks in RAID0 (stripe) 250 GiB ❌ MTL-1308 MTL-1562 Auxiliary RAID array for cloud-init to use.   ❌ ❌ ✅ CEPHETC /etc/ceph LVM 10 GiB ❌ MTL-1308    ❌ ❌ ✅ CEPHVAR /var/lib/ceph LVM 60 GiB ❌ MTL-1308    ❌ ❌ ✅ CONTAIN /run/containers LVM 60 GiB ❌ MTL-1308    ✅ ✅ ❌ CRAYS3FSCACHE /var/lib/s3fs_cache LVM 100 GiB ❌ MTL-1562    ❌ ✅ ❌ CONRUN /run/containerd Ephemeral 75 GiB ❌ MTL-916 On pepsi ncn-w001, we have less than 200G of operational storage for this.   ❌ ✅ ❌ CONLIB /run/lib-containerd Ephemeral 25% ✅ MTL-892 CASMINST-255    ✅ ❌ ❌ ETCDLVM /run/lib-etcd Ephemeral 32 GiB ✅ CASMPET-338    ✅ ❌ ❌ K8SLET /var/lib/kubelet Ephemeral 25% ❌ MTL-892 CASMINST-255            5b2ff4be6f\u0026hellip; afix all JIRA links to new JIRA\n       The above table\u0026rsquo;s rows with overlayFS map their \u0026ldquo;Mount Paths\u0026rdquo; to the \u0026ldquo;Upper Directory\u0026rdquo; in the table below:\n The \u0026ldquo;OverlayFS Name\u0026rdquo; is the name used in fstab and seen in the output of mount.\n    OverlayFS Name Upper Directory Lower Directory (or more)     etcd_overlayfs /run/lib-etcd /var/lib/etcd   containerd_overlayfs /run/lib-containerd /var/lib/containerd     For notes on previous/old labels, scroll to the bottom.\n OverlayFS and Persistence There are a few overlays used for NCN image boots. These enable two critical functions; changes to data and new data will persist between reboots, and RAM (memory) is freed because we are using our block-devices (SATA/PCIe).\n ROOTRAID is the persistent root overlayFS, it commits and saves all changes made to the running OS and it stands on a RAID1 mirror. CONLIB is a persistent overlayFS for containerd, it commits and saves all new changes while allowing read-through to pre-existing (baked-in) data from the squashFS. ETCDK8S is a persistent overlayFS for etcd, it works like the CONLIB overlayFS however this exists in an encrypted LUKS2 partition.  OverlayFS Example  Helpful commands\u0026hellip; the overlayFS organization can be best viewed with these three commands:\n lsblk, lsblk -f will show how the RAIDs and disks are mounted losetup -a will show where the squashFS is mounted from mount | grep ' / ' will show you the overlay being layered atop the squashFS   Let us pick apart the SQFSRAID and ROOTRAID overlays.\n /run/rootfsbase is the SquashFS image itself /run/initramfs/live is the squashFS\u0026rsquo;s storage array, where one or more squashFS can live /run/initramfs/overlayfs is the overlayFS storage array, where the persistent directories live /run/overlayfs and /run/ovlwork are symlinks to `/run/initramfs/overlayfs/overlayfs-SQFSRAID-$(blkid -s UUID -o value /dev/disk/by-label/SQFSRAID) and the neighboring work directory Admin note: The \u0026ldquo;work\u0026rdquo; directory is where the operating system processes data. It is the interim where data passes between RAM and persistent storage.  Using the above bullets, one may be able to better understand the machine output below:\nncn-m002# mount | grep \u0026#39; / \u0026#39; LiveOS_rootfs on / type overlay (rw,relatime,lowerdir=/run/rootfsbase,upperdir=/run/overlayfs,workdir=/run/ovlwork) ^^^R/O^SQUASHFS IMAGE^^^|^^^ R/W PERSISTENCE ^^^|^^^^^^INTERIM^^^^^^ ^^^R/O^SQUASHFS IMAGE^^^|^^^ R/W PERSISTENCE ^^^|^^^^^^INTERIM^^^^^^ ^^^R/O^SQUASHFS IMAGE^^^|^^^ R/W PERSISTENCE ^^^|^^^^^^INTERIM^^^^^^ ncn-m002# losetup -a /dev/loop1: [0025]:74858 (/run/initramfs/thin-overlay/meta) /dev/loop2: [0025]:74859 (/run/initramfs/thin-overlay/data) /dev/loop0: [2430]:100 (/run/initramfs/live/LiveOS/filesystem.squashfs)  The THIN OVERLAY is the transient space the system uses behind the scenes to allow data to live in RAM as it is written to disk. The THIN part of the overlay is the magic, using THIN overlays means the kernel will automatically clear free blocks.\n Below is the layout of what a persistent system looks like. Note, this means that persistent capacity is there, but administrators should beware of reset toggles on unfamiliar systems. There are toggles to reset overlays that are, by default, toggled off (so data persistence be default is safe but one should not assume).\nncn-m002# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT loop0 7:0 0 3.8G 1 loop /run/rootfsbase loop1 7:1 0 30G 0 loop └─live-overlay-pool 254:2 0 300G 0 dm loop2 7:2 0 300G 0 loop └─live-overlay-pool 254:2 0 300G 0 dm sda 8:0 1 447.1G 0 disk ├─sda1 8:1 1 476M 0 part │ └─md127 9:127 0 476M 0 raid1 ├─sda2 8:2 1 92.7G 0 part │ └─md126 9:126 0 92.6G 0 raid1 /run/initramfs/live └─sda3 8:3 1 279.4G 0 part └─md125 9:125 0 279.3G 0 raid1 /run/initramfs/overlayfs sdb 8:16 1 447.1G 0 disk ├─sdb1 8:17 1 476M 0 part │ └─md127 9:127 0 476M 0 raid1 ├─sdb2 8:18 1 92.7G 0 part │ └─md126 9:126 0 92.6G 0 raid1 /run/initramfs/live └─sdb3 8:19 1 279.4G 0 part └─md125 9:125 0 279.3G 0 raid1 /run/initramfs/overlayfs sdc 8:32 1 447.1G 0 disk └─ETCDLVM 254:0 0 447.1G 0 crypt └─etcdvg0-ETCDK8S 254:1 0 32G 0 lvm /run/lib-etcd Persistent Directories Not all directories are persistent!\nOnly the following directories are persistent by default:\n etc home root srv tmp var /run/containerd /run/lib-containerd /run/lib-etcd /run/lib/kubelet  More directories can be added, but mileage varies. The initial set is actually managed by dracut, when using a reset toggle the above list is \u0026ldquo;reset/cleared\u0026rdquo;. If more directories are added, they will be eradicated when enabling a reset toggle.\nThese are all provided through the Overlay from /run/overlayfs:\nncn-m001:/run/overlayfs # ls -l total 0 drwxr-xr-x 8 root root 290 Oct 15 22:41 etc drwxr-xr-x 3 root root 18 Oct 15 22:41 home drwx------ 3 root root 39 Oct 13 16:53 root drwxr-xr-x 3 root root 18 Oct 5 19:16 srv drwxrwxrwt 2 root root 85 Oct 16 14:50 tmp drwxr-xr-x 8 root root 76 Oct 13 16:52 var  Remember: /run/overlayfs is a symbolic link to the real disk /run/initramfs/overlayfs/*.\n Layering - Upperdir and Lowerdir(s) The file system the user is working on is really two layered file systems (overlays).\n The lower layer is the SquashFS image itself, read-only, which provides all that we need to run. The upper layer is the OverlayFS, read-write, which does a bit-wise xor with the lower-layer Anything in the upper-layer takes precedence by default.   There are fancier options for overlays, such as multiple lower-layers, copy-up (lower-layer precedence), and opaque (removing a directory in the upper layer hides it in the lower layer). You can read more [here|https://www.kernel.org/doc/html/latest/filesystems/overlayfs.html#inode-properties]\n Layering Real World Example Let us take /root for example, we can see in the upper-dir (the overlay) we have these files:\nThe upper-dir has these files:\nncn-m001# ls -l /run/overlayfs/root/ total 4 -rw------- 1 root root 252 Nov 4 18:23 .bash_history drwxr-x--- 4 root root 37 Nov 4 04:35 .kube drwx------ 2 root root 29 Oct 21 21:57 .ssh Then in the squashFS image (lower-dir) we have these\u0026hellip;\nncn-m001# ls -l /run/rootfsbase/root/ total 1 -rw------- 1 root root 0 Oct 19 15:31 .bash_history drwxr-xr-x 2 root root 3 May 25 2018 bin drwx------ 3 root root 26 Oct 21 22:07 .cache drwx------ 2 root root 3 May 25 2018 .gnupg drwxr-xr-x 4 root root 57 Oct 19 15:23 inst-sys drwxr-xr-x 2 root root 33 Oct 19 15:33 .kbd drwxr-xr-x 5 root root 53 Oct 19 15:34 spire drwx------ 2 root root 70 Oct 21 21:57 .ssh -rw-r--r-- 1 root root 172 Oct 26 15:25 .wget-hsts  Notice how the .bash_history file in the lower-dir is 0 bytes, but it is 252 bytes in the upperdir? Notice the .kube dir exists in the upper, but not the lower?  Finally, looking at /root we see the magic:\nncn-m001# ls -l /root total 5 -rw------- 1 root root 252 Nov 4 18:23 .bash_history drwxr-xr-x 2 root root 3 May 25 2018 bin drwx------ 3 root root 26 Oct 21 22:07 .cache drwx------ 2 root root 3 May 25 2018 .gnupg drwxr-xr-x 4 root root 57 Oct 19 15:23 inst-sys drwxr-xr-x 2 root root 33 Oct 19 15:33 .kbd drwxr-x--- 4 root root 37 Nov 4 04:35 .kube drwxr-xr-x 5 root root 53 Oct 19 15:34 spire drwx------ 1 root root 29 Oct 21 21:57 .ssh -rw-r--r-- 1 root root 172 Oct 26 15:25 .wget-hsts  Notice how .bash_history matches the upper-dir? Notice how .kube exists here?  The take-away here is: any change done to /root/ will persist through /run/overlayfs/root and will take precedence to the squashFS image root.\nOverlayFS Control These features or toggles are passable on the kernel command line, and change the behavior of the overlayFS.\nReset Toggles The overlay FS provides a few reset toggles to clear out the persistence directories without reinstall.\nThe toggles require rebooting.\nReset On Next Boot The preferred way to reset persistent storage is to use the overlayFS reset toggle.\nModify the boot command line on the PXE server, adding this\n# Reset the overlay on boot rd.live.overlay.reset=1 Once reset, you may want to enable persistence again. Simply revert your change and the next reboot will persist.\n# Cease resetting the overlayFS rd.live.overlay.reset=0 Reset on Every Boot There are two options one can leave enabled to accomplish this:\n rd.live.overlay.reset=1 will eradicate/recreate the overlay every reboot. rd.live.overlay.readonly=1 will clear the overlay on every reboot.  For long-term usage, rd.live.overlay.readonly=1 should be added to the command line.\nThe reset=1 toggle is usually used to fix a problematic overlay. If you want to refresh and purge the overlay completely, then use rd.live.overlay.reset.\n# Authorize METAL to purge metal.no-wipe=0 rd.live.overlay.reset=1  Note: metal.no-wipe=1 does not protect against rd.live.overlay.reset, metal.no-wipe is not a feature of dmsquash-live.\n Re-sizing the Persistent Overlay  Default Size: 300 GiB File System: XFS  The overlay can be resized to fit a variety of needs or use cases. The size is provided directly on the command line. Any value can be provided, but it must be in megabytes.\nIf you are resetting the overlay on a deployed node, you will need to also set rd.live.overlay.reset=1.\nIt is recommended to set the size before deployment. There is a linkage between the metal-dracut module and the live-module that makes this inflexible.\n# Use a 300 GiB overlayFS (default) rd.live.overlay.size=307200 # Use a 1 TiB overlayFS rd.live.overlay.size=1000000 Thin Overlay Feature The persistent overlayFS leverages newer, \u0026ldquo;thin\u0026rdquo; overlays that support discards and that will free blocks that are not claimed by the file system. This means that memory is free/released when the file system does not claim it anymore.\nThin overlays can be disabled, and instead classic DM Snapshots can be used to manage the overlay. This will use more RAM. It is not recommended, because dmraid is not included in the initrd.\n# Enable (default) rd.live.overlay.thin=1 # Disable (not recommended; undesirable RAM waste) rd.live.overlay.thin=0 SystemD MetalFS The metalfs systemd service will try to mount any metal created partitions.\nThis runs against the /run/initramfs/overlayfs/fstab.metal when it exists. This file is dynamically created by most metal dracut modules.\nThe service will continuously attempt to mount the partitions, if problems arise please stop the service:\nncn# systemctl stop metalfs Old/Retired FS-Labels Deprecated FS labels/partitions from Shasta 1.3.X (no longer in Shasta 1.4.0 and onwards).\n   FS Label Partitions Nodes Device Size on Disk Work Order Memo     K8SKUBE /var/lib/kubelet ncn-w001, ncn-w002 Ephemeral Max/Remainder CASMPET-338 CASMPET-342 No longer mounted/used in shasta-1.4   K8SEPH /var/lib/cray/k8s_ephemeral ncn-w001, ncn-w002 Ephemeral Max/Remainder CASMPET-338 CASMPET-342 No longer mounted/used in shasta-1.4   CRAYINSTALL /var/cray/vfat ncn-w001, ncn-w002 Ephemeral 12 GiB CASMPET-338 CASMPET-342 No longer mounted/used in shasta-1.4   CRAYVBIS /var/cray/vbis ncn-w001, ncn-w002 Ephemeral 900 GiB CASMPET-338 CASMPET-342 No longer mounted/used in shasta-1.4   CRAYNFS /var/lib/nfsroot/nmd ncn-w001, ncn-w002 Ephemeral 12 GiB CASMPET-338 CASMPET-342 No longer mounted/used in shasta-1.4   CRAYSDU /var/lib/sdu all masters and workers LVM 100 GiB MTL-1292 MTL-1562 Implemented in MTL-1292 and refactored in MTL-1562    "
},
{
	"uri": "/docs-csm/en-12/background/ncn_networking/",
	"title": "NCN Networking",
	"tags": [],
	"description": "",
	"content": "NCN Networking Non-compute nodes and compute nodes have different network interfaces used for booting, this topic focuses on the network interfaces for management nodes.\nTopics:  NCN Network Interfaces Device Naming Vendor and Bus ID Identification  Details NCN Network Interfaces The following table includes information about the different NCN network interfaces:\n   Name Type MTU     mgmt0 Port 1 Slot 1 on the SMNET card. 9000   mgmt1 Port 1 Slot 2 on the SMNET card. 9000   bond0 LACP Link Agg. of mgmt0 and mgmt1. 9000   bond0.nmn0 Virtual LAN for managing nodes 1500   bond0.hmn0 Virtual LAN for managing hardware 1500   bond0.can0 Virtual LAN for the customer access network 1500   sun0 Port 2 Slot 2 on the SMNET card. 9000   sun1 Port 2 Slot 2 on the SMNET card. 9000   bond1 LACP Link Agg. of sun0 and sun1. 9000   bond1.sun0 Virtual LAN for the storage utility network 9000   lan0 Externally facing interface (DHCP). 1500   lan1 Yet-another externally facing interface, or anything (unused). 1500   hsn0 High-speed network interface. 9000   hsnN+1 Yet-another high-speed network interface. 9000    These interfaces can be observed on a live NCN with the following command.\nncn# ip link Device Naming The underlying naming relies on BIOSDEVNAME, this helps conform device naming into a smaller set of possible names. It also helps show us when driver issues occur, if a non-BIOSDEVNAME interface appears then METAL can/should receive a triage report/bug.\nThe MAC based udev rules set the interfaces during initial boot in iPXE. When a node boots, iPXE will dump the PCI busses and sort network interfaces into 3 buckets:\n mgmt: internal/management network connection sun: internal/storage network connection hsn: high-speed connection lan: external/site-connection  The source code for the rule generation is in [metal-ipxe][1], but for technical information on the PCI configuration/reading please read on.\nVendor and Bus ID Identification The initial boot of an NCN sets interface udev rules because it has no discovery method yet.\nThe information needed is:\n PCI Vendor IDs for devices/cards to be used on the Management network. PCI Device IDs for the devices/cards to be used on the High-Speed Network.  The 16-bit Vendor ID is allocated by the PCI-SIG (Peripheral Component Interconnect Special Interest Group).\nThe information belongs to the first 4 bytes of the PCI header, and admin can obtain it using lspci or your preferred method for reading the PCI bus.\nlspci | grep -i ethernet lspci | grep c6:00.0 The Device and Vendor IDs are used in iPXE for bootstrapping the nodes, this allows generators to swap IDs out for certain systems until smarter logic can be added to cloud-init.\nThe following table includes popular vendor and device IDs.\n The bolded numbers are the defaults that live in metal-ipxe\u0026rsquo;s boot script.\n    Vendor Model Device ID Vendor ID     Intel Corporation Ethernet Connection X722 37d2 8086   Intel Corporation 82576 1526 8086   Mellanox Technologies ConnectX-4 1013 15b3   Mellanox Technologies ConnectX-5 1017 15b3   Giga-Byte Intel Corporation I350 1521 8086   QLogic Corporation FastLinQ QL41000 8070 1077    "
},
{
	"uri": "/docs-csm/en-12/background/ncn_bios/",
	"title": "Non-compute Node Bios",
	"tags": [],
	"description": "",
	"content": "Non-Compute Node BIOS This page denotes BIOS settings that are desirable for non-compute nodes.\n NOTE Any tunables in this page are in the interest of performance and stability. If either of those facets seem to be infringed by any of the content on this page, please contact Cray System Management for reconciliation.\n  NOTE The table below declares desired settings; unlisted settings should remain at vendor-default. This table may be expanded as new settings are adjusted.\n    Common Name Common Value Description Value Rationale Common Menu Location     Intel® Hyper-Threading (e.g. HT) Enabled Enables two-threads per physical core. Leverage the full performance of the CPU, the higher thread-count assists with parallel tasks within the processor(s). Within the Processor or the PCH Menu.   Intel® Virtualization Technology (e.g. VT-x, VT) and AMD Virtualization Technology (e.g. AMD-V) Enabled Enables Virtual Machine extensions. Provides added CPU support for hypervisors and more for the virtualized plane within Shasta. Within the Processor or the PCH Menu.   PXE Retry Count 0 Attempts done on a single boot-menu option (note: 2 should be set for systems with unsolved network congestion). If networking is working nominally, then the interface either works or does not. Retrying the same NIC should not work, if it does then there are networking problems that need to be addressed. Within the Networking Menu, and then under Network Boot.   PXE Timeout 5 Seconds (or less, never more) The time that the PXE ROM will wait for a DHCP handshake to complete before moving on to the next boot device. If DHCP is working nominally, then the DHCP handshake should not take longer than 5 seconds. This timeout could be increased where networking faults cannot be reconciled, but ideally this should be tuned to 3 or 2 seconds.    Continuous Boot Disabled Whether boot-group (e.g. all network devices, or all disk devices) should continuously retry. This prevents fall-through to the fallback disks. We want deterministic nodes in Shasta, if the boot fails the first tier we want the node to try the next tier of boot mediums before failing at a shell or menu for intervention.      NOTE PCIe options can be found in PCIe : Setting Expected Values.\n "
},
{
	"uri": "/docs-csm/en-12/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docs-csm/en-12/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]